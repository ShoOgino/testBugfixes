{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","commits":[{"id":"fb0345a2d45479f891041f8b3ce351bc975e64ac","date":1462708700,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","pathOld":"/dev/null","sourceNew":"  private static Sort randomSort() {\n    int numFields = TestUtil.nextInt(random(), 1, 3);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      boolean reversed = random().nextBoolean();\n      SortField sortField;\n      switch(random().nextInt(5)) {\n      case 0:\n        sortField = new SortField(\"int\", SortField.Type.INT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextInt());\n        }\n        break;\n      case 1:\n        sortField = new SortField(\"long\", SortField.Type.LONG, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextLong());\n        }\n        break;\n      case 2:\n        sortField = new SortField(\"float\", SortField.Type.FLOAT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextFloat());\n        }\n        break;\n      case 3:\n        sortField = new SortField(\"double\", SortField.Type.DOUBLE, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextDouble());\n        }\n        break;\n      case 4:\n        sortField = new SortField(\"bytes\", SortField.Type.STRING, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(SortField.STRING_LAST);\n        }\n        break;\n      default:\n        throw new AssertionError();\n      }\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","pathOld":"/dev/null","sourceNew":"  private static Sort randomSort() {\n    int numFields = TestUtil.nextInt(random(), 1, 3);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      boolean reversed = random().nextBoolean();\n      SortField sortField;\n      switch(random().nextInt(5)) {\n      case 0:\n        sortField = new SortField(\"int\", SortField.Type.INT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextInt());\n        }\n        break;\n      case 1:\n        sortField = new SortField(\"long\", SortField.Type.LONG, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextLong());\n        }\n        break;\n      case 2:\n        sortField = new SortField(\"float\", SortField.Type.FLOAT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextFloat());\n        }\n        break;\n      case 3:\n        sortField = new SortField(\"double\", SortField.Type.DOUBLE, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextDouble());\n        }\n        break;\n      case 4:\n        sortField = new SortField(\"bytes\", SortField.Type.STRING, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(SortField.STRING_LAST);\n        }\n        break;\n      default:\n        throw new AssertionError();\n      }\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","pathOld":"/dev/null","sourceNew":"  private static Sort randomSort() {\n    int numFields = TestUtil.nextInt(random(), 1, 3);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      boolean reversed = random().nextBoolean();\n      SortField sortField;\n      switch(random().nextInt(5)) {\n      case 0:\n        sortField = new SortField(\"int\", SortField.Type.INT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextInt());\n        }\n        break;\n      case 1:\n        sortField = new SortField(\"long\", SortField.Type.LONG, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextLong());\n        }\n        break;\n      case 2:\n        sortField = new SortField(\"float\", SortField.Type.FLOAT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextFloat());\n        }\n        break;\n      case 3:\n        sortField = new SortField(\"double\", SortField.Type.DOUBLE, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextDouble());\n        }\n        break;\n      case 4:\n        sortField = new SortField(\"bytes\", SortField.Type.STRING, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(SortField.STRING_LAST);\n        }\n        break;\n      default:\n        throw new AssertionError();\n      }\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","pathOld":"/dev/null","sourceNew":"  private static Sort randomSort() {\n    int numFields = TestUtil.nextInt(random(), 1, 3);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      boolean reversed = random().nextBoolean();\n      SortField sortField;\n      switch(random().nextInt(5)) {\n      case 0:\n        sortField = new SortField(\"int\", SortField.Type.INT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextInt());\n        }\n        break;\n      case 1:\n        sortField = new SortField(\"long\", SortField.Type.LONG, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextLong());\n        }\n        break;\n      case 2:\n        sortField = new SortField(\"float\", SortField.Type.FLOAT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextFloat());\n        }\n        break;\n      case 3:\n        sortField = new SortField(\"double\", SortField.Type.DOUBLE, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextDouble());\n        }\n        break;\n      case 4:\n        sortField = new SortField(\"bytes\", SortField.Type.STRING, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(SortField.STRING_LAST);\n        }\n        break;\n      default:\n        throw new AssertionError();\n      }\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","pathOld":"/dev/null","sourceNew":"  private static Sort randomSort() {\n    int numFields = TestUtil.nextInt(random(), 1, 3);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      boolean reversed = random().nextBoolean();\n      SortField sortField;\n      switch(random().nextInt(5)) {\n      case 0:\n        sortField = new SortField(\"int\", SortField.Type.INT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextInt());\n        }\n        break;\n      case 1:\n        sortField = new SortField(\"long\", SortField.Type.LONG, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextLong());\n        }\n        break;\n      case 2:\n        sortField = new SortField(\"float\", SortField.Type.FLOAT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextFloat());\n        }\n        break;\n      case 3:\n        sortField = new SortField(\"double\", SortField.Type.DOUBLE, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextDouble());\n        }\n        break;\n      case 4:\n        sortField = new SortField(\"bytes\", SortField.Type.STRING, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(SortField.STRING_LAST);\n        }\n        break;\n      default:\n        throw new AssertionError();\n      }\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","sourceNew":"  private static Sort randomSort() {\n    // at least 2\n    int numFields = TestUtil.nextInt(random(), 2, 4);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      SortField sortField = randomIndexSortField();\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","sourceOld":"  private static Sort randomSort() {\n    int numFields = TestUtil.nextInt(random(), 1, 3);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      boolean reversed = random().nextBoolean();\n      SortField sortField;\n      switch(random().nextInt(5)) {\n      case 0:\n        sortField = new SortField(\"int\", SortField.Type.INT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextInt());\n        }\n        break;\n      case 1:\n        sortField = new SortField(\"long\", SortField.Type.LONG, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextLong());\n        }\n        break;\n      case 2:\n        sortField = new SortField(\"float\", SortField.Type.FLOAT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextFloat());\n        }\n        break;\n      case 3:\n        sortField = new SortField(\"double\", SortField.Type.DOUBLE, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextDouble());\n        }\n        break;\n      case 4:\n        sortField = new SortField(\"bytes\", SortField.Type.STRING, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(SortField.STRING_LAST);\n        }\n        break;\n      default:\n        throw new AssertionError();\n      }\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#randomSort().mjava","sourceNew":"  private static Sort randomSort() {\n    // at least 2\n    int numFields = TestUtil.nextInt(random(), 2, 4);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      SortField sortField = randomIndexSortField();\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","sourceOld":"  private static Sort randomSort() {\n    int numFields = TestUtil.nextInt(random(), 1, 3);\n    SortField[] sortFields = new SortField[numFields];\n    for(int i=0;i<numFields-1;i++) {\n      boolean reversed = random().nextBoolean();\n      SortField sortField;\n      switch(random().nextInt(5)) {\n      case 0:\n        sortField = new SortField(\"int\", SortField.Type.INT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextInt());\n        }\n        break;\n      case 1:\n        sortField = new SortField(\"long\", SortField.Type.LONG, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextLong());\n        }\n        break;\n      case 2:\n        sortField = new SortField(\"float\", SortField.Type.FLOAT, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextFloat());\n        }\n        break;\n      case 3:\n        sortField = new SortField(\"double\", SortField.Type.DOUBLE, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(random().nextDouble());\n        }\n        break;\n      case 4:\n        sortField = new SortField(\"bytes\", SortField.Type.STRING, reversed);\n        if (random().nextBoolean()) {\n          sortField.setMissingValue(SortField.STRING_LAST);\n        }\n        break;\n      default:\n        throw new AssertionError();\n      }\n      sortFields[i] = sortField;\n    }\n\n    // tie-break by id:\n    sortFields[numFields-1] = new SortField(\"id\", SortField.Type.INT);\n\n    return new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}