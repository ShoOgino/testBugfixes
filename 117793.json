{"path":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#log(int,int).mjava","commits":[{"id":"de38faa4e4684084f7308ccee476e4bf47029085","date":1303235470,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#log(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    int ret = 0;\n    while (x >= base) {\n      x /= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98930d3596bf8692a2d8ec94d65bdde779f6c193"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98930d3596bf8692a2d8ec94d65bdde779f6c193","date":1303240154,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#log(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#log(int,int).mjava","sourceNew":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","sourceOld":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    int ret = 0;\n    while (x >= base) {\n      x /= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","bugFix":["de38faa4e4684084f7308ccee476e4bf47029085"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#log(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#log(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#log(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#log(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#log(int,int).mjava","sourceNew":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","sourceOld":"  /** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n  static int log(int x, int base) {\n    assert base >= 2;\n    int ret = 0;\n    long n = base; // needs to be a long to avoid overflow\n    while (x >= n) {\n      n *= base;\n      ret++;\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de38faa4e4684084f7308ccee476e4bf47029085":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98930d3596bf8692a2d8ec94d65bdde779f6c193"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98930d3596bf8692a2d8ec94d65bdde779f6c193"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98930d3596bf8692a2d8ec94d65bdde779f6c193"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["98930d3596bf8692a2d8ec94d65bdde779f6c193"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"98930d3596bf8692a2d8ec94d65bdde779f6c193":["de38faa4e4684084f7308ccee476e4bf47029085"]},"commit2Childs":{"de38faa4e4684084f7308ccee476e4bf47029085":["98930d3596bf8692a2d8ec94d65bdde779f6c193"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de38faa4e4684084f7308ccee476e4bf47029085","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98930d3596bf8692a2d8ec94d65bdde779f6c193":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}