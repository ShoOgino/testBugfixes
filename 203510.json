{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory, final CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.version;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6","date":1288888250,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory, final CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos(codecs);\n    sis.read(directory, codecs);\n    return sis.version;\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory, final CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.version;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory, final CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos(codecs);\n    sis.read(directory, codecs);\n    return sis.version;\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory, final CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory, final CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos(codecs);\n    sis.read(directory, codecs);\n    return sis.version;\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory, final CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory,CodecProvider).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.version;\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory, final CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos(codecs);\n    sis.read(directory, codecs);\n    return sis.version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["7b91922b55d15444d554721b352861d028eb8278","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}