{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#nextLeaf().mjava","commits":[{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#nextLeaf().mjava","pathOld":"/dev/null","sourceNew":"    // Decodes next entry; returns true if it's a sub-block\n    public boolean nextLeaf() {\n      //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      suffix = suffixesReader.readVInt();\n      startBytePos = suffixesReader.getPosition();\n      term.length = prefix + suffix;\n      if (term.bytes.length < term.length) {\n        term.grow(term.length);\n      }\n      suffixesReader.readBytes(term.bytes, prefix, suffix);\n      // A normal term\n      termExists = true;\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#nextLeaf().mjava","sourceNew":null,"sourceOld":"    // Decodes next entry; returns true if it's a sub-block\n    public boolean nextLeaf() {\n      //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      suffix = suffixesReader.readVInt();\n      startBytePos = suffixesReader.getPosition();\n      term.length = prefix + suffix;\n      if (term.bytes.length < term.length) {\n        term.grow(term.length);\n      }\n      suffixesReader.readBytes(term.bytes, prefix, suffix);\n      // A normal term\n      termExists = true;\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":[],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e50f0da93c6dcee20d8792637b1786e2c34975e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}