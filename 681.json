{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLatentFields().mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLatentFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLatentFields().mjava","sourceNew":"  public void testLatentFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n\n    // Use LATENT instead of LAZY\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames) {\n        @Override\n        public FieldSelectorResult accept(String fieldName) {\n          final FieldSelectorResult result = super.accept(fieldName);\n          if (result == FieldSelectorResult.LAZY_LOAD) {\n            return FieldSelectorResult.LATENT;\n          } else {\n            return result;\n          }\n        }\n      };\n\n    Document doc = getDocument(reader, 0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    IndexableField field = doc.getField(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give different references\", field.stringValue() != field.stringValue());\n\n    field = doc.getField(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertFalse(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertFalse(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give different references\", field.stringValue() != field.stringValue());\n\n    field = doc.getField(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n    assertTrue(\"calling binaryValue() twice should give different references\", field.binaryValue().bytes != field.binaryValue().bytes);\n\n    byte [] bytes = field.binaryValue().bytes;\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testLatentFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n\n    // Use LATENT instead of LAZY\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames) {\n        @Override\n        public FieldSelectorResult accept(String fieldName) {\n          final FieldSelectorResult result = super.accept(fieldName);\n          if (result == FieldSelectorResult.LAZY_LOAD) {\n            return FieldSelectorResult.LATENT;\n          } else {\n            return result;\n          }\n        }\n      };\n\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give different references\", field.stringValue() != field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give different references\", field.stringValue() != field.stringValue());\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n    assertTrue(\"calling binaryValue() twice should give different references\", field.getBinaryValue() != field.getBinaryValue());\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLatentFields().mjava","sourceNew":null,"sourceOld":"  public void testLatentFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n\n    // Use LATENT instead of LAZY\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames) {\n        @Override\n        public FieldSelectorResult accept(String fieldName) {\n          final FieldSelectorResult result = super.accept(fieldName);\n          if (result == FieldSelectorResult.LAZY_LOAD) {\n            return FieldSelectorResult.LATENT;\n          } else {\n            return result;\n          }\n        }\n      };\n\n    Document doc = getDocument(reader, 0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    IndexableField field = doc.getField(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give different references\", field.stringValue() != field.stringValue());\n\n    field = doc.getField(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertFalse(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertFalse(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give different references\", field.stringValue() != field.stringValue());\n\n    field = doc.getField(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n    assertTrue(\"calling binaryValue() twice should give different references\", field.binaryValue().bytes != field.binaryValue().bytes);\n\n    byte [] bytes = field.binaryValue().bytes;\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}