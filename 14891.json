{"path":"src/common/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","commits":[{"id":"8281d815c10235e2dab9ded85615ebe920dd3c22","date":1243323879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","pathOld":"src/common/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","sourceNew":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8281d815c10235e2dab9ded85615ebe920dd3c22":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"8281d815c10235e2dab9ded85615ebe920dd3c22":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}