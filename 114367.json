{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FastVectorHighlighter#getBestFragments(FieldQuery,IndexReader,int,String,Set[String],int,int,FragListBuilder,FragmentsBuilder,String[],String[],Encoder).mjava","commits":[{"id":"050e6201c3a7d4c351ebc06cbe4822e26e028117","date":1382375603,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FastVectorHighlighter#getBestFragments(FieldQuery,IndexReader,int,String,Set[String],int,int,FragListBuilder,FragmentsBuilder,String[],String[],Encoder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the best fragments.  Matches are scanned from matchedFields and turned into fragments against\n   * storedField.  The highlighting may not make sense if matchedFields has matches with offsets that don't\n   * correspond features in storedField.  It will outright throw a {@code StringIndexOutOfBoundsException}\n   * if matchedFields produces offsets outside of storedField.  As such it is advisable that all\n   * matchedFields share the same source as storedField or are at least a prefix of it.\n   * \n   * @param fieldQuery {@link FieldQuery} object\n   * @param reader {@link IndexReader} of the index\n   * @param docId document id to be highlighted\n   * @param storedField field of the document that stores the text\n   * @param matchedFields fields of the document to scan for matches\n   * @param fragCharSize the length (number of chars) of a fragment\n   * @param maxNumFragments maximum number of fragments\n   * @param fragListBuilder {@link FragListBuilder} object\n   * @param fragmentsBuilder {@link FragmentsBuilder} object\n   * @param preTags pre-tags to be used to highlight terms\n   * @param postTags post-tags to be used to highlight terms\n   * @param encoder an encoder that generates encoded text\n   * @return created fragments or null when no fragments created.\n   *         size of the array can be less than maxNumFragments\n   * @throws IOException If there is a low-level I/O error\n   */\n  public final String[] getBestFragments( final FieldQuery fieldQuery, IndexReader reader, int docId,\n      String storedField, Set< String > matchedFields, int fragCharSize, int maxNumFragments,\n      FragListBuilder fragListBuilder, FragmentsBuilder fragmentsBuilder,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    FieldFragList fieldFragList =\n      getFieldFragList( fragListBuilder, fieldQuery, reader, docId, matchedFields, fragCharSize );\n    return fragmentsBuilder.createFragments( reader, docId, storedField, fieldFragList, maxNumFragments,\n        preTags, postTags, encoder );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"050e6201c3a7d4c351ebc06cbe4822e26e028117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["050e6201c3a7d4c351ebc06cbe4822e26e028117"]},"commit2Childs":{"050e6201c3a7d4c351ebc06cbe4822e26e028117":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["050e6201c3a7d4c351ebc06cbe4822e26e028117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}