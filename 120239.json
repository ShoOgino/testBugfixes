{"path":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#growTermBuffer(int).mjava","commits":[{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#growTermBuffer(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Allocates a buffer char[] of at least newSize\n   *  @param newSize minimum size of the buffer\n   *  @return newly created buffer with length >= newSize or null if the current termBuffer is big enough\n   */\n  private char[] growTermBuffer(int newSize) {\n    if (termBuffer != null) {\n      if (termBuffer.length >= newSize)\n        // Already big enough\n        return null;\n      else\n        // Not big enough; create a new array with slight\n        // over allocation:\n        return new char[ArrayUtil.getNextSize(newSize)];\n    } else {\n\n      // determine the best size\n      // The buffer is always at least MIN_BUFFER_SIZE\n      if (newSize < MIN_BUFFER_SIZE) {\n        newSize = MIN_BUFFER_SIZE;\n      }\n\n      return new char[newSize];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl#growTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#growTermBuffer(int).mjava","sourceNew":"  /** Allocates a buffer char[] of at least newSize\n   *  @param newSize minimum size of the buffer\n   *  @return newly created buffer with length >= newSize or null if the current termBuffer is big enough\n   */\n  private char[] growTermBuffer(int newSize) {\n    if (termBuffer != null) {\n      if (termBuffer.length >= newSize)\n        // Already big enough\n        return null;\n      else\n        // Not big enough; create a new array with slight\n        // over allocation:\n        return new char[ArrayUtil.getNextSize(newSize)];\n    } else {\n\n      // determine the best size\n      // The buffer is always at least MIN_BUFFER_SIZE\n      if (newSize < MIN_BUFFER_SIZE) {\n        newSize = MIN_BUFFER_SIZE;\n      }\n\n      return new char[newSize];\n    }\n  }\n\n","sourceOld":"  /** Allocates a buffer char[] of at least newSize\n   *  @param newSize minimum size of the buffer\n   *  @return newly created buffer with length >= newSize or null if the current termBuffer is big enough\n   */\n  private char[] growTermBuffer(int newSize) {\n    if (termBuffer != null) {\n      if (termBuffer.length >= newSize)\n        // Already big enough\n        return null;\n      else\n        // Not big enough; create a new array with slight\n        // over allocation:\n        return new char[ArrayUtil.getNextSize(newSize)];\n    } else {\n\n      // determine the best size\n      // The buffer is always at least MIN_BUFFER_SIZE\n      if (newSize < MIN_BUFFER_SIZE) {\n        newSize = MIN_BUFFER_SIZE;\n      }\n\n      return new char[newSize];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}