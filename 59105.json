{"path":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCloseDocStore#eval(MockRAMDirectory).mjava","commits":[{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCloseDocStore#eval(MockRAMDirectory).mjava","pathOld":"/dev/null","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"closeDocStore\".equals(trace[i].getMethodName()))\n            throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1fd1f3c5c06036aebe90bc6da756a37d03f63884","date":1200847858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCloseDocStore#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCloseDocStore#eval(MockRAMDirectory).mjava","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"closeDocStore\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"closeDocStore\".equals(trace[i].getMethodName()))\n            throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCloseDocStore#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCloseDocStore#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"closeDocStore\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"closeDocStore\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCloseDocStore#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCloseDocStore#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"closeDocStore\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"closeDocStore\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"1fd1f3c5c06036aebe90bc6da756a37d03f63884":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"83bbb041887bbef07b8a98d08a0e1713ce137039":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1fd1f3c5c06036aebe90bc6da756a37d03f63884":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"83bbb041887bbef07b8a98d08a0e1713ce137039":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}