{"path":"src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","commits":[{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new RangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a RangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new RangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["0f612096ab5275c4821d05f126bf45a89f4782b8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}