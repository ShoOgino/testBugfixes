{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","commits":[{"id":"bd4f332774f36bc85e29ac69a692f960dac011a9","date":1328162395,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","sourceNew":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        if (committed) {\n          // record a commit\n          CommitUpdateCommand cmd = new CommitUpdateCommand(new LocalSolrQueryRequest(uhandler.core, new ModifiableSolrParams((SolrParams)null)), false);\n          tlog.writeCommit(cmd);\n        }\n\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","sourceOld":"  public void close() {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff2d7326b1f013c8da9bad45b1e98a3d16c38575","date":1330406992,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","sourceNew":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        if (committed) {\n          // record a commit\n          log.info(\"Recording current log as closed for \" + uhandler.core);\n          CommitUpdateCommand cmd = new CommitUpdateCommand(new LocalSolrQueryRequest(uhandler.core, new ModifiableSolrParams((SolrParams)null)), false);\n          tlog.writeCommit(cmd);\n        }\n\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","sourceOld":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        if (committed) {\n          // record a commit\n          CommitUpdateCommand cmd = new CommitUpdateCommand(new LocalSolrQueryRequest(uhandler.core, new ModifiableSolrParams((SolrParams)null)), false);\n          tlog.writeCommit(cmd);\n        }\n\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9e81d464930e5664da049442e2630d4b9b00d5","date":1330726364,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","sourceNew":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      doClose(prevTlog, committed);\n      doClose(tlog, committed);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","sourceOld":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        if (committed) {\n          // record a commit\n          log.info(\"Recording current log as closed for \" + uhandler.core);\n          CommitUpdateCommand cmd = new CommitUpdateCommand(new LocalSolrQueryRequest(uhandler.core, new ModifiableSolrParams((SolrParams)null)), false);\n          tlog.writeCommit(cmd);\n        }\n\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","sourceNew":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      doClose(prevTlog, committed);\n      doClose(tlog, committed);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","sourceOld":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        if (committed) {\n          // record a commit\n          CommitUpdateCommand cmd = new CommitUpdateCommand(new LocalSolrQueryRequest(uhandler.core, new ModifiableSolrParams((SolrParams)null)), false);\n          tlog.writeCommit(cmd);\n        }\n\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28a3c4e2d35aa13e94434a7c3de075def163b47e","date":1355674116,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","sourceNew":"  public void close(boolean committed) {\n    close(committed, false);\n  }\n\n","sourceOld":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      doClose(prevTlog, committed);\n      doClose(tlog, committed);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","sourceNew":"  public void close(boolean committed) {\n    close(committed, false);\n  }\n\n","sourceOld":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      doClose(prevTlog, committed);\n      doClose(tlog, committed);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1a9e81d464930e5664da049442e2630d4b9b00d5","28a3c4e2d35aa13e94434a7c3de075def163b47e"],"28a3c4e2d35aa13e94434a7c3de075def163b47e":["1a9e81d464930e5664da049442e2630d4b9b00d5"],"ff2d7326b1f013c8da9bad45b1e98a3d16c38575":["bd4f332774f36bc85e29ac69a692f960dac011a9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["bd4f332774f36bc85e29ac69a692f960dac011a9","1a9e81d464930e5664da049442e2630d4b9b00d5"],"1a9e81d464930e5664da049442e2630d4b9b00d5":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd4f332774f36bc85e29ac69a692f960dac011a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28a3c4e2d35aa13e94434a7c3de075def163b47e"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"28a3c4e2d35aa13e94434a7c3de075def163b47e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff2d7326b1f013c8da9bad45b1e98a3d16c38575":["1a9e81d464930e5664da049442e2630d4b9b00d5"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"1a9e81d464930e5664da049442e2630d4b9b00d5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","28a3c4e2d35aa13e94434a7c3de075def163b47e","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd4f332774f36bc85e29ac69a692f960dac011a9"],"bd4f332774f36bc85e29ac69a692f960dac011a9":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}