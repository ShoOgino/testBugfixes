{"path":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ba781c85445e8d9544105ba6c4c34b5f4219752","date":1344816119,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<Class>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#getClassesForPackage(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#getClassesForPackage(String).mjava","sourceNew":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","sourceOld":"  private static List<Class> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<>();\n    ClassLoader cld = h.getCore().getResourceLoader().getClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File f = new File(uri);\n      directories.add(f);\n    }\n      \n    ArrayList<Class> classes = new ArrayList<>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    assertFalse(\"No classes found in package '\"+pckgname+\"'; maybe your test classes are packaged as JAR file?\", classes.isEmpty());\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0ba781c85445e8d9544105ba6c4c34b5f4219752"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["c26f00b574427b55127e869b935845554afde1fa","0ba781c85445e8d9544105ba6c4c34b5f4219752"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ba781c85445e8d9544105ba6c4c34b5f4219752":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["c26f00b574427b55127e869b935845554afde1fa","0ba781c85445e8d9544105ba6c4c34b5f4219752"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0ba781c85445e8d9544105ba6c4c34b5f4219752","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0ba781c85445e8d9544105ba6c4c34b5f4219752":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c7869f64c874ebf7f317d22c00baf2b6857797a6","a258fbb26824fd104ed795e5d9033d2d040049ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}