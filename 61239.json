{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // clean old stuff, reopen \r\n  public void reinit(boolean eraseIndex) throws Exception {\r\n\r\n    // cleanup index\r\n    if (indexWriter!=null) {\r\n      indexWriter.close();\r\n      indexWriter = null;\r\n    }\r\n    if (indexReader!=null) {\r\n      indexReader.close();\r\n      indexReader = null;\r\n    }\r\n    if (directory!=null) {\r\n      directory.close();\r\n    }\r\n    \r\n    // directory (default is ram-dir).\r\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\r\n      File workDir = new File(\"work\");\r\n      File indexDir = new File(workDir,\"index\");\r\n      if (eraseIndex && indexDir.exists()) {\r\n        FileUtils.fullyDelete(indexDir);\r\n      }\r\n      indexDir.mkdirs();\r\n      directory = FSDirectory.getDirectory(indexDir, eraseIndex);\r\n    } else {\r\n      directory = new RAMDirectory();\r\n    }\r\n\r\n    // inputs\r\n    resetInputs();\r\n    \r\n    // release unused stuff\r\n    System.runFinalization();\r\n    System.gc();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \r\n  public void reinit(boolean eraseIndex) throws Exception {\r\n\r\n    // cleanup index\r\n    if (indexWriter!=null) {\r\n      indexWriter.close();\r\n      indexWriter = null;\r\n    }\r\n    if (indexReader!=null) {\r\n      indexReader.close();\r\n      indexReader = null;\r\n    }\r\n    if (directory!=null) {\r\n      directory.close();\r\n    }\r\n    \r\n    // directory (default is ram-dir).\r\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\r\n      File workDir = new File(\"work\");\r\n      File indexDir = new File(workDir,\"index\");\r\n      if (eraseIndex && indexDir.exists()) {\r\n        FileUtils.fullyDelete(indexDir);\r\n      }\r\n      indexDir.mkdirs();\r\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\r\n      directory = new RAMDirectory();\r\n    }\r\n\r\n    // inputs\r\n    resetInputs();\r\n    \r\n    // release unused stuff\r\n    System.runFinalization();\r\n    System.gc();\r\n  }\r\n\n","sourceOld":"  // clean old stuff, reopen \r\n  public void reinit(boolean eraseIndex) throws Exception {\r\n\r\n    // cleanup index\r\n    if (indexWriter!=null) {\r\n      indexWriter.close();\r\n      indexWriter = null;\r\n    }\r\n    if (indexReader!=null) {\r\n      indexReader.close();\r\n      indexReader = null;\r\n    }\r\n    if (directory!=null) {\r\n      directory.close();\r\n    }\r\n    \r\n    // directory (default is ram-dir).\r\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\r\n      File workDir = new File(\"work\");\r\n      File indexDir = new File(workDir,\"index\");\r\n      if (eraseIndex && indexDir.exists()) {\r\n        FileUtils.fullyDelete(indexDir);\r\n      }\r\n      indexDir.mkdirs();\r\n      directory = FSDirectory.getDirectory(indexDir, eraseIndex);\r\n    } else {\r\n      directory = new RAMDirectory();\r\n    }\r\n\r\n    // inputs\r\n    resetInputs();\r\n    \r\n    // release unused stuff\r\n    System.runFinalization();\r\n    System.gc();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(\"work\");\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \r\n  public void reinit(boolean eraseIndex) throws Exception {\r\n\r\n    // cleanup index\r\n    if (indexWriter!=null) {\r\n      indexWriter.close();\r\n      indexWriter = null;\r\n    }\r\n    if (indexReader!=null) {\r\n      indexReader.close();\r\n      indexReader = null;\r\n    }\r\n    if (directory!=null) {\r\n      directory.close();\r\n    }\r\n    \r\n    // directory (default is ram-dir).\r\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\r\n      File workDir = new File(\"work\");\r\n      File indexDir = new File(workDir,\"index\");\r\n      if (eraseIndex && indexDir.exists()) {\r\n        FileUtils.fullyDelete(indexDir);\r\n      }\r\n      indexDir.mkdirs();\r\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\r\n      directory = new RAMDirectory();\r\n    }\r\n\r\n    // inputs\r\n    resetInputs();\r\n    \r\n    // release unused stuff\r\n    System.runFinalization();\r\n    System.gc();\r\n  }\r\n\n","bugFix":null,"bugIntro":["339649314325b0679cb210f81ef890b6b3ddba12"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"339649314325b0679cb210f81ef890b6b3ddba12","date":1182926978,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(\"work\");\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","bugFix":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    startTimeMillis = System.currentTimeMillis();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ea2ca01fc0b1375f71a47571ffacc7924742b30","date":1185994483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    startTimeMillis = System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      final boolean doSync = config.get(\"fsdirectory.dosync\", true);\n      directory = FSDirectory.getDirectory(indexDir, null, doSync);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae55b47ee109fe0371f5cb395c95cdf127e2324","date":1195600664,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      final boolean doSync = config.get(\"fsdirectory.dosync\", false);\n      directory = FSDirectory.getDirectory(indexDir, null, doSync);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      final boolean doSync = config.get(\"fsdirectory.dosync\", true);\n      directory = FSDirectory.getDirectory(indexDir, null, doSync);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      final boolean doSync = config.get(\"fsdirectory.dosync\", false);\n      directory = FSDirectory.getDirectory(indexDir, null, doSync);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5342dfbb8493ad11aac3fb11b9ba44784df1786","date":1202048670,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.getDirectory(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d5342dfbb8493ad11aac3fb11b9ba44784df1786":["a015c55424dd37249054283bedc90388bd45358f"],"ba712167ee848727018d8b77aa0c273839fbe15c":["d5342dfbb8493ad11aac3fb11b9ba44784df1786"],"b583d3621fe173e7296abcf62f82fb707c901234":["1ea2ca01fc0b1375f71a47571ffacc7924742b30"],"3c528d38c8d9b2452e932321931b11e7c19a96d5":["339649314325b0679cb210f81ef890b6b3ddba12"],"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"1ea2ca01fc0b1375f71a47571ffacc7924742b30":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"6ae55b47ee109fe0371f5cb395c95cdf127e2324":["b583d3621fe173e7296abcf62f82fb707c901234"],"a015c55424dd37249054283bedc90388bd45358f":["6ae55b47ee109fe0371f5cb395c95cdf127e2324"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"339649314325b0679cb210f81ef890b6b3ddba12":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ba712167ee848727018d8b77aa0c273839fbe15c"]},"commit2Childs":{"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["339649314325b0679cb210f81ef890b6b3ddba12"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"d5342dfbb8493ad11aac3fb11b9ba44784df1786":["ba712167ee848727018d8b77aa0c273839fbe15c"],"ba712167ee848727018d8b77aa0c273839fbe15c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"b583d3621fe173e7296abcf62f82fb707c901234":["6ae55b47ee109fe0371f5cb395c95cdf127e2324"],"3c528d38c8d9b2452e932321931b11e7c19a96d5":["1ea2ca01fc0b1375f71a47571ffacc7924742b30"],"1ea2ca01fc0b1375f71a47571ffacc7924742b30":["b583d3621fe173e7296abcf62f82fb707c901234"],"6ae55b47ee109fe0371f5cb395c95cdf127e2324":["a015c55424dd37249054283bedc90388bd45358f"],"a015c55424dd37249054283bedc90388bd45358f":["d5342dfbb8493ad11aac3fb11b9ba44784df1786"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"339649314325b0679cb210f81ef890b6b3ddba12":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}