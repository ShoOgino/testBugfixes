{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<String>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e0c9c309a906dacb9ed97bcfa4c884c5912394","date":1479257880,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<>(theFields);\n        } else if (\"dynamicFields\".equals(key) && entry.getValue() != null) {\n          List<String> theDynamicFields = (List<String>) entry.getValue();\n          dynamicFields = new ArrayList<>(theDynamicFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse.FieldTypeInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<>(theFields);\n        } else if (\"dynamicFields\".equals(key) && entry.getValue() != null) {\n          List<String> theDynamicFields = (List<String>) entry.getValue();\n          dynamicFields = new ArrayList<>(theDynamicFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        String key = entry.getKey();\n        if (\"fields\".equals(key) && entry.getValue() != null) {\n          List<String> theFields = (List<String>) entry.getValue();\n          fields = new ArrayList<>(theFields);\n        } else if (\"tokenized\".equals(key) == true) {\n          tokenized = Boolean.parseBoolean(entry.getValue().toString());\n        } else if (\"analyzer\".equals(key) == true) {\n          analyzer = entry.getValue().toString();\n        } else if (\"className\".equals(key) == true) {\n          className = entry.getValue().toString();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c7e0c9c309a906dacb9ed97bcfa4c884c5912394"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7e0c9c309a906dacb9ed97bcfa4c884c5912394":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e0c9c309a906dacb9ed97bcfa4c884c5912394"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c7e0c9c309a906dacb9ed97bcfa4c884c5912394"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7e0c9c309a906dacb9ed97bcfa4c884c5912394":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}