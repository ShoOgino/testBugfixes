{"path":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":null,"sourceOld":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c26f00b574427b55127e869b935845554afde1fa":["afeb033b2bd36d8ce9d82142b197da4dde13068b","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}