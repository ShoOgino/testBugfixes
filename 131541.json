{"path":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","commits":[{"id":"e0920dbf6195ede2c071dfb0b0c939297dc1a0c8","date":1356657569,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","pathOld":"/dev/null","sourceNew":"  public void doAtomicUpdate() throws Exception {\n    log.info(\"### STARTING doAtomicUpdate\");\n    int nClients = clients.size();\n    assertEquals(8, nClients);\n\n    int expectedVal = 0;\n    for (SolrServer client : clients) {\n      client.add(sdoc(\"id\", \"b!doc\", \"foo_i\", map(\"inc\",1)));\n      expectedVal++;\n\n      QueryResponse rsp = client.query(params(\"qt\",\"/get\", \"id\",\"b!doc\"));\n      Object val = ((Map)rsp.getResponse().get(\"doc\")).get(\"foo_i\");\n      assertEquals((Integer)expectedVal, val);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","pathOld":"/dev/null","sourceNew":"  public void doAtomicUpdate() throws Exception {\n    log.info(\"### STARTING doAtomicUpdate\");\n    int nClients = clients.size();\n    assertEquals(8, nClients);\n\n    int expectedVal = 0;\n    for (SolrServer client : clients) {\n      client.add(sdoc(\"id\", \"b!doc\", \"foo_i\", map(\"inc\",1)));\n      expectedVal++;\n\n      QueryResponse rsp = client.query(params(\"qt\",\"/get\", \"id\",\"b!doc\"));\n      Object val = ((Map)rsp.getResponse().get(\"doc\")).get(\"foo_i\");\n      assertEquals((Integer)expectedVal, val);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7623716022a9a68898e329e8ffe6c36d168fba7","date":1384524101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","sourceNew":"  public void doAtomicUpdate() throws Exception {\n    log.info(\"### STARTING doAtomicUpdate\");\n    int nClients = clients.size();\n    assertEquals(8, nClients);\n\n    int expectedVal = 0;\n    for (SolrServer client : clients) {\n      client.add(sdoc(\"id\", \"b!doc\", \"foo_i\", map(\"inc\",1)));\n      expectedVal++;\n\n      QueryResponse rsp = client.query(params(\"qt\",\"/get\", \"id\",\"b!doc\"));\n      Object val = ((Map)rsp.getResponse().get(\"doc\")).get(\"foo_i\");\n      assertEquals((Integer)expectedVal, val);\n    }\n\n  }\n\n","sourceOld":"  public void doAtomicUpdate() throws Exception {\n    log.info(\"### STARTING doAtomicUpdate\");\n    int nClients = clients.size();\n    assertEquals(8, nClients);\n\n    int expectedVal = 0;\n    for (SolrServer client : clients) {\n      client.add(sdoc(\"id\", \"b!doc\", \"foo_i\", map(\"inc\",1)));\n      expectedVal++;\n\n      QueryResponse rsp = client.query(params(\"qt\",\"/get\", \"id\",\"b!doc\"));\n      Object val = ((Map)rsp.getResponse().get(\"doc\")).get(\"foo_i\");\n      assertEquals((Integer)expectedVal, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","sourceNew":"  public void doAtomicUpdate() throws Exception {\n    log.info(\"### STARTING doAtomicUpdate\");\n    int nClients = clients.size();\n    assertEquals(8, nClients);\n\n    int expectedVal = 0;\n    for (SolrServer client : clients) {\n      client.add(sdoc(\"id\", \"b!doc\", \"foo_i\", map(\"inc\",1)));\n      expectedVal++;\n\n      QueryResponse rsp = client.query(params(\"qt\",\"/get\", \"id\",\"b!doc\"));\n      Object val = ((Map)rsp.getResponse().get(\"doc\")).get(\"foo_i\");\n      assertEquals((Integer)expectedVal, val);\n    }\n\n  }\n\n","sourceOld":"  public void doAtomicUpdate() throws Exception {\n    log.info(\"### STARTING doAtomicUpdate\");\n    int nClients = clients.size();\n    assertEquals(8, nClients);\n\n    int expectedVal = 0;\n    for (SolrServer client : clients) {\n      client.add(sdoc(\"id\", \"b!doc\", \"foo_i\", map(\"inc\",1)));\n      expectedVal++;\n\n      QueryResponse rsp = client.query(params(\"qt\",\"/get\", \"id\",\"b!doc\"));\n      Object val = ((Map)rsp.getResponse().get(\"doc\")).get(\"foo_i\");\n      assertEquals((Integer)expectedVal, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doAtomicUpdate().mjava","sourceNew":"  public void doAtomicUpdate() throws Exception {\n    log.info(\"### STARTING doAtomicUpdate\");\n    int nClients = clients.size();\n    assertEquals(8, nClients);\n\n    int expectedVal = 0;\n    for (SolrClient client : clients) {\n      client.add(sdoc(\"id\", \"b!doc\", \"foo_i\", map(\"inc\",1)));\n      expectedVal++;\n\n      QueryResponse rsp = client.query(params(\"qt\",\"/get\", \"id\",\"b!doc\"));\n      Object val = ((Map)rsp.getResponse().get(\"doc\")).get(\"foo_i\");\n      assertEquals((Integer)expectedVal, val);\n    }\n\n  }\n\n","sourceOld":"  public void doAtomicUpdate() throws Exception {\n    log.info(\"### STARTING doAtomicUpdate\");\n    int nClients = clients.size();\n    assertEquals(8, nClients);\n\n    int expectedVal = 0;\n    for (SolrServer client : clients) {\n      client.add(sdoc(\"id\", \"b!doc\", \"foo_i\", map(\"inc\",1)));\n      expectedVal++;\n\n      QueryResponse rsp = client.query(params(\"qt\",\"/get\", \"id\",\"b!doc\"));\n      Object val = ((Map)rsp.getResponse().get(\"doc\")).get(\"foo_i\");\n      assertEquals((Integer)expectedVal, val);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0920dbf6195ede2c071dfb0b0c939297dc1a0c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["e0920dbf6195ede2c071dfb0b0c939297dc1a0c8","f7623716022a9a68898e329e8ffe6c36d168fba7"],"bafca15d8e408346a67f4282ad1143b88023893b":["f7623716022a9a68898e329e8ffe6c36d168fba7"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["e0920dbf6195ede2c071dfb0b0c939297dc1a0c8"],"e0920dbf6195ede2c071dfb0b0c939297dc1a0c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e0920dbf6195ede2c071dfb0b0c939297dc1a0c8"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e0920dbf6195ede2c071dfb0b0c939297dc1a0c8":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f7623716022a9a68898e329e8ffe6c36d168fba7"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}