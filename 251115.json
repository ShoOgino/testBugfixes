{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","commits":[{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int packedIntsVersion = data.readVInt();\n      final int count = data.readVInt();\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.PACKED, packedIntsVersion, count, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final int packedIntsVersion = data.readVInt();\n      final int count = data.readVInt();\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, count, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, entry.count, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, entry.count, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int packedIntsVersion = data.readVInt();\n      final int count = data.readVInt();\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.PACKED, packedIntsVersion, count, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final int packedIntsVersion = data.readVInt();\n      final int count = data.readVInt();\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, count, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69f2d92e64f751f5af8d5559f6efa01239d50237","date":1359144355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, maxDoc, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, entry.count, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, entry.count, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6fca07cac66b15729e7870bc0896a88560270b5","date":1360097580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.format == Lucene42DocValuesConsumer.TABLE_COMPRESSED) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int formatID = data.readVInt();\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else if (entry.format == Lucene42DocValuesConsumer.DELTA_COMPRESSED) {\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    } else if (entry.format == Lucene42DocValuesConsumer.UNCOMPRESSED) {\n      final byte bytes[] = new byte[maxDoc];\n      data.readBytes(bytes, 0, bytes.length);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return bytes[docID];\n        }\n      };\n    } else {\n      throw new IllegalStateException();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, maxDoc, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.format == Lucene42DocValuesConsumer.TABLE_COMPRESSED) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int formatID = data.readVInt();\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else if (entry.format == Lucene42DocValuesConsumer.DELTA_COMPRESSED) {\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    } else if (entry.format == Lucene42DocValuesConsumer.UNCOMPRESSED) {\n      final byte bytes[] = new byte[maxDoc];\n      data.readBytes(bytes, 0, bytes.length);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return bytes[docID];\n        }\n      };\n    } else {\n      throw new IllegalStateException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return reader.get(docID);\n          }\n        };\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.format == Lucene42DocValuesConsumer.TABLE_COMPRESSED) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final int formatID = data.readVInt();\n      final int bitsPerValue = data.readVInt();\n      final PackedInts.Reader reader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else if (entry.format == Lucene42DocValuesConsumer.DELTA_COMPRESSED) {\n      final int blockSize = data.readVInt();\n      final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return reader.get(docID);\n        }\n      };\n    } else if (entry.format == Lucene42DocValuesConsumer.UNCOMPRESSED) {\n      final byte bytes[] = new byte[maxDoc];\n      data.readBytes(bytes, 0, bytes.length);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return bytes[docID];\n        }\n      };\n    } else {\n      throw new IllegalStateException();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","dac1db31006989ae24922811f00f909d30f1391d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return reader.get(docID);\n          }\n        };\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["37b84753dc1f66eba4973779932885fe42cde001"],"69f2d92e64f751f5af8d5559f6efa01239d50237":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"c6fca07cac66b15729e7870bc0896a88560270b5":["69f2d92e64f751f5af8d5559f6efa01239d50237"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6fca07cac66b15729e7870bc0896a88560270b5"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["dac1db31006989ae24922811f00f909d30f1391d"],"dac1db31006989ae24922811f00f909d30f1391d":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["dac1db31006989ae24922811f00f909d30f1391d","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["69f2d92e64f751f5af8d5559f6efa01239d50237"],"69f2d92e64f751f5af8d5559f6efa01239d50237":["c6fca07cac66b15729e7870bc0896a88560270b5"],"c6fca07cac66b15729e7870bc0896a88560270b5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["37b84753dc1f66eba4973779932885fe42cde001"],"37b84753dc1f66eba4973779932885fe42cde001":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"dac1db31006989ae24922811f00f909d30f1391d":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["dac1db31006989ae24922811f00f909d30f1391d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}