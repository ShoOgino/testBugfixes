{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(SolrDocument,String,int,int,SolrQueryRequest).mjava","commits":[{"id":"1a9aeb4a98b03660f065aa31f6b3f2251a12b613","date":1581405488,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(SolrDocument,String,int,int,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(Document,String,int,int,SolrQueryRequest).mjava","sourceNew":"  /** Fetches field values to highlight. If the field value should come from an atypical place (or another aliased\n   * field name, then a subclass could override to implement that.\n   */\n  protected List<String> getFieldValues(SolrDocument doc, String fieldName, int maxValues, int maxCharsToAnalyze,\n                                        SolrQueryRequest req) {\n    // Collect the Fields we will examine (could be more than one if multi-valued)\n    Collection<Object> fieldValues = doc.getFieldValues(fieldName);\n    if (fieldValues == null) {\n      return Collections.emptyList();\n    }\n    FieldType fieldType = req.getSchema().getFieldType(fieldName);\n    List<String> result = new ArrayList<>();\n    for (Object value : fieldValues) {\n      String strValue;\n      if (value instanceof IndexableField) {\n        strValue = fieldType.toExternal((IndexableField)value);\n      } else {\n        strValue = value.toString(); // TODO FieldType needs an API for this, e.g. toExternalFromDv()\n      }\n      result.add(strValue);\n\n      maxCharsToAnalyze -= strValue.length();//we exit early if we'll never get to analyze the value\n      maxValues--;\n      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {\n        break;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Fetches field values to highlight. If the field value should come from an atypical place (or another aliased\n   * field name, then a subclass could override to implement that.\n   */\n  protected List<String> getFieldValues(Document doc, String fieldName, int maxValues, int maxCharsToAnalyze,\n                                        SolrQueryRequest req) {\n    // Collect the Fields we will examine (could be more than one if multi-valued)\n    List<String> result = new ArrayList<>();\n    for (IndexableField thisField : doc.getFields()) {\n      if (! thisField.name().equals(fieldName)) {\n        continue;\n      }\n      String value = thisField.stringValue();\n      result.add(value);\n\n      maxCharsToAnalyze -= value.length();//we exit early if we'll never get to analyze the value\n      maxValues--;\n      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {\n        break;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(SolrDocument,String,int,int,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(SolrDocument,String,int,int,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Fetches field values to highlight. If the field value should come from an atypical place (or another aliased\n   * field name, then a subclass could override to implement that.\n   */\n  protected List<String> getFieldValues(SolrDocument doc, String fieldName, int maxValues, int maxCharsToAnalyze,\n                                        SolrQueryRequest req) {\n    // Collect the Fields we will examine (could be more than one if multi-valued)\n    Collection<Object> fieldValues = doc.getFieldValues(fieldName);\n    if (fieldValues == null) {\n      return Collections.emptyList();\n    }\n    FieldType fieldType = req.getSchema().getFieldType(fieldName);\n    List<String> result = new ArrayList<>();\n    for (Object value : fieldValues) {\n      String strValue;\n      if (value instanceof IndexableField) {\n        strValue = fieldType.toExternal((IndexableField) value);\n      } else {\n        strValue = value.toString(); // TODO FieldType needs an API for this, e.g. toExternalFromDv()\n      }\n      result.add(strValue);\n\n      maxCharsToAnalyze -= strValue.length();//we exit early if we'll never get to analyze the value\n      maxValues--;\n      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {\n        break;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Fetches field values to highlight. If the field value should come from an atypical place (or another aliased\n   * field name, then a subclass could override to implement that.\n   */\n  protected List<String> getFieldValues(SolrDocument doc, String fieldName, int maxValues, int maxCharsToAnalyze,\n                                        SolrQueryRequest req) {\n    // Collect the Fields we will examine (could be more than one if multi-valued)\n    Collection<Object> fieldValues = doc.getFieldValues(fieldName);\n    if (fieldValues == null) {\n      return Collections.emptyList();\n    }\n    FieldType fieldType = req.getSchema().getFieldType(fieldName);\n    List<String> result = new ArrayList<>();\n    for (Object value : fieldValues) {\n      String strValue;\n      if (value instanceof IndexableField) {\n        strValue = fieldType.toExternal((IndexableField)value);\n      } else {\n        strValue = value.toString(); // TODO FieldType needs an API for this, e.g. toExternalFromDv()\n      }\n      result.add(strValue);\n\n      maxCharsToAnalyze -= strValue.length();//we exit early if we'll never get to analyze the value\n      maxValues--;\n      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {\n        break;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613"],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}