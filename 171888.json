{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/LimitedFiniteStringsIteratorTest#testRandomFiniteStrings().mjava","commits":[{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/LimitedFiniteStringsIteratorTest#testRandomFiniteStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testRandomFiniteStrings2().mjava","sourceNew":" public void testRandomFiniteStrings() {\n    // Just makes sure we can run on any random finite\n    // automaton:\n    int iters = atLeast(100);\n    for(int i=0;i<iters;i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      try {\n        // Must pass a limit because the random automaton\n        // can accept MANY strings:\n        getFiniteStrings(new LimitedFiniteStringsIterator(a, TestUtil.nextInt(random(), 1, 1000)));\n        // NOTE: cannot do this, because the method is not\n        // guaranteed to detect cycles when you have a limit\n        //assertTrue(Operations.isFinite(a));\n      } catch (IllegalArgumentException iae) {\n        assertFalse(Operations.isFinite(a));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFiniteStrings2() {\n    // Just makes sure we can run on any random finite\n    // automaton:\n    int iters = atLeast(100);\n    for(int i=0;i<iters;i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      try {\n        // Must pass a limit because the random automaton\n        // can accept MANY strings:\n        Operations.getFiniteStrings(a, TestUtil.nextInt(random(), 1, 1000));\n        // NOTE: cannot do this, because the method is not\n        // guaranteed to detect cycles when you have a limit\n        //assertTrue(Operations.isFinite(a));\n      } catch (IllegalArgumentException iae) {\n        assertFalse(Operations.isFinite(a));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}