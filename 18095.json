{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext,int).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context, int termsIndexDivisor) throws IOException {\n\n      //      if (poolReaders) {\n      //        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      //      }\n      \n      // nocommit context should be part of the key used to cache that reader in the pool.\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, termsIndexDivisor, context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c162b4b9ef005383c38e0912c16267584dc40de5","date":1310021443,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context, int termsIndexDivisor) throws IOException {\n\n      //      if (poolReaders) {\n      //        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      //      }\n      \n      // TODO: context should be part of the key used to cache that reader in the pool.\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, termsIndexDivisor, context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context, int termsIndexDivisor) throws IOException {\n\n      //      if (poolReaders) {\n      //        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      //      }\n      \n      // nocommit context should be part of the key used to cache that reader in the pool.\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, termsIndexDivisor, context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context, int termsIndexDivisor) throws IOException {\n\n      //      if (poolReaders) {\n      //        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      //      }\n      \n      // TODO: context should be part of the key used to cache that reader in the pool.\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, termsIndexDivisor, context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context, int termsIndexDivisor) throws IOException {\n\n      //      if (poolReaders) {\n      //        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      //      }\n      \n      // TODO: context should be part of the key used to cache that reader in the pool.\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, termsIndexDivisor, context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     *\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context, int termsIndexDivisor) throws IOException {\n\n      //      if (poolReaders) {\n      //        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      //      }\n      \n      // TODO: context should be part of the key used to cache that reader in the pool.\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, termsIndexDivisor, context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c162b4b9ef005383c38e0912c16267584dc40de5":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c162b4b9ef005383c38e0912c16267584dc40de5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"]},"commit2Childs":{"c162b4b9ef005383c38e0912c16267584dc40de5":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["c162b4b9ef005383c38e0912c16267584dc40de5"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}