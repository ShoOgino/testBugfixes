{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","commits":[{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      DocValuesType type = field.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues values = reader.getNumericDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            BinaryDocValues values = reader.getBinaryDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            SortedDocValues values = reader.getSortedDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(reader.maxDoc());\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(field, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      DocValuesType type = field.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            NumericDocValues values = reader.getNumericDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            BinaryDocValues values = reader.getBinaryDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedDocValues values = reader.getSortedDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(reader.maxDoc());\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(field, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      DocValuesType type = field.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            NumericDocValues values = reader.getNumericDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            BinaryDocValues values = reader.getBinaryDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            SortedDocValues values = reader.getSortedDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (AtomicReader reader : mergeState.readers) {\n            SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(reader.maxDoc());\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(field, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      DocValuesType type = field.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            NumericDocValues values = reader.getNumericDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            BinaryDocValues values = reader.getBinaryDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedDocValues values = reader.getSortedDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(reader.maxDoc());\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(field, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2970313982bb49a531a8b2b16a5e93872d5248b2","date":1411916508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      DocValuesType type = field.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            NumericDocValues values = reader.getNumericDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            BinaryDocValues values = reader.getBinaryDocValues(field.name);\n            Bits bits = reader.getDocsWithField(field.name);\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(reader.maxDoc());\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(field, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedDocValues values = reader.getSortedDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(field, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (LeafReader reader : mergeState.readers) {\n            SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(reader.maxDoc());\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(field, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NO) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != null) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NONE) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NO) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NONE) {\n        if (type == DocValuesType.NUMERIC) {\n          mergeNumericField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.BINARY) {\n          mergeBinaryField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED) {\n          mergeSortedField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED_SET) {\n          mergeSortedSetField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          mergeSortedNumericField(mergeFieldInfo, mergeState);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NONE) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NONE) {\n        if (type == DocValuesType.NUMERIC) {\n          mergeNumericField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.BINARY) {\n          mergeBinaryField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED) {\n          mergeSortedField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED_SET) {\n          mergeSortedSetField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          mergeSortedNumericField(mergeFieldInfo, mergeState);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NONE) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NONE) {\n        if (type == DocValuesType.NUMERIC) {\n          mergeNumericField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.BINARY) {\n          mergeBinaryField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED) {\n          mergeSortedField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED_SET) {\n          mergeSortedSetField(mergeFieldInfo, mergeState);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          mergeSortedNumericField(mergeFieldInfo, mergeState);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNumericField}, {@link #mergeBinaryField},\n   *  {@link #mergeSortedField}, {@link #mergeSortedSetField},\n   *  or {@link #mergeSortedNumericField} for each field,\n   *  depending on its type.\n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(DocValuesProducer docValuesProducer : mergeState.docValuesProducers) {\n      if (docValuesProducer != null) {\n        docValuesProducer.checkIntegrity();\n      }\n    }\n\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      DocValuesType type = mergeFieldInfo.getDocValuesType();\n      if (type != DocValuesType.NONE) {\n        if (type == DocValuesType.NUMERIC) {\n          List<NumericDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            NumericDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.NUMERIC) {\n                values = docValuesProducer.getNumeric(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyNumeric();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeNumericField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.BINARY) {\n          List<BinaryDocValues> toMerge = new ArrayList<>();\n          List<Bits> docsWithField = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            BinaryDocValues values = null;\n            Bits bits = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.BINARY) {\n                values = docValuesProducer.getBinary(fieldInfo);\n                bits = docValuesProducer.getDocsWithField(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptyBinary();\n              bits = new Bits.MatchNoBits(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n            docsWithField.add(bits);\n          }\n          mergeBinaryField(mergeFieldInfo, mergeState, toMerge, docsWithField);\n        } else if (type == DocValuesType.SORTED) {\n          List<SortedDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED) {\n                values = docValuesProducer.getSorted(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySorted();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_SET) {\n          List<SortedSetDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedSetDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                values = docValuesProducer.getSortedSet(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedSet();\n            }\n            toMerge.add(values);\n          }\n          mergeSortedSetField(mergeFieldInfo, mergeState, toMerge);\n        } else if (type == DocValuesType.SORTED_NUMERIC) {\n          List<SortedNumericDocValues> toMerge = new ArrayList<>();\n          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n            SortedNumericDocValues values = null;\n            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n            if (docValuesProducer != null) {\n              FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n              if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                values = docValuesProducer.getSortedNumeric(fieldInfo);\n              }\n            }\n            if (values == null) {\n              values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n            }\n            toMerge.add(values);\n          }\n          mergeSortedNumericField(mergeFieldInfo, mergeState, toMerge);\n        } else {\n          throw new AssertionError(\"type=\" + type);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2970313982bb49a531a8b2b16a5e93872d5248b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f95ce1375367b92d411a06175eab3915fe93c6bc","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["9bb9a29a5e71a90295f175df8919802993142c9a"],"2970313982bb49a531a8b2b16a5e93872d5248b2":["2131047ecceac64b54ba70feec3d26bbd7e483d7"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f95ce1375367b92d411a06175eab3915fe93c6bc","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["2970313982bb49a531a8b2b16a5e93872d5248b2"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"2970313982bb49a531a8b2b16a5e93872d5248b2":["9bb9a29a5e71a90295f175df8919802993142c9a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}