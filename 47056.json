{"path":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":["893d07555f01912f57b453a320e4d46363a31b50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @param writeAllDeletes If true, new deletes will be written\n   * down to index files instead of carried over from writer to\n   * reader in heap\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes, writeAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @param writeAllDeletes If true, new deletes will be written\n   * down to index files instead of carried over from writer to\n   * reader directly in heap\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes, writeAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"2a1862266772deb28cdcb7d996b64d2177022687":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["2a1862266772deb28cdcb7d996b64d2177022687","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}