{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","commits":[{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    LukeRequest lukeRequest = new LukeRequest();\n    lukeRequest.setNumTerms(0);\n    LukeResponse lukeResponse;\n    try {\n      lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    return lukeResponse.getFieldInfo();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69e2a486e794ef99347d76fd562d069f922d1ce","date":1461874102,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    LukeRequest lukeRequest = new LukeRequest();\n    lukeRequest.setNumTerms(0);\n    LukeResponse lukeResponse;\n    try {\n      lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    return lukeResponse.getFieldInfo();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34960db40f081388a12ae7131547fb03236705fd","date":1461892880,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient(zk)) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a","date":1462461875,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient(zk)) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getFieldInfo(String).mjava","sourceNew":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    CloudSolrClient cloudSolrClient = solrClientCache.getCloudSolrClient(zk);\n    try {\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private Map<String, LukeResponse.FieldInfo> getFieldInfo(String collection) {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build()) {\n      cloudSolrClient.connect();\n      LukeRequest lukeRequest = new LukeRequest();\n      lukeRequest.setNumTerms(0);\n      LukeResponse lukeResponse = lukeRequest.process(cloudSolrClient, collection);\n      return lukeResponse.getFieldInfo();\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34960db40f081388a12ae7131547fb03236705fd":["a69e2a486e794ef99347d76fd562d069f922d1ce"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a"],"a69e2a486e794ef99347d76fd562d069f922d1ce":["d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["34960db40f081388a12ae7131547fb03236705fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"]},"commit2Childs":{"34960db40f081388a12ae7131547fb03236705fd":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a69e2a486e794ef99347d76fd562d069f922d1ce":["34960db40f081388a12ae7131547fb03236705fd"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"d984627825732e682759c22df7a3b171a80f3812":["a69e2a486e794ef99347d76fd562d069f922d1ce"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}