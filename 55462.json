{"path":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","commits":[{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" should be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" should be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" should be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" should be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" should be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" should be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits.value);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" should be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" should be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws Exception {\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i - 1;\n      assertEquals(\"score of result \" + i + \" should be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" should be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9274621789ce990dbfef455dabdf026bb3184821"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["83788ad129a5154d5c6562c4e8ce3db48793aada","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}