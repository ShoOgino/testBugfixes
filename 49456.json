{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.Permission#load(Map).mjava","commits":[{"id":"c609b959cb2dad7c9d9b3237fa2b806629e9206d","date":1439303330,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.Permission#load(Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.Permission#load(String,Map).mjava","sourceNew":"    static Permission load(Map m) {\n      Permission p = new Permission();\n      String name = (String) m.get(NAME);\n      if (!m.containsKey(\"role\")) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"role not specified\");\n      p.role = readValueAsSet(m, \"role\");\n      if (well_known_permissions.containsKey(name)) {\n        HashSet<String> disAllowed = new HashSet<>(knownKeys);\n        disAllowed.remove(\"role\");//these are the only\n        disAllowed.remove(NAME);//allowed keys for well-known permissions\n        for (String s : disAllowed) {\n          if (m.containsKey(s))\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, s + \" is not a valid key for the permission : \" + name);\n        }\n        p.predicate = (Predicate<AuthorizationContext>) ((Map) well_known_permissions.get(name)).get(Predicate.class.getName());\n        m = well_known_permissions.get(name);\n      }\n      p.name = name;\n      p.path = readSetSmart(name, m, \"path\");\n      p.collections = readSetSmart(name, m, \"collection\");\n      p.method = readSetSmart(name, m, \"method\");\n      p.params = (Map<String, Object>) m.get(\"params\");\n      return p;\n    }\n\n","sourceOld":"    static Permission load(String name, Map m) {\n      Permission p = new Permission();\n      if (!m.containsKey(\"role\")) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"role not specified\");\n      p.role = readValueAsSet(m, \"role\");\n      if (well_known_permissions.containsKey(name)) {\n        HashSet<String> disAllowed = new HashSet<>(knownKeys);\n        disAllowed.remove(\"role\");\n        for (String s : disAllowed) {\n          if (m.containsKey(s))\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, s + \" is not a valid key for the permission : \" + name);\n        }\n        p.predicate = (Predicate<AuthorizationContext>) ((Map) well_known_permissions.get(name)).get(Predicate.class.getName());\n        m = well_known_permissions.get(name);\n      }\n      p.name = name;\n      p.path = readSetSmart(name, m, \"path\");\n      p.collections = readSetSmart(name, m, \"collection\");\n      p.method = readSetSmart(name, m, \"method\");\n      p.params = (Map<String, Object>) m.get(\"params\");\n      return p;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85784a21c6101aadd8d5b3d9dfed51279fbd43d9","date":1458237890,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.Permission#load(Map).mjava","sourceNew":null,"sourceOld":"    static Permission load(Map m) {\n      Permission p = new Permission();\n      String name = (String) m.get(NAME);\n      if (!m.containsKey(\"role\")) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"role not specified\");\n      p.role = readValueAsSet(m, \"role\");\n      if (well_known_permissions.containsKey(name)) {\n        HashSet<String> disAllowed = new HashSet<>(knownKeys);\n        disAllowed.remove(\"role\");//these are the only\n        disAllowed.remove(NAME);//allowed keys for well-known permissions\n        for (String s : disAllowed) {\n          if (m.containsKey(s))\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, s + \" is not a valid key for the permission : \" + name);\n        }\n        p.predicate = (Predicate<AuthorizationContext>) ((Map) well_known_permissions.get(name)).get(Predicate.class.getName());\n        m = well_known_permissions.get(name);\n      }\n      p.name = name;\n      p.path = readSetSmart(name, m, \"path\");\n      p.collections = readSetSmart(name, m, \"collection\");\n      p.method = readSetSmart(name, m, \"method\");\n      p.params = (Map<String, Object>) m.get(\"params\");\n      return p;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"]},"commit2Childs":{"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}