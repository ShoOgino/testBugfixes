{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#addGap(Comparable,String).mjava","commits":[{"id":"330e80d31a51e837b9cc906035e114377c0501dc","date":1429994103,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#addGap(Comparable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].RangeEndpointCalculator#addGap(T,String).mjava","sourceNew":"    /**\n     * Adds the String gap param to a low Range endpoint value to determine\n     * the corrisponding high Range endpoint value, throwing\n     * a useful exception if not possible.\n     */\n    public final Comparable addGap(Comparable value, String gap) {\n      try {\n        return parseAndAddGap(value, gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't add gap \"+gap+\" to value \" + value +\n                \" for field: \" + field.getName(), e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Adds the String gap param to a low Range endpoint value to determine\n     * the corrisponding high Range endpoint value, throwing\n     * a useful exception if not possible.\n     */\n    public final T addGap(T value, String gap) {\n      try {\n        return parseAndAddGap(value, gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't add gap \"+gap+\" to value \" + value +\n                \" for field: \" + field.getName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#addGap(Comparable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#addGap(Comparable,String).mjava","sourceNew":"    /**\n     * Adds the String gap param to a low Range endpoint value to determine\n     * the corresponding high Range endpoint value, throwing\n     * a useful exception if not possible.\n     */\n    public final Comparable addGap(Comparable value, String gap) {\n      try {\n        return parseAndAddGap(value, gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't add gap \"+gap+\" to value \" + value +\n                \" for field: \" + field.getName(), e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Adds the String gap param to a low Range endpoint value to determine\n     * the corrisponding high Range endpoint value, throwing\n     * a useful exception if not possible.\n     */\n    public final Comparable addGap(Comparable value, String gap) {\n      try {\n        return parseAndAddGap(value, gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't add gap \"+gap+\" to value \" + value +\n                \" for field: \" + field.getName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor.Calc#addGap(Comparable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange].Calc#addGap(Comparable,String).mjava","sourceNew":"    /**\n     * Adds the String gap param to a low Range endpoint value to determine\n     * the corresponding high Range endpoint value, throwing\n     * a useful exception if not possible.\n     */\n    @SuppressWarnings({\"rawtypes\"})\n    public final Comparable addGap(Comparable value, String gap) {\n      try {\n        return parseAndAddGap(value, gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't add gap \"+gap+\" to value \" + value +\n                \" for field: \" + field.getName(), e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Adds the String gap param to a low Range endpoint value to determine\n     * the corresponding high Range endpoint value, throwing\n     * a useful exception if not possible.\n     */\n    public final Comparable addGap(Comparable value, String gap) {\n      try {\n        return parseAndAddGap(value, gap);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Can't add gap \"+gap+\" to value \" + value +\n                \" for field: \" + field.getName(), e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"330e80d31a51e837b9cc906035e114377c0501dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["330e80d31a51e837b9cc906035e114377c0501dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"330e80d31a51e837b9cc906035e114377c0501dc":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["330e80d31a51e837b9cc906035e114377c0501dc"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}