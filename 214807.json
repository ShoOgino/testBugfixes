{"path":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":null,"sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"170380097c97ef8e36b190c56892df63fde0985f","date":1275407223,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":["b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ad81f99cac0805cb57c4d47963d87d4a722a62","date":1305598173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":["170380097c97ef8e36b190c56892df63fde0985f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch !=  '\\u2028') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': unicodeEscape(writer,ch); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["170380097c97ef8e36b190c56892df63fde0985f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["b8ad81f99cac0805cb57c4d47963d87d4a722a62","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"170380097c97ef8e36b190c56892df63fde0985f":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["170380097c97ef8e36b190c56892df63fde0985f","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"b8ad81f99cac0805cb57c4d47963d87d4a722a62":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["170380097c97ef8e36b190c56892df63fde0985f","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","b8ad81f99cac0805cb57c4d47963d87d4a722a62","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"170380097c97ef8e36b190c56892df63fde0985f":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["170380097c97ef8e36b190c56892df63fde0985f"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"b8ad81f99cac0805cb57c4d47963d87d4a722a62":["c26f00b574427b55127e869b935845554afde1fa","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}