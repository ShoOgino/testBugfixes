{"path":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","commits":[{"id":"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4","date":1318260487,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(org.apache.lucene.index.codecs.MergeState,IndexDocValues).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.codecs.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.codecs.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new Writer.SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.codecs.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param values\n   *          the docValues to merge in\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(org.apache.lucene.index.codecs.MergeState mergeState,\n      IndexDocValues values) throws IOException {\n    assert mergeState != null;\n    // TODO we need some kind of compatibility notation for values such\n    // that two slightly different segments can be merged eg. fixed vs.\n    // variable byte len or float32 vs. float64\n    boolean merged = false;\n    /*\n     * We ignore the given DocValues here and merge from the subReaders directly\n     * to support bulk copies on the DocValues Writer level. if this gets merged\n     * with MultiDocValues the writer can not optimize for bulk-copyable data\n     */\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.codecs.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      final IndexDocValues r = reader.reader.docValues(mergeState.fieldInfo.name);\n      if (r != null) {\n        merged = true;\n        merge(new Writer.MergeState(r, mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    if (merged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84b10dbcdf384b6639834a54c2efaa8c4081e12c","date":1318372156,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.codecs.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.codecs.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.codecs.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new Writer.SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.codecs.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.codecs.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new Writer.SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new Writer.SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.codecs.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.codecs.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.codecs.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new Writer.SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c95a819869502635864dac0a788f874787e3395b","c95a819869502635864dac0a788f874787e3395b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new Writer.SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new Writer.SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["84b10dbcdf384b6639834a54c2efaa8c4081e12c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["f9efc72acdea22f5285be0a808f8bba51bb8e367"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["06584e6e98d592b34e1329b384182f368d2025e8"],"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84b10dbcdf384b6639834a54c2efaa8c4081e12c":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["06584e6e98d592b34e1329b384182f368d2025e8","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4":["84b10dbcdf384b6639834a54c2efaa8c4081e12c"],"84b10dbcdf384b6639834a54c2efaa8c4081e12c":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}