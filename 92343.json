{"path":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against commited doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommited doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommited \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","sourceNew":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against commited doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommited doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommited \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","sourceOld":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against commited doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommited doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommited \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","sourceNew":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","sourceOld":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against commited doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommited doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommited \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","sourceNew":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","sourceOld":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against commited doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommited doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommited \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","sourceNew":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","sourceOld":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against commited doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommited doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommited \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667eea18b7ca87af38d05d81d479f943a717a6b1","date":1548452298,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFloatVersionField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFloatVersionField().mjava","sourceNew":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","sourceOld":"  /**\n   * Sanity check that there are no hardcoded assumptions about the \n   * field type used that could byte us in the ass.\n   */\n  public void testFloatVersionField() throws Exception {\n\n    // skip low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_f\", \"10.01\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"4.2\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // skip low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_f\", \"10.02\")), \n            params(\"update.chain\",\"external-version-float\"));\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                      \"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // skip low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"10.10\",\n                                      \"update.chain\",\"external-version-float\"));\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.05\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n\n    // skip low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_f\", \"10.09\")),\n            params(\"update.chain\",\"external-version-float\"));\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_f\")\n             , \"=={'doc':{'my_version_f':10.10}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f8973f28b29873ff0d7a016e562c9036ae649a9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3f8973f28b29873ff0d7a016e562c9036ae649a9","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["3f8973f28b29873ff0d7a016e562c9036ae649a9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["667eea18b7ca87af38d05d81d479f943a717a6b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}