{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public InvertedFields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      InvertedFields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public InvertedFields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      InvertedFields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#get(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8","5a238fc456663f685a9db1ed8d680e348bb45171"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}