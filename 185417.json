{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean).mjava","commits":[{"id":"77d6144bb77983c683128c11b708057809173cff","date":1317852535,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionaries InputStreams for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionaries InputStreams for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version) throws IOException, ParseException {\n    this.version = version;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, false);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionaries InputStreams for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionaries InputStreams for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77d6144bb77983c683128c11b708057809173cff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77d6144bb77983c683128c11b708057809173cff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77d6144bb77983c683128c11b708057809173cff"],"77d6144bb77983c683128c11b708057809173cff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}