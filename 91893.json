{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","commits":[{"id":"133a4cef0f97c0ed6f75b0c24d58c2c3c8098912","date":1427901584,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","pathOld":"/dev/null","sourceNew":"  public void testAskForPositionsWhenNotThere() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.POSITIONS);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","pathOld":"/dev/null","sourceNew":"  public void testAskForPositionsWhenNotThere() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.POSITIONS);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","sourceNew":"  public void testAskForPositionsWhenNotThere() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.POSITIONS);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testAskForPositionsWhenNotThere() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.POSITIONS);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","sourceNew":"  public void testAskForPositionsWhenNotThere() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, PostingsEnum.POSITIONS);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testAskForPositionsWhenNotThere() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, null, PostingsEnum.POSITIONS);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testAskForPositionsWhenNotThere().mjava","sourceNew":"  public void testAskForPositionsWhenNotThere() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, PostingsEnum.POSITIONS);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testAskForPositionsWhenNotThere() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    TermsEnum termsEnum = ar.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"value\")));\n    PostingsEnum docsEnum = termsEnum.postings(null, PostingsEnum.POSITIONS);\n    assertEquals(0, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    assertEquals(1, docsEnum.nextDoc());\n    assertEquals(1, docsEnum.freq());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["133a4cef0f97c0ed6f75b0c24d58c2c3c8098912"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","133a4cef0f97c0ed6f75b0c24d58c2c3c8098912"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"133a4cef0f97c0ed6f75b0c24d58c2c3c8098912":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b4e3cd382d0d075a0f1725649c084bb6510c483","133a4cef0f97c0ed6f75b0c24d58c2c3c8098912"],"133a4cef0f97c0ed6f75b0c24d58c2c3c8098912":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}