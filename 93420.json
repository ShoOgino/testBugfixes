{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testMultilingualInput().mjava","sourceNew":"  @Nightly\n  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term) != null);\n      assertEquals(tf.term, lookup.lookup(tf.term, true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term) != null);\n      assertEquals(tf.term, lookup.lookup(tf.term, true, 1).get(0).key);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  @Nightly\n  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term.utf8ToString()) != null);\n      assertEquals(tf.term, lookup.lookup(tf.term.utf8ToString(), true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  @Nightly\n  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term) != null);\n      assertEquals(tf.term, lookup.lookup(tf.term, true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0beedbfcc7d6d310815299243b82020f0832031","date":1329907179,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  @Nightly\n  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term.utf8ToString()) != null);\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(tf.term.utf8ToString(), true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  @Nightly\n  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term.utf8ToString()) != null);\n      assertEquals(tf.term, lookup.lookup(tf.term.utf8ToString(), true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"534d49064b2131355fc96bf1d52e3c76b6fad1e6","date":1329908244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term.utf8ToString()) != null);\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(tf.term.utf8ToString(), true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  @Nightly\n  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term.utf8ToString()) != null);\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(tf.term.utf8ToString(), true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random)) != null);\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(_TestUtil.stringToCharSequence(\"wit\", random), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term.utf8ToString()) != null);\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(tf.term.utf8ToString(), true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random)));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(_TestUtil.stringToCharSequence(\"wit\", random), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random)) != null);\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(_TestUtil.stringToCharSequence(\"wit\", random), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random)));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(_TestUtil.stringToCharSequence(\"wit\", random), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  @Nightly\n  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n\n    for (TermFreq tf : input) {\n      assertTrue(\"Not found: \" + tf.term, lookup.get(tf.term) != null);\n      assertEquals(tf.term, lookup.lookup(tf.term, true, 1).get(0).key);\n    }\n\n    List<LookupResult> result = lookup.lookup(\"wit\", true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random)));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(_TestUtil.stringToCharSequence(\"wit\", random), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"534d49064b2131355fc96bf1d52e3c76b6fad1e6":["d0beedbfcc7d6d310815299243b82020f0832031"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["534d49064b2131355fc96bf1d52e3c76b6fad1e6"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0beedbfcc7d6d310815299243b82020f0832031":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"534d49064b2131355fc96bf1d52e3c76b6fad1e6":["6ecc52400551de6a7d8daf646be839487911627c"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["d0beedbfcc7d6d310815299243b82020f0832031"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d0beedbfcc7d6d310815299243b82020f0832031":["534d49064b2131355fc96bf1d52e3c76b6fad1e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}