{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#setFlushPending(DocumentsWriterPerThread).mjava","commits":[{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#setFlushPending(DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#setFlushPending(ThreadState).mjava","sourceNew":"  /**\n   * Sets flush pending state on the given {@link DocumentsWriterPerThread}. The\n   * {@link DocumentsWriterPerThread} must have indexed at least on Document and must not be\n   * already pending.\n   */\n  public synchronized void setFlushPending(DocumentsWriterPerThread perThread) {\n    assert !perThread.isFlushPending();\n    if (perThread.getNumDocsInRAM() > 0) {\n      perThread.setFlushPending(); // write access synced\n      final long bytes = perThread.getLastCommittedBytesUsed();\n      flushBytes += bytes;\n      activeBytes -= bytes;\n      numPending++; // write access synced\n      assert assertMemory();\n    } // don't assert on numDocs since we could hit an abort excp. while selecting that dwpt for flushing\n    \n  }\n\n","sourceOld":"  /**\n   * Sets flush pending state on the given {@link ThreadState}. The\n   * {@link ThreadState} must have indexed at least on Document and must not be\n   * already pending.\n   */\n  public synchronized void setFlushPending(ThreadState perThread) {\n    assert !perThread.flushPending;\n    if (perThread.dwpt.getNumDocsInRAM() > 0) {\n      perThread.flushPending = true; // write access synced\n      final long bytes = perThread.bytesUsed;\n      flushBytes += bytes;\n      activeBytes -= bytes;\n      numPending++; // write access synced\n      assert assertMemory();\n    } // don't assert on numDocs since we could hit an abort excp. while selecting that dwpt for flushing\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}