{"path":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analys\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analys\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analys\");\n    }\n    return stream;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0f33863f5a614dd1c5c05582d5472ef5bf2d944","date":1240981039,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analys\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analys\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analys\");\n    }\n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0f33863f5a614dd1c5c05582d5472ef5bf2d944":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b0f33863f5a614dd1c5c05582d5472ef5bf2d944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b0f33863f5a614dd1c5c05582d5472ef5bf2d944":["ad94625fb8d088209f46650c8097196fec67f00c"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["b0f33863f5a614dd1c5c05582d5472ef5bf2d944"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}