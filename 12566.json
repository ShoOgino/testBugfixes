{"path":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDeleteOpenFile().mjava","commits":[{"id":"7cefb6c0aa217f293070c43e7a77682dd56e0a33","date":1416928878,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDeleteOpenFile().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteOpenFile() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new WindowsFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(wrapped.resolve(\"stillopen\"));\n    try {\n      Files.delete(wrapped.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa2714403f7cb13f654813ba22d1d1f66104df6","date":1417002941,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDeleteOpenFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDeleteOpenFile().mjava","sourceNew":"  public void testDeleteOpenFile() throws IOException {\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new WindowsFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(wrapped.resolve(\"stillopen\"));\n    try {\n      Files.delete(wrapped.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","sourceOld":"  public void testDeleteOpenFile() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new WindowsFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(wrapped.resolve(\"stillopen\"));\n    try {\n      Files.delete(wrapped.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDeleteOpenFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDeleteOpenFile().mjava","sourceNew":"  public void testDeleteOpenFile() throws IOException {\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new WindowsFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(wrapped.resolve(\"stillopen\"));\n    try {\n      Files.delete(wrapped.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","sourceOld":"  public void testDeleteOpenFile() throws IOException {\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new WindowsFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(wrapped.resolve(\"stillopen\"));\n    try {\n      Files.delete(wrapped.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["0fa2714403f7cb13f654813ba22d1d1f66104df6"],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0fa2714403f7cb13f654813ba22d1d1f66104df6":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["0fa2714403f7cb13f654813ba22d1d1f66104df6"],"0fa2714403f7cb13f654813ba22d1d1f66104df6":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}