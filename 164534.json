{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestNGramFilters#testNGramTokenizer2().mjava","sourceNew":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","sourceOld":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestNGramFilters#testNGramTokenizer2().mjava","sourceNew":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","sourceOld":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestNGramFilters#testNGramTokenizer2().mjava","sourceNew":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","sourceOld":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestNGramFilters#testNGramTokenizer2().mjava","sourceNew":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","sourceOld":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","sourceNew":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = tokenizerFactory(\"NGram\",\n        \"minGramSize\", \"2\",\n        \"maxGramSize\", \"3\").create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","sourceOld":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"minGramSize\", \"2\");\n    args.put(\"maxGramSize\", \"3\");\n    NGramTokenizerFactory factory = new NGramTokenizerFactory();\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c807c4005aae1acaf5cebc9af40883985fb89a8","date":1366974206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","sourceNew":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = tokenizerFactory(\"NGram\",\n        \"minGramSize\", \"2\",\n        \"maxGramSize\", \"3\").create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"tes\", \"es\", \"est\", \"st\" });\n  }\n\n","sourceOld":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = tokenizerFactory(\"NGram\",\n        \"minGramSize\", \"2\",\n        \"maxGramSize\", \"3\").create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"es\", \"st\", \"tes\", \"est\" });\n  }\n\n","bugFix":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramTokenizer2().mjava","sourceNew":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = tokenizerFactory(\"NGram\",\n        \"minGramSize\", \"2\",\n        \"maxGramSize\", \"3\").create();\n    ((Tokenizer)stream).setReader(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"tes\", \"es\", \"est\", \"st\" });\n  }\n\n","sourceOld":"  /**\n   * Test NGramTokenizerFactory with min and max gram options\n   */\n  public void testNGramTokenizer2() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = tokenizerFactory(\"NGram\",\n        \"minGramSize\", \"2\",\n        \"maxGramSize\", \"3\").create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"te\", \"tes\", \"es\", \"est\", \"st\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}