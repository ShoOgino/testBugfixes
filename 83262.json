{"path":"backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}