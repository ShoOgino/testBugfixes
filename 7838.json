{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f458fcb817a740e7906774b7ca2c54d37b34f24f","date":1319501743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicIndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicIndexReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicIndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicIndexReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(-1, r2.getUniqueTermCount());\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["f458fcb817a740e7906774b7ca2c54d37b34f24f","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["d572389229127c297dd1fa5ce4758e1cec41e799","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["d572389229127c297dd1fa5ce4758e1cec41e799","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["f458fcb817a740e7906774b7ca2c54d37b34f24f","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["b21422ff1d1d56499dec481f193b402e5e8def5b","3242a09f703274d3b9283f2064a1a33064b53a1b"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}