{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsVariable().mjava","commits":[{"id":"f995701ec0129375ec9abf46c120c30ac196f1a0","date":1224742605,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsVariable().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsVariable() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"101\", \"desc\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from books where category='search'\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"category\", \"search\",\n            \"dataConfig\", requestParamAsVariable);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"desc:ApacheSolr\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsVariable().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsVariable().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsVariable() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"101\", \"desc\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from books where category='search'\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"category\", \"search\",\n            \"dataConfig\", requestParamAsVariable);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"desc:ApacheSolr\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsVariable() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"101\", \"desc\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from books where category='search'\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"category\", \"search\",\n            \"dataConfig\", requestParamAsVariable);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"desc:ApacheSolr\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f995701ec0129375ec9abf46c120c30ac196f1a0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["f995701ec0129375ec9abf46c120c30ac196f1a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f995701ec0129375ec9abf46c120c30ac196f1a0":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f995701ec0129375ec9abf46c120c30ac196f1a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}