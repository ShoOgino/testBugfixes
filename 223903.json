{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"/dev/null","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return clusterDataProvider.getLiveNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return clusterDataProvider.getLiveNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5088ce415a50eb8412f4942aeabe293e75c81e7","date":1504531555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        return clusterDataProvider.getClusterState();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        return clusterDataProvider.getClusterState();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      { 'replica': 2, nodeset: {'sysprop.fs': 'ssd'}, 'shard': '#EACH'},\" +//greedy condition\n          \"      {nodeset:{'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      { 'replica': 2, nodeset: {'sysprop.fs': 'ssd'}, 'shard': '#EACH'},\" +//greedy condition\n          \"      {nodeset:{'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      { 'replica': 2, nodeset: {'sysprop.fs': 'ssd'}, 'shard': '#EACH'},\" +//greedy condition\n          \"      {nodeset:{'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      { 'replica': 2, nodeset: {'sysprop.fs': 'ssd'}, 'shard': '#EACH'},\" +//greedy condition\n          \"      {nodeset:{'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":null,"sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      { 'replica': 2, nodeset: {'sysprop.fs': 'ssd'}, 'shard': '#EACH'},\" +//greedy condition\n          \"      {nodeset:{'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    SolrCloudManager cloudManager = getSolrCloudManager(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(cloudManager);\n    Suggester suggester = session.getSuggester(ADDREPLICA);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"))\n        .getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard1\"));\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["1bbcda32e5cd37ef61ea1190bacd080308e22070","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["9ba1b632c041956c93c41aa1143d16a567014891","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}