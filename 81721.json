{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(TokenStream,int,int,Character,boolean).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(TokenStream,int,int,Character,boolean).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(TokenStream,int,int,Character,boolean).mjava","sourceNew":"  /**\n   * Creates a shingle filter using the default {@link TokenSettingsCodec}.\n   *\n   * @see #defaultSettingsCodec\n   *\n   * @param input stream from wich to construct the matrix\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   */\n  public ShingleMatrixFilter(TokenStream input, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle) {\n    this(input, minimumShingleSize, maximumShingleSize, spacerCharacter, ignoringSinglePrefixOrSuffixShingle, defaultSettingsCodec);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter using the default {@link TokenSettingsCodec}.\n   *\n   * @see #defaultSettingsCodec\n   *\n   * @param input stream from wich to construct the matrix\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   */\n  public ShingleMatrixFilter(TokenStream input, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle) {\n    this(input, minimumShingleSize, maximumShingleSize, spacerCharacter, ignoringSinglePrefixOrSuffixShingle, defaultSettingsCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(TokenStream,int,int,Character,boolean).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(TokenStream,int,int,Character,boolean).mjava","sourceNew":"  /**\n   * Creates a shingle filter using the default {@link TokenSettingsCodec}.\n   *\n   * @see #defaultSettingsCodec\n   *\n   * @param input stream from which to construct the matrix\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   */\n  public ShingleMatrixFilter(TokenStream input, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle) {\n    this(input, minimumShingleSize, maximumShingleSize, spacerCharacter, ignoringSinglePrefixOrSuffixShingle, defaultSettingsCodec);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter using the default {@link TokenSettingsCodec}.\n   *\n   * @see #defaultSettingsCodec\n   *\n   * @param input stream from wich to construct the matrix\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   */\n  public ShingleMatrixFilter(TokenStream input, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle) {\n    this(input, minimumShingleSize, maximumShingleSize, spacerCharacter, ignoringSinglePrefixOrSuffixShingle, defaultSettingsCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(TokenStream,int,int,Character,boolean).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(TokenStream,int,int,Character,boolean).mjava","sourceNew":"  /**\n   * Creates a shingle filter using the default {@link TokenSettingsCodec}.\n   *\n   * @see #defaultSettingsCodec\n   *\n   * @param input stream from which to construct the matrix\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   */\n  public ShingleMatrixFilter(TokenStream input, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle) {\n    this(input, minimumShingleSize, maximumShingleSize, spacerCharacter, ignoringSinglePrefixOrSuffixShingle, defaultSettingsCodec);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter using the default {@link TokenSettingsCodec}.\n   *\n   * @see #defaultSettingsCodec\n   *\n   * @param input stream from which to construct the matrix\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   */\n  public ShingleMatrixFilter(TokenStream input, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle) {\n    this(input, minimumShingleSize, maximumShingleSize, spacerCharacter, ignoringSinglePrefixOrSuffixShingle, defaultSettingsCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}