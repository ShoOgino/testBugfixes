{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","sourceNew":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field, true);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","sourceOld":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field, true);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","sourceNew":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field, true);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","sourceOld":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field, true);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","sourceNew":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field, true);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","sourceOld":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field, true);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","sourceNew":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","sourceOld":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field, true);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","sourceNew":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","sourceOld":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field, true);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","sourceNew":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues(field);\n      assert values != null;\n      assert values.size() > 0;\n      \n      final int docCount = values.getDocCount();\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","sourceOld":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValuePoints(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"    private BitsEntry createValuePoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues(field);\n      assert values != null;\n      assert values.size() > 0;\n      \n      final int docCount = values.getDocCount();\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      \n      // otherwise a no-op uninvert!\n      Uninvert u = new Uninvert(true) {\n        @Override\n        protected TermsEnum termsEnum(Terms terms) throws IOException {\n          throw new AssertionError();\n        }\n\n        @Override\n        protected void visitTerm(BytesRef term) {}\n\n        @Override\n        protected void visitDoc(int docID) {}\n      };\n      u.uninvert(reader, field);\n      return new BitsEntry(u.docsWithField);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}