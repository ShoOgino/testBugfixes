{"path":"backwards/src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}