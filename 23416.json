{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    CoreContainer mockCC = EasyMock.createMock(CoreContainer.class);\n    EasyMock.reset(mockCC);\n    mockCC.create(anyObject(String.class), anyObject(Path.class) , anyObject(Map.class), anyBoolean());\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"create\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n    mockCC.swap(anyObject(String.class), anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"swap\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.rename(anyObject(String.class), anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"rename\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.unload(anyObject(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"unload\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.getCoreRootDirectory();\n    EasyMock.expectLastCall().andAnswer(() -> Paths.get(\"coreroot\")).anyTimes();\n    mockCC.getContainerProperties();\n    EasyMock.expectLastCall().andAnswer(() -> new Properties()).anyTimes();\n\n    mockCC.getRequestHandlers();\n    EasyMock.expectLastCall().andAnswer(() -> out.get(\"getRequestHandlers\")).anyTimes();\n\n    EasyMock.replay(mockCC);\n    return mockCC;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    CoreContainer mockCC = EasyMock.createMock(CoreContainer.class);\n    EasyMock.reset(mockCC);\n    mockCC.create(anyObject(String.class), anyObject(Path.class) , anyObject(Map.class), anyBoolean());\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"create\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n    mockCC.swap(anyObject(String.class), anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"swap\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.rename(anyObject(String.class), anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"rename\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.unload(anyObject(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"unload\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.getCoreRootDirectory();\n    EasyMock.expectLastCall().andAnswer(() -> Paths.get(\"coreroot\")).anyTimes();\n    mockCC.getContainerProperties();\n    EasyMock.expectLastCall().andAnswer(() -> new Properties()).anyTimes();\n\n    mockCC.getRequestHandlers();\n    EasyMock.expectLastCall().andAnswer(() -> out.get(\"getRequestHandlers\")).anyTimes();\n\n    EasyMock.replay(mockCC);\n    return mockCC;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","sourceNew":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenReturn((PluginBag<SolrRequestHandler>) out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","sourceOld":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    CoreContainer mockCC = EasyMock.createMock(CoreContainer.class);\n    EasyMock.reset(mockCC);\n    mockCC.create(anyObject(String.class), anyObject(Path.class) , anyObject(Map.class), anyBoolean());\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"create\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n    mockCC.swap(anyObject(String.class), anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"swap\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.rename(anyObject(String.class), anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"rename\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.unload(anyObject(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n    EasyMock.expectLastCall().andAnswer(() -> {\n      in.put(\"unload\", getCurrentArguments());\n      return null;\n    }).anyTimes();\n\n    mockCC.getCoreRootDirectory();\n    EasyMock.expectLastCall().andAnswer(() -> Paths.get(\"coreroot\")).anyTimes();\n    mockCC.getContainerProperties();\n    EasyMock.expectLastCall().andAnswer(() -> new Properties()).anyTimes();\n\n    mockCC.getRequestHandlers();\n    EasyMock.expectLastCall().andAnswer(() -> out.get(\"getRequestHandlers\")).anyTimes();\n\n    EasyMock.replay(mockCC);\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd8c2bbdce779dec39cf35a6d9af9a0e15826081","date":1487492397,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","sourceNew":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenAnswer(invocationOnMock -> out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","sourceOld":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenReturn((PluginBag<SolrRequestHandler>) out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9","date":1509820648,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","sourceNew":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    assumeWorkingMockito();\n    \n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenAnswer(invocationOnMock -> out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","sourceOld":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenAnswer(invocationOnMock -> out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","sourceNew":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    assumeWorkingMockito();\n    \n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenAnswer(invocationOnMock -> out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","sourceOld":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenAnswer(invocationOnMock -> out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCoreAdminApis#getCoreContainerMock(Map[String,Object[]],Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    assumeWorkingMockito();\n    \n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenAnswer(invocationOnMock -> out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","sourceOld":"  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {\n    assumeWorkingMockito();\n    \n    CoreContainer mockCC = mock(CoreContainer.class);\n    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {\n      in.put(\"create\", invocationOnMock.getArguments());\n      return null;\n    });\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"swap\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).swap(any(String.class), any(String.class));\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"rename\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).rename(any(String.class), any(String.class));\n\n\n    doAnswer(invocationOnMock -> {\n      in.put(\"unload\", invocationOnMock.getArguments());\n      return null;\n    }).when(mockCC).unload(any(String.class), anyBoolean(),\n        anyBoolean(), anyBoolean());\n\n    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get(\"coreroot\"));\n    when(mockCC.getContainerProperties()).thenReturn(new Properties());\n\n    when(mockCC.getRequestHandlers()).thenAnswer(invocationOnMock -> out.get(\"getRequestHandlers\"));\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["fd8c2bbdce779dec39cf35a6d9af9a0e15826081","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"fd8c2bbdce779dec39cf35a6d9af9a0e15826081":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["fd8c2bbdce779dec39cf35a6d9af9a0e15826081"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["e98520789adb1d5ad05afb4956eca0944a929688"],"fd8c2bbdce779dec39cf35a6d9af9a0e15826081":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["fd8c2bbdce779dec39cf35a6d9af9a0e15826081"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}