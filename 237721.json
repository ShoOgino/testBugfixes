{"path":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n    \n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n\n      String[] fqs = req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(\"shards\");\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c88221aeda5571321ba2bf95de2a7348401230cf","c88221aeda5571321ba2bf95de2a7348401230cf","c88221aeda5571321ba2bf95de2a7348401230cf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6c6e4e06160d2ad231072e8743988a623ab14c9","date":1213500516,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n    \n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n    \n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n\n      String[] fqs = req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(\"shards\");\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2360ab9d29fd0dc0220bfd26dcafe62dd1c556bd","date":1213987637,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n    \n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n    \n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db25c1f61b5ae826f10777da6551a832703967d5","date":1215306972,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n    \n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3636742c4ece0b55d4709db66bb81ff34e24edc","date":1233823274,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString(params.get(CommonParams.Q));\n      String queryString = params.get(CommonParams.Q);\n      if (queryString == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Missing or empty required parameter: q\");\n      }\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4697244e886d56aaddcf271b71b6d64daa6405d4","date":1233839433,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString(params.get(CommonParams.Q));\n      String queryString = params.get(CommonParams.Q);\n      if (queryString == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Missing or empty required parameter: q\");\n      }\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46ff2158529ec1ebfba0b572e330456204f7ef5a","date":1234277721,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76a8547f21cb89c5512cb81bf55cb3f419c7e691","date":1235781390,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? OldLuceneQParserPlugin.NAME : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"640a5451d6e0dbabae390cc687e7d0c1a130d0b9","date":1252348096,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException\n  {\n\n    SolrQueryRequest req = rb.req;\n    SolrParams params = req.getParams();\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n    SolrQueryResponse rsp = rb.rsp;\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int fieldFlags = 0;\n    if (fl != null) {\n      fieldFlags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n    rb.setFieldFlags( fieldFlags );\n\n    String defType = params.get(QueryParsing.DEFTYPE);\n    defType = defType==null ? QParserPlugin.DEFAULT_QTYPE : defType;\n\n    if (rb.getQueryString() == null) {\n      rb.setQueryString( params.get( CommonParams.Q ) );\n    }\n\n    try {\n      QParser parser = QParser.getParser(rb.getQueryString(), defType, req);\n      rb.setQuery( parser.getQuery() );\n      rb.setSortSpec( parser.getSort(true) );\n      rb.setQparser(parser);\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n        List<Query> filters = rb.getFilters();\n        if (filters==null) {\n          filters = new ArrayList<Query>();\n          rb.setFilters( filters );\n        }\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n    String shards_rows = params.get(ShardParams.SHARDS_ROWS);\n    if(shards_rows != null) {\n      rb.shards_rows = Integer.parseInt(shards_rows);\n    }\n    String shards_start = params.get(ShardParams.SHARDS_START);\n    if(shards_start != null) {\n      rb.shards_start = Integer.parseInt(shards_start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"640a5451d6e0dbabae390cc687e7d0c1a130d0b9":["76a8547f21cb89c5512cb81bf55cb3f419c7e691"],"a6c6e4e06160d2ad231072e8743988a623ab14c9":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"46ff2158529ec1ebfba0b572e330456204f7ef5a":["4697244e886d56aaddcf271b71b6d64daa6405d4"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4697244e886d56aaddcf271b71b6d64daa6405d4":["a3636742c4ece0b55d4709db66bb81ff34e24edc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2360ab9d29fd0dc0220bfd26dcafe62dd1c556bd":["a6c6e4e06160d2ad231072e8743988a623ab14c9"],"db25c1f61b5ae826f10777da6551a832703967d5":["2360ab9d29fd0dc0220bfd26dcafe62dd1c556bd"],"ad94625fb8d088209f46650c8097196fec67f00c":["640a5451d6e0dbabae390cc687e7d0c1a130d0b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"76a8547f21cb89c5512cb81bf55cb3f419c7e691":["46ff2158529ec1ebfba0b572e330456204f7ef5a"],"a3636742c4ece0b55d4709db66bb81ff34e24edc":["db25c1f61b5ae826f10777da6551a832703967d5"]},"commit2Childs":{"640a5451d6e0dbabae390cc687e7d0c1a130d0b9":["ad94625fb8d088209f46650c8097196fec67f00c"],"a6c6e4e06160d2ad231072e8743988a623ab14c9":["2360ab9d29fd0dc0220bfd26dcafe62dd1c556bd"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"46ff2158529ec1ebfba0b572e330456204f7ef5a":["76a8547f21cb89c5512cb81bf55cb3f419c7e691"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["a6c6e4e06160d2ad231072e8743988a623ab14c9"],"4697244e886d56aaddcf271b71b6d64daa6405d4":["46ff2158529ec1ebfba0b572e330456204f7ef5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2360ab9d29fd0dc0220bfd26dcafe62dd1c556bd":["db25c1f61b5ae826f10777da6551a832703967d5"],"db25c1f61b5ae826f10777da6551a832703967d5":["a3636742c4ece0b55d4709db66bb81ff34e24edc"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"76a8547f21cb89c5512cb81bf55cb3f419c7e691":["640a5451d6e0dbabae390cc687e7d0c1a130d0b9"],"a3636742c4ece0b55d4709db66bb81ff34e24edc":["4697244e886d56aaddcf271b71b6d64daa6405d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}