{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setupBuilder(HttpClientBuilder,SolrParams).mjava","commits":[{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setupBuilder(HttpClientBuilder,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private static HttpClientBuilder setupBuilder(HttpClientBuilder builder, SolrParams config) {\n   \n    Builder requestConfigBuilder = RequestConfig.custom()\n        .setRedirectsEnabled(config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS, false)).setDecompressionEnabled(false)\n        .setConnectTimeout(config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT, DEFAULT_CONNECT_TIMEOUT))\n        .setSocketTimeout(config.getInt(HttpClientUtil.PROP_SO_TIMEOUT, DEFAULT_SO_TIMEOUT));\n\n    String cpolicy = cookiePolicy;\n    if (cpolicy != null) {\n      requestConfigBuilder.setCookieSpec(cpolicy);\n    }\n    \n    RequestConfig requestConfig = requestConfigBuilder.build();\n    \n    HttpClientBuilder retBuilder = builder.setDefaultRequestConfig(requestConfig);\n\n    if (config.getBool(HttpClientUtil.PROP_USE_RETRY, true)) {\n      retBuilder = retBuilder.setRetryHandler(new SolrHttpRequestRetryHandler(3));\n\n    } else {\n      retBuilder = retBuilder.setRetryHandler(NO_RETRY);\n    }\n\n    final String basicAuthUser = config.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    \n    if (basicAuthUser != null && basicAuthPass != null) {\n      CredentialsProvider credsProvider = new BasicCredentialsProvider();\n      credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n      retBuilder.setDefaultCredentialsProvider(credsProvider);\n    }\n    \n    if (config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION, false)) {\n      retBuilder.addInterceptorFirst(new UseCompressionRequestInterceptor());\n      retBuilder.addInterceptorFirst(new UseCompressionResponseInterceptor());\n    } else {\n      retBuilder.disableContentCompression();\n    }\n\n    return retBuilder;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setupBuilder(HttpClientBuilder,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setupBuilder(HttpClientBuilder,SolrParams).mjava","sourceNew":"  private static HttpClientBuilder setupBuilder(HttpClientBuilder builder, SolrParams config) {\n   \n    Builder requestConfigBuilder = RequestConfig.custom()\n        .setRedirectsEnabled(config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS, false)).setDecompressionEnabled(false)\n        .setConnectTimeout(config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT, DEFAULT_CONNECT_TIMEOUT))\n        .setSocketTimeout(config.getInt(HttpClientUtil.PROP_SO_TIMEOUT, DEFAULT_SO_TIMEOUT));\n\n    String cpolicy = cookiePolicy;\n    if (cpolicy != null) {\n      requestConfigBuilder.setCookieSpec(cpolicy);\n    }\n    \n    RequestConfig requestConfig = requestConfigBuilder.build();\n    \n    HttpClientBuilder retBuilder = builder.setDefaultRequestConfig(requestConfig);\n\n    if (config.getBool(HttpClientUtil.PROP_USE_RETRY, true)) {\n      retBuilder = retBuilder.setRetryHandler(new SolrHttpRequestRetryHandler(Integer.getInteger(\"solr.httpclient.retries\", 3)));\n\n    } else {\n      retBuilder = retBuilder.setRetryHandler(NO_RETRY);\n    }\n\n    final String basicAuthUser = config.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    \n    if (basicAuthUser != null && basicAuthPass != null) {\n      CredentialsProvider credsProvider = new BasicCredentialsProvider();\n      credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n      retBuilder.setDefaultCredentialsProvider(credsProvider);\n    }\n    \n    if (config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION, false)) {\n      retBuilder.addInterceptorFirst(new UseCompressionRequestInterceptor());\n      retBuilder.addInterceptorFirst(new UseCompressionResponseInterceptor());\n    } else {\n      retBuilder.disableContentCompression();\n    }\n\n    return retBuilder;\n  }\n\n","sourceOld":"  private static HttpClientBuilder setupBuilder(HttpClientBuilder builder, SolrParams config) {\n   \n    Builder requestConfigBuilder = RequestConfig.custom()\n        .setRedirectsEnabled(config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS, false)).setDecompressionEnabled(false)\n        .setConnectTimeout(config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT, DEFAULT_CONNECT_TIMEOUT))\n        .setSocketTimeout(config.getInt(HttpClientUtil.PROP_SO_TIMEOUT, DEFAULT_SO_TIMEOUT));\n\n    String cpolicy = cookiePolicy;\n    if (cpolicy != null) {\n      requestConfigBuilder.setCookieSpec(cpolicy);\n    }\n    \n    RequestConfig requestConfig = requestConfigBuilder.build();\n    \n    HttpClientBuilder retBuilder = builder.setDefaultRequestConfig(requestConfig);\n\n    if (config.getBool(HttpClientUtil.PROP_USE_RETRY, true)) {\n      retBuilder = retBuilder.setRetryHandler(new SolrHttpRequestRetryHandler(3));\n\n    } else {\n      retBuilder = retBuilder.setRetryHandler(NO_RETRY);\n    }\n\n    final String basicAuthUser = config.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    \n    if (basicAuthUser != null && basicAuthPass != null) {\n      CredentialsProvider credsProvider = new BasicCredentialsProvider();\n      credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n      retBuilder.setDefaultCredentialsProvider(credsProvider);\n    }\n    \n    if (config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION, false)) {\n      retBuilder.addInterceptorFirst(new UseCompressionRequestInterceptor());\n      retBuilder.addInterceptorFirst(new UseCompressionResponseInterceptor());\n    } else {\n      retBuilder.disableContentCompression();\n    }\n\n    return retBuilder;\n  }\n\n","bugFix":["859081acf00749f5dd462772c571d611d4a4d2db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}