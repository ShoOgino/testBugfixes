{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","sourceNew":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuilder buf = new StringBuilder(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","sourceOld":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuilder buf = new StringBuilder(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","sourceNew":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuilder buf = new StringBuilder(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","sourceOld":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuilder buf = new StringBuilder(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}