{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","commits":[{"id":"1dca57049fb75fd60d90723d142769094a0402be","date":1385096736,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config value\n   * @param collection\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n\n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config value\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa1c65f4b073b5c4bebfa894f58c176d96bded4f","date":1385100578,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   * \n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n\n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config value\n   * @param collection\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n\n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns config set name for collection.\n   * \n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n\n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89a1bd5bbdbddad851b6bf6b41ef27d1c3ce2191","date":1391713311,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   * \n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n\n    if (configName != null) {\n      if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n        log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n            \"Specified config does not exist in ZooKeeper:\" + configName);\n      } else if (log.isInfoEnabled()) {\n        log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n            new Object[] {path, CONFIGNAME_PROP, configName});\n      }\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   * \n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n\n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   * \n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   * \n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n\n    if (configName != null) {\n      if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n        log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n            \"Specified config does not exist in ZooKeeper:\" + configName);\n      } else if (log.isInfoEnabled()) {\n        log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n            new Object[] {path, CONFIGNAME_PROP, configName});\n      }\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":["5f6502a4045d17684af5347826b9c6cf24b8beac","98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   * \n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n      } else  {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n      } else  {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":["98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n              \"Specified config does not exist in ZooKeeper:\" + configName);\n        } else if (log.isInfoEnabled()) {\n          log.info(\"path={} {}={} specified config exists in ZooKeeper\",\n              new Object[] {path, CONFIGNAME_PROP, configName});\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":["98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6502a4045d17684af5347826b9c6cf24b8beac","date":1457102520,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":["2d4e985daefcb892b529223b478c47985fc3c483"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    }\n    catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0aa02fe8c7d5213219c987a970723bcec43729a","date":1471808327,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ccb2dbdd859616eefb9b3217d7fc6ef33230b74","date":1474034167,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if (data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n        if (!zkClient.exists(configPath, true)) {\n          LOG.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":["98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if (data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n        if (!zkClient.exists(configPath, true)) {\n          LOG.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if (data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n        if (!zkClient.exists(configPath, true)) {\n          LOG.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.info(\"Load collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if(data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        if (!zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n          LOG.error(\"Specified config does not exist in ZooKeeper: [{}]\", configName);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.info(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", path, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if (data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n        if (!zkClient.exists(configPath, true)) {\n          log.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          log.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    LOG.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if (data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n        if (!zkClient.exists(configPath, true)) {\n          LOG.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          LOG.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":["98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if (data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n        if (!zkClient.exists(configPath, true)) {\n          log.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n          throw new KeeperException.NoNodeException(configPath);\n        } else {\n          log.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if (data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n        if (!zkClient.exists(configPath, true)) {\n          log.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n          throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + configName);\n        } else {\n          log.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (KeeperException| InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":["98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d","date":1560465613,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      if (zkClient.exists(path, true) == false) {\n        log.warn(\"No collection found at path {}.\", path);\n        throw new KeeperException.NoNodeException(\"No collection found at path: \" + path);\n      }\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data == null) {\n        log.warn(\"No config data found at path {}.\", path);\n        throw new KeeperException.NoNodeException(\"No config data found at path: \" + path);\n      }\n\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n\n      if (configName == null) {\n        log.warn(\"No config data found at path{}. \", path);\n        throw new KeeperException.NoNodeException(\"No config data found at path: \" + path);\n      }\n\n      String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n      if (zkClient.exists(configPath, true) == false) {\n        log.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n        throw new KeeperException.NoNodeException(\"Specified config=[\" + configName + \"] does not exist in ZooKeeper at location=[\" + configPath + \"]\");\n      } else {\n        log.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n      }\n    } catch (InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Thread interrupted when loading config name for collection {}\", collection);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted when loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n\n      if (data != null) {\n        ZkNodeProps props = ZkNodeProps.load(data);\n        configName = props.getStr(CONFIGNAME_PROP);\n      }\n\n      if (configName != null) {\n        String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n        if (!zkClient.exists(configPath, true)) {\n          log.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n          throw new KeeperException.NoNodeException(configPath);\n        } else {\n          log.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n        }\n      } else {\n        throw new ZooKeeperException(ErrorCode.INVALID_STATE, \"No config data found at path: \" + path);\n      }\n    } catch (InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":["1dca57049fb75fd60d90723d142769094a0402be","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","7477015ee104ad8144fba06b9b0a8ea93aea50f8","6ccb2dbdd859616eefb9b3217d7fc6ef33230b74","2d4e985daefcb892b529223b478c47985fc3c483","4949836c6e83246ddba8997472e3333f40986c8c","9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f4495376415b0dd65f3aa2e20924227590b185","date":1585078460,"type":3,"author":"mariemat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config set name for collection.\n   * TODO move to DocCollection (state.json).\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data == null) {\n        log.warn(\"No config data found at path {}.\", path);\n        throw new KeeperException.NoNodeException(\"No config data found at path: \" + path);\n      }\n\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n\n      if (configName == null) {\n        log.warn(\"No config data found at path{}. \", path);\n        throw new KeeperException.NoNodeException(\"No config data found at path: \" + path);\n      }\n    } catch (InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Thread interrupted when loading config name for collection {}\", collection);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted when loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config set name for collection.\n   *\n   * @param collection to return config set name for\n   */\n  public String readConfigName(String collection) throws KeeperException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Loading collection config from: [{}]\", path);\n\n    try {\n      if (zkClient.exists(path, true) == false) {\n        log.warn(\"No collection found at path {}.\", path);\n        throw new KeeperException.NoNodeException(\"No collection found at path: \" + path);\n      }\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data == null) {\n        log.warn(\"No config data found at path {}.\", path);\n        throw new KeeperException.NoNodeException(\"No config data found at path: \" + path);\n      }\n\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n\n      if (configName == null) {\n        log.warn(\"No config data found at path{}. \", path);\n        throw new KeeperException.NoNodeException(\"No config data found at path: \" + path);\n      }\n\n      String configPath = CONFIGS_ZKNODE + \"/\" + configName;\n      if (zkClient.exists(configPath, true) == false) {\n        log.error(\"Specified config=[{}] does not exist in ZooKeeper at location=[{}]\", configName, configPath);\n        throw new KeeperException.NoNodeException(\"Specified config=[\" + configName + \"] does not exist in ZooKeeper at location=[\" + configPath + \"]\");\n      } else {\n        log.debug(\"path=[{}] [{}]=[{}] specified config exists in ZooKeeper\", configPath, CONFIGNAME_PROP, configName);\n      }\n    } catch (InterruptedException e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Thread interrupted when loading config name for collection {}\", collection);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted when loading config name for collection \" + collection, e);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"922ddd897402a6df25c766ea8300443be5e82b3d":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","5f6502a4045d17684af5347826b9c6cf24b8beac"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"f0aa02fe8c7d5213219c987a970723bcec43729a":["922ddd897402a6df25c766ea8300443be5e82b3d"],"89a1bd5bbdbddad851b6bf6b41ef27d1c3ce2191":["aa1c65f4b073b5c4bebfa894f58c176d96bded4f"],"5f6502a4045d17684af5347826b9c6cf24b8beac":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"a6f4495376415b0dd65f3aa2e20924227590b185":["98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["922ddd897402a6df25c766ea8300443be5e82b3d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","6ccb2dbdd859616eefb9b3217d7fc6ef33230b74"],"1dca57049fb75fd60d90723d142769094a0402be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa1c65f4b073b5c4bebfa894f58c176d96bded4f":["1dca57049fb75fd60d90723d142769094a0402be"],"6ccb2dbdd859616eefb9b3217d7fc6ef33230b74":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aa1c65f4b073b5c4bebfa894f58c176d96bded4f"],"4949836c6e83246ddba8997472e3333f40986c8c":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"2d4e985daefcb892b529223b478c47985fc3c483":["89a1bd5bbdbddad851b6bf6b41ef27d1c3ce2191"],"98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d":["4949836c6e83246ddba8997472e3333f40986c8c"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["9279b175e5e66258442d2123a50f052219a9cc1b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["2d4e985daefcb892b529223b478c47985fc3c483"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["922ddd897402a6df25c766ea8300443be5e82b3d","f0aa02fe8c7d5213219c987a970723bcec43729a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6f4495376415b0dd65f3aa2e20924227590b185"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"922ddd897402a6df25c766ea8300443be5e82b3d":["f0aa02fe8c7d5213219c987a970723bcec43729a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"f0aa02fe8c7d5213219c987a970723bcec43729a":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"89a1bd5bbdbddad851b6bf6b41ef27d1c3ce2191":["2d4e985daefcb892b529223b478c47985fc3c483"],"5f6502a4045d17684af5347826b9c6cf24b8beac":["922ddd897402a6df25c766ea8300443be5e82b3d"],"a6f4495376415b0dd65f3aa2e20924227590b185":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1dca57049fb75fd60d90723d142769094a0402be","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1dca57049fb75fd60d90723d142769094a0402be":["aa1c65f4b073b5c4bebfa894f58c176d96bded4f"],"aa1c65f4b073b5c4bebfa894f58c176d96bded4f":["89a1bd5bbdbddad851b6bf6b41ef27d1c3ce2191","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"6ccb2dbdd859616eefb9b3217d7fc6ef33230b74":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"4949836c6e83246ddba8997472e3333f40986c8c":["98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"2d4e985daefcb892b529223b478c47985fc3c483":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["922ddd897402a6df25c766ea8300443be5e82b3d","5f6502a4045d17684af5347826b9c6cf24b8beac"],"98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d":["a6f4495376415b0dd65f3aa2e20924227590b185"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6ccb2dbdd859616eefb9b3217d7fc6ef33230b74"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["4949836c6e83246ddba8997472e3333f40986c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}