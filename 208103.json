{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","commits":[{"id":"a397491f6601f7c45bc425f45e95c41c3a6d1ca3","date":1380651240,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    long lower,upper;\n\n    // instead of using separate comparison functions, adjust the endpoints.\n\n    if (lowerVal==null) {\n      lower = Long.MIN_VALUE;\n    } else {\n      lower = externalToLong(lowerVal);\n      if (!includeLower && lower < Long.MAX_VALUE) lower++;\n    }\n\n     if (upperVal==null) {\n      upper = Long.MAX_VALUE;\n    } else {\n      upper = externalToLong(upperVal);\n      if (!includeUpper && upper > Long.MIN_VALUE) upper--;\n    }\n\n    final long ll = lower;\n    final long uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        long val = longVal(doc);\n        // only check for deleted if it's the default value\n        // if (val==0 && reader.isDeleted(doc)) return false;\n        return val >= ll && val <= uu;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    long lower,upper;\n\n    // instead of using separate comparison functions, adjust the endpoints.\n\n    if (lowerVal==null) {\n      lower = Long.MIN_VALUE;\n    } else {\n      lower = externalToLong(lowerVal);\n      if (!includeLower && lower < Long.MAX_VALUE) lower++;\n    }\n\n     if (upperVal==null) {\n      upper = Long.MAX_VALUE;\n    } else {\n      upper = externalToLong(upperVal);\n      if (!includeUpper && upper > Long.MIN_VALUE) upper--;\n    }\n\n    final long ll = lower;\n    final long uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matches(int doc) {\n        long val = longVal(doc);\n        // only check for deleted if it's the default value\n        // if (val==0 && reader.isDeleted(doc)) return false;\n        return val >= ll && val <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    long lower,upper;\n\n    // instead of using separate comparison functions, adjust the endpoints.\n\n    if (lowerVal==null) {\n      lower = Long.MIN_VALUE;\n    } else {\n      lower = externalToLong(lowerVal);\n      if (!includeLower && lower < Long.MAX_VALUE) lower++;\n    }\n\n     if (upperVal==null) {\n      upper = Long.MAX_VALUE;\n    } else {\n      upper = externalToLong(upperVal);\n      if (!includeUpper && upper > Long.MIN_VALUE) upper--;\n    }\n\n    final long ll = lower;\n    final long uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        long val = longVal(doc);\n        // only check for deleted if it's the default value\n        // if (val==0 && reader.isDeleted(doc)) return false;\n        return val >= ll && val <= uu;\n      }\n    };\n  }\n\n","bugFix":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues#getRangeScorer(LeafReaderContext,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    long lower,upper;\n\n    // instead of using separate comparison functions, adjust the endpoints.\n\n    if (lowerVal==null) {\n      lower = Long.MIN_VALUE;\n    } else {\n      lower = externalToLong(lowerVal);\n      if (!includeLower && lower < Long.MAX_VALUE) lower++;\n    }\n\n     if (upperVal==null) {\n      upper = Long.MAX_VALUE;\n    } else {\n      upper = externalToLong(upperVal);\n      if (!includeUpper && upper > Long.MIN_VALUE) upper--;\n    }\n\n    final long ll = lower;\n    final long uu = upper;\n\n    return new ValueSourceScorer(readerContext, this) {\n      @Override\n      public boolean matches(int doc) {\n        if (!exists(doc)) return false;\n        long val = longVal(doc);\n        return val >= ll && val <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    long lower,upper;\n\n    // instead of using separate comparison functions, adjust the endpoints.\n\n    if (lowerVal==null) {\n      lower = Long.MIN_VALUE;\n    } else {\n      lower = externalToLong(lowerVal);\n      if (!includeLower && lower < Long.MAX_VALUE) lower++;\n    }\n\n     if (upperVal==null) {\n      upper = Long.MAX_VALUE;\n    } else {\n      upper = externalToLong(upperVal);\n      if (!includeUpper && upper > Long.MIN_VALUE) upper--;\n    }\n\n    final long ll = lower;\n    final long uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matches(int doc) {\n        long val = longVal(doc);\n        // only check for deleted if it's the default value\n        // if (val==0 && reader.isDeleted(doc)) return false;\n        return val >= ll && val <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cfa96e1cacc0f1f98d8732aa54935875187781"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}