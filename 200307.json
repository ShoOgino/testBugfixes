{"path":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"  synchronized void putIfAbsent(Filter filter, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache remain sync'ed\n    assert set.isCacheable();\n    final boolean added = mostRecentlyUsedFilters.add(filter);\n    if (added) {\n      ramBytesUsed += ramBytesUsed(filter);\n    }\n    LeafCache leafCache = cache.get(context.reader().getCoreCacheKey());\n    if (leafCache == null) {\n      leafCache = new LeafCache();\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(filter, set);\n    evictIfNecessary();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d6ade6517735e5fca21539f4ff32151bf0a89b8","date":1418291454,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","sourceNew":"  synchronized void putIfAbsent(Filter filter, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache remain sync'ed\n    assert set.isCacheable();\n    Filter singleton = uniqueFilters.putIfAbsent(filter, filter);\n    if (singleton == null) {\n      ramBytesUsed += LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(filter);\n    } else {\n      filter = singleton;\n    }\n    LeafCache leafCache = cache.get(context.reader().getCoreCacheKey());\n    if (leafCache == null) {\n      leafCache = new LeafCache();\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(filter, set);\n    evictIfNecessary();\n  }\n\n","sourceOld":"  synchronized void putIfAbsent(Filter filter, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache remain sync'ed\n    assert set.isCacheable();\n    final boolean added = mostRecentlyUsedFilters.add(filter);\n    if (added) {\n      ramBytesUsed += ramBytesUsed(filter);\n    }\n    LeafCache leafCache = cache.get(context.reader().getCoreCacheKey());\n    if (leafCache == null) {\n      leafCache = new LeafCache();\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(filter, set);\n    evictIfNecessary();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296c9b37e42c78be4df12c05d295996c46e0d0ef","date":1420447527,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","sourceNew":"  synchronized void putIfAbsent(Filter filter, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache remain sync'ed\n    assert set.isCacheable();\n    Filter singleton = uniqueFilters.putIfAbsent(filter, filter);\n    if (singleton == null) {\n      onFilterCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(filter));\n    } else {\n      filter = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(filter, set);\n    evictIfNecessary();\n  }\n\n","sourceOld":"  synchronized void putIfAbsent(Filter filter, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache remain sync'ed\n    assert set.isCacheable();\n    Filter singleton = uniqueFilters.putIfAbsent(filter, filter);\n    if (singleton == null) {\n      ramBytesUsed += LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(filter);\n    } else {\n      filter = singleton;\n    }\n    LeafCache leafCache = cache.get(context.reader().getCoreCacheKey());\n    if (leafCache == null) {\n      leafCache = new LeafCache();\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(filter, set);\n    evictIfNecessary();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","sourceNew":"  synchronized void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    // we don't want to have user-provided queries as keys in our cache since queries are mutable\n    query = query.clone();\n    query.setBoost(1f);\n    assert query == QueryCache.cacheKey(query);\n    Query singleton = uniqueQueries.putIfAbsent(query, query);\n    if (singleton == null) {\n      onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n    } else {\n      query = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(query, set);\n    evictIfNecessary();\n  }\n\n","sourceOld":"  synchronized void putIfAbsent(Filter filter, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache remain sync'ed\n    assert set.isCacheable();\n    Filter singleton = uniqueFilters.putIfAbsent(filter, filter);\n    if (singleton == null) {\n      onFilterCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(filter));\n    } else {\n      filter = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(filter, set);\n    evictIfNecessary();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","sourceNew":null,"sourceOld":"  synchronized void putIfAbsent(Filter filter, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache remain sync'ed\n    assert set.isCacheable();\n    Filter singleton = uniqueFilters.putIfAbsent(filter, filter);\n    if (singleton == null) {\n      onFilterCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(filter));\n    } else {\n      filter = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(filter, set);\n    evictIfNecessary();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["296c9b37e42c78be4df12c05d295996c46e0d0ef","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["296c9b37e42c78be4df12c05d295996c46e0d0ef"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"296c9b37e42c78be4df12c05d295996c46e0d0ef":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["296c9b37e42c78be4df12c05d295996c46e0d0ef"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"296c9b37e42c78be4df12c05d295996c46e0d0ef":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}