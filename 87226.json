{"path":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","date":1286712181,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n\n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d16aff6229cca84309d03d047cd718946bd4b43","date":1296516600,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n\n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n    Directory primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    Directory secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n\n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n\n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n\n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(DefaultStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(DefaultStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(DefaultStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(DefaultStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["06584e6e98d592b34e1329b384182f368d2025e8"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","53a31399f2471493d67b19a95c028a74e0113b6a"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7d16aff6229cca84309d03d047cd718946bd4b43":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["a05409176bd65129d67a785ee70e881e238a9aef"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["7d16aff6229cca84309d03d047cd718946bd4b43"],"53a31399f2471493d67b19a95c028a74e0113b6a":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"a3776dccca01c11e7046323cfad46a3b4a471233":["7d16aff6229cca84309d03d047cd718946bd4b43","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","7d16aff6229cca84309d03d047cd718946bd4b43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7d16aff6229cca84309d03d047cd718946bd4b43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["53a31399f2471493d67b19a95c028a74e0113b6a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"06584e6e98d592b34e1329b384182f368d2025e8":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","a05409176bd65129d67a785ee70e881e238a9aef"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7d16aff6229cca84309d03d047cd718946bd4b43":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["7d16aff6229cca84309d03d047cd718946bd4b43"],"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","eb378f8bdee16a26810e086303a4a86b4930ea12","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}