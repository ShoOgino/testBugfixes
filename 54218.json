{"path":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","commits":[{"id":"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea","date":1327930581,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReader.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private ReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      IndexReader[] sequentialSubReaders = reader.getSequentialSubReaders();\n      if (sequentialSubReaders == null) {\n        AtomicReaderContext atomic = new AtomicReaderContext(parent, reader, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        ReaderContext[] children = new ReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(reader, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, reader, ord, docBase, children);\n        }\n        \n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#build(CompositeReaderContext,IndexReader,int,int).mjava","sourceNew":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","sourceOld":"    private IndexReaderContext build(CompositeReaderContext parent, IndexReader reader, int ord, int docBase) {\n      if (reader instanceof AtomicReader) {\n        final AtomicReader ar = (AtomicReader) reader;\n        final AtomicReaderContext atomic = new AtomicReaderContext(parent, ar, ord, docBase, leafOrd, leafDocBase);\n        leaves[leafOrd++] = atomic;\n        leafDocBase += reader.maxDoc();\n        return atomic;\n      } else {\n        final CompositeReader cr = (CompositeReader) reader;\n        final IndexReader[] sequentialSubReaders = cr.getSequentialSubReaders();\n        final IndexReaderContext[] children = new IndexReaderContext[sequentialSubReaders.length];\n        final CompositeReaderContext newParent;\n        if (parent == null) {\n          newParent = new CompositeReaderContext(cr, children, leaves);\n        } else {\n          newParent = new CompositeReaderContext(parent, cr, ord, docBase, children);\n        }\n        int newDocBase = 0;\n        for (int i = 0; i < sequentialSubReaders.length; i++) {\n          children[i] = build(newParent, sequentialSubReaders[i], i, newDocBase);\n          newDocBase += sequentialSubReaders[i].maxDoc();\n        }\n        return newParent;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea"],"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cab9a86bd67202d20b6adc463008c8e982b070a","7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}