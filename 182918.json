{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","commits":[{"id":"144ca7fb3ae89fdca80610b02273885f1e43dba0","date":1509382753,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      return new Matrix(tmatrix.getData());\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21cc21dac328d94dbc79c104b8e626fca70b3f79","date":1515458383,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      Matrix newMatrix = new Matrix(tmatrix.getData());\n      //Switch the row and column labels\n      newMatrix.setColumnLabels(matrix.getRowLabels());\n      newMatrix.setRowLabels(matrix.getColumnLabels());\n      return newMatrix;\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      return new Matrix(tmatrix.getData());\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      Matrix newMatrix = new Matrix(tmatrix.getData());\n      //Switch the row and column labels\n      newMatrix.setColumnLabels(matrix.getRowLabels());\n      newMatrix.setRowLabels(matrix.getColumnLabels());\n      return newMatrix;\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      return new Matrix(tmatrix.getData());\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac","date":1523323495,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data, false);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      Matrix newMatrix = new Matrix(tmatrix.getDataRef());\n      //Switch the row and column labels\n      newMatrix.setColumnLabels(matrix.getRowLabels());\n      newMatrix.setRowLabels(matrix.getColumnLabels());\n      return newMatrix;\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      Matrix newMatrix = new Matrix(tmatrix.getData());\n      //Switch the row and column labels\n      newMatrix.setColumnLabels(matrix.getRowLabels());\n      newMatrix.setRowLabels(matrix.getColumnLabels());\n      return newMatrix;\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431c2627ab600554864fa78f5e76abef81faa42d","date":1523357854,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TransposeEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data, false);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      Matrix newMatrix = new Matrix(tmatrix.getDataRef());\n      //Switch the row and column labels\n      newMatrix.setColumnLabels(matrix.getRowLabels());\n      newMatrix.setRowLabels(matrix.getColumnLabels());\n      return newMatrix;\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      Array2DRowRealMatrix amatrix = new Array2DRowRealMatrix(data);\n      Array2DRowRealMatrix tmatrix = (Array2DRowRealMatrix)amatrix.transpose();\n      Matrix newMatrix = new Matrix(tmatrix.getData());\n      //Switch the row and column labels\n      newMatrix.setColumnLabels(matrix.getRowLabels());\n      newMatrix.setRowLabels(matrix.getColumnLabels());\n      return newMatrix;\n    } else {\n      throw new IOException(\"matrix parameter expected for transpose function\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["144ca7fb3ae89fdca80610b02273885f1e43dba0","21cc21dac328d94dbc79c104b8e626fca70b3f79"],"21cc21dac328d94dbc79c104b8e626fca70b3f79":["144ca7fb3ae89fdca80610b02273885f1e43dba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"431c2627ab600554864fa78f5e76abef81faa42d":["b94236357aaa22b76c10629851fe4e376e0cea82","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"144ca7fb3ae89fdca80610b02273885f1e43dba0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["431c2627ab600554864fa78f5e76abef81faa42d"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["431c2627ab600554864fa78f5e76abef81faa42d","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"21cc21dac328d94dbc79c104b8e626fca70b3f79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["144ca7fb3ae89fdca80610b02273885f1e43dba0"],"431c2627ab600554864fa78f5e76abef81faa42d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"144ca7fb3ae89fdca80610b02273885f1e43dba0":["b94236357aaa22b76c10629851fe4e376e0cea82","21cc21dac328d94dbc79c104b8e626fca70b3f79"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["431c2627ab600554864fa78f5e76abef81faa42d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}