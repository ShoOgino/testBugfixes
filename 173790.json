{"path":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#smokeTestExplicitParams().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#smokeTestExplicitParams().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     */\n    @Test\n    public void smokeTestExplicitParams() {\n        final int shortWordLength = 64/*longs used in LongSetSlab*/;\n\n        {// Should work on an empty sequence, with no padding.\n            final BigEndianAscendingWordSerializer serializer =\n                new BigEndianAscendingWordSerializer(shortWordLength,\n                                                     0/*wordCount*/,\n                                                     0/*bytePadding, none*/);\n\n            assert(Arrays.equals(serializer.getBytes(), new byte[0]));\n        }\n        {// Should work on a byte-divisible sequence, with no padding.\n            final BigEndianAscendingWordSerializer serializer =\n                new BigEndianAscendingWordSerializer(shortWordLength,\n                                                     2/*wordCount*/,\n                                                     0/*bytePadding, none*/);\n\n            serializer.writeWord(0xBAAAAAAAAAAAAAACL);\n            serializer.writeWord(0x8FFFFFFFFFFFFFF1L);\n\n            // Bytes:\n            // ======\n            // 0xBA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAC\n            // 0x8F 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF1\n            //\n            // -70 -86 ...                        -84\n            // -113 -1 ...                        -15\n            final byte[] bytes = serializer.getBytes();\n            final byte[] expectedBytes = new byte[] { -70, -86, -86, -86, -86, -86, -86, -84,\n                                                      -113, -1, -1, -1, -1, -1, -1, -15 };\n            assertTrue(Arrays.equals(bytes, expectedBytes));\n        }\n        {// Should pad the array correctly.\n            final BigEndianAscendingWordSerializer serializer =\n                new BigEndianAscendingWordSerializer(shortWordLength,\n                                                     1/*wordCount*/,\n                                                     1/*bytePadding*/);\n\n            serializer.writeWord(1);\n            // 1 byte leading padding | value 1 | trailing padding\n            // 0000 0000 | 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0001\n            // 0x00 | 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01\n            final byte[] bytes = serializer.getBytes();\n            final byte[] expectedBytes = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 1 };\n            assertTrue(Arrays.equals(bytes, expectedBytes));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#smokeTestExplicitParams().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     */\n    @Test\n    public void smokeTestExplicitParams() {\n        final int shortWordLength = 64/*longs used in LongSetSlab*/;\n\n        {// Should work on an empty sequence, with no padding.\n            final BigEndianAscendingWordSerializer serializer =\n                new BigEndianAscendingWordSerializer(shortWordLength,\n                                                     0/*wordCount*/,\n                                                     0/*bytePadding, none*/);\n\n            assert(Arrays.equals(serializer.getBytes(), new byte[0]));\n        }\n        {// Should work on a byte-divisible sequence, with no padding.\n            final BigEndianAscendingWordSerializer serializer =\n                new BigEndianAscendingWordSerializer(shortWordLength,\n                                                     2/*wordCount*/,\n                                                     0/*bytePadding, none*/);\n\n            serializer.writeWord(0xBAAAAAAAAAAAAAACL);\n            serializer.writeWord(0x8FFFFFFFFFFFFFF1L);\n\n            // Bytes:\n            // ======\n            // 0xBA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAC\n            // 0x8F 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF1\n            //\n            // -70 -86 ...                        -84\n            // -113 -1 ...                        -15\n            final byte[] bytes = serializer.getBytes();\n            final byte[] expectedBytes = new byte[] { -70, -86, -86, -86, -86, -86, -86, -84,\n                                                      -113, -1, -1, -1, -1, -1, -1, -15 };\n            assertTrue(Arrays.equals(bytes, expectedBytes));\n        }\n        {// Should pad the array correctly.\n            final BigEndianAscendingWordSerializer serializer =\n                new BigEndianAscendingWordSerializer(shortWordLength,\n                                                     1/*wordCount*/,\n                                                     1/*bytePadding*/);\n\n            serializer.writeWord(1);\n            // 1 byte leading padding | value 1 | trailing padding\n            // 0000 0000 | 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0001\n            // 0x00 | 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01\n            final byte[] bytes = serializer.getBytes();\n            final byte[] expectedBytes = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 1 };\n            assertTrue(Arrays.equals(bytes, expectedBytes));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}