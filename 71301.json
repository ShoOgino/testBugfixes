{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","commits":[{"id":"e4da8c6a6b06eaeedc15d0b12bbabda4a73bcec1","date":1503496831,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Read an object from a stream (for objects that need a PlanetModel).\n   * @param planetModel is the planet model to use to deserialize the object.\n   * @param inputStream is the input stream.\n   * @return the deserialized object.\n   */\n  static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {\n    // Read the class name\n    final String className = readString(inputStream);\n    try {\n      // Look for the class\n      final Class<?> clazz = Class.forName(className);\n      // Look for the right constructor\n      final Constructor<?> c = clazz.getDeclaredConstructor(PlanetModel.class, InputStream.class);\n      // Invoke it\n      final Object object = c.newInstance(planetModel, inputStream);\n      // check whether caste will work\n      if (!(object instanceof SerializableObject)) {\n        throw new IOException(\"Object \"+className+\" does not implement SerializableObject\");\n      }\n      return (SerializableObject)object;\n    } catch (ClassNotFoundException e) {\n      throw new IOException(\"Can't find class \"+className+\" for deserialization: \"+e.getMessage(), e);\n    } catch (InstantiationException e) {\n      throw new IOException(\"Instantiation exception for class \"+className+\": \"+e.getMessage(), e);\n    } catch (IllegalAccessException e) {\n      throw new IOException(\"Illegal access creating class \"+className+\": \"+e.getMessage(), e);\n    } catch (NoSuchMethodException e) {\n      throw new IOException(\"No such method exception for class \"+className+\": \"+e.getMessage(), e);\n    } catch (InvocationTargetException e) {\n      throw new IOException(\"Exception instantiating class \"+className+\": \"+e.getMessage(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f722af2eac1e9065821e525111924b171ab724","date":1503596482,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","sourceNew":"  /** Read an object from a stream (for objects that need a PlanetModel).\n   * @param planetModel is the planet model to use to deserialize the object.\n   * @param inputStream is the input stream.\n   * @return the deserialized object.\n   */\n  static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {\n    // Read the class name\n    final String className = readString(inputStream);\n    try {\n      // Look for the class\n      final Class<?> clazz = Class.forName(className);\n      return readObject(planetModel, inputStream, clazz);\n    } catch (ClassNotFoundException e) {\n      throw new IOException(\"Can't find class \"+className+\" for deserialization: \"+e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /** Read an object from a stream (for objects that need a PlanetModel).\n   * @param planetModel is the planet model to use to deserialize the object.\n   * @param inputStream is the input stream.\n   * @return the deserialized object.\n   */\n  static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {\n    // Read the class name\n    final String className = readString(inputStream);\n    try {\n      // Look for the class\n      final Class<?> clazz = Class.forName(className);\n      // Look for the right constructor\n      final Constructor<?> c = clazz.getDeclaredConstructor(PlanetModel.class, InputStream.class);\n      // Invoke it\n      final Object object = c.newInstance(planetModel, inputStream);\n      // check whether caste will work\n      if (!(object instanceof SerializableObject)) {\n        throw new IOException(\"Object \"+className+\" does not implement SerializableObject\");\n      }\n      return (SerializableObject)object;\n    } catch (ClassNotFoundException e) {\n      throw new IOException(\"Can't find class \"+className+\" for deserialization: \"+e.getMessage(), e);\n    } catch (InstantiationException e) {\n      throw new IOException(\"Instantiation exception for class \"+className+\": \"+e.getMessage(), e);\n    } catch (IllegalAccessException e) {\n      throw new IOException(\"Illegal access creating class \"+className+\": \"+e.getMessage(), e);\n    } catch (NoSuchMethodException e) {\n      throw new IOException(\"No such method exception for class \"+className+\": \"+e.getMessage(), e);\n    } catch (InvocationTargetException e) {\n      throw new IOException(\"Exception instantiating class \"+className+\": \"+e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10e189d8bfedacdd349fb0522782430967a57c10","date":1503662313,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","sourceNew":"  /** Read an object from a stream (for objects that need a PlanetModel).\n   * @param planetModel is the planet model to use to deserialize the object.\n   * @param inputStream is the input stream.\n   * @return the deserialized object.\n   */\n  public static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {\n    // Read the class name\n    final String className = readString(inputStream);\n    try {\n      // Look for the class\n      final Class<?> clazz = Class.forName(className);\n      return readObject(planetModel, inputStream, clazz);\n    } catch (ClassNotFoundException e) {\n      throw new IOException(\"Can't find class \"+className+\" for deserialization: \"+e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /** Read an object from a stream (for objects that need a PlanetModel).\n   * @param planetModel is the planet model to use to deserialize the object.\n   * @param inputStream is the input stream.\n   * @return the deserialized object.\n   */\n  static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {\n    // Read the class name\n    final String className = readString(inputStream);\n    try {\n      // Look for the class\n      final Class<?> clazz = Class.forName(className);\n      return readObject(planetModel, inputStream, clazz);\n    } catch (ClassNotFoundException e) {\n      throw new IOException(\"Can't find class \"+className+\" for deserialization: \"+e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30ef78b2464af82222c21a3e4bf42476f483f567","date":1504104038,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","sourceNew":"  /** Read an object from a stream (for objects that need a PlanetModel).\n   * @param planetModel is the planet model to use to deserialize the object.\n   * @param inputStream is the input stream.\n   * @return the deserialized object.\n   */\n  public static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {\n    try {\n      // Read the class\n      final Class<?> clazz = readClass(inputStream);\n      return readObject(planetModel, inputStream, clazz);\n    } catch (ClassNotFoundException e) {\n      throw new IOException(\"Can't find class for deserialization: \"+e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /** Read an object from a stream (for objects that need a PlanetModel).\n   * @param planetModel is the planet model to use to deserialize the object.\n   * @param inputStream is the input stream.\n   * @return the deserialized object.\n   */\n  public static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {\n    // Read the class name\n    final String className = readString(inputStream);\n    try {\n      // Look for the class\n      final Class<?> clazz = Class.forName(className);\n      return readObject(planetModel, inputStream, clazz);\n    } catch (ClassNotFoundException e) {\n      throw new IOException(\"Can't find class \"+className+\" for deserialization: \"+e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/SerializableObject#readObject(PlanetModel,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Read an object from a stream (for objects that need a PlanetModel).\n   * @param planetModel is the planet model to use to deserialize the object.\n   * @param inputStream is the input stream.\n   * @return the deserialized object.\n   */\n  public static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {\n    try {\n      // Read the class\n      final Class<?> clazz = readClass(inputStream);\n      return readObject(planetModel, inputStream, clazz);\n    } catch (ClassNotFoundException e) {\n      throw new IOException(\"Can't find class for deserialization: \"+e.getMessage(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4da8c6a6b06eaeedc15d0b12bbabda4a73bcec1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10e189d8bfedacdd349fb0522782430967a57c10":["25f722af2eac1e9065821e525111924b171ab724"],"25f722af2eac1e9065821e525111924b171ab724":["e4da8c6a6b06eaeedc15d0b12bbabda4a73bcec1"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30ef78b2464af82222c21a3e4bf42476f483f567"],"30ef78b2464af82222c21a3e4bf42476f483f567":["10e189d8bfedacdd349fb0522782430967a57c10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30ef78b2464af82222c21a3e4bf42476f483f567"]},"commit2Childs":{"e4da8c6a6b06eaeedc15d0b12bbabda4a73bcec1":["25f722af2eac1e9065821e525111924b171ab724"],"10e189d8bfedacdd349fb0522782430967a57c10":["30ef78b2464af82222c21a3e4bf42476f483f567"],"25f722af2eac1e9065821e525111924b171ab724":["10e189d8bfedacdd349fb0522782430967a57c10"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4da8c6a6b06eaeedc15d0b12bbabda4a73bcec1","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"30ef78b2464af82222c21a3e4bf42476f483f567":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}