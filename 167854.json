{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","pathOld":"/dev/null","sourceNew":"  private void checkFieldSummary(SegmentInfo info, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#checkFieldSummary(SegmentInfo,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput in, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#checkFieldSummary(SegmentInfo,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput in, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2f948dd442d23baa6cbb28daf77c8db78b351329","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f3b037cd083286b2af89f96e768f85dcd8072d6"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}