{"path":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#getSplitValue(PathSlice,long,long,long).mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#getSplitValue(PathSlice,long,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private long getSplitValue(PathSlice source, long leftCount, long minValue, long maxValue) throws IOException {\n\n    // Read the split value:\n    SliceReader reader = source.writer.getReader(source.start + leftCount);\n    boolean success = false;\n    long splitValue;\n    try {\n      boolean result = reader.next();\n      assert result;\n      splitValue = reader.value();\n      assert splitValue >= minValue && splitValue <= maxValue: \"splitValue=\" + splitValue + \" minValue=\" + minValue + \" maxValue=\" + maxValue + \" reader=\" + reader;\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    return splitValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#getSplitValue(PathSlice,long,long,long).mjava","sourceNew":null,"sourceOld":"  private long getSplitValue(PathSlice source, long leftCount, long minValue, long maxValue) throws IOException {\n\n    // Read the split value:\n    SliceReader reader = source.writer.getReader(source.start + leftCount);\n    boolean success = false;\n    long splitValue;\n    try {\n      boolean result = reader.next();\n      assert result;\n      splitValue = reader.value();\n      assert splitValue >= minValue && splitValue <= maxValue: \"splitValue=\" + splitValue + \" minValue=\" + minValue + \" maxValue=\" + maxValue + \" reader=\" + reader;\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    return splitValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}