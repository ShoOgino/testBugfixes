{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#nextNorm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#nextNorm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#nextNorm().mjava","sourceNew":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.getDefault().decodeNormValue(\n    \t\t  Similarity.getDefault().encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        // System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    // System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms++;\n    lastNorm = (norm > 10 ? 0 : norm); // there's a limit to how many distinct\n                                        // values can be stored in a ingle byte\n    return norm;\n  }\n\n","sourceOld":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.getDefault().decodeNormValue(\n    \t\t  Similarity.getDefault().encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        // System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    // System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms++;\n    lastNorm = (norm > 10 ? 0 : norm); // there's a limit to how many distinct\n                                        // values can be stored in a ingle byte\n    return norm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#nextNorm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#nextNorm().mjava","sourceNew":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm(String fname) {\n    float norm = lastNorm + normDelta;\n    Similarity sim = new DefaultSimilarity().get(fname);\n    do {\n      float norm1 = sim.decodeNormValue(\n    \t\t  sim.encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        // System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    // System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms++;\n    lastNorm = (norm > 10 ? 0 : norm); // there's a limit to how many distinct\n                                        // values can be stored in a ingle byte\n    return norm;\n  }\n\n","sourceOld":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.getDefault().decodeNormValue(\n    \t\t  Similarity.getDefault().encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        // System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    // System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms++;\n    lastNorm = (norm > 10 ? 0 : norm); // there's a limit to how many distinct\n                                        // values can be stored in a ingle byte\n    return norm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#nextNorm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#nextNorm().mjava","sourceNew":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm(String fname) {\n    float norm = lastNorm + normDelta;\n    Similarity sim = new DefaultSimilarity().get(fname);\n    do {\n      float norm1 = sim.decodeNormValue(\n    \t\t  sim.encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        // System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    // System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms++;\n    lastNorm = (norm > 10 ? 0 : norm); // there's a limit to how many distinct\n                                        // values can be stored in a ingle byte\n    return norm;\n  }\n\n","sourceOld":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.getDefault().decodeNormValue(\n    \t\t  Similarity.getDefault().encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        // System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    // System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms++;\n    lastNorm = (norm > 10 ? 0 : norm); // there's a limit to how many distinct\n                                        // values can be stored in a ingle byte\n    return norm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#nextNorm().mjava","sourceNew":null,"sourceOld":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.getDefault().decodeNormValue(\n    \t\t  Similarity.getDefault().encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        // System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    // System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms++;\n    lastNorm = (norm > 10 ? 0 : norm); // there's a limit to how many distinct\n                                        // values can be stored in a ingle byte\n    return norm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["9454a6510e2db155fb01faa5c049b06ece95fab9","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"]},"commit2Childs":{"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}