{"path":"src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","commits":[{"id":"1ffe619bf5bbe00453bab7103c36fd38c8417f6c","date":1250619947,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0)),\n      IndexReader.open(makeEmptyIndex(0)),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0)),\n        IndexReader.open(makeEmptyIndex(0)),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0))\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7)),\n      IndexReader.open(makeEmptyIndex(0)),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5)),\n        IndexReader.open(makeEmptyIndex(0)),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0))\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0)),\n      IndexReader.open(makeEmptyIndex(0)),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0)),\n        IndexReader.open(makeEmptyIndex(0)),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0))\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7)),\n      IndexReader.open(makeEmptyIndex(0)),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5)),\n        IndexReader.open(makeEmptyIndex(0)),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0))\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0)),\n      IndexReader.open(makeEmptyIndex(0)),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0)),\n        IndexReader.open(makeEmptyIndex(0)),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0))\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7)),\n      IndexReader.open(makeEmptyIndex(0)),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5)),\n        IndexReader.open(makeEmptyIndex(0)),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0))\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ffe619bf5bbe00453bab7103c36fd38c8417f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"1ffe619bf5bbe00453bab7103c36fd38c8417f6c":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}