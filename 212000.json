{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#getNamesForCore(SolrCore).mjava","commits":[{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getNamesForCore(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   *\n   * @return a Collection of the names that a specific core object is mapped to, there are more than one.\n   */\n  @Experimental\n  List<String> getNamesForCore(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (getTransientCacheHandler() != null) {\n        lst.addAll(getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   * \n   * Note: this implies that the core is loaded\n   */\n  @Experimental\n  List<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (container.getTransientCacheHandler() != null) {\n        lst.addAll(container.getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getNamesForCore(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /** This method is currently experimental.\n   *\n   * @return a Collection of the names that a specific core object is mapped to, there are more than one.\n   */\n  @Experimental\n  List<String> getNamesForCore(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (getTransientCacheHandler() != null) {\n        lst.addAll(getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getNamesForCore(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /** This method is currently experimental.\n   *\n   * @return a Collection of the names that a specific core object is mapped to, there are more than one.\n   */\n  @Experimental\n  List<String> getNamesForCore(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (getTransientCacheHandler() != null) {\n        lst.addAll(getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520854ee68595e9da7b09828103cea7f22e357ee","date":1593748577,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getNamesForCore(SolrCore).mjava","sourceNew":null,"sourceOld":"  /** This method is currently experimental.\n   *\n   * @return a Collection of the names that a specific core object is mapped to, there are more than one.\n   */\n  @Experimental\n  List<String> getNamesForCore(SolrCore core) {\n    List<String> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n      if (getTransientCacheHandler() != null) {\n        lst.addAll(getTransientCacheHandler().getNamesForCore(core));\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"520854ee68595e9da7b09828103cea7f22e357ee":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["520854ee68595e9da7b09828103cea7f22e357ee"]},"commit2Childs":{"520854ee68595e9da7b09828103cea7f22e357ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["520854ee68595e9da7b09828103cea7f22e357ee","30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}