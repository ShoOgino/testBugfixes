{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","commits":[{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Logic to decide a flush after processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush to ZK is required, false otherwise\n   */\n  protected boolean maybeFlushAfter(ZkWriteCommand cmd) {\n    if (cmd.collection == null)\n      return false;\n    lastCollectionName = cmd.name;\n    lastStateFormat = cmd.collection.getStateFormat();\n    return System.nanoTime() - lastUpdatedTime > TimeUnit.NANOSECONDS.convert(Overseer.STATE_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e5f642aea415d0cbee35d1b3208b193a62d7f15","date":1439490669,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","sourceNew":"  /**\n   * Logic to decide a flush after processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush to ZK is required, false otherwise\n   */\n  protected boolean maybeFlushAfter(ZkWriteCommand cmd) {\n    if (cmd.collection == null)\n      return false;\n    lastCollectionName = cmd.name;\n    lastStateFormat = cmd.collection.getStateFormat();\n    return System.nanoTime() - lastUpdatedTime > MAX_FLUSH_INTERVAL;\n  }\n\n","sourceOld":"  /**\n   * Logic to decide a flush after processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush to ZK is required, false otherwise\n   */\n  protected boolean maybeFlushAfter(ZkWriteCommand cmd) {\n    if (cmd.collection == null)\n      return false;\n    lastCollectionName = cmd.name;\n    lastStateFormat = cmd.collection.getStateFormat();\n    return System.nanoTime() - lastUpdatedTime > TimeUnit.NANOSECONDS.convert(Overseer.STATE_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a805d491a97c1b3c7c5ec8285930649472d0fd10","date":1494235279,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","sourceNew":"  /**\n   * Logic to decide a flush after processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush to ZK is required, false otherwise\n   */\n  protected boolean maybeFlushAfter(ZkWriteCommand cmd) {\n    if (cmd.collection == null)\n      return false;\n    lastCollectionName = cmd.name;\n    lastStateFormat = cmd.collection.getStateFormat();\n    return System.nanoTime() - lastUpdatedTime > MAX_FLUSH_INTERVAL || updates.size() > Overseer.STATE_UPDATE_BATCH_SIZE;\n  }\n\n","sourceOld":"  /**\n   * Logic to decide a flush after processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush to ZK is required, false otherwise\n   */\n  protected boolean maybeFlushAfter(ZkWriteCommand cmd) {\n    if (cmd.collection == null)\n      return false;\n    lastCollectionName = cmd.name;\n    lastStateFormat = cmd.collection.getStateFormat();\n    return System.nanoTime() - lastUpdatedTime > MAX_FLUSH_INTERVAL;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","sourceNew":"  /**\n   * Logic to decide a flush after processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush to ZK is required, false otherwise\n   */\n  protected boolean maybeFlushAfter(ZkWriteCommand cmd) {\n    if (cmd.collection == null)\n      return false;\n    lastCollectionName = cmd.name;\n    lastStateFormat = cmd.collection.getStateFormat();\n    return System.nanoTime() - lastUpdatedTime > MAX_FLUSH_INTERVAL || updates.size() > Overseer.STATE_UPDATE_BATCH_SIZE;\n  }\n\n","sourceOld":"  /**\n   * Logic to decide a flush after processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush to ZK is required, false otherwise\n   */\n  protected boolean maybeFlushAfter(ZkWriteCommand cmd) {\n    if (cmd.collection == null)\n      return false;\n    lastCollectionName = cmd.name;\n    lastStateFormat = cmd.collection.getStateFormat();\n    return System.nanoTime() - lastUpdatedTime > MAX_FLUSH_INTERVAL;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ZkStateWriter#maybeFlushAfter(ZkWriteCommand).mjava","sourceNew":null,"sourceOld":"  /**\n   * Logic to decide a flush after processing a ZkWriteCommand\n   *\n   * @param cmd the ZkWriteCommand instance\n   * @return true if a flush to ZK is required, false otherwise\n   */\n  protected boolean maybeFlushAfter(ZkWriteCommand cmd) {\n    if (cmd.collection == null)\n      return false;\n    lastCollectionName = cmd.name;\n    lastStateFormat = cmd.collection.getStateFormat();\n    return System.nanoTime() - lastUpdatedTime > MAX_FLUSH_INTERVAL || updates.size() > Overseer.STATE_UPDATE_BATCH_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["1e5f642aea415d0cbee35d1b3208b193a62d7f15","a805d491a97c1b3c7c5ec8285930649472d0fd10"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["a805d491a97c1b3c7c5ec8285930649472d0fd10"],"a805d491a97c1b3c7c5ec8285930649472d0fd10":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a805d491a97c1b3c7c5ec8285930649472d0fd10":["e9017cf144952056066919f1ebc7897ff9bd71b1","4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["e9017cf144952056066919f1ebc7897ff9bd71b1","a805d491a97c1b3c7c5ec8285930649472d0fd10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}