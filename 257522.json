{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    Random random = newRandom();\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    Random random = newRandom();\n    final Directory dir1 = newDirectory(random);\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory(random);\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory(random);\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory(random);\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory(random);\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    Random random = newRandom();\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    Random random = newRandom();\n    final Directory dir1 = newDirectory(random);\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory(random);\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory(random);\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory(random);\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory(random);\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(IndexReader.open(dir3, false), IndexReader.open(dir4, false));\n        return new MultiReader(pr, mr, IndexReader.open(dir5, false));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(IndexReader.open(dir3, false), IndexReader.open(dir4, false));\n        return new MultiReader(pr, mr, IndexReader.open(dir5, false));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(IndexReader.open(dir3, false), IndexReader.open(dir4, false));\n        return new MultiReader(pr, mr, IndexReader.open(dir5, false));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":null,"sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(IndexReader.open(dir3, false), IndexReader.open(dir4, false));\n        return new MultiReader(pr, mr, IndexReader.open(dir5, false));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","date":1322958335,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        MultiReader mr1 = new MultiReader(IndexReader.open(dir1), IndexReader.open(dir2));\n        MultiReader mr2 = new MultiReader(IndexReader.open(dir3), IndexReader.open(dir4));\n        return new MultiReader(mr1, mr2, IndexReader.open(dir5));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        MultiReader mr1 = new MultiReader(IndexReader.open(dir1), IndexReader.open(dir2));\n        MultiReader mr2 = new MultiReader(IndexReader.open(dir3), IndexReader.open(dir4));\n        return new MultiReader(mr1, mr2, IndexReader.open(dir5));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(IndexReader.open(dir3, false), IndexReader.open(dir4, false));\n        return new MultiReader(pr, mr, IndexReader.open(dir5, false));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        MultiReader mr1 = new MultiReader(IndexReader.open(dir1), IndexReader.open(dir2));\n        MultiReader mr2 = new MultiReader(IndexReader.open(dir3), IndexReader.open(dir4));\n        return new MultiReader(mr1, mr2, IndexReader.open(dir5));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(IndexReader.open(dir3, false), IndexReader.open(dir4, false));\n        return new MultiReader(pr, mr, IndexReader.open(dir5, false));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":null,"sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        MultiReader mr1 = new MultiReader(IndexReader.open(dir1), IndexReader.open(dir2));\n        MultiReader mr2 = new MultiReader(IndexReader.open(dir3), IndexReader.open(dir4));\n        return new MultiReader(mr1, mr2, IndexReader.open(dir5));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":null,"sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = newDirectory();\n    createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    createIndex(random, dir2, true);\n    final Directory dir3 = newDirectory();\n    createIndex(random, dir3, false);\n    final Directory dir4 = newDirectory();\n    createIndex(random, dir4, true);\n    final Directory dir5 = newDirectory();\n    createIndex(random, dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        MultiReader mr1 = new MultiReader(IndexReader.open(dir1), IndexReader.open(dir2));\n        MultiReader mr2 = new MultiReader(IndexReader.open(dir3), IndexReader.open(dir4));\n        return new MultiReader(mr1, mr2, IndexReader.open(dir5));\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["4e8cc373c801e54cec75daf9f52792cb4b17f536","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["4122a26e1fd0457a340616673a3d3aada370f713"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["4e8cc373c801e54cec75daf9f52792cb4b17f536","2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4122a26e1fd0457a340616673a3d3aada370f713":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"4122a26e1fd0457a340616673a3d3aada370f713":["2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}