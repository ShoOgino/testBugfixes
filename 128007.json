{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","commits":[{"id":"17ccf2dc08bf23a048cb9c7326eb957586a86cd5","date":1465078564,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -90 and increase by LATITUDE_DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        // all double values between (min .. max] should encodeCeil to the next integer.\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cd1db895ecdfc51fbe34b1d3e280f61587992d83","4f996583718ec3ab5988abc9b3318d4c1dfb040d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd1db895ecdfc51fbe34b1d3e280f61587992d83","date":1465300613,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","sourceNew":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -90 and increase by LATITUDE_DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -90 and increase by LATITUDE_DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        // all double values between (min .. max] should encodeCeil to the next integer.\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","bugFix":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f996583718ec3ab5988abc9b3318d4c1dfb040d","date":1465568281,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","sourceNew":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -planetMax and increase by Geo3DUtil.DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      if (encoded < Geo3DUtil.MIN_ENCODED_VALUE) {\n        continue;\n      }\n      if (encoded > Geo3DUtil.MAX_ENCODED_VALUE) {\n        continue;\n      }\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -90 and increase by LATITUDE_DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","bugFix":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"bugIntro":["689b5e5c42bc5f2285fe820cd123d03e85d9df8c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -planetMax and increase by Geo3DUtil.DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      if (encoded < Geo3DUtil.MIN_ENCODED_VALUE) {\n        continue;\n      }\n      if (encoded > Geo3DUtil.MAX_ENCODED_VALUE) {\n        continue;\n      }\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"689b5e5c42bc5f2285fe820cd123d03e85d9df8c","date":1541139553,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","sourceNew":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -planetMax and increase by Geo3DUtil.DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      if (encoded <= Geo3DUtil.MIN_ENCODED_VALUE) {\n        continue;\n      }\n      if (encoded >= Geo3DUtil.MAX_ENCODED_VALUE) {\n        continue;\n      }\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -planetMax and increase by Geo3DUtil.DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      if (encoded < Geo3DUtil.MIN_ENCODED_VALUE) {\n        continue;\n      }\n      if (encoded > Geo3DUtil.MAX_ENCODED_VALUE) {\n        continue;\n      }\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","bugFix":["4f996583718ec3ab5988abc9b3318d4c1dfb040d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testQuantization().mjava","sourceNew":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -planetMax and increase by Geo3DUtil.DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    PlanetModel planetModel = randomPlanetModel();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      if (encoded <= planetModel.MIN_ENCODED_VALUE) {\n        continue;\n      }\n      if (encoded >= planetModel.MAX_ENCODED_VALUE) {\n        continue;\n      }\n      double min = encoded * planetModel.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded, planetModel);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, planetModel.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        double max = min + planetModel.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1, planetModel), 0.0D);\n        assertEquals(encoded+1, planetModel.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, planetModel.encodeValue(minEdge));\n        assertEquals(encoded, planetModel.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   planetModel.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * step through some integers, ensuring they decode to their expected double values.\n   * double values start at -planetMax and increase by Geo3DUtil.DECODE for each integer.\n   * check edge cases within the double range and random doubles within the range too.\n   */\n  public void testQuantization() throws Exception {\n    Random random = random();\n    for (int i = 0; i < 10000; i++) {\n      int encoded = random.nextInt();\n      if (encoded <= Geo3DUtil.MIN_ENCODED_VALUE) {\n        continue;\n      }\n      if (encoded >= Geo3DUtil.MAX_ENCODED_VALUE) {\n        continue;\n      }\n      double min = encoded * Geo3DUtil.DECODE;\n      double decoded = Geo3DUtil.decodeValueFloor(encoded);\n      // should exactly equal expected value\n      assertEquals(min, decoded, 0.0D);\n      // should round-trip\n      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));\n      // test within the range\n      if (encoded != Integer.MAX_VALUE) {\n        // this is the next representable value\n        // all double values between [min .. max) should encode to the current integer\n        double max = min + Geo3DUtil.DECODE;\n        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);\n        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));\n\n        // first and last doubles in range that will be quantized\n        double minEdge = Math.nextUp(min);\n        double maxEdge = Math.nextDown(max);\n        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));\n        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));\n\n        // check random values within the double range\n        long minBits = NumericUtils.doubleToSortableLong(minEdge);\n        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);\n        for (int j = 0; j < 100; j++) {\n          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));\n          // round down\n          assertEquals(encoded,   Geo3DUtil.encodeValue(value));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17ccf2dc08bf23a048cb9c7326eb957586a86cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd1db895ecdfc51fbe34b1d3e280f61587992d83":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"689b5e5c42bc5f2285fe820cd123d03e85d9df8c":["4f996583718ec3ab5988abc9b3318d4c1dfb040d"],"4f996583718ec3ab5988abc9b3318d4c1dfb040d":["cd1db895ecdfc51fbe34b1d3e280f61587992d83"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["689b5e5c42bc5f2285fe820cd123d03e85d9df8c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f996583718ec3ab5988abc9b3318d4c1dfb040d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"17ccf2dc08bf23a048cb9c7326eb957586a86cd5":["cd1db895ecdfc51fbe34b1d3e280f61587992d83"],"cd1db895ecdfc51fbe34b1d3e280f61587992d83":["4f996583718ec3ab5988abc9b3318d4c1dfb040d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"689b5e5c42bc5f2285fe820cd123d03e85d9df8c":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"4f996583718ec3ab5988abc9b3318d4c1dfb040d":["689b5e5c42bc5f2285fe820cd123d03e85d9df8c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}