{"path":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new HashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    for( Map.Entry<String, Integer> entry : fq ) {\n      _facetQuery.put( entry.getKey(), entry.getValue() );\n    }\n    \n    // Parse the facet info into fields\n    NamedList<NamedList<Integer>> ff = (NamedList<NamedList<Integer>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      int minsize = _results.getNumFound();\n      for( Map.Entry<String,NamedList<Integer>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Integer> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["40e4729093c74b3fb3d80df1f26015a85fbe4cc9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17a4a2e432254ad9a50a564dc8ac204f6a50fffb","date":1199891649,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new HashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    for( Map.Entry<String, Integer> entry : fq ) {\n      _facetQuery.put( entry.getKey(), entry.getValue() );\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new HashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    for( Map.Entry<String, Integer> entry : fq ) {\n      _facetQuery.put( entry.getKey(), entry.getValue() );\n    }\n    \n    // Parse the facet info into fields\n    NamedList<NamedList<Integer>> ff = (NamedList<NamedList<Integer>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      int minsize = _results.getNumFound();\n      for( Map.Entry<String,NamedList<Integer>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Integer> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58b7d514802707ef41cd8af2cb73c6c0e1aa948d","date":1205845947,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new HashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    for( Map.Entry<String, Integer> entry : fq ) {\n      _facetQuery.put( entry.getKey(), entry.getValue() );\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new HashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    for( Map.Entry<String, Integer> entry : fq ) {\n      _facetQuery.put( entry.getKey(), entry.getValue() );\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new HashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    for( Map.Entry<String, Integer> entry : fq ) {\n      _facetQuery.put( entry.getKey(), entry.getValue() );\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new HashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    for( Map.Entry<String, Integer> entry : fq ) {\n      _facetQuery.put( entry.getKey(), entry.getValue() );\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["58b7d514802707ef41cd8af2cb73c6c0e1aa948d"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"17a4a2e432254ad9a50a564dc8ac204f6a50fffb":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58b7d514802707ef41cd8af2cb73c6c0e1aa948d":["17a4a2e432254ad9a50a564dc8ac204f6a50fffb"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["17a4a2e432254ad9a50a564dc8ac204f6a50fffb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17a4a2e432254ad9a50a564dc8ac204f6a50fffb":["58b7d514802707ef41cd8af2cb73c6c0e1aa948d"],"58b7d514802707ef41cd8af2cb73c6c0e1aa948d":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}