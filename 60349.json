{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(List[String]).mjava","commits":[{"id":"1257989f08e6750eeab73e5e9f7847fc48b04a1a","date":1531102463,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private Replica corruptLeader(List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(COLLECTION);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory().get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(dir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : dir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          dir.corruptFiles(Collections.singleton(file));\n        }\n      }\n    } catch (Exception e) {\n      // Expected\n    }\n    return oldLeader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private Replica corruptLeader(List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(COLLECTION);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory().get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(dir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : dir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          dir.corruptFiles(Collections.singleton(file));\n        }\n      }\n    } catch (Exception e) {\n      // Expected\n    }\n    return oldLeader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc37eb63edc0a1db0d74e5f531a60b987f98f327","date":1531827749,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(List[String]).mjava","sourceNew":"  private Replica corruptLeader(String collection, List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(collection);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    log.info(\"Corrupt leader : {}\", oldLeader);\n\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper mockDir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory()\n        .get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(mockDir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : mockDir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          try {\n            mockDir.corruptFiles(Collections.singleton(file));\n          } catch (RuntimeException | FileNotFoundException e) {\n            // merges can lead to this exception\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.info(\"Corrupt leader ex: \",e);\n      // Expected\n    }\n    return oldLeader;\n  }\n\n","sourceOld":"  private Replica corruptLeader(List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(COLLECTION);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory().get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(dir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : dir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          dir.corruptFiles(Collections.singleton(file));\n        }\n      }\n    } catch (Exception e) {\n      // Expected\n    }\n    return oldLeader;\n  }\n\n","bugFix":null,"bugIntro":["798e70ec7d95a7e4ca60a64e38e97c095e185563"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1257989f08e6750eeab73e5e9f7847fc48b04a1a"]},"commit2Childs":{"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["fc37eb63edc0a1db0d74e5f531a60b987f98f327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1257989f08e6750eeab73e5e9f7847fc48b04a1a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}