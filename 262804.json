{"path":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldContents_1().mjava","commits":[{"id":"732b0bb4cb809b90ddaf1abce658bbceb75eb032","date":1180638816,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldContents_1().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldContents_1() throws IOException {\n    try {\n      indexReader = IndexReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"Jerry\"));\n      assertTrue(\"Second element doesn't exist.\", it.hasNext());\n      assertTrue(\"Second element isn't correct\", it.next().equals(\"Tom\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      int counter = 2;\n      while (it.hasNext()) {\n        it.next();\n        counter--;\n      }\n\n      assertTrue(\"Number of words incorrect\", counter == 0);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldContents_1().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldContents_1().mjava","sourceNew":"  public void testFieldContents_1() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"Jerry\"));\n      assertTrue(\"Second element doesn't exist.\", it.hasNext());\n      assertTrue(\"Second element isn't correct\", it.next().equals(\"Tom\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      int counter = 2;\n      while (it.hasNext()) {\n        it.next();\n        counter--;\n      }\n\n      assertTrue(\"Number of words incorrect\", counter == 0);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldContents_1() throws IOException {\n    try {\n      indexReader = IndexReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"Jerry\"));\n      assertTrue(\"Second element doesn't exist.\", it.hasNext());\n      assertTrue(\"Second element isn't correct\", it.next().equals(\"Tom\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      int counter = 2;\n      while (it.hasNext()) {\n        it.next();\n        counter--;\n      }\n\n      assertTrue(\"Number of words incorrect\", counter == 0);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldContents_1().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldContents_1().mjava","sourceNew":"  public void testFieldContents_1() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"Jerry\"));\n      assertTrue(\"Second element doesn't exist.\", it.hasNext());\n      assertTrue(\"Second element isn't correct\", it.next().equals(\"Tom\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      int counter = 2;\n      while (it.hasNext()) {\n        it.next();\n        counter--;\n      }\n\n      assertTrue(\"Number of words incorrect\", counter == 0);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldContents_1() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"Jerry\"));\n      assertTrue(\"Second element doesn't exist.\", it.hasNext());\n      assertTrue(\"Second element isn't correct\", it.next().equals(\"Tom\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n\n      ld = new LuceneDictionary(indexReader, \"contents\");\n      it = ld.getWordsIterator();\n\n      int counter = 2;\n      while (it.hasNext()) {\n        it.next();\n        counter--;\n      }\n\n      assertTrue(\"Number of words incorrect\", counter == 0);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4256bc1b3c94786287ccdfc751230374521843cf":["732b0bb4cb809b90ddaf1abce658bbceb75eb032"],"732b0bb4cb809b90ddaf1abce658bbceb75eb032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4256bc1b3c94786287ccdfc751230374521843cf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["732b0bb4cb809b90ddaf1abce658bbceb75eb032"],"4256bc1b3c94786287ccdfc751230374521843cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"732b0bb4cb809b90ddaf1abce658bbceb75eb032":["4256bc1b3c94786287ccdfc751230374521843cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}