{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, false);\n        addressInstances.put(field.number, addrInstance);\n      }\n      addresses = addrInstance;\n    }\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[length];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(bytes.addressesOffset);\n\n    final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, true);\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : + addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[length];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[length];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, false);\n        addressInstances.put(field.number, addrInstance);\n      }\n      addresses = addrInstance;\n    }\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[length];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[length];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(bytes.addressesOffset);\n\n    final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, true);\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : + addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[length];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[length];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n\n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[length];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n\n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n\n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n\n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n\n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + (id == 0 ? 0 : addresses.get(id-1));\n        long endAddress = bytes.offset + addresses.get(id);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}