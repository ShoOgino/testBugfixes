{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bde90f0aeea55f3df9af71ba1c47aac717b4c52a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde90f0aeea55f3df9af71ba1c47aac717b4c52a","date":1504801315,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","bugFix":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f354f2175f861ee625bb3c9572d53b77cd8545","date":1508405819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","sourceOld":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      boolean simple = false;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        simple = true;\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, simple, \":\", (k, v) -> result.add(k, v));\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleKeyRequest(String[],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleKeyRequest(String[] keys, BiConsumer<String, Object> consumer) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    consumer.accept(\"metrics\", result);\n    if (errors.size() > 0) {\n      consumer.accept(\"errors\", errors);\n    }\n  }\n\n","sourceOld":"  private void handleKeyRequest(String[] keys, SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n    SimpleOrderedMap errors = new SimpleOrderedMap();\n    for (String key : keys) {\n      if (key == null || key.isEmpty()) {\n        continue;\n      }\n      String[] parts = KEY_REGEX.split(key);\n      if (parts.length < 2 || parts.length > 3) {\n        errors.add(key, \"at least two and at most three colon-separated parts must be provided\");\n        continue;\n      }\n      final String registryName = unescape(parts[0]);\n      final String metricName = unescape(parts[1]);\n      final String propertyName = parts.length > 2 ? unescape(parts[2]) : null;\n      if (!metricManager.hasRegistry(registryName)) {\n        errors.add(key, \"registry '\" + registryName + \"' not found\");\n        continue;\n      }\n      MetricRegistry registry = metricManager.registry(registryName);\n      Metric m = registry.getMetrics().get(metricName);\n      if (m == null) {\n        errors.add(key, \"metric '\" + metricName + \"' not found\");\n        continue;\n      }\n      MetricUtils.PropertyFilter propertyFilter = MetricUtils.PropertyFilter.ALL;\n      if (propertyName != null) {\n        propertyFilter = (name) -> name.equals(propertyName);\n        // use escaped versions\n        key = parts[0] + \":\" + parts[1];\n      }\n      MetricUtils.convertMetric(key, m, propertyFilter, false, true, true, false, \":\", (k, v) -> {\n        if ((v instanceof Map) && propertyName != null) {\n          ((Map)v).forEach((k1, v1) -> result.add(k + \":\" + k1, v1));\n        } else {\n          result.add(k, v);\n        }\n      });\n    }\n    rsp.getValues().add(\"metrics\", result);\n    if (errors.size() > 0) {\n      rsp.getValues().add(\"errors\", errors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["68541eebed1904d72a1ab713fc1afcec49e3f466","bde90f0aeea55f3df9af71ba1c47aac717b4c52a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"bde90f0aeea55f3df9af71ba1c47aac717b4c52a":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"560c18d71dad43d675158783c3840f8c80d6d39c":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"]},"commit2Childs":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","bde90f0aeea55f3df9af71ba1c47aac717b4c52a"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68541eebed1904d72a1ab713fc1afcec49e3f466","e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"bde90f0aeea55f3df9af71ba1c47aac717b4c52a":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}