{"path":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","commits":[{"id":"c01107497284e8a65a9327219966150d26367e9c","date":1182448404,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) \n  { \n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    for( SchemaField f : schema.getFields().values() ) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n    }\n\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add( \"tokenized\", ft.isTokenized() );\n      field.add( \"analyzer\", ft.getAnalyzer()+\"\" );\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34a68b3240cf63c0ebea7a73b217a999a8f585c6","date":1190911422,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","sourceNew":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) \n  { \n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    for( SchemaField f : schema.getFields().values() ) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n    }\n\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add( \"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add( \"analyzer\", ft.getAnalyzer().getClass().getName());\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","sourceOld":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) \n  { \n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    for( SchemaField f : schema.getFields().values() ) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n    }\n\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add( \"tokenized\", ft.isTokenized() );\n      field.add( \"analyzer\", ft.getAnalyzer()+\"\" );\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ccc340b7a2b87106292567296456619f930456e","date":1203480910,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","sourceNew":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) \n  { \n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n    }\n\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add( \"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add( \"analyzer\", ft.getAnalyzer().getClass().getName());\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"uniqueKeyField\", uniqueField.getName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","sourceOld":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) \n  { \n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    for( SchemaField f : schema.getFields().values() ) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n    }\n\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add( \"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add( \"analyzer\", ft.getAnalyzer().getClass().getName());\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":["e185d42e991c9953a59958500aa360a71e343278"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d2039f9b69cef7b394370ee828e100bc25233e1","date":1205614161,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","sourceNew":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getDefaultSearchFieldName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","sourceOld":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) \n  { \n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      FieldType ft = f.getType();\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"type\", ft.getTypeName() );\n      field.add( \"flags\", getFieldFlags(f) );\n      if( f.isRequired() ) {\n        field.add( \"required\", f.isRequired() );\n      }\n      if( f.getDefaultValue() != null ) {\n        field.add( \"default\", f.getDefaultValue() );\n      }\n      if (f == uniqueField){\n        field.add(\"uniqueKey\", true);\n      }\n      fields.add( f.getName(), field );\n      \n      List<String> v = typeusemap.get( ft.getTypeName() );\n      if( v == null ) {\n        v = new ArrayList<String>();\n      }\n      v.add( f.getName() );\n      typeusemap.put( ft.getTypeName(), v );\n    }\n\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add( \"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add( \"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add( \"analyzer\", ft.getAnalyzer().getClass().getName());\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"uniqueKeyField\", uniqueField.getName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","sourceNew":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getSolrQueryParser(null).getField());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","sourceOld":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getDefaultSearchFieldName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbca8d36fa6e78e5f32059dc9c80da83e66470de","date":1249752043,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","sourceNew":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getDefaultSearchFieldName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","sourceOld":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getSolrQueryParser(null).getField());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","bugFix":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e185d42e991c9953a59958500aa360a71e343278","date":1250792616,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","sourceNew":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", \n              null == uniqueField ? null : uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getDefaultSearchFieldName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","sourceOld":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getDefaultSearchFieldName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","bugFix":["0ccc340b7a2b87106292567296456619f930456e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getSchemaInfo(IndexSchema).mjava","sourceNew":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", \n              null == uniqueField ? null : uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getDefaultSearchFieldName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","sourceOld":"  /**\n   * Return info from the index\n   */\n  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) {\n    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();\n    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for( SchemaField f : schema.getFields().values() ) {\n      populateFieldInfo(schema, typeusemap, fields, uniqueField, f);\n    }\n    \n    SimpleOrderedMap<Object> dynamicFields = new SimpleOrderedMap<Object>();\n    for (SchemaField f : schema.getDynamicFieldPrototypes()) {\n    \tpopulateFieldInfo(schema, typeusemap, dynamicFields, uniqueField, f);\n    }\n    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();\n    for( FieldType ft : schema.getFieldTypes().values() ) {\n      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n      field.add(\"fields\", typeusemap.get( ft.getTypeName() ) );\n      field.add(\"tokenized\", ft.isTokenized() );\n      field.add(\"className\", ft.getClass().getName());\n      field.add(\"indexAnalyzer\", getAnalyzerInfo(ft.getAnalyzer()));\n      field.add(\"queryAnalyzer\", getAnalyzerInfo(ft.getQueryAnalyzer()));\n      types.add( ft.getTypeName(), field );\n    }\n\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    finfo.add(\"fields\", fields);\n    finfo.add(\"dynamicFields\", dynamicFields);\n    finfo.add(\"uniqueKeyField\", \n              null == uniqueField ? null : uniqueField.getName());\n    finfo.add(\"defaultSearchField\", schema.getDefaultSearchFieldName());\n    finfo.add(\"types\", types);\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e185d42e991c9953a59958500aa360a71e343278":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["0d2039f9b69cef7b394370ee828e100bc25233e1"],"0d2039f9b69cef7b394370ee828e100bc25233e1":["0ccc340b7a2b87106292567296456619f930456e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34a68b3240cf63c0ebea7a73b217a999a8f585c6":["c01107497284e8a65a9327219966150d26367e9c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e185d42e991c9953a59958500aa360a71e343278"],"0ccc340b7a2b87106292567296456619f930456e":["34a68b3240cf63c0ebea7a73b217a999a8f585c6"],"c01107497284e8a65a9327219966150d26367e9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e185d42e991c9953a59958500aa360a71e343278":["ad94625fb8d088209f46650c8097196fec67f00c"],"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["e185d42e991c9953a59958500aa360a71e343278"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"0d2039f9b69cef7b394370ee828e100bc25233e1":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"34a68b3240cf63c0ebea7a73b217a999a8f585c6":["0ccc340b7a2b87106292567296456619f930456e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c01107497284e8a65a9327219966150d26367e9c"],"0ccc340b7a2b87106292567296456619f930456e":["0d2039f9b69cef7b394370ee828e100bc25233e1"],"c01107497284e8a65a9327219966150d26367e9c":["34a68b3240cf63c0ebea7a73b217a999a8f585c6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}