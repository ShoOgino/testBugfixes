{"path":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629","date":1297191928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71","date":1309295333,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71":["24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["24efe21303a1a2ee92df8b82e9d07ec6ad8b6629","6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["24efe21303a1a2ee92df8b82e9d07ec6ad8b6629","6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71":["7b91922b55d15444d554721b352861d028eb8278","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"24efe21303a1a2ee92df8b82e9d07ec6ad8b6629":["f1bdbf92da222965b46c0a942c3857ba56e5c638","6e93e8251fcc355b1ed7d79aaff249c2ae40ba71","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","24efe21303a1a2ee92df8b82e9d07ec6ad8b6629"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}