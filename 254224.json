{"path":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#doOptions().mjava","commits":[{"id":"fa4d13fa31a8688899168167cbb4449e399b686f","date":1533611099,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#doOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  private void doOptions() throws Exception {\n    assertJQ(req(\"json.nl\", \"map\", \"qt\", tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n        , \"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n\n    assertJQ(req(\"json.nl\", \"map\", \"qt\", tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        , \"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n\n    // test each combination at random\n    final List<String> list = new ArrayList<>();\n    list.addAll(Arrays.asList(\"json.nl\", \"map\", \"qt\", tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][]{{TermVectorParams.TF, \"'tf':1\"},\n        {TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\"},\n        {TermVectorParams.POSITIONS, \"'positions':{'position':5}\"},\n        {TermVectorParams.DF, \"'df':2\"},\n        {TermVectorParams.TF_IDF, \"'tf-idf':0.5\"}};\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n\n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n\n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':5}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa4d13fa31a8688899168167cbb4449e399b686f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4d13fa31a8688899168167cbb4449e399b686f"]},"commit2Childs":{"fa4d13fa31a8688899168167cbb4449e399b686f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa4d13fa31a8688899168167cbb4449e399b686f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}