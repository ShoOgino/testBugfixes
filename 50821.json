{"path":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","commits":[{"id":"7eb27e66c7f4fe0888faf8a05111a36969584bf4","date":1435647050,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      final boolean needsScores = false; // scores are not needed, only matching docs\n      final Weight preserveWeight = searcher.createNormalizedWeight(preserveFilter, needsScores);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      final Weight preserveWeight = searcher.createNormalizedWeight(preserveFilter, ScoreMode.COMPLETE_NO_SCORES);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      final boolean needsScores = false; // scores are not needed, only matching docs\n      final Weight preserveWeight = searcher.createNormalizedWeight(preserveFilter, needsScores);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      final Weight preserveWeight = searcher.createNormalizedWeight(preserveFilter, ScoreMode.COMPLETE_NO_SCORES);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      final boolean needsScores = false; // scores are not needed, only matching docs\n      final Weight preserveWeight = searcher.createNormalizedWeight(preserveFilter, needsScores);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      preserveFilter = searcher.rewrite(preserveFilter);\n      final Weight preserveWeight = searcher.createWeight(preserveFilter, ScoreMode.COMPLETE_NO_SCORES, 1);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      final Weight preserveWeight = searcher.createNormalizedWeight(preserveFilter, ScoreMode.COMPLETE_NO_SCORES);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Query,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      preserveFilter = searcher.rewrite(preserveFilter);\n      final Weight preserveWeight = searcher.createWeight(preserveFilter, ScoreMode.COMPLETE_NO_SCORES, 1);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Query preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final IndexSearcher searcher = new IndexSearcher(reader);\n      searcher.setQueryCache(null);\n      final Weight preserveWeight = searcher.createNormalizedWeight(preserveFilter, ScoreMode.COMPLETE_NO_SCORES);\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveWeight, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7eb27e66c7f4fe0888faf8a05111a36969584bf4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7eb27e66c7f4fe0888faf8a05111a36969584bf4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7eb27e66c7f4fe0888faf8a05111a36969584bf4","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"7eb27e66c7f4fe0888faf8a05111a36969584bf4":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7eb27e66c7f4fe0888faf8a05111a36969584bf4"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}