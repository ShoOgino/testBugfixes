{"path":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * <p>Only implemented by derived queries, with no {@link\n   * #createWeight(Searcher)} implementatation..\n   */\n  public Query combine(Query[] queries) {\n    throw new UnsupportedOperationException();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de57b027449f50f3aa1b190631af3e7ed57f70df","date":1078235290,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * <p>Only implemented by derived queries, with no\n   * {@link #createWeight(Searcher)} implementatation.\n   */\n  public Query combine(Query[] queries) {\n    throw new UnsupportedOperationException();\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * <p>Only implemented by derived queries, with no {@link\n   * #createWeight(Searcher)} implementatation..\n   */\n  public Query combine(Query[] queries) {\n    throw new UnsupportedOperationException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * <p>Only implemented by derived queries, with no\n   * {@link #createWeight(Searcher)} implementatation.\n   */\n  public Query combine(Query[] queries) {\n        for (int i = 0; i < queries.length; i++) {\n            if (!this.equals(queries[i])) {\n                throw new IllegalArgumentException();\n            }\n        }\n        return this;\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * <p>Only implemented by derived queries, with no\n   * {@link #createWeight(Searcher)} implementatation.\n   */\n  public Query combine(Query[] queries) {\n    throw new UnsupportedOperationException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a6243c56b7e233e89756e038740d81e901959f4","date":1119205522,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * <p>Only implemented by derived queries, with no\n   * {@link #createWeight(Searcher)} implementation.\n   */\n  public Query combine(Query[] queries) {\n        for (int i = 0; i < queries.length; i++) {\n            if (!this.equals(queries[i])) {\n                throw new IllegalArgumentException();\n            }\n        }\n        return this;\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * <p>Only implemented by derived queries, with no\n   * {@link #createWeight(Searcher)} implementatation.\n   */\n  public Query combine(Query[] queries) {\n        for (int i = 0; i < queries.length; i++) {\n            if (!this.equals(queries[i])) {\n                throw new IllegalArgumentException();\n            }\n        }\n        return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19de316fa1c8ef27502785c72cf83f060af72a1e","date":1119559427,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite() and RangeQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet uniques = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return (Query)uniques.iterator().next();\n    }\n    Iterator it = uniques.iterator();\n    BooleanQuery result = new BooleanQuery(true);\n    while (it.hasNext())\n      result.add((Query) it.next(), BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * <p>Only implemented by derived queries, with no\n   * {@link #createWeight(Searcher)} implementation.\n   */\n  public Query combine(Query[] queries) {\n        for (int i = 0; i < queries.length; i++) {\n            if (!this.equals(queries[i])) {\n                throw new IllegalArgumentException();\n            }\n        }\n        return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet uniques = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return (Query)uniques.iterator().next();\n    }\n    Iterator it = uniques.iterator();\n    BooleanQuery result = new BooleanQuery(true);\n    while (it.hasNext())\n      result.add((Query) it.next(), BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite() and RangeQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet uniques = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return (Query)uniques.iterator().next();\n    }\n    Iterator it = uniques.iterator();\n    BooleanQuery result = new BooleanQuery(true);\n    while (it.hasNext())\n      result.add((Query) it.next(), BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return (Query)uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet uniques = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return (Query)uniques.iterator().next();\n    }\n    Iterator it = uniques.iterator();\n    BooleanQuery result = new BooleanQuery(true);\n    while (it.hasNext())\n      result.add((Query) it.next(), BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return (Query)uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a6243c56b7e233e89756e038740d81e901959f4":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["19de316fa1c8ef27502785c72cf83f060af72a1e"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["de57b027449f50f3aa1b190631af3e7ed57f70df"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"19de316fa1c8ef27502785c72cf83f060af72a1e":["6a6243c56b7e233e89756e038740d81e901959f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["ef82ff03e4016c705811b2658e81471a645c0e49"],"de57b027449f50f3aa1b190631af3e7ed57f70df":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["20645c714ca2a7b7707c2707d58ee9fa384c7362"]},"commit2Childs":{"6a6243c56b7e233e89756e038740d81e901959f4":["19de316fa1c8ef27502785c72cf83f060af72a1e"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["ef82ff03e4016c705811b2658e81471a645c0e49"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["6a6243c56b7e233e89756e038740d81e901959f4"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["de57b027449f50f3aa1b190631af3e7ed57f70df"],"19de316fa1c8ef27502785c72cf83f060af72a1e":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"ef82ff03e4016c705811b2658e81471a645c0e49":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"de57b027449f50f3aa1b190631af3e7ed57f70df":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}