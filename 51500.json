{"path":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream,long).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream,long).mjava","pathOld":"/dev/null","sourceNew":"    private void assertSameStreams(String msg, \n                                   InputStream expected,\n                                   InputStream actual,\n                                   long seekTo)\n    throws IOException\n    {\n        if (seekTo < 0) {\n            try {\n                actual.seek(seekTo);\n                fail(msg + \", \" + seekTo + \", negative seek\");\n            } catch (IOException e) { \n                /* success */ \n                //System.out.println(\"SUCCESS: Negative seek: \" + e);\n            }\n            \n        } else if (seekTo > 0 && seekTo >= expected.length()) {\n            try {\n                actual.seek(seekTo);\n                fail(msg + \", \" + seekTo + \", seek past EOF\");\n            } catch (IOException e) { \n                /* success */ \n                //System.out.println(\"SUCCESS: Seek past EOF: \" + e);\n            }\n            \n        } else {\n            expected.seek(seekTo);\n            actual.seek(seekTo);\n            assertSameStreams(msg + \", seek(mid)\", expected, actual);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream,long).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream,long).mjava","sourceNew":"    private void assertSameStreams(String msg,\n                                   InputStream expected,\n                                   InputStream actual,\n                                   long seekTo)\n    throws IOException\n    {\n        if (seekTo < 0) {\n            try {\n                actual.seek(seekTo);\n                fail(msg + \", \" + seekTo + \", negative seek\");\n            } catch (IOException e) {\n                /* success */\n                //System.out.println(\"SUCCESS: Negative seek: \" + e);\n            }\n\n        } else if (seekTo > 0 && seekTo >= expected.length()) {\n            try {\n                actual.seek(seekTo);\n                fail(msg + \", \" + seekTo + \", seek past EOF\");\n            } catch (IOException e) {\n                /* success */\n                //System.out.println(\"SUCCESS: Seek past EOF: \" + e);\n            }\n\n        } else {\n            expected.seek(seekTo);\n            actual.seek(seekTo);\n            assertSameStreams(msg + \", seek(mid)\", expected, actual);\n        }\n    }\n\n","sourceOld":"    private void assertSameStreams(String msg, \n                                   InputStream expected,\n                                   InputStream actual,\n                                   long seekTo)\n    throws IOException\n    {\n        if (seekTo < 0) {\n            try {\n                actual.seek(seekTo);\n                fail(msg + \", \" + seekTo + \", negative seek\");\n            } catch (IOException e) { \n                /* success */ \n                //System.out.println(\"SUCCESS: Negative seek: \" + e);\n            }\n            \n        } else if (seekTo > 0 && seekTo >= expected.length()) {\n            try {\n                actual.seek(seekTo);\n                fail(msg + \", \" + seekTo + \", seek past EOF\");\n            } catch (IOException e) { \n                /* success */ \n                //System.out.println(\"SUCCESS: Seek past EOF: \" + e);\n            }\n            \n        } else {\n            expected.seek(seekTo);\n            actual.seek(seekTo);\n            assertSameStreams(msg + \", seek(mid)\", expected, actual);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe57064c7e3fe97f8038aa813d2552540e694bd","date":1069355002,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream,long).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream,long).mjava","sourceNew":"    private void assertSameStreams(String msg,\n                                   InputStream expected,\n                                   InputStream actual,\n                                   long seekTo)\n    throws IOException\n    {\n        if(seekTo >= 0 && seekTo < expected.length())\n        {\n            expected.seek(seekTo);\n            actual.seek(seekTo);\n            assertSameStreams(msg + \", seek(mid)\", expected, actual);\n        }\n    }\n\n","sourceOld":"    private void assertSameStreams(String msg,\n                                   InputStream expected,\n                                   InputStream actual,\n                                   long seekTo)\n    throws IOException\n    {\n        if (seekTo < 0) {\n            try {\n                actual.seek(seekTo);\n                fail(msg + \", \" + seekTo + \", negative seek\");\n            } catch (IOException e) {\n                /* success */\n                //System.out.println(\"SUCCESS: Negative seek: \" + e);\n            }\n\n        } else if (seekTo > 0 && seekTo >= expected.length()) {\n            try {\n                actual.seek(seekTo);\n                fail(msg + \", \" + seekTo + \", seek past EOF\");\n            } catch (IOException e) {\n                /* success */\n                //System.out.println(\"SUCCESS: Seek past EOF: \" + e);\n            }\n\n        } else {\n            expected.seek(seekTo);\n            actual.seek(seekTo);\n            assertSameStreams(msg + \", seek(mid)\", expected, actual);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,IndexInput,IndexInput,long).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream,long).mjava","sourceNew":"    private void assertSameStreams(String msg,\n                                   IndexInput expected,\n                                   IndexInput actual,\n                                   long seekTo)\n    throws IOException\n    {\n        if(seekTo >= 0 && seekTo < expected.length())\n        {\n            expected.seek(seekTo);\n            actual.seek(seekTo);\n            assertSameStreams(msg + \", seek(mid)\", expected, actual);\n        }\n    }\n\n","sourceOld":"    private void assertSameStreams(String msg,\n                                   InputStream expected,\n                                   InputStream actual,\n                                   long seekTo)\n    throws IOException\n    {\n        if(seekTo >= 0 && seekTo < expected.length())\n        {\n            expected.seek(seekTo);\n            actual.seek(seekTo);\n            assertSameStreams(msg + \", seek(mid)\", expected, actual);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["fbe57064c7e3fe97f8038aa813d2552540e694bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbe57064c7e3fe97f8038aa813d2552540e694bd":["1acbe60842541f8c38e2d60b03591478c9f91546"],"1acbe60842541f8c38e2d60b03591478c9f91546":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e971ba25509e21a130fef61f0687be0446ca27a0"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"fbe57064c7e3fe97f8038aa813d2552540e694bd":["e971ba25509e21a130fef61f0687be0446ca27a0"],"1acbe60842541f8c38e2d60b03591478c9f91546":["fbe57064c7e3fe97f8038aa813d2552540e694bd"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["1acbe60842541f8c38e2d60b03591478c9f91546"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}