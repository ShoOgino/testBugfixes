{"path":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","commits":[{"id":"c72f6f0907682b825869d7878ba72d8259dabc91","date":1480192617,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949bde462bfd00409852e22bedf12f7b18868909","date":1480227090,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        //nocommit\n        if (res.get(idx).get(\"id\").equals(expected) == false) {\n          for (int jdx = 0; jdx < order.length; ++jdx) {\n            System.out.println(String.format(\"EOEOE Val in doc %s for field %s is %s\", \n                res.get(jdx).get(\"id\"),\n                prop.getName(),\n                res.get(jdx).get(prop.getName())));\n          }\n          for (int jdx = 0; jdx < order.length; ++jdx) {\n            System.out.println(String.format(\"EOEOE order pos %d is %s\", jdx, order[jdx]));\n          }\n\n          for (int jdx = 0; jdx < orderBool.length; ++jdx) {\n            System.out.println(String.format(\"EOEOE bool order pos %d is %s\", jdx, orderBool[jdx]));\n          }\n\n        }\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["47411e220495e40971c1e3ceda3eed8f6cc2a6c1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47411e220495e40971c1e3ceda3eed8f6cc2a6c1","date":1480227136,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        //nocommit\n        if (res.get(idx).get(\"id\").equals(expected) == false) {\n          for (int jdx = 0; jdx < order.length; ++jdx) {\n            System.out.println(String.format(\"EOEOE Val in doc %s for field %s is %s\", \n                res.get(jdx).get(\"id\"),\n                prop.getName(),\n                res.get(jdx).get(prop.getName())));\n          }\n          for (int jdx = 0; jdx < order.length; ++jdx) {\n            System.out.println(String.format(\"EOEOE order pos %d is %s\", jdx, order[jdx]));\n          }\n\n          for (int jdx = 0; jdx < orderBool.length; ++jdx) {\n            System.out.println(String.format(\"EOEOE bool order pos %d is %s\", jdx, orderBool[jdx]));\n          }\n\n        }\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","bugFix":["949bde462bfd00409852e22bedf12f7b18868909"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"931cb705e783c7f07cdb110a0cb03bad79fe1b2b","date":1480386986,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7ddedf744427dad36befd57a11188002f735f9","date":1481407395,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      //TODO remove after SOLR-9843\n      if (order.length != res.getNumFound()) {\n        log.error(\"(3) About to fail, response is: \" + rsp.toString());\n      }\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      //TODO remove after SOLR-9843\n      if (order.length != res.getNumFound()) {\n        log.error(\"(3) About to fail, response is: \" + rsp.toString());\n      }\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2b464eff6241d222eb99fab9a53115a1808840e","date":1483064079,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      //TODO remove after SOLR-9843\n      if (order.length != res.getNumFound()) {\n        log.error(\"(3) About to fail, response is: \" + rsp.toString());\n      }\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#checkSortOrder(CloudSolrClient,List[FieldProps],String,String[],String[]).mjava","sourceNew":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkSortOrder(CloudSolrClient client, List<FieldProps> props, String sortDir, String[] order, String[] orderBool) throws IOException, SolrServerException {\n    for (FieldProps prop : props) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"100\");\n      solrQuery.setSort(prop.getName(), \"asc\".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);\n      solrQuery.addSort(\"id\", SolrQuery.ORDER.asc);\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n      SolrDocumentList res = rsp.getResults();\n      //TODO remove after SOLR-9843\n      if (order.length != res.getNumFound()) {\n        log.error(\"(3) About to fail, response is: \" + rsp.toString());\n      }\n      assertEquals(\"Should have exactly \" + order.length + \" documents returned\", order.length, res.getNumFound());\n      String expected;\n      for (int idx = 0; idx < res.size(); ++idx) {\n        if (prop.getName().startsWith(\"bool\")) expected = orderBool[idx];\n        else expected = order[idx];\n        assertEquals(\"Documents in wrong order for field: \" + prop.getName(),\n            expected, res.get(idx).get(\"id\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47411e220495e40971c1e3ceda3eed8f6cc2a6c1"],"c72f6f0907682b825869d7878ba72d8259dabc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7ddedf744427dad36befd57a11188002f735f9":["931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"e2b464eff6241d222eb99fab9a53115a1808840e":["0e7ddedf744427dad36befd57a11188002f735f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47411e220495e40971c1e3ceda3eed8f6cc2a6c1":["949bde462bfd00409852e22bedf12f7b18868909"],"9856095f7afb5a607bf5e65077615ed91273508c":["727bb765ff2542275f6d31f67be18d7104bae148","0e7ddedf744427dad36befd57a11188002f735f9"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47411e220495e40971c1e3ceda3eed8f6cc2a6c1"],"949bde462bfd00409852e22bedf12f7b18868909":["c72f6f0907682b825869d7878ba72d8259dabc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2b464eff6241d222eb99fab9a53115a1808840e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["9856095f7afb5a607bf5e65077615ed91273508c","e2b464eff6241d222eb99fab9a53115a1808840e"]},"commit2Childs":{"727bb765ff2542275f6d31f67be18d7104bae148":["9856095f7afb5a607bf5e65077615ed91273508c"],"c72f6f0907682b825869d7878ba72d8259dabc91":["949bde462bfd00409852e22bedf12f7b18868909"],"0e7ddedf744427dad36befd57a11188002f735f9":["e2b464eff6241d222eb99fab9a53115a1808840e","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c72f6f0907682b825869d7878ba72d8259dabc91","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"47411e220495e40971c1e3ceda3eed8f6cc2a6c1":["727bb765ff2542275f6d31f67be18d7104bae148","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"e2b464eff6241d222eb99fab9a53115a1808840e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"9856095f7afb5a607bf5e65077615ed91273508c":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["0e7ddedf744427dad36befd57a11188002f735f9"],"949bde462bfd00409852e22bedf12f7b18868909":["47411e220495e40971c1e3ceda3eed8f6cc2a6c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}