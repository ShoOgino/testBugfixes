{"path":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","commits":[{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderUtil.Slice[]).mjava","sourceNew":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","sourceOld":"  public MultiTerms(Terms[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","date":1344608180,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","sourceNew":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n    }\n\n    termComp = _termComp;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n  }\n\n","sourceOld":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","sourceNew":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    termComp = _termComp;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","sourceOld":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n    }\n\n    termComp = _termComp;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","sourceNew":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    termComp = _termComp;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","sourceOld":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","sourceNew":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    termComp = _termComp;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","sourceOld":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","sourceNew":"  /** Sole constructor.\n   *\n   * @param subs The {@link Terms} instances of all sub-readers. \n   * @param subSlices A parallel array (matching {@code\n   *        subs}) describing the sub-reader slices.\n   */\n  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    termComp = _termComp;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","sourceOld":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    termComp = _termComp;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","sourceNew":"  /** Sole constructor.\n   *\n   * @param subs The {@link Terms} instances of all sub-readers. \n   * @param subSlices A parallel array (matching {@code\n   *        subs}) describing the sub-reader slices.\n   */\n  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","sourceOld":"  /** Sole constructor.\n   *\n   * @param subs The {@link Terms} instances of all sub-readers. \n   * @param subSlices A parallel array (matching {@code\n   *        subs}) describing the sub-reader slices.\n   */\n  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    termComp = _termComp;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db","date":1381416174,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","sourceNew":"  /** Sole constructor.\n   *\n   * @param subs The {@link Terms} instances of all sub-readers. \n   * @param subSlices A parallel array (matching {@code\n   *        subs}) describing the sub-reader slices.\n   */\n  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasFreqs = true;\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      _hasFreqs &= subs[i].hasFreqs();\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    hasFreqs = _hasFreqs;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","sourceOld":"  /** Sole constructor.\n   *\n   * @param subs The {@link Terms} instances of all sub-readers. \n   * @param subSlices A parallel array (matching {@code\n   *        subs}) describing the sub-reader slices.\n   */\n  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","sourceNew":"  /**\n   * Sole constructor.  Use {@link #getTerms(IndexReader, String)} instead if possible.\n   *\n   * @param subs The {@link Terms} instances of all sub-readers. \n   * @param subSlices A parallel array (matching {@code\n   *        subs}) describing the sub-reader slices.\n   * @lucene.internal\n   */\n  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException { //TODO make private?\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasFreqs = true;\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      _hasFreqs &= subs[i].hasFreqs();\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    hasFreqs = _hasFreqs;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","sourceOld":"  /** Sole constructor.\n   *\n   * @param subs The {@link Terms} instances of all sub-readers. \n   * @param subSlices A parallel array (matching {@code\n   *        subs}) describing the sub-reader slices.\n   */\n  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    assert subs.length > 0 : \"inefficient: don't use MultiTerms over one sub\";\n    boolean _hasFreqs = true;\n    boolean _hasOffsets = true;\n    boolean _hasPositions = true;\n    boolean _hasPayloads = false;\n    for(int i=0;i<subs.length;i++) {\n      _hasFreqs &= subs[i].hasFreqs();\n      _hasOffsets &= subs[i].hasOffsets();\n      _hasPositions &= subs[i].hasPositions();\n      _hasPayloads |= subs[i].hasPayloads();\n    }\n\n    hasFreqs = _hasFreqs;\n    hasOffsets = _hasOffsets;\n    hasPositions = _hasPositions;\n    hasPayloads = hasPositions && _hasPayloads; // if all subs have pos, and at least one has payloads.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","0935c850ea562932997b72c69d93e345f21d7f45"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db"],"0935c850ea562932997b72c69d93e345f21d7f45":["5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["0935c850ea562932997b72c69d93e345f21d7f45"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c7869f64c874ebf7f317d22c00baf2b6857797a6","5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db"],"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["0935c850ea562932997b72c69d93e345f21d7f45"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","c14aed69f37b57db63b1fccc0740b17060a08f2b","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}