{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    return new BitDocSet(lfilter.bits(this.reader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    BitSet bs = lfilter.bits(this.reader);\n    OpenBitSet obs = new OpenBitSet(bs.size());\n    for(int i=bs.nextSetBit(0); i>=0; i=bs.nextSetBit(i+1)) {\n      obs.fastSet(i);\n    }\n    return new BitDocSet(obs);\n  }\n\n","sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    return new BitDocSet(lfilter.bits(this.reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    BitSet bs = lfilter.bits(this.reader);\n    OpenBitSet obs = new OpenBitSet(bs.size());\n    for(int i=bs.nextSetBit(0); i>=0; i=bs.nextSetBit(i+1)) {\n      obs.fastSet(i);\n    }\n    return new BitDocSet(obs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["21400778a0bf704d187a4848279049f5d90276c8"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["21400778a0bf704d187a4848279049f5d90276c8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}