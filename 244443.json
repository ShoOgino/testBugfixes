{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","commits":[{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n    field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<String>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["963375a30a9056a39347c6f920c8b27c4e559212"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"963375a30a9056a39347c6f920c8b27c4e559212","date":1346952168,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", toListOfStringDests(schema.getCopyFieldsList(f.getName())));\n    field.add(\"copySources\", toListOfStrings(schema.getCopySources(f.getName())));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<String>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", schema.getCopyFieldsList(f.getName()));\n    field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<String>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db06e0cd3d23936f96db2498594992ba9f28bf49","date":1366696565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", toListOfStringDests(schema.getCopyFieldsList(f.getName())));\n    field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<String>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", toListOfStringDests(schema.getCopyFieldsList(f.getName())));\n    field.add(\"copySources\", toListOfStrings(schema.getCopySources(f.getName())));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<String>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", toListOfStringDests(schema.getCopyFieldsList(f.getName())));\n    field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", toListOfStringDests(schema.getCopyFieldsList(f.getName())));\n    field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<String>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#populateFieldInfo(IndexSchema,Map[String,List[String]],Map[String,Object],SchemaField,SchemaField).mjava","sourceNew":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getIndexAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getIndexAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", toListOfStringDests(schema.getCopyFieldsList(f.getName())));\n    field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","sourceOld":"  private static void populateFieldInfo(IndexSchema schema,\n                                        Map<String, List<String>> typeusemap, Map<String, Object> fields,\n                                        SchemaField uniqueField, SchemaField f) {\n    FieldType ft = f.getType();\n    SimpleOrderedMap<Object> field = new SimpleOrderedMap<>();\n    field.add( \"type\", ft.getTypeName() );\n    field.add( \"flags\", getFieldFlags(f) );\n    if( f.isRequired() ) {\n      field.add( \"required\", f.isRequired() );\n    }\n    if( f.getDefaultValue() != null ) {\n      field.add( \"default\", f.getDefaultValue() );\n    }\n    if (f == uniqueField){\n      field.add(\"uniqueKey\", true);\n    }\n    if (ft.getAnalyzer().getPositionIncrementGap(f.getName()) != 0) {\n      field.add(\"positionIncrementGap\", ft.getAnalyzer().getPositionIncrementGap(f.getName()));\n    }\n    field.add(\"copyDests\", toListOfStringDests(schema.getCopyFieldsList(f.getName())));\n    field.add(\"copySources\", schema.getCopySources(f.getName()));\n\n\n    fields.put( f.getName(), field );\n\n    List<String> v = typeusemap.get( ft.getTypeName() );\n    if( v == null ) {\n      v = new ArrayList<>();\n    }\n    v.add( f.getName() );\n    typeusemap.put( ft.getTypeName(), v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["db06e0cd3d23936f96db2498594992ba9f28bf49"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db06e0cd3d23936f96db2498594992ba9f28bf49":["963375a30a9056a39347c6f920c8b27c4e559212"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"963375a30a9056a39347c6f920c8b27c4e559212":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["963375a30a9056a39347c6f920c8b27c4e559212"],"db06e0cd3d23936f96db2498594992ba9f28bf49":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"963375a30a9056a39347c6f920c8b27c4e559212":["db06e0cd3d23936f96db2498594992ba9f28bf49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}