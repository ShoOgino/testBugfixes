{"path":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#waitForCommit(long).mjava","commits":[{"id":"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd","date":1525384847,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#waitForCommit(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sleeps in increments of 50 ms while checking to see if a commit completed. If it did, then return. If not, continue\n   * this cycle for at most the amount of time specified\n   * @param maxTotalWaitTimeMillis the max amount of time (in ms) to wait/check for a commit\n   */\n  private void waitForCommit(long maxTotalWaitTimeMillis) throws Exception {\n    long startTimeNanos = System.nanoTime();\n    long maxTotalWaitTimeNanos = TimeUnit.MILLISECONDS.toNanos(maxTotalWaitTimeMillis);\n    while (System.nanoTime() - startTimeNanos < maxTotalWaitTimeNanos) {\n      Thread.sleep(50);\n      if (!updateHandler.getUpdateLog().hasUncommittedChanges()) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["27d6f83edecd216b844079cc682096091dfa9fbc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27d6f83edecd216b844079cc682096091dfa9fbc","date":1534485921,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#waitForCommit(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#waitForCommit(long).mjava","sourceNew":"  /**\n   * Sleeps in increments of COMMIT_CHECKING_SLEEP_TIME_MS while checking to see if a commit completed. If it did,\n   * then return. If not, continue this cycle for at most the amount of time specified\n   * @param maxTotalWaitTimeMillis the max amount of time (in ms) to wait/check for a commit\n   */\n  private void waitForCommit(long maxTotalWaitTimeMillis) throws Exception {\n    long startTimeNanos = System.nanoTime();\n    long maxTotalWaitTimeNanos = TimeUnit.MILLISECONDS.toNanos(maxTotalWaitTimeMillis);\n    while (System.nanoTime() - startTimeNanos < maxTotalWaitTimeNanos) {\n      Thread.sleep(COMMIT_CHECKING_SLEEP_TIME_MS);\n      if (!updateHandler.getUpdateLog().hasUncommittedChanges()) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Sleeps in increments of 50 ms while checking to see if a commit completed. If it did, then return. If not, continue\n   * this cycle for at most the amount of time specified\n   * @param maxTotalWaitTimeMillis the max amount of time (in ms) to wait/check for a commit\n   */\n  private void waitForCommit(long maxTotalWaitTimeMillis) throws Exception {\n    long startTimeNanos = System.nanoTime();\n    long maxTotalWaitTimeNanos = TimeUnit.MILLISECONDS.toNanos(maxTotalWaitTimeMillis);\n    while (System.nanoTime() - startTimeNanos < maxTotalWaitTimeNanos) {\n      Thread.sleep(50);\n      if (!updateHandler.getUpdateLog().hasUncommittedChanges()) {\n        return;\n      }\n    }\n  }\n\n","bugFix":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75faf4b1a2755d47e6544206f470bf42a11849dd","date":1543945445,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#waitForCommit(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sleeps in increments of COMMIT_CHECKING_SLEEP_TIME_MS while checking to see if a commit completed. If it did,\n   * then return. If not, continue this cycle for at most the amount of time specified\n   * @param maxTotalWaitTimeMillis the max amount of time (in ms) to wait/check for a commit\n   */\n  private void waitForCommit(long maxTotalWaitTimeMillis) throws Exception {\n    long startTimeNanos = System.nanoTime();\n    long maxTotalWaitTimeNanos = TimeUnit.MILLISECONDS.toNanos(maxTotalWaitTimeMillis);\n    while (System.nanoTime() - startTimeNanos < maxTotalWaitTimeNanos) {\n      Thread.sleep(COMMIT_CHECKING_SLEEP_TIME_MS);\n      if (!updateHandler.getUpdateLog().hasUncommittedChanges()) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75faf4b1a2755d47e6544206f470bf42a11849dd":["27d6f83edecd216b844079cc682096091dfa9fbc"],"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27d6f83edecd216b844079cc682096091dfa9fbc":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75faf4b1a2755d47e6544206f470bf42a11849dd"]},"commit2Childs":{"75faf4b1a2755d47e6544206f470bf42a11849dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["27d6f83edecd216b844079cc682096091dfa9fbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"27d6f83edecd216b844079cc682096091dfa9fbc":["75faf4b1a2755d47e6544206f470bf42a11849dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}