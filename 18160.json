{"path":"src/java/org/apache/lucene/index/DirectoryIndexReader#clone(boolean).mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#clone(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n\n    final SegmentInfos infos = (SegmentInfos) segmentInfos.clone();\n    DirectoryIndexReader newReader = doReopen(infos, true, openReadOnly);\n    \n    if (this != newReader) {\n      newReader.init(directory, infos, closeDirectory, openReadOnly);\n      newReader.deletionPolicy = deletionPolicy;\n    }\n\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      newReader.writeLock = writeLock;\n      writeLock = null;\n      hasChanges = false;\n    }\n    \n    return newReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3688ee2a200d89c6fad03ca69c9c795834ce3209","date":1234695396,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#clone(boolean).mjava","sourceNew":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n\n    final SegmentInfos clonedInfos;\n    if (segmentInfos != null) {\n      clonedInfos = (SegmentInfos) segmentInfos.clone();\n    } else {\n      clonedInfos = null;\n    }\n    DirectoryIndexReader newReader = doReopen(clonedInfos, true, openReadOnly);\n    \n    if (this != newReader) {\n      newReader.init(directory, clonedInfos, closeDirectory, openReadOnly);\n      newReader.deletionPolicy = deletionPolicy;\n    }\n\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      newReader.writeLock = writeLock;\n      writeLock = null;\n      hasChanges = false;\n    }\n    \n    return newReader;\n  }\n\n","sourceOld":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n\n    final SegmentInfos infos = (SegmentInfos) segmentInfos.clone();\n    DirectoryIndexReader newReader = doReopen(infos, true, openReadOnly);\n    \n    if (this != newReader) {\n      newReader.init(directory, infos, closeDirectory, openReadOnly);\n      newReader.deletionPolicy = deletionPolicy;\n    }\n\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      newReader.writeLock = writeLock;\n      writeLock = null;\n      hasChanges = false;\n    }\n    \n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#clone(boolean).mjava","sourceNew":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n\n    final SegmentInfos clonedInfos;\n    if (segmentInfos != null) {\n      clonedInfos = (SegmentInfos) segmentInfos.clone();\n    } else {\n      clonedInfos = null;\n    }\n    DirectoryIndexReader newReader = doReopen(clonedInfos, true, openReadOnly);\n    \n    if (this != newReader) {\n      newReader.init(directory, clonedInfos, closeDirectory, openReadOnly);\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      writeLock = null;\n      hasChanges = false;\n    }\n    \n    return newReader;\n  }\n\n","sourceOld":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n\n    final SegmentInfos clonedInfos;\n    if (segmentInfos != null) {\n      clonedInfos = (SegmentInfos) segmentInfos.clone();\n    } else {\n      clonedInfos = null;\n    }\n    DirectoryIndexReader newReader = doReopen(clonedInfos, true, openReadOnly);\n    \n    if (this != newReader) {\n      newReader.init(directory, clonedInfos, closeDirectory, openReadOnly);\n      newReader.deletionPolicy = deletionPolicy;\n    }\n\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      newReader.writeLock = writeLock;\n      writeLock = null;\n      hasChanges = false;\n    }\n    \n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#clone(boolean).mjava","sourceNew":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.closeDirectory = closeDirectory;\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","sourceOld":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n\n    final SegmentInfos clonedInfos;\n    if (segmentInfos != null) {\n      clonedInfos = (SegmentInfos) segmentInfos.clone();\n    } else {\n      clonedInfos = null;\n    }\n    DirectoryIndexReader newReader = doReopen(clonedInfos, true, openReadOnly);\n    \n    if (this != newReader) {\n      newReader.init(directory, clonedInfos, closeDirectory, openReadOnly);\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      writeLock = null;\n      hasChanges = false;\n    }\n    \n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["3688ee2a200d89c6fad03ca69c9c795834ce3209"],"3688ee2a200d89c6fad03ca69c9c795834ce3209":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["3688ee2a200d89c6fad03ca69c9c795834ce3209"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"3688ee2a200d89c6fad03ca69c9c795834ce3209":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}