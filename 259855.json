{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testIndexSortWithSparseField().mjava","commits":[{"id":"5f208c63a35329849aa75d14452f5c2464b10786","date":1492742484,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testIndexSortWithSparseField().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexSortWithSparseField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"dense_int\", SortField.Type.INT, true);\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int i = 0; i < 128; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dense_int\", i));\n      if (i < 64) {\n        doc.add(new NumericDocValuesField(\"sparse_int\", i));\n        doc.add(new BinaryDocValuesField(\"sparse_binary\", new BytesRef(Integer.toString(i))));\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    LeafReader leafReader = r.leaves().get(0).reader();\n\n    NumericDocValues denseValues = leafReader.getNumericDocValues(\"dense_int\");\n    NumericDocValues sparseValues = leafReader.getNumericDocValues(\"sparse_int\");\n    BinaryDocValues sparseBinaryValues = leafReader.getBinaryDocValues(\"sparse_binary\");\n    for(int docID = 0; docID < 128; docID++) {\n      assertTrue(denseValues.advanceExact(docID));\n      assertEquals(127-docID, (int) denseValues.longValue());\n      if (docID >= 64) {\n        assertTrue(denseValues.advanceExact(docID));\n        assertTrue(sparseValues.advanceExact(docID));\n        assertTrue(sparseBinaryValues.advanceExact(docID));\n        assertEquals(docID, sparseValues.docID());\n        assertEquals(127-docID, (int) sparseValues.longValue());\n        assertEquals(new BytesRef(Integer.toString(127-docID)), sparseBinaryValues.binaryValue());\n      } else {\n        assertFalse(sparseBinaryValues.advanceExact(docID));\n        assertFalse(sparseValues.advanceExact(docID));\n      }\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a5e7330b4d3d7f7f856e01d2f5a93097770e08e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a5e7330b4d3d7f7f856e01d2f5a93097770e08e","date":1492768869,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testIndexSortWithSparseField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testIndexSortWithSparseField().mjava","sourceNew":"  public void testIndexSortWithSparseField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"dense_int\", SortField.Type.INT, true);\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Field textField = newTextField(\"sparse_text\", \"\", Field.Store.NO);\n    for (int i = 0; i < 128; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dense_int\", i));\n      if (i < 64) {\n        doc.add(new NumericDocValuesField(\"sparse_int\", i));\n        doc.add(new BinaryDocValuesField(\"sparse_binary\", new BytesRef(Integer.toString(i))));\n        textField.setStringValue(\"foo\");\n        doc.add(textField);\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    LeafReader leafReader = r.leaves().get(0).reader();\n\n    NumericDocValues denseValues = leafReader.getNumericDocValues(\"dense_int\");\n    NumericDocValues sparseValues = leafReader.getNumericDocValues(\"sparse_int\");\n    BinaryDocValues sparseBinaryValues = leafReader.getBinaryDocValues(\"sparse_binary\");\n    NumericDocValues normsValues = leafReader.getNormValues(\"sparse_text\");\n    for(int docID = 0; docID < 128; docID++) {\n      assertTrue(denseValues.advanceExact(docID));\n      assertEquals(127-docID, (int) denseValues.longValue());\n      if (docID >= 64) {\n        assertTrue(denseValues.advanceExact(docID));\n        assertTrue(sparseValues.advanceExact(docID));\n        assertTrue(sparseBinaryValues.advanceExact(docID));\n        assertTrue(normsValues.advanceExact(docID));\n        assertEquals(124, normsValues.longValue());\n        assertEquals(127-docID, (int) sparseValues.longValue());\n        assertEquals(new BytesRef(Integer.toString(127-docID)), sparseBinaryValues.binaryValue());\n      } else {\n        assertFalse(sparseBinaryValues.advanceExact(docID));\n        assertFalse(sparseValues.advanceExact(docID));\n        assertFalse(normsValues.advanceExact(docID));\n      }\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testIndexSortWithSparseField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"dense_int\", SortField.Type.INT, true);\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int i = 0; i < 128; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dense_int\", i));\n      if (i < 64) {\n        doc.add(new NumericDocValuesField(\"sparse_int\", i));\n        doc.add(new BinaryDocValuesField(\"sparse_binary\", new BytesRef(Integer.toString(i))));\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    LeafReader leafReader = r.leaves().get(0).reader();\n\n    NumericDocValues denseValues = leafReader.getNumericDocValues(\"dense_int\");\n    NumericDocValues sparseValues = leafReader.getNumericDocValues(\"sparse_int\");\n    BinaryDocValues sparseBinaryValues = leafReader.getBinaryDocValues(\"sparse_binary\");\n    for(int docID = 0; docID < 128; docID++) {\n      assertTrue(denseValues.advanceExact(docID));\n      assertEquals(127-docID, (int) denseValues.longValue());\n      if (docID >= 64) {\n        assertTrue(denseValues.advanceExact(docID));\n        assertTrue(sparseValues.advanceExact(docID));\n        assertTrue(sparseBinaryValues.advanceExact(docID));\n        assertEquals(docID, sparseValues.docID());\n        assertEquals(127-docID, (int) sparseValues.longValue());\n        assertEquals(new BytesRef(Integer.toString(127-docID)), sparseBinaryValues.binaryValue());\n      } else {\n        assertFalse(sparseBinaryValues.advanceExact(docID));\n        assertFalse(sparseValues.advanceExact(docID));\n      }\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":["5f208c63a35329849aa75d14452f5c2464b10786"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testIndexSortWithSparseField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testIndexSortWithSparseField().mjava","sourceNew":"  public void testIndexSortWithSparseField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"dense_int\", SortField.Type.INT, true);\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Field textField = newTextField(\"sparse_text\", \"\", Field.Store.NO);\n    for (int i = 0; i < 128; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dense_int\", i));\n      if (i < 64) {\n        doc.add(new NumericDocValuesField(\"sparse_int\", i));\n        doc.add(new BinaryDocValuesField(\"sparse_binary\", new BytesRef(Integer.toString(i))));\n        textField.setStringValue(\"foo\");\n        doc.add(textField);\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    LeafReader leafReader = r.leaves().get(0).reader();\n\n    NumericDocValues denseValues = leafReader.getNumericDocValues(\"dense_int\");\n    NumericDocValues sparseValues = leafReader.getNumericDocValues(\"sparse_int\");\n    BinaryDocValues sparseBinaryValues = leafReader.getBinaryDocValues(\"sparse_binary\");\n    NumericDocValues normsValues = leafReader.getNormValues(\"sparse_text\");\n    for(int docID = 0; docID < 128; docID++) {\n      assertTrue(denseValues.advanceExact(docID));\n      assertEquals(127-docID, (int) denseValues.longValue());\n      if (docID >= 64) {\n        assertTrue(denseValues.advanceExact(docID));\n        assertTrue(sparseValues.advanceExact(docID));\n        assertTrue(sparseBinaryValues.advanceExact(docID));\n        assertTrue(normsValues.advanceExact(docID));\n        assertEquals(1, normsValues.longValue());\n        assertEquals(127-docID, (int) sparseValues.longValue());\n        assertEquals(new BytesRef(Integer.toString(127-docID)), sparseBinaryValues.binaryValue());\n      } else {\n        assertFalse(sparseBinaryValues.advanceExact(docID));\n        assertFalse(sparseValues.advanceExact(docID));\n        assertFalse(normsValues.advanceExact(docID));\n      }\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testIndexSortWithSparseField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"dense_int\", SortField.Type.INT, true);\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Field textField = newTextField(\"sparse_text\", \"\", Field.Store.NO);\n    for (int i = 0; i < 128; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dense_int\", i));\n      if (i < 64) {\n        doc.add(new NumericDocValuesField(\"sparse_int\", i));\n        doc.add(new BinaryDocValuesField(\"sparse_binary\", new BytesRef(Integer.toString(i))));\n        textField.setStringValue(\"foo\");\n        doc.add(textField);\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    LeafReader leafReader = r.leaves().get(0).reader();\n\n    NumericDocValues denseValues = leafReader.getNumericDocValues(\"dense_int\");\n    NumericDocValues sparseValues = leafReader.getNumericDocValues(\"sparse_int\");\n    BinaryDocValues sparseBinaryValues = leafReader.getBinaryDocValues(\"sparse_binary\");\n    NumericDocValues normsValues = leafReader.getNormValues(\"sparse_text\");\n    for(int docID = 0; docID < 128; docID++) {\n      assertTrue(denseValues.advanceExact(docID));\n      assertEquals(127-docID, (int) denseValues.longValue());\n      if (docID >= 64) {\n        assertTrue(denseValues.advanceExact(docID));\n        assertTrue(sparseValues.advanceExact(docID));\n        assertTrue(sparseBinaryValues.advanceExact(docID));\n        assertTrue(normsValues.advanceExact(docID));\n        assertEquals(124, normsValues.longValue());\n        assertEquals(127-docID, (int) sparseValues.longValue());\n        assertEquals(new BytesRef(Integer.toString(127-docID)), sparseBinaryValues.binaryValue());\n      } else {\n        assertFalse(sparseBinaryValues.advanceExact(docID));\n        assertFalse(sparseValues.advanceExact(docID));\n        assertFalse(normsValues.advanceExact(docID));\n      }\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testIndexSortWithSparseField().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexSortWithSparseField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"dense_int\", SortField.Type.INT, true);\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Field textField = newTextField(\"sparse_text\", \"\", Field.Store.NO);\n    for (int i = 0; i < 128; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dense_int\", i));\n      if (i < 64) {\n        doc.add(new NumericDocValuesField(\"sparse_int\", i));\n        doc.add(new BinaryDocValuesField(\"sparse_binary\", new BytesRef(Integer.toString(i))));\n        textField.setStringValue(\"foo\");\n        doc.add(textField);\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    LeafReader leafReader = r.leaves().get(0).reader();\n\n    NumericDocValues denseValues = leafReader.getNumericDocValues(\"dense_int\");\n    NumericDocValues sparseValues = leafReader.getNumericDocValues(\"sparse_int\");\n    BinaryDocValues sparseBinaryValues = leafReader.getBinaryDocValues(\"sparse_binary\");\n    NumericDocValues normsValues = leafReader.getNormValues(\"sparse_text\");\n    for(int docID = 0; docID < 128; docID++) {\n      assertTrue(denseValues.advanceExact(docID));\n      assertEquals(127-docID, (int) denseValues.longValue());\n      if (docID >= 64) {\n        assertTrue(denseValues.advanceExact(docID));\n        assertTrue(sparseValues.advanceExact(docID));\n        assertTrue(sparseBinaryValues.advanceExact(docID));\n        assertTrue(normsValues.advanceExact(docID));\n        assertEquals(1, normsValues.longValue());\n        assertEquals(127-docID, (int) sparseValues.longValue());\n        assertEquals(new BytesRef(Integer.toString(127-docID)), sparseBinaryValues.binaryValue());\n      } else {\n        assertFalse(sparseBinaryValues.advanceExact(docID));\n        assertFalse(sparseValues.advanceExact(docID));\n        assertFalse(normsValues.advanceExact(docID));\n      }\n    }\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"9a5e7330b4d3d7f7f856e01d2f5a93097770e08e":["5f208c63a35329849aa75d14452f5c2464b10786"],"615370d2b876c3435773b5174df2e2242ad7981a":["9a5e7330b4d3d7f7f856e01d2f5a93097770e08e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f208c63a35329849aa75d14452f5c2464b10786":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"9a5e7330b4d3d7f7f856e01d2f5a93097770e08e":["615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","5f208c63a35329849aa75d14452f5c2464b10786"],"5f208c63a35329849aa75d14452f5c2464b10786":["9a5e7330b4d3d7f7f856e01d2f5a93097770e08e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}