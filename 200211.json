{"path":"backwards/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n    * Note that the return type is a collection, thus the ordering should not be relied upon.\n    * <br/>\n   * <p><font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws java.io.IOException\n    */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","sourceNew":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n    * Note that the return type is a collection, thus the ordering should not be relied upon.\n    * <br/>\n   * <p><font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws java.io.IOException\n    */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","sourceOld":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n    * Note that the return type is a collection, thus the ordering should not be relied upon.\n    * <br/>\n   * <p><font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws java.io.IOException\n    */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}