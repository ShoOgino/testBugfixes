{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof RangeVal) val = ((RangeVal) val).actual;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":null,"sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof RangeVal) val = ((RangeVal) val).actual;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}