{"path":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testRedundantDeletes().mjava","commits":[{"id":"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd","date":1525384847,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testRedundantDeletes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRedundantDeletes() throws Exception {\n    int maxFileSizeBound = 1000;\n    int maxFileSizeBoundWithBuffer = (int) (maxFileSizeBound * 1.25);\n\n    // Set max size bound\n    hardCommitTracker.setTLogFileSizeUpperBound(maxFileSizeBound);\n\n    // Add docs\n    int numDocsToAdd = 150;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n    waitForCommit(200);\n\n    // Get the tlog file info\n    TreeMap<String, Long> tlogsInfoPreDeletes = getTlogFileSizes(tlogDirPath);\n\n    // Send a bunch of redundant deletes\n    int numDeletesToSend = 5000;\n    int docIdToDelete = 100;\n\n    SolrQueryRequestBase requestWithOneDelete = new SolrQueryRequestBase(core, new MapSolrParams(new HashMap<String, String>())) {};\n    List<String> docs = new ArrayList<>();\n    docs.add(delI(Integer.toString(docIdToDelete)));\n\n    requestWithOneDelete.setContentStreams(toContentStreams(docs));\n\n    for (int i = 0; i < numDeletesToSend; i++) {\n      if (i % 50 == 0) {\n        // Wait periodically to allow existing commits to finish before\n        // sending more delete requests\n        waitForCommit(200);\n      }\n      updateRequestHandler.handleRequest(requestWithOneDelete, updateResp);\n    }\n\n    // Verify that new tlogs have been created, and that their sizes are as expected\n    TreeMap<String, Long> tlogsInfoPostDeletes = getTlogFileSizes(tlogDirPath, maxFileSizeBoundWithBuffer);\n    Assert.assertTrue(parseTotalNumTlogs(tlogsInfoPreDeletes) < parseTotalNumTlogs(tlogsInfoPostDeletes));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["27d6f83edecd216b844079cc682096091dfa9fbc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27d6f83edecd216b844079cc682096091dfa9fbc","date":1534485921,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testRedundantDeletes().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testRedundantDeletes().mjava","sourceNew":"  @Test\n  public void testRedundantDeletes() throws Exception {\n    int maxFileSizeBound = 1000;\n    // Set max size bound\n    hardCommitTracker.setTLogFileSizeUpperBound(maxFileSizeBound);\n\n    // Add docs\n    int numDocsToAdd = 150;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n    waitForCommit(1000);\n\n    // Get the current commit info\n    int commitCountPreDeletes = hardCommitTracker.getCommitCount();\n\n    // Send a bunch of redundant deletes\n    int numDeletesToSend = 500;\n    int docIdToDelete = 100;\n\n    SolrQueryRequestBase batchSingleDeleteRequest = new SolrQueryRequestBase(core, new MapSolrParams(new HashMap<>())) {};\n    List<String> docs = new ArrayList<>();\n    for (int i = 0; i < numDeletesToSend; i++) {\n      docs.add(delI(Integer.toString(docIdToDelete)));\n    }\n    batchSingleDeleteRequest.setContentStreams(toContentStreams(docs));\n\n    updateRequestHandler.handleRequest(batchSingleDeleteRequest, updateResp);\n\n    // The long sleep is to allow for the expected triggered commit to finish\n    waitForCommit(1000);\n\n    // Verify commit information\n    Assert.assertTrue(\"At least one commit should have occurred\",\n        hardCommitTracker.getCommitCount() > commitCountPreDeletes);\n    long tlogSizePostDeletes = updateHandler.getUpdateLog().getCurrentLogSizeFromStream();\n    Assert.assertTrue(\"Current tlog size is larger than the max bound\", tlogSizePostDeletes < maxFileSizeBound);\n  }\n\n","sourceOld":"  @Test\n  public void testRedundantDeletes() throws Exception {\n    int maxFileSizeBound = 1000;\n    int maxFileSizeBoundWithBuffer = (int) (maxFileSizeBound * 1.25);\n\n    // Set max size bound\n    hardCommitTracker.setTLogFileSizeUpperBound(maxFileSizeBound);\n\n    // Add docs\n    int numDocsToAdd = 150;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n    waitForCommit(200);\n\n    // Get the tlog file info\n    TreeMap<String, Long> tlogsInfoPreDeletes = getTlogFileSizes(tlogDirPath);\n\n    // Send a bunch of redundant deletes\n    int numDeletesToSend = 5000;\n    int docIdToDelete = 100;\n\n    SolrQueryRequestBase requestWithOneDelete = new SolrQueryRequestBase(core, new MapSolrParams(new HashMap<String, String>())) {};\n    List<String> docs = new ArrayList<>();\n    docs.add(delI(Integer.toString(docIdToDelete)));\n\n    requestWithOneDelete.setContentStreams(toContentStreams(docs));\n\n    for (int i = 0; i < numDeletesToSend; i++) {\n      if (i % 50 == 0) {\n        // Wait periodically to allow existing commits to finish before\n        // sending more delete requests\n        waitForCommit(200);\n      }\n      updateRequestHandler.handleRequest(requestWithOneDelete, updateResp);\n    }\n\n    // Verify that new tlogs have been created, and that their sizes are as expected\n    TreeMap<String, Long> tlogsInfoPostDeletes = getTlogFileSizes(tlogDirPath, maxFileSizeBoundWithBuffer);\n    Assert.assertTrue(parseTotalNumTlogs(tlogsInfoPreDeletes) < parseTotalNumTlogs(tlogsInfoPostDeletes));\n  }\n\n","bugFix":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75faf4b1a2755d47e6544206f470bf42a11849dd","date":1543945445,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testRedundantDeletes().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#testRedundantDeletes().mjava","sourceNew":"  @Test\n  public void testRedundantDeletes() throws Exception {\n\n    Assert.assertEquals(\"There have been no updates yet, so there shouldn't have been any commits\", 0,\n                        hardCommitTracker.getCommitCount());\n\n    long tlogSizePreUpdates = updateHandler.getUpdateLog().getCurrentLogSizeFromStream();\n    Assert.assertEquals(\"There have been no updates yet, so tlog should be empty\", 0, tlogSizePreUpdates);\n    \n    // Add docs\n    int numDocsToAdd = 150;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n\n    monitor.doStuffAndExpectAtLeastOneCommit(hardCommitTracker, updateHandler, () -> {\n        updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n      });\n    \n\n    // Send a bunch of redundant deletes\n    int numDeletesToSend = 500;\n    int docIdToDelete = 100;\n\n    SolrQueryRequestBase batchSingleDeleteRequest = new SolrQueryRequestBase(core, new MapSolrParams(new HashMap<>())) {};\n    List<String> docs = new ArrayList<>();\n    for (int i = 0; i < numDeletesToSend; i++) {\n      docs.add(delI(Integer.toString(docIdToDelete)));\n    }\n    batchSingleDeleteRequest.setContentStreams(toContentStreams(docs));\n    \n    monitor.doStuffAndExpectAtLeastOneCommit(hardCommitTracker, updateHandler, () -> {\n        updateRequestHandler.handleRequest(batchSingleDeleteRequest, updateResp);\n      });\n    \n  }\n\n","sourceOld":"  @Test\n  public void testRedundantDeletes() throws Exception {\n    int maxFileSizeBound = 1000;\n    // Set max size bound\n    hardCommitTracker.setTLogFileSizeUpperBound(maxFileSizeBound);\n\n    // Add docs\n    int numDocsToAdd = 150;\n    SolrQueryResponse updateResp = new SolrQueryResponse();\n    updateRequestHandler.handleRequest(constructBatchAddDocRequest(0, numDocsToAdd), updateResp);\n    waitForCommit(1000);\n\n    // Get the current commit info\n    int commitCountPreDeletes = hardCommitTracker.getCommitCount();\n\n    // Send a bunch of redundant deletes\n    int numDeletesToSend = 500;\n    int docIdToDelete = 100;\n\n    SolrQueryRequestBase batchSingleDeleteRequest = new SolrQueryRequestBase(core, new MapSolrParams(new HashMap<>())) {};\n    List<String> docs = new ArrayList<>();\n    for (int i = 0; i < numDeletesToSend; i++) {\n      docs.add(delI(Integer.toString(docIdToDelete)));\n    }\n    batchSingleDeleteRequest.setContentStreams(toContentStreams(docs));\n\n    updateRequestHandler.handleRequest(batchSingleDeleteRequest, updateResp);\n\n    // The long sleep is to allow for the expected triggered commit to finish\n    waitForCommit(1000);\n\n    // Verify commit information\n    Assert.assertTrue(\"At least one commit should have occurred\",\n        hardCommitTracker.getCommitCount() > commitCountPreDeletes);\n    long tlogSizePostDeletes = updateHandler.getUpdateLog().getCurrentLogSizeFromStream();\n    Assert.assertTrue(\"Current tlog size is larger than the max bound\", tlogSizePostDeletes < maxFileSizeBound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75faf4b1a2755d47e6544206f470bf42a11849dd":["27d6f83edecd216b844079cc682096091dfa9fbc"],"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27d6f83edecd216b844079cc682096091dfa9fbc":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75faf4b1a2755d47e6544206f470bf42a11849dd"]},"commit2Childs":{"75faf4b1a2755d47e6544206f470bf42a11849dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["27d6f83edecd216b844079cc682096091dfa9fbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"27d6f83edecd216b844079cc682096091dfa9fbc":["75faf4b1a2755d47e6544206f470bf42a11849dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}