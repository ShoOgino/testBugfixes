{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","commits":[{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = _TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = _TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    assumeTrue(\"requires codec support for SORTED_SET\", defaultCodecSupportsSortedSet());\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        // if the default codec doesn't support sortedset, we will uninvert at search time\n        if (defaultCodecSupportsSortedSet()) {\n          doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        }\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRewriteMethod#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n      int numTerms = random().nextInt(4);\n      for (int j = 0; j < numTerms; j++) {\n        String s = TestUtil.randomUnicodeString(random());\n        doc.add(newStringField(fieldName, s, Field.Store.NO));\n        doc.add(new SortedSetDocValuesField(fieldName, new BytesRef(s)));\n        terms.add(s);\n      }\n      writer.addDocument(doc);\n    }\n    \n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s) + \" \" + s);\n      }\n    }\n    \n    int numDeletions = random().nextInt(num/10);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(random().nextInt(num))));\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["5c84485629d80d203608e8975a1139de9933cc38"],"2713584a660051cd646423be682771e3bbd99985":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","2713584a660051cd646423be682771e3bbd99985"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["93dd449115a9247533e44bab47e8429e5dccbc6d","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"5c84485629d80d203608e8975a1139de9933cc38":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}