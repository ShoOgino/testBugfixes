{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"abc AND bcd\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"abc AND bcd\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ee056ec8e953928ee49a691090634eed1fa4d6b","date":1274852580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"\\\"abc\\\" AND \\\"bcd\\\"\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"abc AND bcd\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e4a95ed08968b85d84e9fba82424f1fd945fbb","date":1274878310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"abc AND bcd\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"\\\"abc\\\" AND \\\"bcd\\\"\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"\\\"abc\\\" AND \\\"bcd\\\"\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"abc AND bcd\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"\\\"abc\\\" AND \\\"bcd\\\"\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"abc AND bcd\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(toPhraseQuery(analyze(\"abc\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"bcd\", F, analyzerB), F), Occur.MUST);\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"\\\"abc\\\" AND \\\"bcd\\\"\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(toPhraseQuery(analyze(\"abc\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"bcd\", F, analyzerB), F), Occur.MUST);\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    Query query = paB.parse( \"\\\"abc\\\" AND \\\"bcd\\\"\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(toPhraseQuery(analyze(\"abc\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"bcd\", F, analyzerB), F), Occur.MUST);\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost, 0);\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost, 0);\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(toPhraseQuery(analyze(\"abc\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"bcd\", F, analyzerB), F), Occur.MUST);\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost );\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMapOverlap2gram().mjava","sourceNew":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(toPhraseQuery(analyze(\"abc\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"bcd\", F, analyzerB), F), Occur.MUST);\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost, 0);\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost, 0);\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","sourceOld":"  public void testQueryPhraseMapOverlap2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(toPhraseQuery(analyze(\"abc\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"bcd\", F, analyzerB), F), Occur.MUST);\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"ab\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    QueryPhraseMap qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost, 0);\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 3, qpm.subMap.size() );\n\n    // \"ab bc\"\n    assertNotNull( qpm.subMap.get( \"ab\" ) );\n    qpm2 = qpm.subMap.get( \"ab\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"bc\" ) );\n    qpm3 = qpm2.subMap.get( \"bc\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"ab bc cd\"\n    assertEquals( 1, qpm3.subMap.size() );\n    assertNotNull( qpm3.subMap.get( \"cd\" ) );\n    qpm4 = qpm3.subMap.get( \"cd\" );\n    assertTrue( qpm4.terminal );\n    assertEquals( 1F, qpm4.boost, 0);\n\n    // \"bc cd\"\n    assertNotNull( qpm.subMap.get( \"bc\" ) );\n    qpm2 = qpm.subMap.get( \"bc\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"cd\" ) );\n    qpm3 = qpm2.subMap.get( \"cd\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    // \"cd\"\n    assertNotNull( qpm.subMap.get( \"cd\" ) );\n    qpm2 = qpm.subMap.get( \"cd\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 0, qpm2.subMap.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"5f4e87790277826a2aea119328600dfb07761f32":["33e4a95ed08968b85d84e9fba82424f1fd945fbb","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"5f4e87790277826a2aea119328600dfb07761f32":[],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","5f4e87790277826a2aea119328600dfb07761f32","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}