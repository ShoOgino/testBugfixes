{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link DirectoryReader#openIfChanged(DirectoryReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link DirectoryReader#openIfChanged(DirectoryReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":null,"sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link DirectoryReader#openIfChanged(DirectoryReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}