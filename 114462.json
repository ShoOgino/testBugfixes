{"path":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, true, -1, null, false, merger.hasProx(),\n                                               merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, merged);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\");\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir, useCompoundFile, true);\n   }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"433777d1eaf9998136cd16515dc0e1eb26f5d535","date":1273839120,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, true, -1, null, false, merger.hasProx(),\n                                               merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, true, -1, null, false, merger.hasProx(),\n                                               merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, true, -1, null, false, merger.hasProx(),\n                                               merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.hasProx(), merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f367dfb9086b92a13c77e2d31112c715cd4502c","date":1290190924,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e1cbd7e289dc1243c7a59e1a83d078163a147fe","date":1292268032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs(),\n                                               merger.hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e06c9d5fba0a2f937941d199d64ccb32aac502d1","date":1292411167,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs(),\n                                               merger.hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94cb8b3ec0439dfd8e179637ee4191cd9c6227e5","date":1292711882,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, -1, null, false, merger.hasProx(), merger.getSegmentCodecs());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n\n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete)\n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      merger.closeReaders();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.hasProx(), merger.getCodec());\n      \n      if (useCompoundFile) {\n        List<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","date":1294227869,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n\n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete)\n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n\n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        for (final String fileToDelete : filesToDelete)\n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(),\n                                               merger.fieldInfos());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(),\n                                               merger.fieldInfos());\n\n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete)\n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n\n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete)\n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(),\n                                               merger.fieldInfos());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, fieldInfos.hasProx(), merger.getSegmentCodecs(),\n                                               fieldInfos.hasVectors(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, fieldInfos.hasProx(), merger.getSegmentCodecs(),\n                                               fieldInfos.hasVectors(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      \n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),\n                                               merger.fieldInfos().hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, fieldInfos.hasProx(), merger.getSegmentCodecs(),\n                                               fieldInfos.hasVectors(), fieldInfos);\n\n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete)\n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(),\n                                               merger.fieldInfos());\n\n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete)\n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, fieldInfos.hasProx(), merger.getSegmentCodecs(),\n                                               fieldInfos.hasVectors(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, fieldInfos.hasProx(), merger.getSegmentCodecs(),\n                                               fieldInfos.hasVectors(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, fieldInfos.hasProx(), merger.getSegmentCodecs(),\n                                               fieldInfos.hasVectors(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = IOContext.READ;\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, IOContext.DEFAULT);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = IOContext.READ;\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, IOContext.DEFAULT);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos());\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info);\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos(), Codec.getDefault(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getCodec(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getSegmentCodecs(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, null, new FieldInfos(), Codec.getDefault(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  merger.fieldInfos();\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, merger.getCodec(), fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["1224a4027481acce15495b03bce9b48b93b42722"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["7f367dfb9086b92a13c77e2d31112c715cd4502c"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["6267e1ce56c2eec111425690cd04e251b6f14952"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","94cb8b3ec0439dfd8e179637ee4191cd9c6227e5"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","1224a4027481acce15495b03bce9b48b93b42722"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"94cb8b3ec0439dfd8e179637ee4191cd9c6227e5":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","b6f9be74ca7baaef11857ad002cad40419979516"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["e06c9d5fba0a2f937941d199d64ccb32aac502d1"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["94cb8b3ec0439dfd8e179637ee4191cd9c6227e5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6267e1ce56c2eec111425690cd04e251b6f14952"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"e06c9d5fba0a2f937941d199d64ccb32aac502d1":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"85a883878c0af761245ab048babc63d099f835f3":["6267e1ce56c2eec111425690cd04e251b6f14952","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","94cb8b3ec0439dfd8e179637ee4191cd9c6227e5"],"7f367dfb9086b92a13c77e2d31112c715cd4502c":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"6267e1ce56c2eec111425690cd04e251b6f14952":["433777d1eaf9998136cd16515dc0e1eb26f5d535"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"]},"commit2Childs":{"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","ddc4c914be86e34b54f70023f45a60fa7f04e929","a3776dccca01c11e7046323cfad46a3b4a471233"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","7f367dfb9086b92a13c77e2d31112c715cd4502c"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["433777d1eaf9998136cd16515dc0e1eb26f5d535"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"94cb8b3ec0439dfd8e179637ee4191cd9c6227e5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","7b91922b55d15444d554721b352861d028eb8278"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["94cb8b3ec0439dfd8e179637ee4191cd9c6227e5"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["e06c9d5fba0a2f937941d199d64ccb32aac502d1"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["70ad682703b8585f5d0a637efec044d57ec05efb","b0c7a8f7304b75b1528814c5820fa23a96816c27","868da859b43505d9d2a023bfeae6dd0c795f5295"],"1224a4027481acce15495b03bce9b48b93b42722":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"e06c9d5fba0a2f937941d199d64ccb32aac502d1":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f367dfb9086b92a13c77e2d31112c715cd4502c":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"6267e1ce56c2eec111425690cd04e251b6f14952":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","833a7987bc1c94455fde83e3311f72bddedcfb93","85a883878c0af761245ab048babc63d099f835f3"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5d004d0e0b3f65bb40da76d476d659d7888270e8","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}