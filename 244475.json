{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","commits":[{"id":"df2d68685a69bd82bf79243e28623c0775eb7bd8","date":1185567892,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"/dev/null","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = (QueryParser) queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer());\n      queryParser.set(qp);\n    }\n    return qp.parse(qq.getValue(qqName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = (QueryParser) queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    return qp.parse(qq.getValue(qqName));\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = (QueryParser) queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer());\n      queryParser.set(qp);\n    }\n    return qp.parse(qq.getValue(qqName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    return qp.parse(qq.getValue(qqName));\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = (QueryParser) queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    return qp.parse(qq.getValue(qqName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    return qp.parse(qq.getValue(qqName));\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    return qp.parse(qq.getValue(qqName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25defbed77c88962444668923fd39efedf03579a","date":1266735608,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    return qp.parse(qq.getValue(qqName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["25defbed77c88962444668923fd39efedf03579a"],"25defbed77c88962444668923fd39efedf03579a":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25defbed77c88962444668923fd39efedf03579a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba1116b3450a9c1642c89445d131b37344055245":["25defbed77c88962444668923fd39efedf03579a"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}