{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#hyphenate(char[],int,int,int,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#hyphenate(char[],int,int,int,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#hyphenate(char[],int,int,int,int).mjava","sourceNew":"  /**\n   * Hyphenate word and return an array of hyphenation points.\n   * \n   * @param w char array that contains the word\n   * @param offset Offset to first character in word\n   * @param len Length of word\n   * @param remainCharCount Minimum number of characters allowed before the\n   *        hyphenation point.\n   * @param pushCharCount Minimum number of characters allowed after the\n   *        hyphenation point.\n   * @return a {@link Hyphenation Hyphenation} object representing the\n   *         hyphenated word or null if word is not hyphenated.\n   */\n  public Hyphenation hyphenate(char[] w, int offset, int len,\n      int remainCharCount, int pushCharCount) {\n    int i;\n    char[] word = new char[len + 3];\n\n    // normalize word\n    char[] c = new char[2];\n    int iIgnoreAtBeginning = 0;\n    int iLength = len;\n    boolean bEndOfLetters = false;\n    for (i = 1; i <= len; i++) {\n      c[0] = w[offset + i - 1];\n      int nc = classmap.find(c, 0);\n      if (nc < 0) { // found a non-letter character ...\n        if (i == (1 + iIgnoreAtBeginning)) {\n          // ... before any letter character\n          iIgnoreAtBeginning++;\n        } else {\n          // ... after a letter character\n          bEndOfLetters = true;\n        }\n        iLength--;\n      } else {\n        if (!bEndOfLetters) {\n          word[i - iIgnoreAtBeginning] = (char) nc;\n        } else {\n          return null;\n        }\n      }\n    }\n    len = iLength;\n    if (len < (remainCharCount + pushCharCount)) {\n      // word is too short to be hyphenated\n      return null;\n    }\n    int[] result = new int[len + 1];\n    int k = 0;\n\n    // check exception list first\n    String sw = new String(word, 1, len);\n    if (stoplist.containsKey(sw)) {\n      // assume only simple hyphens (Hyphen.pre=\"-\", Hyphen.post = Hyphen.no =\n      // null)\n      ArrayList<Object> hw = stoplist.get(sw);\n      int j = 0;\n      for (i = 0; i < hw.size(); i++) {\n        Object o = hw.get(i);\n        // j = index(sw) = letterindex(word)?\n        // result[k] = corresponding index(w)\n        if (o instanceof String) {\n          j += ((String) o).length();\n          if (j >= remainCharCount && j < (len - pushCharCount)) {\n            result[k++] = j + iIgnoreAtBeginning;\n          }\n        }\n      }\n    } else {\n      // use algorithm to get hyphenation points\n      word[0] = '.'; // word start marker\n      word[len + 1] = '.'; // word end marker\n      word[len + 2] = 0; // null terminated\n      byte[] il = new byte[len + 3]; // initialized to zero\n      for (i = 0; i < len + 1; i++) {\n        searchPatterns(word, i, il);\n      }\n\n      // hyphenation points are located where interletter value is odd\n      // i is letterindex(word),\n      // i + 1 is index(word),\n      // result[k] = corresponding index(w)\n      for (i = 0; i < len; i++) {\n        if (((il[i + 1] & 1) == 1) && i >= remainCharCount\n            && i <= (len - pushCharCount)) {\n          result[k++] = i + iIgnoreAtBeginning;\n        }\n      }\n    }\n\n    if (k > 0) {\n      // trim result array\n      int[] res = new int[k+2];\n      System.arraycopy(result, 0, res, 1, k);\n      // We add the synthetical hyphenation points\n      // at the beginning and end of the word\n      res[0]=0;\n      res[k+1]=len;\n      return new Hyphenation(res);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Hyphenate word and return an array of hyphenation points.\n   * \n   * @param w char array that contains the word\n   * @param offset Offset to first character in word\n   * @param len Length of word\n   * @param remainCharCount Minimum number of characters allowed before the\n   *        hyphenation point.\n   * @param pushCharCount Minimum number of characters allowed after the\n   *        hyphenation point.\n   * @return a {@link Hyphenation Hyphenation} object representing the\n   *         hyphenated word or null if word is not hyphenated.\n   */\n  public Hyphenation hyphenate(char[] w, int offset, int len,\n      int remainCharCount, int pushCharCount) {\n    int i;\n    char[] word = new char[len + 3];\n\n    // normalize word\n    char[] c = new char[2];\n    int iIgnoreAtBeginning = 0;\n    int iLength = len;\n    boolean bEndOfLetters = false;\n    for (i = 1; i <= len; i++) {\n      c[0] = w[offset + i - 1];\n      int nc = classmap.find(c, 0);\n      if (nc < 0) { // found a non-letter character ...\n        if (i == (1 + iIgnoreAtBeginning)) {\n          // ... before any letter character\n          iIgnoreAtBeginning++;\n        } else {\n          // ... after a letter character\n          bEndOfLetters = true;\n        }\n        iLength--;\n      } else {\n        if (!bEndOfLetters) {\n          word[i - iIgnoreAtBeginning] = (char) nc;\n        } else {\n          return null;\n        }\n      }\n    }\n    len = iLength;\n    if (len < (remainCharCount + pushCharCount)) {\n      // word is too short to be hyphenated\n      return null;\n    }\n    int[] result = new int[len + 1];\n    int k = 0;\n\n    // check exception list first\n    String sw = new String(word, 1, len);\n    if (stoplist.containsKey(sw)) {\n      // assume only simple hyphens (Hyphen.pre=\"-\", Hyphen.post = Hyphen.no =\n      // null)\n      ArrayList<Object> hw = stoplist.get(sw);\n      int j = 0;\n      for (i = 0; i < hw.size(); i++) {\n        Object o = hw.get(i);\n        // j = index(sw) = letterindex(word)?\n        // result[k] = corresponding index(w)\n        if (o instanceof String) {\n          j += ((String) o).length();\n          if (j >= remainCharCount && j < (len - pushCharCount)) {\n            result[k++] = j + iIgnoreAtBeginning;\n          }\n        }\n      }\n    } else {\n      // use algorithm to get hyphenation points\n      word[0] = '.'; // word start marker\n      word[len + 1] = '.'; // word end marker\n      word[len + 2] = 0; // null terminated\n      byte[] il = new byte[len + 3]; // initialized to zero\n      for (i = 0; i < len + 1; i++) {\n        searchPatterns(word, i, il);\n      }\n\n      // hyphenation points are located where interletter value is odd\n      // i is letterindex(word),\n      // i + 1 is index(word),\n      // result[k] = corresponding index(w)\n      for (i = 0; i < len; i++) {\n        if (((il[i + 1] & 1) == 1) && i >= remainCharCount\n            && i <= (len - pushCharCount)) {\n          result[k++] = i + iIgnoreAtBeginning;\n        }\n      }\n    }\n\n    if (k > 0) {\n      // trim result array\n      int[] res = new int[k+2];\n      System.arraycopy(result, 0, res, 1, k);\n      // We add the synthetical hyphenation points\n      // at the beginning and end of the word\n      res[0]=0;\n      res[k+1]=len;\n      return new Hyphenation(res);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#hyphenate(char[],int,int,int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#hyphenate(char[],int,int,int,int).mjava","sourceNew":"  /**\n   * Hyphenate word and return an array of hyphenation points.\n   * \n   * @param w char array that contains the word\n   * @param offset Offset to first character in word\n   * @param len Length of word\n   * @param remainCharCount Minimum number of characters allowed before the\n   *        hyphenation point.\n   * @param pushCharCount Minimum number of characters allowed after the\n   *        hyphenation point.\n   * @return a {@link Hyphenation Hyphenation} object representing the\n   *         hyphenated word or null if word is not hyphenated.\n   */\n  public Hyphenation hyphenate(char[] w, int offset, int len,\n      int remainCharCount, int pushCharCount) {\n    int i;\n    char[] word = new char[len + 3];\n\n    // normalize word\n    char[] c = new char[2];\n    int iIgnoreAtBeginning = 0;\n    int iLength = len;\n    boolean bEndOfLetters = false;\n    for (i = 1; i <= len; i++) {\n      c[0] = w[offset + i - 1];\n      int nc = classmap.find(c, 0);\n      if (nc < 0) { // found a non-letter character ...\n        if (i == (1 + iIgnoreAtBeginning)) {\n          // ... before any letter character\n          iIgnoreAtBeginning++;\n        } else {\n          // ... after a letter character\n          bEndOfLetters = true;\n        }\n        iLength--;\n      } else {\n        if (!bEndOfLetters) {\n          word[i - iIgnoreAtBeginning] = (char) nc;\n        } else {\n          return null;\n        }\n      }\n    }\n    len = iLength;\n    if (len < (remainCharCount + pushCharCount)) {\n      // word is too short to be hyphenated\n      return null;\n    }\n    int[] result = new int[len + 1];\n    int k = 0;\n\n    // check exception list first\n    String sw = new String(word, 1, len);\n    if (stoplist.containsKey(sw)) {\n      // assume only simple hyphens (Hyphen.pre=\"-\", Hyphen.post = Hyphen.no =\n      // null)\n      ArrayList<Object> hw = stoplist.get(sw);\n      int j = 0;\n      for (i = 0; i < hw.size(); i++) {\n        Object o = hw.get(i);\n        // j = index(sw) = letterindex(word)?\n        // result[k] = corresponding index(w)\n        if (o instanceof String) {\n          j += ((String) o).length();\n          if (j >= remainCharCount && j < (len - pushCharCount)) {\n            result[k++] = j + iIgnoreAtBeginning;\n          }\n        }\n      }\n    } else {\n      // use algorithm to get hyphenation points\n      word[0] = '.'; // word start marker\n      word[len + 1] = '.'; // word end marker\n      word[len + 2] = 0; // null terminated\n      byte[] il = new byte[len + 3]; // initialized to zero\n      for (i = 0; i < len + 1; i++) {\n        searchPatterns(word, i, il);\n      }\n\n      // hyphenation points are located where interletter value is odd\n      // i is letterindex(word),\n      // i + 1 is index(word),\n      // result[k] = corresponding index(w)\n      for (i = 0; i < len; i++) {\n        if (((il[i + 1] & 1) == 1) && i >= remainCharCount\n            && i <= (len - pushCharCount)) {\n          result[k++] = i + iIgnoreAtBeginning;\n        }\n      }\n    }\n\n    if (k > 0) {\n      // trim result array\n      int[] res = new int[k+2];\n      System.arraycopy(result, 0, res, 1, k);\n      // We add the synthetical hyphenation points\n      // at the beginning and end of the word\n      res[0]=0;\n      res[k+1]=len;\n      return new Hyphenation(res);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Hyphenate word and return an array of hyphenation points.\n   * \n   * @param w char array that contains the word\n   * @param offset Offset to first character in word\n   * @param len Length of word\n   * @param remainCharCount Minimum number of characters allowed before the\n   *        hyphenation point.\n   * @param pushCharCount Minimum number of characters allowed after the\n   *        hyphenation point.\n   * @return a {@link Hyphenation Hyphenation} object representing the\n   *         hyphenated word or null if word is not hyphenated.\n   */\n  public Hyphenation hyphenate(char[] w, int offset, int len,\n      int remainCharCount, int pushCharCount) {\n    int i;\n    char[] word = new char[len + 3];\n\n    // normalize word\n    char[] c = new char[2];\n    int iIgnoreAtBeginning = 0;\n    int iLength = len;\n    boolean bEndOfLetters = false;\n    for (i = 1; i <= len; i++) {\n      c[0] = w[offset + i - 1];\n      int nc = classmap.find(c, 0);\n      if (nc < 0) { // found a non-letter character ...\n        if (i == (1 + iIgnoreAtBeginning)) {\n          // ... before any letter character\n          iIgnoreAtBeginning++;\n        } else {\n          // ... after a letter character\n          bEndOfLetters = true;\n        }\n        iLength--;\n      } else {\n        if (!bEndOfLetters) {\n          word[i - iIgnoreAtBeginning] = (char) nc;\n        } else {\n          return null;\n        }\n      }\n    }\n    len = iLength;\n    if (len < (remainCharCount + pushCharCount)) {\n      // word is too short to be hyphenated\n      return null;\n    }\n    int[] result = new int[len + 1];\n    int k = 0;\n\n    // check exception list first\n    String sw = new String(word, 1, len);\n    if (stoplist.containsKey(sw)) {\n      // assume only simple hyphens (Hyphen.pre=\"-\", Hyphen.post = Hyphen.no =\n      // null)\n      ArrayList<Object> hw = stoplist.get(sw);\n      int j = 0;\n      for (i = 0; i < hw.size(); i++) {\n        Object o = hw.get(i);\n        // j = index(sw) = letterindex(word)?\n        // result[k] = corresponding index(w)\n        if (o instanceof String) {\n          j += ((String) o).length();\n          if (j >= remainCharCount && j < (len - pushCharCount)) {\n            result[k++] = j + iIgnoreAtBeginning;\n          }\n        }\n      }\n    } else {\n      // use algorithm to get hyphenation points\n      word[0] = '.'; // word start marker\n      word[len + 1] = '.'; // word end marker\n      word[len + 2] = 0; // null terminated\n      byte[] il = new byte[len + 3]; // initialized to zero\n      for (i = 0; i < len + 1; i++) {\n        searchPatterns(word, i, il);\n      }\n\n      // hyphenation points are located where interletter value is odd\n      // i is letterindex(word),\n      // i + 1 is index(word),\n      // result[k] = corresponding index(w)\n      for (i = 0; i < len; i++) {\n        if (((il[i + 1] & 1) == 1) && i >= remainCharCount\n            && i <= (len - pushCharCount)) {\n          result[k++] = i + iIgnoreAtBeginning;\n        }\n      }\n    }\n\n    if (k > 0) {\n      // trim result array\n      int[] res = new int[k+2];\n      System.arraycopy(result, 0, res, 1, k);\n      // We add the synthetical hyphenation points\n      // at the beginning and end of the word\n      res[0]=0;\n      res[k+1]=len;\n      return new Hyphenation(res);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}