{"path":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPositionRange().mjava","commits":[{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPositionRange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpanPositionRange() throws Exception {\n    SpanPositionRangeQuery query;\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    query = new SpanPositionRangeQuery(term1, 1, 2);\n    checkHits(query, new int[]\n      {25,35, 45, 55, 65, 75, 85, 95});\n    assertTrue(searcher.explain(query, 25).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 95).getValue() > 0.0f);\n\n    query = new SpanPositionRangeQuery(term1, 0, 1);\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512,\n              513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525,\n              526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538,\n              539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551,\n              552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564,\n              565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577,\n              578, 579, 580, 581, 582, 583, 584,\n              585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n              598, 599});\n\n    query = new SpanPositionRangeQuery(term1, 6, 7);\n    checkHits(query, new int[]{});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPositionRange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpanPositionRange() throws Exception {\n    SpanPositionRangeQuery query;\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    query = new SpanPositionRangeQuery(term1, 1, 2);\n    checkHits(query, new int[]\n      {25,35, 45, 55, 65, 75, 85, 95});\n    assertTrue(searcher.explain(query, 25).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 95).getValue() > 0.0f);\n\n    query = new SpanPositionRangeQuery(term1, 0, 1);\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512,\n              513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525,\n              526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538,\n              539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551,\n              552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564,\n              565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577,\n              578, 579, 580, 581, 582, 583, 584,\n              585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n              598, 599});\n\n    query = new SpanPositionRangeQuery(term1, 6, 7);\n    checkHits(query, new int[]{});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPositionRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPositionRange().mjava","sourceNew":"  @Test\n  public void testSpanPositionRange() throws Exception {\n    SpanPositionRangeQuery query;\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    query = new SpanPositionRangeQuery(term1, 1, 2);\n    checkHits(query, new int[]\n      {25,35, 45, 55, 65, 75, 85, 95});\n    assertTrue(searcher.explain(query, 25).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 95).getValue() > 0.0f);\n\n    query = new SpanPositionRangeQuery(term1, 0, 1);\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512,\n              513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525,\n              526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538,\n              539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551,\n              552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564,\n              565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577,\n              578, 579, 580, 581, 582, 583, 584,\n              585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n              598, 599});\n\n    query = new SpanPositionRangeQuery(term1, 6, 7);\n    checkHits(query, new int[]{});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPositionRange() throws Exception {\n    SpanPositionRangeQuery query;\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    query = new SpanPositionRangeQuery(term1, 1, 2);\n    checkHits(query, new int[]\n      {25,35, 45, 55, 65, 75, 85, 95});\n    assertTrue(searcher.explain(query, 25).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 95).getValue() > 0.0f);\n\n    query = new SpanPositionRangeQuery(term1, 0, 1);\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512,\n              513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525,\n              526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538,\n              539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551,\n              552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564,\n              565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577,\n              578, 579, 580, 581, 582, 583, 584,\n              585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n              598, 599});\n\n    query = new SpanPositionRangeQuery(term1, 6, 7);\n    checkHits(query, new int[]{});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","498e168d849b4dbc097ac7b31f6db170d6f55725"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","498e168d849b4dbc097ac7b31f6db170d6f55725"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}