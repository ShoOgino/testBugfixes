{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1));\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14975dba6846360ff627c6797726fa4899a3413d","date":1295174738,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653d5cf6fde6d464d769db0c636467b9dab2d965","date":1326972073,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1)\n            .setMergePolicy(\n                random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES\n                    : NoMergePolicy.NO_COMPOUND_FILES));\n        // don't use a merge policy here they depend on the DWPThreadPool and its max thread states etc.\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final  IndexWriter writer = new IndexWriter(\n            dir,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n                setMaxBufferedDocs(-1).\n                setMergePolicy(newLogMergePolicy(10))\n        );\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1)\n            .setMergePolicy(\n                random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES\n                    : NoMergePolicy.NO_COMPOUND_FILES));\n        // don't use a merge policy here they depend on the DWPThreadPool and its max thread states etc.\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(-1)\n            .setMergePolicy(\n                random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES\n                    : NoMergePolicy.NO_COMPOUND_FILES));\n        // don't use a merge policy here they depend on the DWPThreadPool and its max thread states etc.\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n                    doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n\n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(\"i=\" + i, expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits liveDocs = MultiFields.getLiveDocs(reader);\n      assertNotNull(liveDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (!liveDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(10));\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["653d5cf6fde6d464d769db0c636467b9dab2d965"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["2f49143da0a5d278a72f741432047fcfa6da996e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"653d5cf6fde6d464d769db0c636467b9dab2d965":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4e8cc373c801e54cec75daf9f52792cb4b17f536","14975dba6846360ff627c6797726fa4899a3413d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"14975dba6846360ff627c6797726fa4899a3413d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["14975dba6846360ff627c6797726fa4899a3413d"],"653d5cf6fde6d464d769db0c636467b9dab2d965":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"2f49143da0a5d278a72f741432047fcfa6da996e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","653d5cf6fde6d464d769db0c636467b9dab2d965"],"14975dba6846360ff627c6797726fa4899a3413d":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}