{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(matchVersion, streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":null,"sourceOld":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(matchVersion, streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":null,"sourceOld":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(matchVersion, streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":null,"sourceOld":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683d3f90dda2bbb999c3ce855706d74563a53680":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["683d3f90dda2bbb999c3ce855706d74563a53680","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["683d3f90dda2bbb999c3ce855706d74563a53680"]},"commit2Childs":{"683d3f90dda2bbb999c3ce855706d74563a53680":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}