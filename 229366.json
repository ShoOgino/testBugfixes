{"path":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","commits":[{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestRank(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexSearcher s = new IndexSearcher(dir, true);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (String field, FieldScoreQuery.Type tp) throws Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    log(\"test: \"+q);\n    QueryUtils.check(random, q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","pathOld":"/dev/null","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexSearcher s = new IndexSearcher(dir, true);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","pathOld":"/dev/null","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexSearcher s = new IndexSearcher(dir, true);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    s.close();\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexSearcher s = new IndexSearcher(dir, true);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random(), functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random, functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestFieldScoreQuery#doTestRank(ValueSource).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random(), functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs in expected order.\n  private void doTestRank (ValueSource valueSource) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    log(\"test: \"+ functionQuery);\n    QueryUtils.check(random(), functionQuery,s);\n    ScoreDoc[] h = s.search(functionQuery, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = \"ID\"+(N_DOCS+1); // greater than all ids of docs in this test\n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(functionQuery,h[i].doc));\n      assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      prevID = resID;\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}