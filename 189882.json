{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","commits":[{"id":"cea5f7a2e31566bda38c740c37affa52b0e9c46e","date":1323436632,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testQuery() {\n    String[][][] docs = generateDocs(2);\n    \n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    \n    assertExpectedDocs(docs, processor);\n    assertEquals(1, processor.getQueryCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testQuery() {\n    String[][][] docs = generateDocs(2);\n    \n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    \n    assertExpectedDocs(docs, processor);\n    assertEquals(1, processor.getQueryCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8","date":1324129595,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","sourceNew":"  public void testQuery() {\n    List<Doc> docs = generateUniqueDocs(2);\n\n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n\n    assertExpectedDocs(docs, processor);\n    assertEquals(1, processor.getQueryCount());\n  }\n\n","sourceOld":"  public void testQuery() {\n    String[][][] docs = generateDocs(2);\n    \n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n    \n    assertExpectedDocs(docs, processor);\n    assertEquals(1, processor.getQueryCount());\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ae7b4adfa274da5f5fdc865e127928b25e5e929","date":1417607786,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","sourceNew":"  public void testQuery() {\n    List<Doc> docs = generateUniqueDocs(2);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n\n    assertExpectedDocs(docs, processor);\n    assertEquals(1, processor.getQueryCount());\n  }\n\n","sourceOld":"  public void testQuery() {\n    List<Doc> docs = generateUniqueDocs(2);\n\n    MockSolrEntityProcessor processor = new MockSolrEntityProcessor(docs);\n\n    assertExpectedDocs(docs, processor);\n    assertEquals(1, processor.getQueryCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","sourceNew":"  public void testQuery() {\n    List<Doc> docs = generateUniqueDocs(2);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n    try {\n      assertExpectedDocs(docs, processor);\n      assertEquals(1, processor.getQueryCount());\n    } finally {\n      processor.destroy();\n    }\n  }\n\n","sourceOld":"  public void testQuery() {\n    List<Doc> docs = generateUniqueDocs(2);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n\n    assertExpectedDocs(docs, processor);\n    assertEquals(1, processor.getQueryCount());\n  }\n\n","bugFix":["cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8","cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorUnit#testQuery().mjava","sourceNew":null,"sourceOld":"  public void testQuery() {\n    List<Doc> docs = generateUniqueDocs(2);\n\n    MockSolrEntityProcessor processor = createAndInit(docs);\n    try {\n      assertExpectedDocs(docs, processor);\n      assertEquals(1, processor.getQueryCount());\n    } finally {\n      processor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8":["cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["cdb62ae894642b07cf3f21eb09dc5d85f4a0a4b8","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}