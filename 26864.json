{"path":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"    /** Prints a user-readable version of this query. */\n    public String toString(String field) {\n        StringBuffer buffer = new StringBuffer();\n        if (!term.field().equals(field)) {\n            buffer.append(term.field());\n            buffer.append(\":\");\n        }\n        buffer.append(term.text());\n        if (getBoost() != 1.0f) {\n            buffer.append(\"^\");\n            buffer.append(Float.toString(getBoost()));\n        }\n        return buffer.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","sourceNew":"    /** Prints a user-readable version of this query. */\n    public String toString(String field) {\n        StringBuffer buffer = new StringBuffer();\n        if (!term.field().equals(field)) {\n            buffer.append(term.field());\n            buffer.append(\":\");\n        }\n        buffer.append(term.text());\n        buffer.append(ToStringUtils.boost(getBoost()));\n        return buffer.toString();\n    }\n\n","sourceOld":"    /** Prints a user-readable version of this query. */\n    public String toString(String field) {\n        StringBuffer buffer = new StringBuffer();\n        if (!term.field().equals(field)) {\n            buffer.append(term.field());\n            buffer.append(\":\");\n        }\n        buffer.append(term.text());\n        if (getBoost() != 1.0f) {\n            buffer.append(\"^\");\n            buffer.append(Float.toString(getBoost()));\n        }\n        return buffer.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (term != null) {\n      if (!term.field().equals(field)) {\n        buffer.append(term.field());\n        buffer.append(\":\");\n      }\n      buffer.append(term.text());\n    } else {\n      buffer.append(\"termPattern:unknown\");\n    }\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","sourceOld":"    /** Prints a user-readable version of this query. */\n    public String toString(String field) {\n        StringBuffer buffer = new StringBuffer();\n        if (!term.field().equals(field)) {\n            buffer.append(term.field());\n            buffer.append(\":\");\n        }\n        buffer.append(term.text());\n        buffer.append(ToStringUtils.boost(getBoost()));\n        return buffer.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0a32bc578c175fa42d65d95f21290d3473d84","date":1241610125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","sourceNew":"  /* Prints a user-readable version of this query.\n   * Implemented for back compat in case MultiTermQuery\n   * subclasses do no implement.\n   */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (term != null) {\n      if (!term.field().equals(field)) {\n        buffer.append(term.field());\n        buffer.append(\":\");\n      }\n      buffer.append(term.text());\n    } else {\n      buffer.append(\"termPattern:unknown\");\n    }\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (term != null) {\n      if (!term.field().equals(field)) {\n        buffer.append(term.field());\n        buffer.append(\":\");\n      }\n      buffer.append(term.text());\n    } else {\n      buffer.append(\"termPattern:unknown\");\n    }\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","sourceNew":"  /* Prints a user-readable version of this query.\n   * Implemented for back compat in case MultiTermQuery\n   * subclasses do no implement.\n   */\n  @Override\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (term != null) {\n      if (!term.field().equals(field)) {\n        buffer.append(term.field());\n        buffer.append(\":\");\n      }\n      buffer.append(term.text());\n    } else {\n      buffer.append(\"termPattern:unknown\");\n    }\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","sourceOld":"  /* Prints a user-readable version of this query.\n   * Implemented for back compat in case MultiTermQuery\n   * subclasses do no implement.\n   */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (term != null) {\n      if (!term.field().equals(field)) {\n        buffer.append(term.field());\n        buffer.append(\":\");\n      }\n      buffer.append(term.text());\n    } else {\n      buffer.append(\"termPattern:unknown\");\n    }\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","sourceNew":"  /* Prints a user-readable version of this query.\n   * Implemented for back compat in case MultiTermQuery\n   * subclasses do no implement.\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    if (term != null) {\n      if (!term.field().equals(field)) {\n        buffer.append(term.field());\n        buffer.append(\":\");\n      }\n      buffer.append(term.text());\n    } else {\n      buffer.append(\"termPattern:unknown\");\n    }\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","sourceOld":"  /* Prints a user-readable version of this query.\n   * Implemented for back compat in case MultiTermQuery\n   * subclasses do no implement.\n   */\n  @Override\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (term != null) {\n      if (!term.field().equals(field)) {\n        buffer.append(term.field());\n        buffer.append(\":\");\n      }\n      buffer.append(term.text());\n    } else {\n      buffer.append(\"termPattern:unknown\");\n    }\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3","date":1255442836,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/regex/src/java/org/apache/lucene/search/regex/RegexQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#toString(String).mjava","sourceNew":"  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    if (!term.field().equals(field)) {\n      buffer.append(term.field());\n      buffer.append(\":\");\n    }\n    buffer.append(term.text());\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","sourceOld":"  /* Prints a user-readable version of this query.\n   * Implemented for back compat in case MultiTermQuery\n   * subclasses do no implement.\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    if (term != null) {\n      if (!term.field().equals(field)) {\n        buffer.append(term.field());\n        buffer.append(\":\");\n      }\n      buffer.append(term.text());\n    } else {\n      buffer.append(\"termPattern:unknown\");\n    }\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58d0a32bc578c175fa42d65d95f21290d3473d84":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["322d95cfb0c59ace7533e19e5cec7f359ce6d6d3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["df8dadf22de84eeb1294e70792e292ecf8ded564"]},"commit2Childs":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"58d0a32bc578c175fa42d65d95f21290d3473d84":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["322d95cfb0c59ace7533e19e5cec7f359ce6d6d3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}