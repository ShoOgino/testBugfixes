{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/blockterms/LuceneFixedGap#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene50PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/blockterms/LuceneFixedGap#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene50PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene41PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n\n    success = false;\n    try {\n      // Must use BlockTermsWriter (not BlockTree) because\n      // BlockTree doens't support ords (yet)...\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          docs.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["a45bec74b98f6fc05f52770cfb425739e6563960"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a45bec74b98f6fc05f52770cfb425739e6563960":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a45bec74b98f6fc05f52770cfb425739e6563960","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a45bec74b98f6fc05f52770cfb425739e6563960":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}