{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#uniqueTest().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#uniqueTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#uniqueTest().mjava","sourceNew":"  @Test\n  public void uniqueTest() throws Exception { \n    //Int\n    Long intResult = (Long)getStatResult(\"ur\", \"int_id\", VAL_TYPE.LONG);\n    Long intTest = (Long)calculateStat(intTestStart, \"unique\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"ur\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"unique\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Long floatResult = (Long)getStatResult(\"ur\", \"float_fd\", VAL_TYPE.LONG);\n    Long floatTest = (Long)calculateStat(floatTestStart, \"unique\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Long doubleResult = (Long)getStatResult(\"ur\", \"double_dd\", VAL_TYPE.LONG);\n    Long doubleTest = (Long)calculateStat(doubleTestStart, \"unique\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    Long dateResult = (Long)getStatResult(\"ur\", \"date_dtd\", VAL_TYPE.LONG);\n    Long dateTest = (Long)calculateStat(dateTestStart, \"unique\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    Long stringResult = (Long)getStatResult(\"ur\", \"string_sd\", VAL_TYPE.LONG);\n    Long stringTest = (Long)calculateStat(stringTestStart, \"unique\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","sourceOld":"  @Test\n  public void uniqueTest() throws Exception { \n    //Int\n    Long intResult = (Long)getStatResult(\"ur\", \"int_id\", VAL_TYPE.LONG);\n    Long intTest = (Long)calculateStat(intTestStart, \"unique\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"ur\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"unique\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Long floatResult = (Long)getStatResult(\"ur\", \"float_fd\", VAL_TYPE.LONG);\n    Long floatTest = (Long)calculateStat(floatTestStart, \"unique\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Long doubleResult = (Long)getStatResult(\"ur\", \"double_dd\", VAL_TYPE.LONG);\n    Long doubleTest = (Long)calculateStat(doubleTestStart, \"unique\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    Long dateResult = (Long)getStatResult(\"ur\", \"date_dtd\", VAL_TYPE.LONG);\n    Long dateTest = (Long)calculateStat(dateTestStart, \"unique\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    Long stringResult = (Long)getStatResult(\"ur\", \"string_sd\", VAL_TYPE.LONG);\n    Long stringTest = (Long)calculateStat(stringTestStart, \"unique\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#uniqueTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#uniqueTest().mjava","sourceNew":"  @Test\n  public void uniqueTest() throws Exception {\n    Map<String, ETP> expressions = new HashMap<>();\n    expressions.put(\"int\", new ETP(\"unique(int_i)\", 6L));\n    expressions.put(\"longs\", new ETP(\"unique(long_lm)\", 2L));\n    expressions.put(\"float\", new ETP(\"unique(float_f)\", 5L));\n    expressions.put(\"doubles\", new ETP(\"unique(double_dm)\", 8L));\n    expressions.put(\"dates\", new ETP(\"unique(date_dt)\", 2L));\n    expressions.put(\"strings\", new ETP(\"unique(string_sm)\", 6L));\n\n    testExpressions(expressions);\n  }\n\n","sourceOld":"  @Test\n  public void uniqueTest() throws Exception { \n    //Int\n    Long intResult = (Long)getStatResult(\"ur\", \"int_id\", VAL_TYPE.LONG);\n    Long intTest = (Long)calculateStat(intTestStart, \"unique\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"ur\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"unique\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Long floatResult = (Long)getStatResult(\"ur\", \"float_fd\", VAL_TYPE.LONG);\n    Long floatTest = (Long)calculateStat(floatTestStart, \"unique\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Long doubleResult = (Long)getStatResult(\"ur\", \"double_dd\", VAL_TYPE.LONG);\n    Long doubleTest = (Long)calculateStat(doubleTestStart, \"unique\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    Long dateResult = (Long)getStatResult(\"ur\", \"date_dtd\", VAL_TYPE.LONG);\n    Long dateTest = (Long)calculateStat(dateTestStart, \"unique\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    Long stringResult = (Long)getStatResult(\"ur\", \"string_sd\", VAL_TYPE.LONG);\n    Long stringTest = (Long)calculateStat(stringTestStart, \"unique\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}