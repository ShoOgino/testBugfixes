{"path":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea","date":1369803313,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n            .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      assertNotNull(\"Null name on: \" + o.toString(), o.getObjectName());\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, \n                   0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                                       + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No SolrDynamicMBeans found\", 0 < numDynamicMbeans);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No SolrInfoMBean objects found in mbean server\", objects\n            .isEmpty());\n    for (ObjectInstance o : objects) {\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, mbeanInfo\n                .getAttributes().length > 0);\n      }\n    }\n  }\n\n","bugFix":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1d6d844f3b4061aedc283b5e71ff1d19aeae291","date":1375221534,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n            .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      assertNotNull(\"Null name on: \" + o.toString(), o.getObjectName());\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, \n                   0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                                       + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No SolrDynamicMBeans found\", 0 < numDynamicMbeans);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n            .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      assertNotNull(\"Null name on: \" + o.toString(), o.getObjectName());\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, \n                   0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                                       + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No SolrDynamicMBeans found\", 0 < numDynamicMbeans);\n  }\n\n","bugFix":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","9ce83f0d72db4660fd277a9d357698004d8f4336"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n            .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      assertNotNull(\"Null name on: \" + o.toString(), o.getObjectName());\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, \n                   0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                                       + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No SolrDynamicMBeans found\", 0 < numDynamicMbeans);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    log.info(\"Servers in testJmxRegistration: \" + servers);\n    assertNotNull(\"MBeanServers were null\", servers);\n    assertFalse(\"No MBeanServer was found\", servers.isEmpty());\n\n    MBeanServer mbeanServer = servers.get(0);\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n            .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      assertNotNull(\"Null name on: \" + o.toString(), o.getObjectName());\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, \n                   0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                                       + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No SolrDynamicMBeans found\", 0 < numDynamicMbeans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n        .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      ObjectName name = o.getObjectName();\n      assertNotNull(\"Null name on: \" + o.toString(), name);\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(name);\n      if (name.getDomain().equals(\"solr\")) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        if (name.getKeyProperty(\"name\").equals(\"fetcher\")) { // no attributes without active replication\n          continue;\n        }\n        assertTrue(\"No Attributes found for mbean: \" + o.getObjectName() + \", \" + mbeanInfo,\n            0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No MBeans found\", 0 < numDynamicMbeans);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n            .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      assertNotNull(\"Null name on: \" + o.toString(), o.getObjectName());\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, \n                   0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                                       + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No SolrDynamicMBeans found\", 0 < numDynamicMbeans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxIntegration#testJmxRegistration().mjava","sourceNew":"  @Test\n  public void testJmxRegistration() throws Exception {\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n        .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      ObjectName name = o.getObjectName();\n      assertNotNull(\"Null name on: \" + o.toString(), name);\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(name);\n      if (name.getDomain().equals(\"solr\")) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        if (name.getKeyProperty(\"name\").equals(\"fetcher\")) { // no attributes without active replication\n          continue;\n        }\n        assertTrue(\"No Attributes found for mbean: \" + o.getObjectName() + \", \" + mbeanInfo,\n            0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No MBeans found\", 0 < numDynamicMbeans);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxRegistration() throws Exception {\n    assertTrue(\"No MBeans found in server\", mbeanServer.getMBeanCount() > 0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, null);\n    assertFalse(\"No objects found in mbean server\", objects\n            .isEmpty());\n    int numDynamicMbeans = 0;\n    for (ObjectInstance o : objects) {\n      assertNotNull(\"Null name on: \" + o.toString(), o.getObjectName());\n      MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(o.getObjectName());\n      if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n        numDynamicMbeans++;\n        MBeanAttributeInfo[] attrs = mbeanInfo.getAttributes();\n        assertTrue(\"No Attributes found for mbean: \" + mbeanInfo, \n                   0 < attrs.length);\n        for (MBeanAttributeInfo attr : attrs) {\n          // ensure every advertised attribute is gettable\n          try {\n            Object trash = mbeanServer.getAttribute(o.getObjectName(), attr.getName());\n          } catch (javax.management.AttributeNotFoundException e) {\n            throw new RuntimeException(\"Unable to featch attribute for \" + o.getObjectName()\n                                       + \": \" + attr.getName(), e);\n          }\n        }\n      }\n    }\n    assertTrue(\"No SolrDynamicMBeans found\", 0 < numDynamicMbeans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea":["c26f00b574427b55127e869b935845554afde1fa"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"c1d6d844f3b4061aedc283b5e71ff1d19aeae291":["a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c1d6d844f3b4061aedc283b5e71ff1d19aeae291":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a5b5c8b6fe2f63b35d03b80574e5899f76bc54ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}