{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMergeFilterReader().mjava","commits":[{"id":"1f09f483a0844bb9dc34fb10380cb053aa96219b","date":1418894001,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMergeFilterReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeFilterReader() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(200);\n    final String[] stringValues = new String[10];\n    for (int i = 0; i < stringValues.length; ++i) {\n      stringValues[i] = RandomStrings.randomRealisticUnicodeOfLength(random(), 10);\n    }\n    Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"to_delete\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new StoredField(\"i\", random().nextInt(50)));\n      doc.add(new StoredField(\"l\", random().nextLong()));\n      doc.add(new StoredField(\"d\", random().nextDouble()));\n      doc.add(new StoredField(\"f\", random().nextFloat()));\n      doc.add(new StoredField(\"s\", RandomPicks.randomFrom(random(), stringValues)));\n      doc.add(new StoredField(\"b\", new BytesRef(RandomPicks.randomFrom(random(), stringValues))));\n      docs[i] = doc;\n      w.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      w.deleteDocuments(new Term(\"to_delete\", \"yes\"));\n    }\n    w.commit();\n    w.close();\n    \n    DirectoryReader reader = new DummyFilterDirectoryReader(DirectoryReader.open(dir));\n    \n    Directory dir2 = newDirectory();\n    w = new RandomIndexWriter(random(), dir2);\n    w.addIndexes(reader);\n    reader.close();\n    dir.close();\n\n    reader = w.getReader();\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      final StoredDocument doc = reader.document(i);\n      final int id = doc.getField(\"id\").numericValue().intValue();\n      final Document expected = docs[id];\n      assertEquals(expected.get(\"s\"), doc.get(\"s\"));\n      assertEquals(expected.getField(\"i\").numericValue(), doc.getField(\"i\").numericValue());\n      assertEquals(expected.getField(\"l\").numericValue(), doc.getField(\"l\").numericValue());\n      assertEquals(expected.getField(\"d\").numericValue(), doc.getField(\"d\").numericValue());\n      assertEquals(expected.getField(\"f\").numericValue(), doc.getField(\"f\").numericValue());\n      assertEquals(expected.getField(\"b\").binaryValue(), doc.getField(\"b\").binaryValue());\n    }\n\n    reader.close();\n    w.close();\n    TestUtil.checkIndex(dir2);\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMergeFilterReader().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMergeFilterReader().mjava","sourceNew":"  public void testMergeFilterReader() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(200);\n    final String[] stringValues = new String[10];\n    for (int i = 0; i < stringValues.length; ++i) {\n      stringValues[i] = RandomStrings.randomRealisticUnicodeOfLength(random(), 10);\n    }\n    Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"to_delete\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new StoredField(\"i\", random().nextInt(50)));\n      doc.add(new StoredField(\"l\", random().nextLong()));\n      doc.add(new StoredField(\"d\", random().nextDouble()));\n      doc.add(new StoredField(\"f\", random().nextFloat()));\n      doc.add(new StoredField(\"s\", RandomPicks.randomFrom(random(), stringValues)));\n      doc.add(new StoredField(\"b\", new BytesRef(RandomPicks.randomFrom(random(), stringValues))));\n      docs[i] = doc;\n      w.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      w.deleteDocuments(new Term(\"to_delete\", \"yes\"));\n    }\n    w.commit();\n    w.close();\n    \n    DirectoryReader reader = new DummyFilterDirectoryReader(DirectoryReader.open(dir));\n    \n    Directory dir2 = newDirectory();\n    w = new RandomIndexWriter(random(), dir2);\n    TestUtil.addIndexesSlowly(w.w, reader);\n    reader.close();\n    dir.close();\n\n    reader = w.getReader();\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      final StoredDocument doc = reader.document(i);\n      final int id = doc.getField(\"id\").numericValue().intValue();\n      final Document expected = docs[id];\n      assertEquals(expected.get(\"s\"), doc.get(\"s\"));\n      assertEquals(expected.getField(\"i\").numericValue(), doc.getField(\"i\").numericValue());\n      assertEquals(expected.getField(\"l\").numericValue(), doc.getField(\"l\").numericValue());\n      assertEquals(expected.getField(\"d\").numericValue(), doc.getField(\"d\").numericValue());\n      assertEquals(expected.getField(\"f\").numericValue(), doc.getField(\"f\").numericValue());\n      assertEquals(expected.getField(\"b\").binaryValue(), doc.getField(\"b\").binaryValue());\n    }\n\n    reader.close();\n    w.close();\n    TestUtil.checkIndex(dir2);\n    dir2.close();\n  }\n\n","sourceOld":"  public void testMergeFilterReader() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(200);\n    final String[] stringValues = new String[10];\n    for (int i = 0; i < stringValues.length; ++i) {\n      stringValues[i] = RandomStrings.randomRealisticUnicodeOfLength(random(), 10);\n    }\n    Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"to_delete\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new StoredField(\"i\", random().nextInt(50)));\n      doc.add(new StoredField(\"l\", random().nextLong()));\n      doc.add(new StoredField(\"d\", random().nextDouble()));\n      doc.add(new StoredField(\"f\", random().nextFloat()));\n      doc.add(new StoredField(\"s\", RandomPicks.randomFrom(random(), stringValues)));\n      doc.add(new StoredField(\"b\", new BytesRef(RandomPicks.randomFrom(random(), stringValues))));\n      docs[i] = doc;\n      w.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      w.deleteDocuments(new Term(\"to_delete\", \"yes\"));\n    }\n    w.commit();\n    w.close();\n    \n    DirectoryReader reader = new DummyFilterDirectoryReader(DirectoryReader.open(dir));\n    \n    Directory dir2 = newDirectory();\n    w = new RandomIndexWriter(random(), dir2);\n    w.addIndexes(reader);\n    reader.close();\n    dir.close();\n\n    reader = w.getReader();\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      final StoredDocument doc = reader.document(i);\n      final int id = doc.getField(\"id\").numericValue().intValue();\n      final Document expected = docs[id];\n      assertEquals(expected.get(\"s\"), doc.get(\"s\"));\n      assertEquals(expected.getField(\"i\").numericValue(), doc.getField(\"i\").numericValue());\n      assertEquals(expected.getField(\"l\").numericValue(), doc.getField(\"l\").numericValue());\n      assertEquals(expected.getField(\"d\").numericValue(), doc.getField(\"d\").numericValue());\n      assertEquals(expected.getField(\"f\").numericValue(), doc.getField(\"f\").numericValue());\n      assertEquals(expected.getField(\"b\").binaryValue(), doc.getField(\"b\").binaryValue());\n    }\n\n    reader.close();\n    w.close();\n    TestUtil.checkIndex(dir2);\n    dir2.close();\n  }\n\n","bugFix":["1f09f483a0844bb9dc34fb10380cb053aa96219b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMergeFilterReader().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMergeFilterReader().mjava","sourceNew":"  public void testMergeFilterReader() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(200);\n    final String[] stringValues = new String[10];\n    for (int i = 0; i < stringValues.length; ++i) {\n      stringValues[i] = RandomStrings.randomRealisticUnicodeOfLength(random(), 10);\n    }\n    Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"to_delete\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new StoredField(\"i\", random().nextInt(50)));\n      doc.add(new StoredField(\"l\", random().nextLong()));\n      doc.add(new StoredField(\"d\", random().nextDouble()));\n      doc.add(new StoredField(\"f\", random().nextFloat()));\n      doc.add(new StoredField(\"s\", RandomPicks.randomFrom(random(), stringValues)));\n      doc.add(new StoredField(\"b\", new BytesRef(RandomPicks.randomFrom(random(), stringValues))));\n      docs[i] = doc;\n      w.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      w.deleteDocuments(new Term(\"to_delete\", \"yes\"));\n    }\n    w.commit();\n    w.close();\n    \n    DirectoryReader reader = new DummyFilterDirectoryReader(DirectoryReader.open(dir));\n    \n    Directory dir2 = newDirectory();\n    w = new RandomIndexWriter(random(), dir2);\n    TestUtil.addIndexesSlowly(w.w, reader);\n    reader.close();\n    dir.close();\n\n    reader = w.getReader();\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      final Document doc = reader.document(i);\n      final int id = doc.getField(\"id\").numericValue().intValue();\n      final Document expected = docs[id];\n      assertEquals(expected.get(\"s\"), doc.get(\"s\"));\n      assertEquals(expected.getField(\"i\").numericValue(), doc.getField(\"i\").numericValue());\n      assertEquals(expected.getField(\"l\").numericValue(), doc.getField(\"l\").numericValue());\n      assertEquals(expected.getField(\"d\").numericValue(), doc.getField(\"d\").numericValue());\n      assertEquals(expected.getField(\"f\").numericValue(), doc.getField(\"f\").numericValue());\n      assertEquals(expected.getField(\"b\").binaryValue(), doc.getField(\"b\").binaryValue());\n    }\n\n    reader.close();\n    w.close();\n    TestUtil.checkIndex(dir2);\n    dir2.close();\n  }\n\n","sourceOld":"  public void testMergeFilterReader() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(200);\n    final String[] stringValues = new String[10];\n    for (int i = 0; i < stringValues.length; ++i) {\n      stringValues[i] = RandomStrings.randomRealisticUnicodeOfLength(random(), 10);\n    }\n    Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"to_delete\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new StoredField(\"i\", random().nextInt(50)));\n      doc.add(new StoredField(\"l\", random().nextLong()));\n      doc.add(new StoredField(\"d\", random().nextDouble()));\n      doc.add(new StoredField(\"f\", random().nextFloat()));\n      doc.add(new StoredField(\"s\", RandomPicks.randomFrom(random(), stringValues)));\n      doc.add(new StoredField(\"b\", new BytesRef(RandomPicks.randomFrom(random(), stringValues))));\n      docs[i] = doc;\n      w.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      w.deleteDocuments(new Term(\"to_delete\", \"yes\"));\n    }\n    w.commit();\n    w.close();\n    \n    DirectoryReader reader = new DummyFilterDirectoryReader(DirectoryReader.open(dir));\n    \n    Directory dir2 = newDirectory();\n    w = new RandomIndexWriter(random(), dir2);\n    TestUtil.addIndexesSlowly(w.w, reader);\n    reader.close();\n    dir.close();\n\n    reader = w.getReader();\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      final StoredDocument doc = reader.document(i);\n      final int id = doc.getField(\"id\").numericValue().intValue();\n      final Document expected = docs[id];\n      assertEquals(expected.get(\"s\"), doc.get(\"s\"));\n      assertEquals(expected.getField(\"i\").numericValue(), doc.getField(\"i\").numericValue());\n      assertEquals(expected.getField(\"l\").numericValue(), doc.getField(\"l\").numericValue());\n      assertEquals(expected.getField(\"d\").numericValue(), doc.getField(\"d\").numericValue());\n      assertEquals(expected.getField(\"f\").numericValue(), doc.getField(\"f\").numericValue());\n      assertEquals(expected.getField(\"b\").binaryValue(), doc.getField(\"b\").binaryValue());\n    }\n\n    reader.close();\n    w.close();\n    TestUtil.checkIndex(dir2);\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMergeFilterReader().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testMergeFilterReader().mjava","sourceNew":"  public void testMergeFilterReader() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(200);\n    final String[] stringValues = new String[10];\n    for (int i = 0; i < stringValues.length; ++i) {\n      stringValues[i] = RandomStrings.randomRealisticUnicodeOfLength(random(), 10);\n    }\n    Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"to_delete\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new StoredField(\"i\", random().nextInt(50)));\n      doc.add(new StoredField(\"l\", random().nextLong()));\n      doc.add(new StoredField(\"d\", random().nextDouble()));\n      doc.add(new StoredField(\"f\", random().nextFloat()));\n      doc.add(new StoredField(\"s\", RandomPicks.randomFrom(random(), stringValues)));\n      doc.add(new StoredField(\"b\", new BytesRef(RandomPicks.randomFrom(random(), stringValues))));\n      docs[i] = doc;\n      w.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      w.deleteDocuments(new Term(\"to_delete\", \"yes\"));\n    }\n    w.commit();\n    w.close();\n    \n    DirectoryReader reader = new DummyFilterDirectoryReader(maybeWrapWithMergingReader(DirectoryReader.open(dir)));\n    \n    Directory dir2 = newDirectory();\n    w = new RandomIndexWriter(random(), dir2);\n    TestUtil.addIndexesSlowly(w.w, reader);\n    reader.close();\n    dir.close();\n\n    reader = maybeWrapWithMergingReader(w.getReader());\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      final Document doc = reader.document(i);\n      final int id = doc.getField(\"id\").numericValue().intValue();\n      final Document expected = docs[id];\n      assertEquals(expected.get(\"s\"), doc.get(\"s\"));\n      assertEquals(expected.getField(\"i\").numericValue(), doc.getField(\"i\").numericValue());\n      assertEquals(expected.getField(\"l\").numericValue(), doc.getField(\"l\").numericValue());\n      assertEquals(expected.getField(\"d\").numericValue(), doc.getField(\"d\").numericValue());\n      assertEquals(expected.getField(\"f\").numericValue(), doc.getField(\"f\").numericValue());\n      assertEquals(expected.getField(\"b\").binaryValue(), doc.getField(\"b\").binaryValue());\n    }\n\n    reader.close();\n    w.close();\n    TestUtil.checkIndex(dir2);\n    dir2.close();\n  }\n\n","sourceOld":"  public void testMergeFilterReader() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(200);\n    final String[] stringValues = new String[10];\n    for (int i = 0; i < stringValues.length; ++i) {\n      stringValues[i] = RandomStrings.randomRealisticUnicodeOfLength(random(), 10);\n    }\n    Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"to_delete\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new StoredField(\"i\", random().nextInt(50)));\n      doc.add(new StoredField(\"l\", random().nextLong()));\n      doc.add(new StoredField(\"d\", random().nextDouble()));\n      doc.add(new StoredField(\"f\", random().nextFloat()));\n      doc.add(new StoredField(\"s\", RandomPicks.randomFrom(random(), stringValues)));\n      doc.add(new StoredField(\"b\", new BytesRef(RandomPicks.randomFrom(random(), stringValues))));\n      docs[i] = doc;\n      w.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      w.deleteDocuments(new Term(\"to_delete\", \"yes\"));\n    }\n    w.commit();\n    w.close();\n    \n    DirectoryReader reader = new DummyFilterDirectoryReader(DirectoryReader.open(dir));\n    \n    Directory dir2 = newDirectory();\n    w = new RandomIndexWriter(random(), dir2);\n    TestUtil.addIndexesSlowly(w.w, reader);\n    reader.close();\n    dir.close();\n\n    reader = w.getReader();\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      final Document doc = reader.document(i);\n      final int id = doc.getField(\"id\").numericValue().intValue();\n      final Document expected = docs[id];\n      assertEquals(expected.get(\"s\"), doc.get(\"s\"));\n      assertEquals(expected.getField(\"i\").numericValue(), doc.getField(\"i\").numericValue());\n      assertEquals(expected.getField(\"l\").numericValue(), doc.getField(\"l\").numericValue());\n      assertEquals(expected.getField(\"d\").numericValue(), doc.getField(\"d\").numericValue());\n      assertEquals(expected.getField(\"f\").numericValue(), doc.getField(\"f\").numericValue());\n      assertEquals(expected.getField(\"b\").binaryValue(), doc.getField(\"b\").binaryValue());\n    }\n\n    reader.close();\n    w.close();\n    TestUtil.checkIndex(dir2);\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["1f09f483a0844bb9dc34fb10380cb053aa96219b"],"1f09f483a0844bb9dc34fb10380cb053aa96219b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f09f483a0844bb9dc34fb10380cb053aa96219b"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1f09f483a0844bb9dc34fb10380cb053aa96219b":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}