{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","commits":[{"id":"78002dda5f9d46d20e8cf0a7c070b8205219a93d","date":1465238456,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mockControl.createMock(Statement.class);\n    EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .andReturn(statement);\n    statement.setFetchSize(500);\n    statement.setMaxRows(0);\n    EasyMock.expect(statement.execute(\"query\")).andThrow(sqlException);\n    statement.close();\n\n    mockControl.replay();\n\n    try {\n      jdbcDataSource.getData(\"query\");\n      fail(\"exception expected\");\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n\n    mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mockControl.createMock(Statement.class);\n    EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .andReturn(statement);\n    statement.setFetchSize(500);\n    statement.setMaxRows(0);\n    EasyMock.expect(statement.execute(\"query\")).andThrow(sqlException);\n    statement.close();\n\n    mockControl.replay();\n\n    try {\n      jdbcDataSource.getData(\"query\");\n      fail(\"exception expected\");\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n\n    mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mockControl.createMock(Statement.class);\n    EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .andReturn(statement);\n    statement.setFetchSize(500);\n    statement.setMaxRows(0);\n    EasyMock.expect(statement.execute(\"query\")).andThrow(sqlException);\n    statement.close();\n\n    mockControl.replay();\n\n    try {\n      jdbcDataSource.getData(\"query\");\n      fail(\"exception expected\");\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n\n    mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","sourceNew":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    when(dataSource.getConnection()).thenReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mock(Statement.class);\n    when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .thenReturn(statement);\n    when(statement.execute(\"query\")).thenThrow(sqlException);\n\n    try {\n      jdbcDataSource.getData(\"query\");\n      fail(\"exception expected\");\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    verify(statement).setFetchSize(500);\n    verify(statement).setMaxRows(0);\n    verify(statement).execute(\"query\");\n    verify(statement).close();\n  }\n\n","sourceOld":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mockControl.createMock(Statement.class);\n    EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .andReturn(statement);\n    statement.setFetchSize(500);\n    statement.setMaxRows(0);\n    EasyMock.expect(statement.execute(\"query\")).andThrow(sqlException);\n    statement.close();\n\n    mockControl.replay();\n\n    try {\n      jdbcDataSource.getData(\"query\");\n      fail(\"exception expected\");\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n\n    mockControl.verify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","sourceNew":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    when(dataSource.getConnection()).thenReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mock(Statement.class);\n    when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .thenReturn(statement);\n    when(statement.execute(\"query\")).thenThrow(sqlException);\n\n    DataImportHandlerException ex = expectThrows(DataImportHandlerException.class,\n        () -> jdbcDataSource.getData(\"query\"));\n    assertSame(sqlException, ex.getCause());\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    verify(statement).setFetchSize(500);\n    verify(statement).setMaxRows(0);\n    verify(statement).execute(\"query\");\n    verify(statement).close();\n  }\n\n","sourceOld":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    when(dataSource.getConnection()).thenReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mock(Statement.class);\n    when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .thenReturn(statement);\n    when(statement.execute(\"query\")).thenThrow(sqlException);\n\n    try {\n      jdbcDataSource.getData(\"query\");\n      fail(\"exception expected\");\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    verify(statement).setFetchSize(500);\n    verify(statement).setMaxRows(0);\n    verify(statement).execute(\"query\");\n    verify(statement).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","sourceNew":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    when(dataSource.getConnection()).thenReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mock(Statement.class);\n    when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .thenReturn(statement);\n    when(statement.execute(\"query\")).thenThrow(sqlException);\n\n    DataImportHandlerException ex = expectThrows(DataImportHandlerException.class,\n        () -> jdbcDataSource.getData(\"query\"));\n    assertSame(sqlException, ex.getCause());\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    verify(statement).setFetchSize(500);\n    verify(statement).setMaxRows(0);\n    verify(statement).execute(\"query\");\n    verify(statement).close();\n  }\n\n","sourceOld":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    when(dataSource.getConnection()).thenReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mock(Statement.class);\n    when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .thenReturn(statement);\n    when(statement.execute(\"query\")).thenThrow(sqlException);\n\n    try {\n      jdbcDataSource.getData(\"query\");\n      fail(\"exception expected\");\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    verify(statement).setFetchSize(500);\n    verify(statement).setMaxRows(0);\n    verify(statement).execute(\"query\");\n    verify(statement).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","sourceNew":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    when(dataSource.getConnection()).thenReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mock(Statement.class);\n    when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .thenReturn(statement);\n    when(statement.execute(\"query\")).thenThrow(sqlException);\n\n    DataImportHandlerException ex = expectThrows(DataImportHandlerException.class,\n        () -> jdbcDataSource.getData(\"query\"));\n    assertSame(sqlException, ex.getCause());\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    verify(statement).setFetchSize(500);\n    verify(statement).setMaxRows(0);\n    verify(statement).execute(\"query\");\n    verify(statement).close();\n  }\n\n","sourceOld":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    when(dataSource.getConnection()).thenReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mock(Statement.class);\n    when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .thenReturn(statement);\n    when(statement.execute(\"query\")).thenThrow(sqlException);\n\n    try {\n      jdbcDataSource.getData(\"query\");\n      fail(\"exception expected\");\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    verify(statement).setFetchSize(500);\n    verify(statement).setMaxRows(0);\n    verify(statement).execute(\"query\");\n    verify(statement).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesStatementWhenExceptionThrownOnExecuteQuery().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testClosesStatementWhenExceptionThrownOnExecuteQuery() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    when(dataSource.getConnection()).thenReturn(connection);\n\n    jdbcDataSource.init(context, props);\n\n    SQLException sqlException = new SQLException(\"fake\");\n    Statement statement = mock(Statement.class);\n    when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n        .thenReturn(statement);\n    when(statement.execute(\"query\")).thenThrow(sqlException);\n\n    DataImportHandlerException ex = expectThrows(DataImportHandlerException.class,\n        () -> jdbcDataSource.getData(\"query\"));\n    assertSame(sqlException, ex.getCause());\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    verify(statement).setFetchSize(500);\n    verify(statement).setMaxRows(0);\n    verify(statement).execute(\"query\");\n    verify(statement).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["191128ac5b85671b1671e2c857437694283b6ebf"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"191128ac5b85671b1671e2c857437694283b6ebf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78002dda5f9d46d20e8cf0a7c070b8205219a93d"],"78002dda5f9d46d20e8cf0a7c070b8205219a93d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["191128ac5b85671b1671e2c857437694283b6ebf","78002dda5f9d46d20e8cf0a7c070b8205219a93d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"191128ac5b85671b1671e2c857437694283b6ebf":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"78002dda5f9d46d20e8cf0a7c070b8205219a93d":["191128ac5b85671b1671e2c857437694283b6ebf"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}