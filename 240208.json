{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return null;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return null;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return null;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float maxScore() {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float maxScore() {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","706a7a3396c030cc66dda92a0492eb492131c4c0"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}