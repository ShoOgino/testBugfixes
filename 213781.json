{"path":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#unitTestCore(BasicStats,float,int).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#unitTestCore(BasicStats,float,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The generic test core called by all unit test methods. It calls the\n   * {@link SimilarityBase#score(BasicStats, float, int)} method of all\n   * Similarities in {@link #sims} and checks if the score is valid; i.e. it\n   * is a finite positive real number.\n   */\n  private void unitTestCore(BasicStats stats, float freq, int docLen)\n      throws IOException {\n    // We have to fake everything, because computeStats() can be overridden and\n    // there is no way to inject false data after fillBasicStats().\n    SpoofIndexSearcher searcher = new SpoofIndexSearcher(stats);\n    TermContext tc = new TermContext(\n        searcher.getIndexReader().getTopReaderContext(),\n        new OrdTermState(), 0, stats.getDocFreq(), stats.getTotalTermFreq());\n    \n    for (SimilarityBase sim : sims) {\n      BasicStats realStats = (BasicStats) sim.computeStats(new SpoofIndexSearcher(stats),\n          \"spoof\", stats.getTotalBoost(), tc);\n      float score = sim.score(realStats, freq, docLen);\n      float explScore = sim.explain(\n          realStats, 1, new Explanation(freq, \"freq\"), docLen).getValue();\n      assertFalse(\"Score infinite: \" + sim.toString(), Float.isInfinite(score));\n      assertFalse(\"Score NaN: \" + sim.toString(), Float.isNaN(score));\n      assertTrue(\"Score negative: \" + sim.toString(), score >= 0);\n      assertEquals(\"score() and explain() return different values: \"\n          + sim.toString(), score, explScore, FLOAT_EPSILON);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","date":1320398636,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#unitTestCore(BasicStats,float,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#unitTestCore(BasicStats,float,int).mjava","sourceNew":"  /**\n   * The generic test core called by all unit test methods. It calls the\n   * {@link SimilarityBase#score(BasicStats, float, int)} method of all\n   * Similarities in {@link #sims} and checks if the score is valid; i.e. it\n   * is a finite positive real number.\n   */\n  private void unitTestCore(BasicStats stats, float freq, int docLen)\n      throws IOException { \n    for (SimilarityBase sim : sims) {\n      BasicStats realStats = (BasicStats) sim.computeStats(toCollectionStats(stats), \n          stats.getTotalBoost(),\n          toTermStats(stats));\n      float score = sim.score(realStats, freq, docLen);\n      float explScore = sim.explain(\n          realStats, 1, new Explanation(freq, \"freq\"), docLen).getValue();\n      assertFalse(\"Score infinite: \" + sim.toString(), Float.isInfinite(score));\n      assertFalse(\"Score NaN: \" + sim.toString(), Float.isNaN(score));\n      assertTrue(\"Score negative: \" + sim.toString(), score >= 0);\n      assertEquals(\"score() and explain() return different values: \"\n          + sim.toString(), score, explScore, FLOAT_EPSILON);\n    }\n  }\n\n","sourceOld":"  /**\n   * The generic test core called by all unit test methods. It calls the\n   * {@link SimilarityBase#score(BasicStats, float, int)} method of all\n   * Similarities in {@link #sims} and checks if the score is valid; i.e. it\n   * is a finite positive real number.\n   */\n  private void unitTestCore(BasicStats stats, float freq, int docLen)\n      throws IOException {\n    // We have to fake everything, because computeStats() can be overridden and\n    // there is no way to inject false data after fillBasicStats().\n    SpoofIndexSearcher searcher = new SpoofIndexSearcher(stats);\n    TermContext tc = new TermContext(\n        searcher.getIndexReader().getTopReaderContext(),\n        new OrdTermState(), 0, stats.getDocFreq(), stats.getTotalTermFreq());\n    \n    for (SimilarityBase sim : sims) {\n      BasicStats realStats = (BasicStats) sim.computeStats(new SpoofIndexSearcher(stats),\n          \"spoof\", stats.getTotalBoost(), tc);\n      float score = sim.score(realStats, freq, docLen);\n      float explScore = sim.explain(\n          realStats, 1, new Explanation(freq, \"freq\"), docLen).getValue();\n      assertFalse(\"Score infinite: \" + sim.toString(), Float.isInfinite(score));\n      assertFalse(\"Score NaN: \" + sim.toString(), Float.isNaN(score));\n      assertTrue(\"Score negative: \" + sim.toString(), score >= 0);\n      assertEquals(\"score() and explain() return different values: \"\n          + sim.toString(), score, explScore, FLOAT_EPSILON);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#unitTestCore(BasicStats,float,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#unitTestCore(BasicStats,float,int).mjava","sourceNew":"  /**\n   * The generic test core called by all unit test methods. It calls the\n   * {@link SimilarityBase#score(BasicStats, float, int)} method of all\n   * Similarities in {@link #sims} and checks if the score is valid; i.e. it\n   * is a finite positive real number.\n   */\n  private void unitTestCore(BasicStats stats, float freq, int docLen)\n      throws IOException { \n    for (SimilarityBase sim : sims) {\n      BasicStats realStats = (BasicStats) sim.computeWeight(stats.getTotalBoost(),\n          toCollectionStats(stats), \n          toTermStats(stats));\n      float score = sim.score(realStats, freq, docLen);\n      float explScore = sim.explain(\n          realStats, 1, new Explanation(freq, \"freq\"), docLen).getValue();\n      assertFalse(\"Score infinite: \" + sim.toString(), Float.isInfinite(score));\n      assertFalse(\"Score NaN: \" + sim.toString(), Float.isNaN(score));\n      assertTrue(\"Score negative: \" + sim.toString(), score >= 0);\n      assertEquals(\"score() and explain() return different values: \"\n          + sim.toString(), score, explScore, FLOAT_EPSILON);\n    }\n  }\n\n","sourceOld":"  /**\n   * The generic test core called by all unit test methods. It calls the\n   * {@link SimilarityBase#score(BasicStats, float, int)} method of all\n   * Similarities in {@link #sims} and checks if the score is valid; i.e. it\n   * is a finite positive real number.\n   */\n  private void unitTestCore(BasicStats stats, float freq, int docLen)\n      throws IOException { \n    for (SimilarityBase sim : sims) {\n      BasicStats realStats = (BasicStats) sim.computeStats(toCollectionStats(stats), \n          stats.getTotalBoost(),\n          toTermStats(stats));\n      float score = sim.score(realStats, freq, docLen);\n      float explScore = sim.explain(\n          realStats, 1, new Explanation(freq, \"freq\"), docLen).getValue();\n      assertFalse(\"Score infinite: \" + sim.toString(), Float.isInfinite(score));\n      assertFalse(\"Score NaN: \" + sim.toString(), Float.isNaN(score));\n      assertTrue(\"Score negative: \" + sim.toString(), score >= 0);\n      assertEquals(\"score() and explain() return different values: \"\n          + sim.toString(), score, explScore, FLOAT_EPSILON);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#unitTestCore(BasicStats,float,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#unitTestCore(BasicStats,float,int).mjava","sourceNew":"  /**\n   * The generic test core called by all unit test methods. It calls the\n   * {@link SimilarityBase#score(BasicStats, float, int)} method of all\n   * Similarities in {@link #sims} and checks if the score is valid; i.e. it\n   * is a finite positive real number.\n   */\n  private void unitTestCore(BasicStats stats, float freq, int docLen)\n      throws IOException { \n    for (SimilarityBase sim : sims) {\n      BasicStats realStats = (BasicStats) sim.computeWeight(stats.getTotalBoost(),\n          toCollectionStats(stats), \n          toTermStats(stats));\n      float score = sim.score(realStats, freq, docLen);\n      float explScore = sim.explain(\n          realStats, 1, new Explanation(freq, \"freq\"), docLen).getValue();\n      assertFalse(\"Score infinite: \" + sim.toString(), Float.isInfinite(score));\n      assertFalse(\"Score NaN: \" + sim.toString(), Float.isNaN(score));\n      assertTrue(\"Score negative: \" + sim.toString(), score >= 0);\n      assertEquals(\"score() and explain() return different values: \"\n          + sim.toString(), score, explScore, FLOAT_EPSILON);\n    }\n  }\n\n","sourceOld":"  /**\n   * The generic test core called by all unit test methods. It calls the\n   * {@link SimilarityBase#score(BasicStats, float, int)} method of all\n   * Similarities in {@link #sims} and checks if the score is valid; i.e. it\n   * is a finite positive real number.\n   */\n  private void unitTestCore(BasicStats stats, float freq, int docLen)\n      throws IOException { \n    for (SimilarityBase sim : sims) {\n      BasicStats realStats = (BasicStats) sim.computeWeight(stats.getTotalBoost(),\n          toCollectionStats(stats), \n          toTermStats(stats));\n      float score = sim.score(realStats, freq, docLen);\n      float explScore = sim.explain(\n          realStats, 1, new Explanation(freq, \"freq\"), docLen).getValue();\n      assertFalse(\"Score infinite: \" + sim.toString(), Float.isInfinite(score));\n      assertFalse(\"Score NaN: \" + sim.toString(), Float.isNaN(score));\n      assertTrue(\"Score negative: \" + sim.toString(), score >= 0);\n      assertEquals(\"score() and explain() return different values: \"\n          + sim.toString(), score, explScore, FLOAT_EPSILON);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}