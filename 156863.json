{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsReader#DefaultTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsReader#DefaultTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,IOContext,int,int).mjava","sourceNew":"  public DefaultTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, IOContext context, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx, idxName);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd, fn);\n      fn = IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf, fn);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsReader#DefaultTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public DefaultTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}