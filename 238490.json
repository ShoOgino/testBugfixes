{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      if (BKDUtil.compare(bytesPerDim, packedValue, dim, minPackedValue, dim) < 0) {\n        return false;\n      }\n      if (BKDUtil.compare(bytesPerDim, packedValue, dim, maxPackedValue, dim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      if (NumericUtils.compare(bytesPerDim, packedValue, dim, minPackedValue, dim) < 0) {\n        return false;\n      }\n      if (NumericUtils.compare(bytesPerDim, packedValue, dim, maxPackedValue, dim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      if (BKDUtil.compare(bytesPerDim, packedValue, dim, minPackedValue, dim) < 0) {\n        return false;\n      }\n      if (BKDUtil.compare(bytesPerDim, packedValue, dim, maxPackedValue, dim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12bfdc932307442b651432f92845942f9041ace8","date":1456860728,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      if (NumericUtils.compare(bytesPerDim, packedValue, dim, minPackedValue, dim) < 0) {\n        return false;\n      }\n      if (NumericUtils.compare(bytesPerDim, packedValue, dim, maxPackedValue, dim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      if (NumericUtils.compare(bytesPerDim, packedValue, dim, minPackedValue, dim) < 0) {\n        return false;\n      }\n      if (NumericUtils.compare(bytesPerDim, packedValue, dim, maxPackedValue, dim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ffb58ba57f805651a528311c104f104d9f4573","date":1457861471,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9028cf27fe30db95667505bb92ecaee8fa3aef7","date":1457861734,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12bfdc932307442b651432f92845942f9041ace8":["770342641f7b505eaa8dccdc666158bff2419109"],"16ffb58ba57f805651a528311c104f104d9f4573":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","16ffb58ba57f805651a528311c104f104d9f4573"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","12bfdc932307442b651432f92845942f9041ace8"],"770342641f7b505eaa8dccdc666158bff2419109":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"]},"commit2Childs":{"12bfdc932307442b651432f92845942f9041ace8":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"16ffb58ba57f805651a528311c104f104d9f4573":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["770342641f7b505eaa8dccdc666158bff2419109"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["16ffb58ba57f805651a528311c104f104d9f4573","b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"770342641f7b505eaa8dccdc666158bff2419109":["12bfdc932307442b651432f92845942f9041ace8","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}