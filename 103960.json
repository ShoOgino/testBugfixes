{"path":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","commits":[{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","pathOld":"/dev/null","sourceNew":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<Long>(_outputs);\n    final Builder<Object> builder = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(scratch, 0L);\n    builder.add(scratch, 1L);\n    builder.add(scratch, 17L);\n    builder.add(scratch, 1L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    builder.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = builder.finish();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","sourceNew":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);\n    final Builder<Object> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(scratch, 0L);\n    builder.add(scratch, 1L);\n    builder.add(scratch, 17L);\n    builder.add(scratch, 1L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    builder.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = builder.finish();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","sourceOld":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<Long>(_outputs);\n    final Builder<Object> builder = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(scratch, 0L);\n    builder.add(scratch, 1L);\n    builder.add(scratch, 17L);\n    builder.add(scratch, 1L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    builder.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = builder.finish();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","sourceNew":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);\n    final Builder<Object> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(scratch.get(), 0L);\n    builder.add(scratch.get(), 1L);\n    builder.add(scratch.get(), 17L);\n    builder.add(scratch.get(), 1L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    builder.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = builder.finish();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","sourceOld":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);\n    final Builder<Object> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(scratch, 0L);\n    builder.add(scratch, 1L);\n    builder.add(scratch, 17L);\n    builder.add(scratch, 1L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    builder.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = builder.finish();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","bugFix":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","sourceNew":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);\n    final FSTCompiler<Object> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    fstCompiler.add(scratch.get(), 0L);\n    fstCompiler.add(scratch.get(), 1L);\n    fstCompiler.add(scratch.get(), 17L);\n    fstCompiler.add(scratch.get(), 1L);\n\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = fstCompiler.compile();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","sourceOld":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);\n    final Builder<Object> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(scratch.get(), 0L);\n    builder.add(scratch.get(), 1L);\n    builder.add(scratch.get(), 17L);\n    builder.add(scratch.get(), 1L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    builder.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = builder.finish();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#testListOfOutputsEmptyString().mjava","sourceNew":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);\n    final FSTCompiler<Object> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    fstCompiler.add(scratch.get(), 0L);\n    fstCompiler.add(scratch.get(), 1L);\n    fstCompiler.add(scratch.get(), 17L);\n    fstCompiler.add(scratch.get(), 1L);\n\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = fstCompiler.compile();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","sourceOld":"  public void testListOfOutputsEmptyString() throws Exception {\n    PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n    ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);\n    final Builder<Object> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(scratch.get(), 0L);\n    builder.add(scratch.get(), 1L);\n    builder.add(scratch.get(), 17L);\n    builder.add(scratch.get(), 1L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 1L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 3L);\n    builder.add(Util.toIntsRef(new BytesRef(\"a\"), scratch), 0L);\n    builder.add(Util.toIntsRef(new BytesRef(\"b\"), scratch), 0L);\n    \n    final FST<Object> fst = builder.finish();\n\n    Object output = Util.get(fst, new BytesRef(\"\"));\n    assertNotNull(output);\n    List<Long> outputList = outputs.asList(output);\n    assertEquals(4, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n    assertEquals(1L, outputList.get(1).longValue());\n    assertEquals(17L, outputList.get(2).longValue());\n    assertEquals(1L, outputList.get(3).longValue());\n\n    output = Util.get(fst, new BytesRef(\"a\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(3, outputList.size());\n    assertEquals(1L, outputList.get(0).longValue());\n    assertEquals(3L, outputList.get(1).longValue());\n    assertEquals(0L, outputList.get(2).longValue());\n\n    output = Util.get(fst, new BytesRef(\"b\"));\n    assertNotNull(output);\n    outputList = outputs.asList(output);\n    assertEquals(1, outputList.size());\n    assertEquals(0L, outputList.get(0).longValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}