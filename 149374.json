{"path":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOfInstance(Class[#]).mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOfInstance(Class[#]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the shallow instance size in bytes an instance of the given class would occupy.\n   * This works with all conventional classes and primitive types, but not with arrays\n   * (the size then depends on the number of elements and varies from object to object).\n   * Use the array-instance methods instead.\n   * \n   * @throws IllegalArgumentException if {@code clazz} is an array class. \n   */\n  public static long shallowSizeOfInstance(Class<?> clazz) {\n    if (clazz.isArray())\n      throw new IllegalArgumentException(\"This method does not work with array classes.\");\n    if (clazz.isPrimitive())\n      return primitiveSizes.get(clazz);\n    \n    long size = NUM_BYTES_OBJECT_HEADER;\n    \n    // Walk type hierarchy\n    while (clazz != null) {\n      final Field[] fields = clazz.getDeclaredFields();\n      boolean fieldFound = false;\n      for (final Field f : fields) {\n        if (Modifier.isStatic(f.getModifiers())) {\n          continue;\n        }\n\n        size = reflectFieldSize(size, f);\n        fieldFound = true;\n      }\n      if (useUnsafe && fieldFound) {\n        // no need to recurse to superclasses, as all fields are\n        // added at the end, so we won't find any larger offset\n        break;\n      }\n      clazz = clazz.getSuperclass();\n    }\n    return alignObjectSize(size);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOfInstance(Class[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOfInstance(Class[#]).mjava","sourceNew":"  /**\n   * Returns the shallow instance size in bytes an instance of the given class would occupy.\n   * This works with all conventional classes and primitive types, but not with arrays\n   * (the size then depends on the number of elements and varies from object to object).\n   * \n   * @see #shallowSizeOf(Object)\n   * @throws IllegalArgumentException if {@code clazz} is an array class. \n   */\n  public static long shallowSizeOfInstance(Class<?> clazz) {\n    if (clazz.isArray())\n      throw new IllegalArgumentException(\"This method does not work with array classes.\");\n    if (clazz.isPrimitive())\n      return primitiveSizes.get(clazz);\n    \n    long size = NUM_BYTES_OBJECT_HEADER;\n\n    // Walk type hierarchy\n    for (;clazz != null; clazz = clazz.getSuperclass()) {\n      final Field[] fields = clazz.getDeclaredFields();\n      for (Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          size = adjustForField(size, f);\n        }\n      }\n    }\n    return alignObjectSize(size);    \n  }\n\n","sourceOld":"  /**\n   * Returns the shallow instance size in bytes an instance of the given class would occupy.\n   * This works with all conventional classes and primitive types, but not with arrays\n   * (the size then depends on the number of elements and varies from object to object).\n   * Use the array-instance methods instead.\n   * \n   * @throws IllegalArgumentException if {@code clazz} is an array class. \n   */\n  public static long shallowSizeOfInstance(Class<?> clazz) {\n    if (clazz.isArray())\n      throw new IllegalArgumentException(\"This method does not work with array classes.\");\n    if (clazz.isPrimitive())\n      return primitiveSizes.get(clazz);\n    \n    long size = NUM_BYTES_OBJECT_HEADER;\n    \n    // Walk type hierarchy\n    while (clazz != null) {\n      final Field[] fields = clazz.getDeclaredFields();\n      boolean fieldFound = false;\n      for (final Field f : fields) {\n        if (Modifier.isStatic(f.getModifiers())) {\n          continue;\n        }\n\n        size = reflectFieldSize(size, f);\n        fieldFound = true;\n      }\n      if (useUnsafe && fieldFound) {\n        // no need to recurse to superclasses, as all fields are\n        // added at the end, so we won't find any larger offset\n        break;\n      }\n      clazz = clazz.getSuperclass();\n    }\n    return alignObjectSize(size);    \n  }\n\n","bugFix":null,"bugIntro":["2014fa537357d38ae0b27fbd2250099d783b366a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2014fa537357d38ae0b27fbd2250099d783b366a","date":1449425049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOfInstance(Class[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOfInstance(Class[#]).mjava","sourceNew":"  /**\n   * Returns the shallow instance size in bytes an instance of the given class would occupy.\n   * This works with all conventional classes and primitive types, but not with arrays\n   * (the size then depends on the number of elements and varies from object to object).\n   * \n   * @see #shallowSizeOf(Object)\n   * @throws IllegalArgumentException if {@code clazz} is an array class. \n   */\n  public static long shallowSizeOfInstance(Class<?> clazz) {\n    if (clazz.isArray())\n      throw new IllegalArgumentException(\"This method does not work with array classes.\");\n    if (clazz.isPrimitive())\n      return primitiveSizes.get(clazz);\n    \n    long size = NUM_BYTES_OBJECT_HEADER;\n\n    // Walk type hierarchy\n    for (;clazz != null; clazz = clazz.getSuperclass()) {\n      final Class<?> target = clazz;\n      final Field[] fields = AccessController.doPrivileged(new PrivilegedAction<Field[]>() {\n        @Override\n        public Field[] run() {\n          return target.getDeclaredFields();\n        }\n      });\n      for (Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          size = adjustForField(size, f);\n        }\n      }\n    }\n    return alignObjectSize(size);    \n  }\n\n","sourceOld":"  /**\n   * Returns the shallow instance size in bytes an instance of the given class would occupy.\n   * This works with all conventional classes and primitive types, but not with arrays\n   * (the size then depends on the number of elements and varies from object to object).\n   * \n   * @see #shallowSizeOf(Object)\n   * @throws IllegalArgumentException if {@code clazz} is an array class. \n   */\n  public static long shallowSizeOfInstance(Class<?> clazz) {\n    if (clazz.isArray())\n      throw new IllegalArgumentException(\"This method does not work with array classes.\");\n    if (clazz.isPrimitive())\n      return primitiveSizes.get(clazz);\n    \n    long size = NUM_BYTES_OBJECT_HEADER;\n\n    // Walk type hierarchy\n    for (;clazz != null; clazz = clazz.getSuperclass()) {\n      final Field[] fields = clazz.getDeclaredFields();\n      for (Field f : fields) {\n        if (!Modifier.isStatic(f.getModifiers())) {\n          size = adjustForField(size, f);\n        }\n      }\n    }\n    return alignObjectSize(size);    \n  }\n\n","bugFix":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2014fa537357d38ae0b27fbd2250099d783b366a"],"2014fa537357d38ae0b27fbd2250099d783b366a":["10cd47aac3c4e8c583740a750335f8aab14555b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["2014fa537357d38ae0b27fbd2250099d783b366a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2014fa537357d38ae0b27fbd2250099d783b366a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}