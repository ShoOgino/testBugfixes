{"path":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String,int).mjava","commits":[{"id":"e4cfd86408c5c098f45362646b511c6791013d37","date":1085247271,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,Analyzer,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText,\n                                int slop)  throws ParseException {\n    Query query = getFieldQuery(field, analyzer, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a744f34b732efe0beb11df92bde24ccc01460dc","date":1094656002,"type":5,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,Analyzer,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText,\n                                int slop)  throws ParseException {\n    Query query = getFieldQuery(field, analyzer, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d","date":1097573772,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Note that parameter analyzer is ignored. Calls inside the parser always\n   * use class member analyzer.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   * @deprecated use {@link #getFieldQuery(String, String, int)}\n   */\n  protected Query getFieldQuery(String field,\n                                                    Analyzer analyzer,\n                                                    String queryText,\n                                                    int slop) throws ParseException {\n    return getFieldQuery(field, queryText, slop);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Note that parameter analyzer is ignored. Calls inside the parser always\n   * use class member analyzer.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   * @deprecated use {@link #getFieldQuery(String, String, int)}\n   */\n  protected Query getFieldQuery(String field,\n                                                    Analyzer analyzer,\n                                                    String queryText,\n                                                    int slop) throws ParseException {\n    return getFieldQuery(field, queryText, slop);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a744f34b732efe0beb11df92bde24ccc01460dc":["e4cfd86408c5c098f45362646b511c6791013d37"],"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4cfd86408c5c098f45362646b511c6791013d37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"7a744f34b732efe0beb11df92bde24ccc01460dc":["0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d"],"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4cfd86408c5c098f45362646b511c6791013d37"],"e4cfd86408c5c098f45362646b511c6791013d37":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}