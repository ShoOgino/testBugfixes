{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","commits":[{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a186ae8733084223c22044e935e4ef848a143d1","date":1289694819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":["5350389bf83287111f7760b9e3db3af8e3648474","83bbb041887bbef07b8a98d08a0e1713ce137039","1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"bugIntro":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2a186ae8733084223c22044e935e4ef848a143d1":["84b590669deb3d3a471cec6cb13b104b2ee94418"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["85a883878c0af761245ab048babc63d099f835f3","2a186ae8733084223c22044e935e4ef848a143d1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2a186ae8733084223c22044e935e4ef848a143d1","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84b590669deb3d3a471cec6cb13b104b2ee94418"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["2a186ae8733084223c22044e935e4ef848a143d1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a186ae8733084223c22044e935e4ef848a143d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"2a186ae8733084223c22044e935e4ef848a143d1":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["2a186ae8733084223c22044e935e4ef848a143d1","85a883878c0af761245ab048babc63d099f835f3"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b590669deb3d3a471cec6cb13b104b2ee94418","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":["c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}