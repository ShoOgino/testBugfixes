{"path":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_31,\n      new WhitespaceAnalyzer(Version.LUCENE_31));\n    config.setCodecProvider(new SepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new SepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_31,\n      new WhitespaceAnalyzer(Version.LUCENE_31));\n    config.setCodecProvider(new SepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"108e81824177a1a9f2507addadb8894e1cdf9afc","date":1280934266,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new SepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(newRandom(), Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(newRandom(), Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(newRandom(), Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    Random random = newRandom();\n    final Directory dir = newDirectory(random);\n    final IndexWriterConfig config = newIndexWriterConfig(random, Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(newRandom(), Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    Random random = newRandom();\n    final Directory dir = newDirectory(random);\n    final IndexWriterConfig config = newIndexWriterConfig(random, Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = new RAMDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new SepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer());\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", Store.NO, Field.Index.ANALYZED_NO_NORMS));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodecProvider(new MockSepCodecs());\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.optimize();\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["7b91922b55d15444d554721b352861d028eb8278"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"7b91922b55d15444d554721b352861d028eb8278":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["108e81824177a1a9f2507addadb8894e1cdf9afc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["108e81824177a1a9f2507addadb8894e1cdf9afc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"7b91922b55d15444d554721b352861d028eb8278":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7b91922b55d15444d554721b352861d028eb8278"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}