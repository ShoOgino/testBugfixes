{"path":"solr/core/src/test/org/apache/solr/search/MergeStrategyTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/MergeStrategyTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/MergeStrategyTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index_specific(0,\"id\",\"1\", \"sort_i\", \"5\");\n    index_specific(0,\"id\",\"2\", \"sort_i\", \"50\");\n    index_specific(1,\"id\",\"5\", \"sort_i\", \"4\");\n    index_specific(1,\"id\",\"6\", \"sort_i\", \"10\");\n    index_specific(0,\"id\",\"7\", \"sort_i\", \"1\");\n    index_specific(1,\"id\",\"8\", \"sort_i\", \"2\");\n    index_specific(2,\"id\",\"9\", \"sort_i\", \"1000\");\n    index_specific(2,\"id\",\"10\", \"sort_i\", \"1500\");\n    index_specific(2,\"id\",\"11\", \"sort_i\", \"1300\");\n    index_specific(1,\"id\",\"12\", \"sort_i\", \"15\");\n    index_specific(1,\"id\",\"13\", \"sort_i\", \"16\");\n\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"_version_\", SKIP);\n\n    //Test mergeStrategy that uses score\n    query(\"rq\", \"{!rank}\", \"q\", \"*:*\", \"rows\",\"12\",  \"sort\",  \"sort_i asc\", \"fl\",\"*,score\");\n\n    //Test without mergeStrategy\n    query(\"q\", \"*:*\", \"rows\",\"12\", \"sort\", \"sort_i asc\");\n\n    //Test mergeStrategy1 that uses a sort field.\n    query(\"rq\", \"{!rank mergeStrategy=1}\", \"q\", \"*:*\", \"rows\",\"12\", \"sort\", \"sort_i asc\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"rows\", \"12\");\n    params.add(\"rq\", \"{!rank}\");\n    params.add(\"sort\", \"sort_i asc\");\n    params.add(\"fl\",\"*,score\");\n    setDistributedParams(params);\n    QueryResponse rsp = queryServer(params);\n    assertOrder(rsp,\"10\",\"11\",\"9\",\"2\",\"13\",\"12\",\"6\",\"1\",\"5\",\"8\",\"7\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"rows\", \"12\");\n    params.add(\"sort\", \"sort_i asc\");\n    params.add(\"fl\",\"*,score\");\n    setDistributedParams(params);\n    rsp = queryServer(params);\n    assertOrder(rsp,\"7\",\"8\",\"5\",\"1\",\"6\",\"12\",\"13\",\"2\",\"9\",\"11\",\"10\");\n\n    MergeStrategy m1 = new MergeStrategy() {\n      @Override\n      public void  merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return true;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 1;\n      }\n    };\n\n    MergeStrategy m2 = new MergeStrategy() {\n      @Override\n      public void merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return true;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 100;\n      }\n    };\n\n    MergeStrategy m3 = new MergeStrategy() {\n      @Override\n      public void merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return false;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 50;\n      }\n    };\n\n    MergeStrategy[] merges = {m1,m2,m3};\n    Arrays.sort(merges, MergeStrategy.MERGE_COMP);\n    assert(merges[0].getCost() == 1);\n    assert(merges[1].getCost() == 50);\n    assert(merges[2].getCost() == 100);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n\n    index_specific(0,\"id\",\"1\", \"sort_i\", \"5\");\n    index_specific(0,\"id\",\"2\", \"sort_i\", \"50\");\n    index_specific(1,\"id\",\"5\", \"sort_i\", \"4\");\n    index_specific(1,\"id\",\"6\", \"sort_i\", \"10\");\n    index_specific(0,\"id\",\"7\", \"sort_i\", \"1\");\n    index_specific(1,\"id\",\"8\", \"sort_i\", \"2\");\n    index_specific(2,\"id\",\"9\", \"sort_i\", \"1000\");\n    index_specific(2,\"id\",\"10\", \"sort_i\", \"1500\");\n    index_specific(2,\"id\",\"11\", \"sort_i\", \"1300\");\n    index_specific(1,\"id\",\"12\", \"sort_i\", \"15\");\n    index_specific(1,\"id\",\"13\", \"sort_i\", \"16\");\n\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"_version_\", SKIP);\n\n    //Test mergeStrategy that uses score\n    query(\"rq\", \"{!rank}\", \"q\", \"*:*\", \"rows\",\"12\",  \"sort\",  \"sort_i asc\", \"fl\",\"*,score\");\n\n    //Test without mergeStrategy\n    query(\"q\", \"*:*\", \"rows\",\"12\", \"sort\", \"sort_i asc\");\n\n    //Test mergeStrategy1 that uses a sort field.\n    query(\"rq\", \"{!rank mergeStrategy=1}\", \"q\", \"*:*\", \"rows\",\"12\", \"sort\", \"sort_i asc\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"rows\", \"12\");\n    params.add(\"rq\", \"{!rank}\");\n    params.add(\"sort\", \"sort_i asc\");\n    params.add(\"fl\",\"*,score\");\n    setDistributedParams(params);\n    QueryResponse rsp = queryServer(params);\n    assertOrder(rsp,\"10\",\"11\",\"9\",\"2\",\"13\",\"12\",\"6\",\"1\",\"5\",\"8\",\"7\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"rows\", \"12\");\n    params.add(\"sort\", \"sort_i asc\");\n    params.add(\"fl\",\"*,score\");\n    setDistributedParams(params);\n    rsp = queryServer(params);\n    assertOrder(rsp,\"7\",\"8\",\"5\",\"1\",\"6\",\"12\",\"13\",\"2\",\"9\",\"11\",\"10\");\n\n    MergeStrategy m1 = new MergeStrategy() {\n      @Override\n      public void  merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return true;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 1;\n      }\n    };\n\n    MergeStrategy m2 = new MergeStrategy() {\n      @Override\n      public void merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return true;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 100;\n      }\n    };\n\n    MergeStrategy m3 = new MergeStrategy() {\n      @Override\n      public void merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return false;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 50;\n      }\n    };\n\n    MergeStrategy[] merges = {m1,m2,m3};\n    Arrays.sort(merges, MergeStrategy.MERGE_COMP);\n    assert(merges[0].getCost() == 1);\n    assert(merges[1].getCost() == 50);\n    assert(merges[2].getCost() == 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/MergeStrategyTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/MergeStrategyTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  @SuppressWarnings({\"unchecked\"})\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index_specific(0,\"id\",\"1\", \"sort_i\", \"5\");\n    index_specific(0,\"id\",\"2\", \"sort_i\", \"50\");\n    index_specific(1,\"id\",\"5\", \"sort_i\", \"4\");\n    index_specific(1,\"id\",\"6\", \"sort_i\", \"10\");\n    index_specific(0,\"id\",\"7\", \"sort_i\", \"1\");\n    index_specific(1,\"id\",\"8\", \"sort_i\", \"2\");\n    index_specific(2,\"id\",\"9\", \"sort_i\", \"1000\");\n    index_specific(2,\"id\",\"10\", \"sort_i\", \"1500\");\n    index_specific(2,\"id\",\"11\", \"sort_i\", \"1300\");\n    index_specific(1,\"id\",\"12\", \"sort_i\", \"15\");\n    index_specific(1,\"id\",\"13\", \"sort_i\", \"16\");\n\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"_version_\", SKIP);\n\n    //Test mergeStrategy that uses score\n    query(\"rq\", \"{!rank}\", \"q\", \"*:*\", \"rows\",\"12\",  \"sort\",  \"sort_i asc\", \"fl\",\"*,score\");\n\n    //Test without mergeStrategy\n    query(\"q\", \"*:*\", \"rows\",\"12\", \"sort\", \"sort_i asc\");\n\n    //Test mergeStrategy1 that uses a sort field.\n    query(\"rq\", \"{!rank mergeStrategy=1}\", \"q\", \"*:*\", \"rows\",\"12\", \"sort\", \"sort_i asc\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"rows\", \"12\");\n    params.add(\"rq\", \"{!rank}\");\n    params.add(\"sort\", \"sort_i asc\");\n    params.add(\"fl\",\"*,score\");\n    setDistributedParams(params);\n    QueryResponse rsp = queryServer(params);\n    assertOrder(rsp,\"10\",\"11\",\"9\",\"2\",\"13\",\"12\",\"6\",\"1\",\"5\",\"8\",\"7\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"rows\", \"12\");\n    params.add(\"sort\", \"sort_i asc\");\n    params.add(\"fl\",\"*,score\");\n    setDistributedParams(params);\n    rsp = queryServer(params);\n    assertOrder(rsp,\"7\",\"8\",\"5\",\"1\",\"6\",\"12\",\"13\",\"2\",\"9\",\"11\",\"10\");\n\n    MergeStrategy m1 = new MergeStrategy() {\n      @Override\n      public void  merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return true;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 1;\n      }\n    };\n\n    MergeStrategy m2 = new MergeStrategy() {\n      @Override\n      public void merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return true;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 100;\n      }\n    };\n\n    MergeStrategy m3 = new MergeStrategy() {\n      @Override\n      public void merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return false;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 50;\n      }\n    };\n\n    MergeStrategy[] merges = {m1,m2,m3};\n    Arrays.sort(merges, MergeStrategy.MERGE_COMP);\n    assert(merges[0].getCost() == 1);\n    assert(merges[1].getCost() == 50);\n    assert(merges[2].getCost() == 100);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index_specific(0,\"id\",\"1\", \"sort_i\", \"5\");\n    index_specific(0,\"id\",\"2\", \"sort_i\", \"50\");\n    index_specific(1,\"id\",\"5\", \"sort_i\", \"4\");\n    index_specific(1,\"id\",\"6\", \"sort_i\", \"10\");\n    index_specific(0,\"id\",\"7\", \"sort_i\", \"1\");\n    index_specific(1,\"id\",\"8\", \"sort_i\", \"2\");\n    index_specific(2,\"id\",\"9\", \"sort_i\", \"1000\");\n    index_specific(2,\"id\",\"10\", \"sort_i\", \"1500\");\n    index_specific(2,\"id\",\"11\", \"sort_i\", \"1300\");\n    index_specific(1,\"id\",\"12\", \"sort_i\", \"15\");\n    index_specific(1,\"id\",\"13\", \"sort_i\", \"16\");\n\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"_version_\", SKIP);\n\n    //Test mergeStrategy that uses score\n    query(\"rq\", \"{!rank}\", \"q\", \"*:*\", \"rows\",\"12\",  \"sort\",  \"sort_i asc\", \"fl\",\"*,score\");\n\n    //Test without mergeStrategy\n    query(\"q\", \"*:*\", \"rows\",\"12\", \"sort\", \"sort_i asc\");\n\n    //Test mergeStrategy1 that uses a sort field.\n    query(\"rq\", \"{!rank mergeStrategy=1}\", \"q\", \"*:*\", \"rows\",\"12\", \"sort\", \"sort_i asc\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"rows\", \"12\");\n    params.add(\"rq\", \"{!rank}\");\n    params.add(\"sort\", \"sort_i asc\");\n    params.add(\"fl\",\"*,score\");\n    setDistributedParams(params);\n    QueryResponse rsp = queryServer(params);\n    assertOrder(rsp,\"10\",\"11\",\"9\",\"2\",\"13\",\"12\",\"6\",\"1\",\"5\",\"8\",\"7\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"rows\", \"12\");\n    params.add(\"sort\", \"sort_i asc\");\n    params.add(\"fl\",\"*,score\");\n    setDistributedParams(params);\n    rsp = queryServer(params);\n    assertOrder(rsp,\"7\",\"8\",\"5\",\"1\",\"6\",\"12\",\"13\",\"2\",\"9\",\"11\",\"10\");\n\n    MergeStrategy m1 = new MergeStrategy() {\n      @Override\n      public void  merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return true;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 1;\n      }\n    };\n\n    MergeStrategy m2 = new MergeStrategy() {\n      @Override\n      public void merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return true;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 100;\n      }\n    };\n\n    MergeStrategy m3 = new MergeStrategy() {\n      @Override\n      public void merge(ResponseBuilder rb, ShardRequest sreq) {\n      }\n\n      public boolean mergesIds() {\n        return false;\n      }\n\n      public boolean handlesMergeFields() { return false;}\n      public void handleMergeFields(ResponseBuilder rb, SolrIndexSearcher searcher) {}\n\n      @Override\n      public int getCost() {\n        return 50;\n      }\n    };\n\n    MergeStrategy[] merges = {m1,m2,m3};\n    Arrays.sort(merges, MergeStrategy.MERGE_COMP);\n    assert(merges[0].getCost() == 1);\n    assert(merges[1].getCost() == 50);\n    assert(merges[2].getCost() == 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}