{"path":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","commits":[{"id":"4901f8624f774c2b648e66567b63c59e901ac7c8","date":1329431044,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n      SolrException.log(log,\"Error in \"+name,e);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n      SolrException.log(log,\"Error in \"+name,e);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n      SolrException.log(log,\"Error in \"+name,e);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n      SolrException.log(log,\"Error in \"+name,e);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n      SolrException.log(log,\"Error in \"+name,e);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n      SolrException.log(log,\"Error in \"+name,e);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n      SolrException.log(log,\"Error in \"+name,e);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean subProps) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (subProps) {\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      \n      if (is == null) {\n        is = new InputSource(loader.openConfig(name));\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (TransformerException e) {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.info(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#XmlConfigFile(SolrResourceLoader,String,InputSource,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputSource,String,boolean).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public XmlConfigFile(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging &amp; exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a SAX InputSource\n   * @param prefix an optional prefix that will be prepended to all non-absolute xpath expressions\n   */\n  public Config(SolrResourceLoader loader, String name, InputSource is, String prefix, boolean substituteProps) throws ParserConfigurationException, IOException, SAXException\n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader(SolrResourceLoader.locateSolrHome());\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n      if (is == null) {\n        InputStream in = loader.openConfig(name);\n        if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n          zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n          log.debug(\"loaded config {} with version {} \",name,zkVersion);\n        }\n        is = new InputSource(in);\n        is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n      }\n\n      // only enable xinclude, if a SystemId is available\n      if (is.getSystemId() != null) {\n        try {\n          dbf.setXIncludeAware(true);\n          dbf.setNamespaceAware(true);\n        } catch(UnsupportedOperationException e) {\n          log.warn(name + \" XML parser doesn't support XInclude option\");\n        }\n      }\n      \n      final DocumentBuilder db = dbf.newDocumentBuilder();\n      db.setEntityResolver(new SystemIdResolver(loader));\n      db.setErrorHandler(xmllog);\n      try {\n        doc = db.parse(is);\n        origDoc = copyDoc(doc);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(is.getByteStream());\n      }\n      if (substituteProps) {\n        DOMUtil.substituteProperties(doc, getSubstituteProperties());\n      }\n    } catch (ParserConfigurationException | SAXException | TransformerException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"ee622110ba6021d0390037e77574743c1e55348c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["7116474e2e390259937401cf928323e0cbc75e60"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","7116474e2e390259937401cf928323e0cbc75e60"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a626ec4d1c92e59fe390724d6220081047b03ce7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a626ec4d1c92e59fe390724d6220081047b03ce7","0158ced21948b6626f733c1c42c1e18d94449789"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"4901f8624f774c2b648e66567b63c59e901ac7c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"0158ced21948b6626f733c1c42c1e18d94449789":["a626ec4d1c92e59fe390724d6220081047b03ce7"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"7116474e2e390259937401cf928323e0cbc75e60":["531fe719c7218235a679452eb3d137bfd8fc6af1","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["0d62172dd2fc1195c7e475550ac394a9948a18ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4901f8624f774c2b648e66567b63c59e901ac7c8":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ee622110ba6021d0390037e77574743c1e55348c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}