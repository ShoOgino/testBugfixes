{"path":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrParams).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param solrParams SolrParams taken from request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrParams solrParams) {\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n    analysisRequest.setFieldValue(solrParams.get(AnalysisParams.FIELD_VALUE));\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99704b4caa3a3ad9eafb2b6e37979551773ece6","date":1241376470,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrParams).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getSolrQueryParser(null).getField());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n    analysisRequest.setFieldValue(solrParams.get(AnalysisParams.FIELD_VALUE));\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param solrParams SolrParams taken from request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrParams solrParams) {\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n    analysisRequest.setFieldValue(solrParams.get(AnalysisParams.FIELD_VALUE));\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e99704b4caa3a3ad9eafb2b6e37979551773ece6":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e99704b4caa3a3ad9eafb2b6e37979551773ece6":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["e99704b4caa3a3ad9eafb2b6e37979551773ece6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e99704b4caa3a3ad9eafb2b6e37979551773ece6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}