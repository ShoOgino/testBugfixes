{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","sourceNew":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","sourceOld":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","sourceNew":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","sourceOld":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}