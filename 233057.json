{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileCompare(int,Tree,Type).mjava","commits":[{"id":"8051827cb52e78e83af70a999a17b97bf0cf00a2","date":1379206124,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileCompare(int,Tree,Type).mjava","pathOld":"/dev/null","sourceNew":"  private void compileCompare(int operator, Tree current, Type expected) {\n    Label labelTrue = new Label();\n    Label labelReturn = new Label();\n    \n    recursiveCompile(current.getChild(0), Type.DOUBLE_TYPE);\n    recursiveCompile(current.getChild(1), Type.DOUBLE_TYPE);\n    \n    gen.ifCmp(Type.DOUBLE_TYPE, operator, labelTrue);\n    pushBoolean(expected, false);\n    gen.goTo(labelReturn);\n    gen.visitLabel(labelTrue);\n    pushBoolean(expected, true);\n    gen.visitLabel(labelReturn);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a160962dae3bcb62faf6b0daf05a14242939f2b","date":1379207968,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#pushCond(int,Tree,Type).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileCompare(int,Tree,Type).mjava","sourceNew":"  private void pushCond(int operator, Tree current, Type expected) {\n    Label labelTrue = new Label();\n    Label labelReturn = new Label();\n    \n    recursiveCompile(current.getChild(0), Type.DOUBLE_TYPE);\n    recursiveCompile(current.getChild(1), Type.DOUBLE_TYPE);\n    \n    gen.ifCmp(Type.DOUBLE_TYPE, operator, labelTrue);\n    pushBoolean(expected, false);\n    gen.goTo(labelReturn);\n    gen.visitLabel(labelTrue);\n    pushBoolean(expected, true);\n    gen.visitLabel(labelReturn);    \n  }\n\n","sourceOld":"  private void compileCompare(int operator, Tree current, Type expected) {\n    Label labelTrue = new Label();\n    Label labelReturn = new Label();\n    \n    recursiveCompile(current.getChild(0), Type.DOUBLE_TYPE);\n    recursiveCompile(current.getChild(1), Type.DOUBLE_TYPE);\n    \n    gen.ifCmp(Type.DOUBLE_TYPE, operator, labelTrue);\n    pushBoolean(expected, false);\n    gen.goTo(labelReturn);\n    gen.visitLabel(labelTrue);\n    pushBoolean(expected, true);\n    gen.visitLabel(labelReturn);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8051827cb52e78e83af70a999a17b97bf0cf00a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a160962dae3bcb62faf6b0daf05a14242939f2b":["8051827cb52e78e83af70a999a17b97bf0cf00a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8051827cb52e78e83af70a999a17b97bf0cf00a2":["7a160962dae3bcb62faf6b0daf05a14242939f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8051827cb52e78e83af70a999a17b97bf0cf00a2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a160962dae3bcb62faf6b0daf05a14242939f2b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a160962dae3bcb62faf6b0daf05a14242939f2b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}