{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newWriter().mjava","commits":[{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new already locked {@link DocumentsWriterPerThread}\n   *\n   * @return a new {@link DocumentsWriterPerThread}\n   */\n  private synchronized DocumentsWriterPerThread newWriter() throws IOException {\n    assert takenWriterPermits >= 0;\n    while (takenWriterPermits > 0) {\n      // we can't create new DWPTs while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    DocumentsWriterPerThread dwpt = dwptFactory.get();\n    dwpt.lock(); // lock so nobody else will get this DWPT\n    dwpts.add(dwpt);\n    return dwpt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd3903df1f9f4cfe074c9e72c60e31a9bed0ff72","date":1597413898,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newWriter().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newWriter().mjava","sourceNew":"  /**\n   * Returns a new already locked {@link DocumentsWriterPerThread}\n   *\n   * @return a new {@link DocumentsWriterPerThread}\n   */\n  private synchronized DocumentsWriterPerThread newWriter() throws IOException {\n    assert takenWriterPermits >= 0;\n    while (takenWriterPermits > 0) {\n      // we can't create new DWPTs while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    // we must check if we are closed since this might happen while we are waiting for the writer permit\n    // and if we miss that we might release a new DWPT even though the pool is closed. Yet, that wouldn't be the\n    // end of the world it's violating the contract that we don't release any new DWPT after this pool is closed\n    ensureOpen();\n    DocumentsWriterPerThread dwpt = dwptFactory.get();\n    dwpt.lock(); // lock so nobody else will get this DWPT\n    dwpts.add(dwpt);\n    return dwpt;\n  }\n\n","sourceOld":"  /**\n   * Returns a new already locked {@link DocumentsWriterPerThread}\n   *\n   * @return a new {@link DocumentsWriterPerThread}\n   */\n  private synchronized DocumentsWriterPerThread newWriter() throws IOException {\n    assert takenWriterPermits >= 0;\n    while (takenWriterPermits > 0) {\n      // we can't create new DWPTs while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    DocumentsWriterPerThread dwpt = dwptFactory.get();\n    dwpt.lock(); // lock so nobody else will get this DWPT\n    dwpts.add(dwpt);\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49f1924bd448393fbdfef8b5ebed799f938169d3","date":1600069616,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newWriter().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newWriter().mjava","sourceNew":"  /**\n   * Returns a new already locked {@link DocumentsWriterPerThread}\n   *\n   * @return a new {@link DocumentsWriterPerThread}\n   */\n  private synchronized DocumentsWriterPerThread newWriter() {\n    assert takenWriterPermits >= 0;\n    while (takenWriterPermits > 0) {\n      // we can't create new DWPTs while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    // we must check if we are closed since this might happen while we are waiting for the writer permit\n    // and if we miss that we might release a new DWPT even though the pool is closed. Yet, that wouldn't be the\n    // end of the world it's violating the contract that we don't release any new DWPT after this pool is closed\n    ensureOpen();\n    DocumentsWriterPerThread dwpt = dwptFactory.get();\n    dwpt.lock(); // lock so nobody else will get this DWPT\n    dwpts.add(dwpt);\n    return dwpt;\n  }\n\n","sourceOld":"  /**\n   * Returns a new already locked {@link DocumentsWriterPerThread}\n   *\n   * @return a new {@link DocumentsWriterPerThread}\n   */\n  private synchronized DocumentsWriterPerThread newWriter() throws IOException {\n    assert takenWriterPermits >= 0;\n    while (takenWriterPermits > 0) {\n      // we can't create new DWPTs while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    // we must check if we are closed since this might happen while we are waiting for the writer permit\n    // and if we miss that we might release a new DWPT even though the pool is closed. Yet, that wouldn't be the\n    // end of the world it's violating the contract that we don't release any new DWPT after this pool is closed\n    ensureOpen();\n    DocumentsWriterPerThread dwpt = dwptFactory.get();\n    dwpt.lock(); // lock so nobody else will get this DWPT\n    dwpts.add(dwpt);\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcf8f79417865e5028d753e669fae06457e8369","date":1600073240,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newWriter().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newWriter().mjava","sourceNew":"  /**\n   * Returns a new already locked {@link DocumentsWriterPerThread}\n   *\n   * @return a new {@link DocumentsWriterPerThread}\n   */\n  private synchronized DocumentsWriterPerThread newWriter() {\n    assert takenWriterPermits >= 0;\n    while (takenWriterPermits > 0) {\n      // we can't create new DWPTs while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    // we must check if we are closed since this might happen while we are waiting for the writer permit\n    // and if we miss that we might release a new DWPT even though the pool is closed. Yet, that wouldn't be the\n    // end of the world it's violating the contract that we don't release any new DWPT after this pool is closed\n    ensureOpen();\n    DocumentsWriterPerThread dwpt = dwptFactory.get();\n    dwpt.lock(); // lock so nobody else will get this DWPT\n    dwpts.add(dwpt);\n    return dwpt;\n  }\n\n","sourceOld":"  /**\n   * Returns a new already locked {@link DocumentsWriterPerThread}\n   *\n   * @return a new {@link DocumentsWriterPerThread}\n   */\n  private synchronized DocumentsWriterPerThread newWriter() throws IOException {\n    assert takenWriterPermits >= 0;\n    while (takenWriterPermits > 0) {\n      // we can't create new DWPTs while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    // we must check if we are closed since this might happen while we are waiting for the writer permit\n    // and if we miss that we might release a new DWPT even though the pool is closed. Yet, that wouldn't be the\n    // end of the world it's violating the contract that we don't release any new DWPT after this pool is closed\n    ensureOpen();\n    DocumentsWriterPerThread dwpt = dwptFactory.get();\n    dwpt.lock(); // lock so nobody else will get this DWPT\n    dwpts.add(dwpt);\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"49f1924bd448393fbdfef8b5ebed799f938169d3":["bd3903df1f9f4cfe074c9e72c60e31a9bed0ff72"],"bd3903df1f9f4cfe074c9e72c60e31a9bed0ff72":["264935965977b4a9e2f3920420647072c9c49176"],"0dcf8f79417865e5028d753e669fae06457e8369":["bd3903df1f9f4cfe074c9e72c60e31a9bed0ff72","49f1924bd448393fbdfef8b5ebed799f938169d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0dcf8f79417865e5028d753e669fae06457e8369"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["bd3903df1f9f4cfe074c9e72c60e31a9bed0ff72"],"49f1924bd448393fbdfef8b5ebed799f938169d3":["0dcf8f79417865e5028d753e669fae06457e8369"],"bd3903df1f9f4cfe074c9e72c60e31a9bed0ff72":["49f1924bd448393fbdfef8b5ebed799f938169d3","0dcf8f79417865e5028d753e669fae06457e8369"],"0dcf8f79417865e5028d753e669fae06457e8369":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}