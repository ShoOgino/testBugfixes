{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","commits":[{"id":"92ff363eabbaa0b7706976aea7997bb2f620caa0","date":1412866130,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","pathOld":"/dev/null","sourceNew":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.addOrUpdate(\"field\", TextField.TYPE_STORED);\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").isIndexed());\n    assertFalse(infos2.fieldInfo(\"field\").hasDocValues());\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","pathOld":"/dev/null","sourceNew":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.addOrUpdate(\"field\", TextField.TYPE_STORED);\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").isIndexed());\n    assertFalse(infos2.fieldInfo(\"field\").hasDocValues());\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556a4aab886d75371b2af129d87be3c2795cea76","date":1414954991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","sourceNew":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.addOrUpdate(\"field\", TextField.TYPE_STORED);\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.addOrUpdate(\"field\", TextField.TYPE_STORED);\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").isIndexed());\n    assertFalse(infos2.fieldInfo(\"field\").hasDocValues());\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","sourceNew":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.addOrUpdate(\"field\", TextField.TYPE_STORED);\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","sourceNew":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","sourceNew":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testOneField().mjava","sourceNew":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","sourceOld":"  /** Test field infos read/write with a single field */\n  public void testOneField() throws Exception {\n    Directory dir = newDirectory();\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    FieldInfos infos2 = codec.fieldInfosFormat().read(dir, segmentInfo, \"\", IOContext.DEFAULT);\n    assertEquals(1, infos2.size());\n    assertNotNull(infos2.fieldInfo(\"field\"));\n    assertTrue(infos2.fieldInfo(\"field\").getIndexOptions() != IndexOptions.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").getDocValuesType() != DocValuesType.NONE);\n    assertFalse(infos2.fieldInfo(\"field\").omitsNorms());\n    assertFalse(infos2.fieldInfo(\"field\").hasPayloads());\n    assertFalse(infos2.fieldInfo(\"field\").hasVectors());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92ff363eabbaa0b7706976aea7997bb2f620caa0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["556a4aab886d75371b2af129d87be3c2795cea76"],"556a4aab886d75371b2af129d87be3c2795cea76":["92ff363eabbaa0b7706976aea7997bb2f620caa0"],"92ff363eabbaa0b7706976aea7997bb2f620caa0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","92ff363eabbaa0b7706976aea7997bb2f620caa0"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["b70042a8a492f7054d480ccdd2be9796510d4327","b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"556a4aab886d75371b2af129d87be3c2795cea76":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"92ff363eabbaa0b7706976aea7997bb2f620caa0":["55980207f1977bd1463465de1659b821347e2fa8","556a4aab886d75371b2af129d87be3c2795cea76"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}