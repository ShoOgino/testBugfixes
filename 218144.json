{"path":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doSendGlobalStats(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doSendGlobalStats(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#sendGlobalStats(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  protected void doSendGlobalStats(ResponseBuilder rb, ShardRequest outgoing) {\n    ModifiableSolrParams params = outgoing.params;\n    Set<Term> terms = StatsUtil.termsFromEncodedString((String) rb.req.getContext().get(TERMS_KEY));\n    if (!terms.isEmpty()) {\n      Set<String> fields = terms.stream().map(t -> t.field()).collect(Collectors.toSet());\n      Map<String,TermStats> globalTermStats = new HashMap<>();\n      Map<String,CollectionStats> globalColStats = new HashMap<>();\n      // aggregate collection stats, only for the field in terms\n      String collectionName = rb.req.getCore().getCoreDescriptor().getCollectionName();\n      if (collectionName == null) {\n        collectionName = rb.req.getCore().getCoreDescriptor().getName();\n      }\n      List<String> shards = new ArrayList<>();\n      for (String shardUrl : rb.shards) {\n        String shard = StatsUtil.shardUrlToShard(collectionName, shardUrl);\n        if (shard == null) {\n          log.warn(\"Can't determine shard from collectionName=\" + collectionName + \" and shardUrl=\" + shardUrl + \", skipping...\");\n          continue;\n        } else {\n          shards.add(shard);\n        }\n      }\n      for (String shard : shards) {\n        Map<String,CollectionStats> s = getPerShardColStats(rb, shard);\n        if (s == null) {\n          continue;\n        }\n        for (Entry<String,CollectionStats> e : s.entrySet()) {\n          if (!fields.contains(e.getKey())) { // skip non-relevant fields\n            continue;\n          }\n          CollectionStats g = globalColStats.get(e.getKey());\n          if (g == null) {\n            g = new CollectionStats(e.getKey());\n            globalColStats.put(e.getKey(), g);\n          }\n          g.add(e.getValue());\n        }\n      }\n      params.add(COL_STATS_KEY, StatsUtil.colStatsMapToString(globalColStats));\n      // sum up only from relevant shards\n      params.add(TERMS_KEY, StatsUtil.termsToEncodedString(terms));\n      for (Term t : terms) {\n        String term = t.toString();\n        for (String shard : shards) {\n          TermStats termStats = getPerShardTermStats(rb.req, term, shard);\n          if (termStats == null || termStats.docFreq == 0) {\n            continue;\n          }\n          TermStats g = globalTermStats.get(term);\n          if (g == null) {\n            g = new TermStats(term);\n            globalTermStats.put(term, g);\n          }\n          g.add(termStats);\n        }\n      }\n      log.debug(\"terms={}, termStats={}\", terms, globalTermStats);\n      // need global TermStats here...\n      params.add(TERM_STATS_KEY, StatsUtil.termStatsMapToString(globalTermStats));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void sendGlobalStats(ResponseBuilder rb, ShardRequest outgoing) {\n    outgoing.purpose |= ShardRequest.PURPOSE_SET_TERM_STATS;\n    ModifiableSolrParams params = outgoing.params;\n    List<String> terms = (List<String>) rb.req.getContext().get(TERMS_KEY);\n    if (terms != null) {\n      Set<String> fields = new HashSet<>();\n      for (String t : terms) {\n        String[] fv = t.split(\":\");\n        fields.add(fv[0]);\n      }\n      Map<String,TermStats> globalTermStats = new HashMap<>();\n      Map<String,CollectionStats> globalColStats = new HashMap<>();\n      // aggregate collection stats, only for the field in terms\n\n      for (String shard : rb.shards) {\n        Map<String,CollectionStats> s = getPerShardColStats(rb, shard);\n        if (s == null) {\n          continue;\n        }\n        for (Entry<String,CollectionStats> e : s.entrySet()) {\n          if (!fields.contains(e.getKey())) { // skip non-relevant fields\n            continue;\n          }\n          CollectionStats g = globalColStats.get(e.getKey());\n          if (g == null) {\n            g = new CollectionStats(e.getKey());\n            globalColStats.put(e.getKey(), g);\n          }\n          g.add(e.getValue());\n        }\n      }\n      params.add(COL_STATS_KEY, StatsUtil.colStatsMapToString(globalColStats));\n      // sum up only from relevant shards\n      for (String t : terms) {\n        params.add(TERMS_KEY, t);\n        for (String shard : rb.shards) {\n          TermStats termStats = getPerShardTermStats(rb.req, t, shard);\n          if (termStats == null || termStats.docFreq == 0) {\n            continue;\n          }\n          TermStats g = globalTermStats.get(t);\n          if (g == null) {\n            g = new TermStats(t);\n            globalTermStats.put(t, g);\n          }\n          g.add(termStats);\n        }\n      }\n      log.debug(\"terms={}, termStats={}\", terms, globalTermStats);\n      // need global TermStats here...\n      params.add(TERM_STATS_KEY, StatsUtil.termStatsMapToString(globalTermStats));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doSendGlobalStats(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doSendGlobalStats(ResponseBuilder rb, ShardRequest outgoing) {\n    ModifiableSolrParams params = outgoing.params;\n    Set<Term> terms = StatsUtil.termsFromEncodedString((String) rb.req.getContext().get(TERMS_KEY));\n    if (!terms.isEmpty()) {\n      Set<String> fields = terms.stream().map(t -> t.field()).collect(Collectors.toSet());\n      Map<String,TermStats> globalTermStats = new HashMap<>();\n      Map<String,CollectionStats> globalColStats = new HashMap<>();\n      // aggregate collection stats, only for the field in terms\n      String collectionName = rb.req.getCore().getCoreDescriptor().getCollectionName();\n      if (collectionName == null) {\n        collectionName = rb.req.getCore().getCoreDescriptor().getName();\n      }\n      List<String> shards = new ArrayList<>();\n      for (String shardUrl : rb.shards) {\n        String shard = StatsUtil.shardUrlToShard(collectionName, shardUrl);\n        if (shard == null) {\n          log.warn(\"Can't determine shard from collectionName=\" + collectionName + \" and shardUrl=\" + shardUrl + \", skipping...\");\n          continue;\n        } else {\n          shards.add(shard);\n        }\n      }\n      for (String shard : shards) {\n        Map<String,CollectionStats> s = getPerShardColStats(rb, shard);\n        if (s == null) {\n          continue;\n        }\n        for (Entry<String,CollectionStats> e : s.entrySet()) {\n          if (!fields.contains(e.getKey())) { // skip non-relevant fields\n            continue;\n          }\n          CollectionStats g = globalColStats.get(e.getKey());\n          if (g == null) {\n            g = new CollectionStats(e.getKey());\n            globalColStats.put(e.getKey(), g);\n          }\n          g.add(e.getValue());\n        }\n      }\n      params.add(COL_STATS_KEY, StatsUtil.colStatsMapToString(globalColStats));\n      // sum up only from relevant shards\n      params.add(TERMS_KEY, StatsUtil.termsToEncodedString(terms));\n      for (Term t : terms) {\n        String term = t.toString();\n        for (String shard : shards) {\n          TermStats termStats = getPerShardTermStats(rb.req, term, shard);\n          if (termStats == null || termStats.docFreq == 0) {\n            continue;\n          }\n          TermStats g = globalTermStats.get(term);\n          if (g == null) {\n            g = new TermStats(term);\n            globalTermStats.put(term, g);\n          }\n          g.add(termStats);\n        }\n      }\n      log.debug(\"terms={}, termStats={}\", terms, globalTermStats);\n      // need global TermStats here...\n      params.add(TERM_STATS_KEY, StatsUtil.termStatsMapToString(globalTermStats));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doSendGlobalStats(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/ExactStatsCache#doSendGlobalStats(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  protected void doSendGlobalStats(ResponseBuilder rb, ShardRequest outgoing) {\n    ModifiableSolrParams params = outgoing.params;\n    Set<Term> terms = StatsUtil.termsFromEncodedString((String) rb.req.getContext().get(TERMS_KEY));\n    if (!terms.isEmpty()) {\n      Set<String> fields = terms.stream().map(t -> t.field()).collect(Collectors.toSet());\n      Map<String,TermStats> globalTermStats = new HashMap<>();\n      Map<String,CollectionStats> globalColStats = new HashMap<>();\n      // aggregate collection stats, only for the field in terms\n      String collectionName = rb.req.getCore().getCoreDescriptor().getCollectionName();\n      if (collectionName == null) {\n        collectionName = rb.req.getCore().getCoreDescriptor().getName();\n      }\n      List<String> shards = new ArrayList<>();\n      for (String shardUrl : rb.shards) {\n        String shard = StatsUtil.shardUrlToShard(collectionName, shardUrl);\n        if (shard == null) {\n          log.warn(\"Can't determine shard from collectionName={} and shardUrl={}, skipping...\", collectionName, shardUrl);\n          continue;\n        } else {\n          shards.add(shard);\n        }\n      }\n      for (String shard : shards) {\n        Map<String,CollectionStats> s = getPerShardColStats(rb, shard);\n        if (s == null) {\n          continue;\n        }\n        for (Entry<String,CollectionStats> e : s.entrySet()) {\n          if (!fields.contains(e.getKey())) { // skip non-relevant fields\n            continue;\n          }\n          CollectionStats g = globalColStats.get(e.getKey());\n          if (g == null) {\n            g = new CollectionStats(e.getKey());\n            globalColStats.put(e.getKey(), g);\n          }\n          g.add(e.getValue());\n        }\n      }\n      params.add(COL_STATS_KEY, StatsUtil.colStatsMapToString(globalColStats));\n      // sum up only from relevant shards\n      params.add(TERMS_KEY, StatsUtil.termsToEncodedString(terms));\n      for (Term t : terms) {\n        String term = t.toString();\n        for (String shard : shards) {\n          TermStats termStats = getPerShardTermStats(rb.req, term, shard);\n          if (termStats == null || termStats.docFreq == 0) {\n            continue;\n          }\n          TermStats g = globalTermStats.get(term);\n          if (g == null) {\n            g = new TermStats(term);\n            globalTermStats.put(term, g);\n          }\n          g.add(termStats);\n        }\n      }\n      log.debug(\"terms={}, termStats={}\", terms, globalTermStats);\n      // need global TermStats here...\n      params.add(TERM_STATS_KEY, StatsUtil.termStatsMapToString(globalTermStats));\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doSendGlobalStats(ResponseBuilder rb, ShardRequest outgoing) {\n    ModifiableSolrParams params = outgoing.params;\n    Set<Term> terms = StatsUtil.termsFromEncodedString((String) rb.req.getContext().get(TERMS_KEY));\n    if (!terms.isEmpty()) {\n      Set<String> fields = terms.stream().map(t -> t.field()).collect(Collectors.toSet());\n      Map<String,TermStats> globalTermStats = new HashMap<>();\n      Map<String,CollectionStats> globalColStats = new HashMap<>();\n      // aggregate collection stats, only for the field in terms\n      String collectionName = rb.req.getCore().getCoreDescriptor().getCollectionName();\n      if (collectionName == null) {\n        collectionName = rb.req.getCore().getCoreDescriptor().getName();\n      }\n      List<String> shards = new ArrayList<>();\n      for (String shardUrl : rb.shards) {\n        String shard = StatsUtil.shardUrlToShard(collectionName, shardUrl);\n        if (shard == null) {\n          log.warn(\"Can't determine shard from collectionName=\" + collectionName + \" and shardUrl=\" + shardUrl + \", skipping...\");\n          continue;\n        } else {\n          shards.add(shard);\n        }\n      }\n      for (String shard : shards) {\n        Map<String,CollectionStats> s = getPerShardColStats(rb, shard);\n        if (s == null) {\n          continue;\n        }\n        for (Entry<String,CollectionStats> e : s.entrySet()) {\n          if (!fields.contains(e.getKey())) { // skip non-relevant fields\n            continue;\n          }\n          CollectionStats g = globalColStats.get(e.getKey());\n          if (g == null) {\n            g = new CollectionStats(e.getKey());\n            globalColStats.put(e.getKey(), g);\n          }\n          g.add(e.getValue());\n        }\n      }\n      params.add(COL_STATS_KEY, StatsUtil.colStatsMapToString(globalColStats));\n      // sum up only from relevant shards\n      params.add(TERMS_KEY, StatsUtil.termsToEncodedString(terms));\n      for (Term t : terms) {\n        String term = t.toString();\n        for (String shard : shards) {\n          TermStats termStats = getPerShardTermStats(rb.req, term, shard);\n          if (termStats == null || termStats.docFreq == 0) {\n            continue;\n          }\n          TermStats g = globalTermStats.get(term);\n          if (g == null) {\n            g = new TermStats(term);\n            globalTermStats.put(term, g);\n          }\n          g.add(termStats);\n        }\n      }\n      log.debug(\"terms={}, termStats={}\", terms, globalTermStats);\n      // need global TermStats here...\n      params.add(TERM_STATS_KEY, StatsUtil.termStatsMapToString(globalTermStats));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["df72a23fb74bebe914e3f3972063a884327c0436"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"df72a23fb74bebe914e3f3972063a884327c0436":["54faedfb0e03479a38f5ee82f2dfaeea536e9404","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}