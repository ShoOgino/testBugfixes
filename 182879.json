{"path":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","commits":[{"id":"f5457736ee10c96b4fcd88997461006c8585ac24","date":1131568124,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testTopDocsScores() throws Exception {\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public BitSet bits(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return bs;\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n\n    // This test currently fails because of a bug in FieldSortedHitQueue\n    // with a single document matching.\n    // TODO: uncomment when fixed.\n    // assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["812085e8a70bb6d650fded5fa0db7c49a746e918","ca63621c3d63233090c26fc637033de9726f76c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca63621c3d63233090c26fc637033de9726f76c6","date":1131602252,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public BitSet bits(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return bs;\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    // assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public BitSet bits(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return bs;\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n\n    // This test currently fails because of a bug in FieldSortedHitQueue\n    // with a single document matching.\n    // TODO: uncomment when fixed.\n    // assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":["f5457736ee10c96b4fcd88997461006c8585ac24"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"812085e8a70bb6d650fded5fa0db7c49a746e918","date":1131743942,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public BitSet bits(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return bs;\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public BitSet bits(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return bs;\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    // assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":["f5457736ee10c96b4fcd88997461006c8585ac24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public BitSet bits(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return bs;\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(0, reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(0, reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(0, reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(0, reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(0, reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["63bc3238545c6012bd44f5d294077997f236bc4e"],"812085e8a70bb6d650fded5fa0db7c49a746e918":["ca63621c3d63233090c26fc637033de9726f76c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["812085e8a70bb6d650fded5fa0db7c49a746e918"],"ca63621c3d63233090c26fc637033de9726f76c6":["f5457736ee10c96b4fcd88997461006c8585ac24"],"f5457736ee10c96b4fcd88997461006c8585ac24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63bc3238545c6012bd44f5d294077997f236bc4e":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"812085e8a70bb6d650fded5fa0db7c49a746e918":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5457736ee10c96b4fcd88997461006c8585ac24"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["63bc3238545c6012bd44f5d294077997f236bc4e"],"ca63621c3d63233090c26fc637033de9726f76c6":["812085e8a70bb6d650fded5fa0db7c49a746e918"],"f5457736ee10c96b4fcd88997461006c8585ac24":["ca63621c3d63233090c26fc637033de9726f76c6"],"63bc3238545c6012bd44f5d294077997f236bc4e":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}