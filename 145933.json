{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","commits":[{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(SSLHandshakeException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8492b985f753358faec42076491c8be425fb172d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8492b985f753358faec42076491c8be425fb172d","date":1461948896,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","sourceNew":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(SSLHandshakeException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8d5955830d712186a4beb716e797d505af7981","date":1461951189,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","sourceNew":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(SSLHandshakeException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","sourceNew":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the necessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details between plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","sourceNew":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the necessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details between plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterJettys(MiniSolrCloudCluster,SSLTestConfig).mjava","sourceNew":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the necessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details between plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  /** \n   * verify that we can query all of the Jetty instances the specified cluster using the expected\n   * options (based on the sslConfig), and that we can <b>NOT</b> query the Jetty instances in \n   * specified cluster in the ways that should fail (based on the sslConfig)\n   *\n   * @see #getRandomizedHttpSolrClient\n   */\n  private static void checkClusterJettys(final MiniSolrCloudCluster cluster,\n                                         final SSLTestConfig sslConfig) throws Exception {\n\n    final boolean ssl = sslConfig.isSSLMode();\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n\n    for (JettySolrRunner jetty : jettys) {\n      final String baseURL = jetty.getBaseUrl().toString();\n\n      // basic base URL sanity checks\n      assertTrue(\"WTF baseURL: \" + baseURL, null != baseURL && 10 < baseURL.length());\n      assertEquals(\"http vs https: \" + baseURL,\n                   ssl ? \"https\" : \"http:\", baseURL.substring(0,5));\n      \n      // verify solr client success with expected protocol\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n      \n      // sanity check the HttpClient used under the hood by our the cluster's CloudSolrClient\n      // ensure it has the neccessary protocols/credentials for each jetty server\n      //\n      // NOTE: we're not responsible for closing the cloud client\n      final HttpClient cloudClient = cluster.getSolrClient().getLbClient().getHttpClient();\n      try (HttpSolrClient client = getRandomizedHttpSolrClient(baseURL)) {\n        assertEquals(0, CoreAdminRequest.getStatus(/* all */ null, client).getStatus());\n      }\n\n      final String wrongBaseURL = baseURL.replaceFirst((ssl ? \"https://\" : \"http://\"),\n                                                       (ssl ? \"http://\" : \"https://\"));\n          \n      // verify solr client using wrong protocol can't talk to server\n      expectThrows(SolrServerException.class, () -> {\n          try (HttpSolrClient client = getRandomizedHttpSolrClient(wrongBaseURL)) {\n            CoreAdminRequest req = new CoreAdminRequest();\n            req.setAction( CoreAdminAction.STATUS );\n            client.request(req);\n          }\n        });\n      \n      if (! sslConfig.isClientAuthMode()) {\n        // verify simple HTTP(S) client can't do HEAD request for URL with wrong protocol\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String wrongUrl = wrongBaseURL + \"/admin/cores\";\n          // vastly diff exception details betwen plain http vs https, not worried about details here\n          expectThrows(IOException.class, () -> {\n              doHeadRequest(client, wrongUrl);\n            });\n        }\n      }\n      \n      if (ssl) {\n        // verify expected results for a HEAD request to valid URL from HTTP(S) client w/o client certs\n        try (CloseableHttpClient client = getSslAwareClientWithNoClientCerts()) {\n          final String url = baseURL + \"/admin/cores\";\n          if (sslConfig.isClientAuthMode()) {\n            // w/o a valid client cert, SSL connection should fail\n\n            expectThrows(IOException.class, () -> {\n                doHeadRequest(client, url);\n              });\n          } else {\n            assertEquals(\"Wrong status for head request (\"+url+\") when clientAuth=\"\n                         + sslConfig.isClientAuthMode(),\n                         200, doHeadRequest(client, url));\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8e8d5955830d712186a4beb716e797d505af7981":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","8492b985f753358faec42076491c8be425fb172d"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8492b985f753358faec42076491c8be425fb172d":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["8e8d5955830d712186a4beb716e797d505af7981","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["8e8d5955830d712186a4beb716e797d505af7981"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8e8d5955830d712186a4beb716e797d505af7981"]},"commit2Childs":{"8e8d5955830d712186a4beb716e797d505af7981":["d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789","55b50463286869f584cf849d1587a0fcd54d1dfa"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["8e8d5955830d712186a4beb716e797d505af7981","8492b985f753358faec42076491c8be425fb172d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"8492b985f753358faec42076491c8be425fb172d":["8e8d5955830d712186a4beb716e797d505af7981"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}