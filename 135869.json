{"path":"lucene/core/src/java/org/apache/lucene/util/StringHelper#sortKeyLength(BytesRef,BytesRef).mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#sortKeyLength(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Returns the length of {@code currentTerm} needed for use as a sort key.\n   * so that {@link BytesRef#compareTo(BytesRef)} still returns the same result.\n   * This method assumes currentTerm comes after priorTerm.\n   */\n  public static int sortKeyLength(final BytesRef priorTerm, final BytesRef currentTerm) {\n    final int currentTermOffset = currentTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, currentTerm.length);\n    for (int i = 0; i < limit; i++) {\n      if (priorTerm.bytes[priorTermOffset+i] != currentTerm.bytes[currentTermOffset+i]) {\n        return i+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, currentTerm.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#sortKeyLength(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#sortKeyLength(BytesRef,BytesRef).mjava","sourceNew":"  /** \n   * Returns the length of {@code currentTerm} needed for use as a sort key.\n   * so that {@link BytesRef#compareTo(BytesRef)} still returns the same result.\n   * This method assumes currentTerm comes after priorTerm.\n   */\n  public static int sortKeyLength(final BytesRef priorTerm, final BytesRef currentTerm) {\n    return bytesDifference(priorTerm, currentTerm) + 1;\n  }\n\n","sourceOld":"  /** \n   * Returns the length of {@code currentTerm} needed for use as a sort key.\n   * so that {@link BytesRef#compareTo(BytesRef)} still returns the same result.\n   * This method assumes currentTerm comes after priorTerm.\n   */\n  public static int sortKeyLength(final BytesRef priorTerm, final BytesRef currentTerm) {\n    final int currentTermOffset = currentTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, currentTerm.length);\n    for (int i = 0; i < limit; i++) {\n      if (priorTerm.bytes[priorTermOffset+i] != currentTerm.bytes[currentTermOffset+i]) {\n        return i+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, currentTerm.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"456d7e7092cb043c740b4674301660ee8abc26fe":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["456d7e7092cb043c740b4674301660ee8abc26fe"]},"commit2Childs":{"456d7e7092cb043c740b4674301660ee8abc26fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["456d7e7092cb043c740b4674301660ee8abc26fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}