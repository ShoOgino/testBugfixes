{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(CharTermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(CharTermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(CharTermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(CharTermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(CharTermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.toString();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a7347509fad0711ac30cb15a746e9a3830a38ebd","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a7347509fad0711ac30cb15a746e9a3830a38ebd","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e9bbb27241bcf9645bb2f724c137537aa69918a"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["4e9bbb27241bcf9645bb2f724c137537aa69918a","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}