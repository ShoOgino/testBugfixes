{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseNumberFilter#incrementToken().mjava","commits":[{"id":"ebe5243ceee1747a4161c2ea5f9be261be499288","date":1422960251,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseNumberFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n\n    // Emit previously captured token we read past earlier\n    if (state != null) {\n      restoreState(state);\n      state = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    if (keywordAttr.isKeyword()) {\n      return true;\n    }\n\n    if (fallThroughTokens > 0) {\n      fallThroughTokens--;\n      return true;\n    }\n\n    if (posIncrAttr.getPositionIncrement() == 0) {\n      fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n      return true;\n    }\n\n    boolean moreTokens = true;\n    boolean composedNumberToken = false;\n    int startOffset = 0;\n    int endOffset = 0;\n    State preCompositionState = captureState();\n    String term = termAttr.toString();\n    boolean numeralTerm = isNumeral(term);\n    \n    while (moreTokens && numeralTerm) {\n\n      if (!composedNumberToken) {\n        startOffset = offsetAttr.startOffset();\n        composedNumberToken = true;\n      }\n\n      endOffset = offsetAttr.endOffset();\n      moreTokens = input.incrementToken();\n\n      if (posIncrAttr.getPositionIncrement() == 0) {\n        // This token is a stacked/synonym token, capture number of tokens \"under\" this token,\n        // except the first token, which we will emit below after restoring state\n        fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n        state = captureState();\n        restoreState(preCompositionState);\n        return moreTokens;\n      }\n\n      numeral.append(term);\n\n      if (moreTokens) {\n        term = termAttr.toString();\n        numeralTerm = isNumeral(term) || isNumeralPunctuation(term);\n      }\n    }\n\n    if (composedNumberToken) {\n      if (moreTokens) {\n        // We have read past all numerals and there are still tokens left, so\n        // capture the state of this token and emit it on our next incrementToken()\n        state = captureState();\n      }\n\n      String normalizedNumber = normalizeNumber(numeral.toString());\n\n      termAttr.setEmpty();\n      termAttr.append(normalizedNumber);\n      offsetAttr.setOffset(startOffset, endOffset);\n\n      numeral = new StringBuilder();\n      return true;\n    }\n    return moreTokens;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b25aad9e32a4ea939af5033914bd68e852a5f13d","date":1476113868,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseNumberFilter#incrementToken().mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseNumberFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n\n    // Emit previously captured token we read past earlier\n    if (state != null) {\n      restoreState(state);\n      state = null;\n      return true;\n    }\n\n    if (exhausted) {\n      return false;\n    }\n    \n    if (!input.incrementToken()) {\n      exhausted = true;\n      return false;\n    }\n\n    if (keywordAttr.isKeyword()) {\n      return true;\n    }\n\n    if (fallThroughTokens > 0) {\n      fallThroughTokens--;\n      return true;\n    }\n\n    if (posIncrAttr.getPositionIncrement() == 0) {\n      fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n      return true;\n    }\n\n    boolean moreTokens = true;\n    boolean composedNumberToken = false;\n    int startOffset = 0;\n    int endOffset = 0;\n    State preCompositionState = captureState();\n    String term = termAttr.toString();\n    boolean numeralTerm = isNumeral(term);\n    \n    while (moreTokens && numeralTerm) {\n\n      if (!composedNumberToken) {\n        startOffset = offsetAttr.startOffset();\n        composedNumberToken = true;\n      }\n\n      endOffset = offsetAttr.endOffset();\n      moreTokens = input.incrementToken();\n      if (moreTokens == false) {\n        exhausted = true;\n      }\n\n      if (posIncrAttr.getPositionIncrement() == 0) {\n        // This token is a stacked/synonym token, capture number of tokens \"under\" this token,\n        // except the first token, which we will emit below after restoring state\n        fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n        state = captureState();\n        restoreState(preCompositionState);\n        return moreTokens;\n      }\n\n      numeral.append(term);\n\n      if (moreTokens) {\n        term = termAttr.toString();\n        numeralTerm = isNumeral(term) || isNumeralPunctuation(term);\n      }\n    }\n\n    if (composedNumberToken) {\n      if (moreTokens) {\n        // We have read past all numerals and there are still tokens left, so\n        // capture the state of this token and emit it on our next incrementToken()\n        state = captureState();\n      }\n\n      String normalizedNumber = normalizeNumber(numeral.toString());\n\n      termAttr.setEmpty();\n      termAttr.append(normalizedNumber);\n      offsetAttr.setOffset(startOffset, endOffset);\n\n      numeral = new StringBuilder();\n      return true;\n    }\n    return moreTokens;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n\n    // Emit previously captured token we read past earlier\n    if (state != null) {\n      restoreState(state);\n      state = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    if (keywordAttr.isKeyword()) {\n      return true;\n    }\n\n    if (fallThroughTokens > 0) {\n      fallThroughTokens--;\n      return true;\n    }\n\n    if (posIncrAttr.getPositionIncrement() == 0) {\n      fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n      return true;\n    }\n\n    boolean moreTokens = true;\n    boolean composedNumberToken = false;\n    int startOffset = 0;\n    int endOffset = 0;\n    State preCompositionState = captureState();\n    String term = termAttr.toString();\n    boolean numeralTerm = isNumeral(term);\n    \n    while (moreTokens && numeralTerm) {\n\n      if (!composedNumberToken) {\n        startOffset = offsetAttr.startOffset();\n        composedNumberToken = true;\n      }\n\n      endOffset = offsetAttr.endOffset();\n      moreTokens = input.incrementToken();\n\n      if (posIncrAttr.getPositionIncrement() == 0) {\n        // This token is a stacked/synonym token, capture number of tokens \"under\" this token,\n        // except the first token, which we will emit below after restoring state\n        fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n        state = captureState();\n        restoreState(preCompositionState);\n        return moreTokens;\n      }\n\n      numeral.append(term);\n\n      if (moreTokens) {\n        term = termAttr.toString();\n        numeralTerm = isNumeral(term) || isNumeralPunctuation(term);\n      }\n    }\n\n    if (composedNumberToken) {\n      if (moreTokens) {\n        // We have read past all numerals and there are still tokens left, so\n        // capture the state of this token and emit it on our next incrementToken()\n        state = captureState();\n      }\n\n      String normalizedNumber = normalizeNumber(numeral.toString());\n\n      termAttr.setEmpty();\n      termAttr.append(normalizedNumber);\n      offsetAttr.setOffset(startOffset, endOffset);\n\n      numeral = new StringBuilder();\n      return true;\n    }\n    return moreTokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseNumberFilter#incrementToken().mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseNumberFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n\n    // Emit previously captured token we read past earlier\n    if (state != null) {\n      restoreState(state);\n      state = null;\n      return true;\n    }\n\n    if (exhausted) {\n      return false;\n    }\n    \n    if (!input.incrementToken()) {\n      exhausted = true;\n      return false;\n    }\n\n    if (keywordAttr.isKeyword()) {\n      return true;\n    }\n\n    if (fallThroughTokens > 0) {\n      fallThroughTokens--;\n      return true;\n    }\n\n    if (posIncrAttr.getPositionIncrement() == 0) {\n      fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n      return true;\n    }\n\n    boolean moreTokens = true;\n    boolean composedNumberToken = false;\n    int startOffset = 0;\n    int endOffset = 0;\n    State preCompositionState = captureState();\n    String term = termAttr.toString();\n    boolean numeralTerm = isNumeral(term);\n    \n    while (moreTokens && numeralTerm) {\n\n      if (!composedNumberToken) {\n        startOffset = offsetAttr.startOffset();\n        composedNumberToken = true;\n      }\n\n      endOffset = offsetAttr.endOffset();\n      moreTokens = input.incrementToken();\n      if (moreTokens == false) {\n        exhausted = true;\n      }\n\n      if (posIncrAttr.getPositionIncrement() == 0) {\n        // This token is a stacked/synonym token, capture number of tokens \"under\" this token,\n        // except the first token, which we will emit below after restoring state\n        fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n        state = captureState();\n        restoreState(preCompositionState);\n        return moreTokens;\n      }\n\n      numeral.append(term);\n\n      if (moreTokens) {\n        term = termAttr.toString();\n        numeralTerm = isNumeral(term) || isNumeralPunctuation(term);\n      }\n    }\n\n    if (composedNumberToken) {\n      if (moreTokens) {\n        // We have read past all numerals and there are still tokens left, so\n        // capture the state of this token and emit it on our next incrementToken()\n        state = captureState();\n      }\n\n      String normalizedNumber = normalizeNumber(numeral.toString());\n\n      termAttr.setEmpty();\n      termAttr.append(normalizedNumber);\n      offsetAttr.setOffset(startOffset, endOffset);\n\n      numeral = new StringBuilder();\n      return true;\n    }\n    return moreTokens;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n\n    // Emit previously captured token we read past earlier\n    if (state != null) {\n      restoreState(state);\n      state = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    if (keywordAttr.isKeyword()) {\n      return true;\n    }\n\n    if (fallThroughTokens > 0) {\n      fallThroughTokens--;\n      return true;\n    }\n\n    if (posIncrAttr.getPositionIncrement() == 0) {\n      fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n      return true;\n    }\n\n    boolean moreTokens = true;\n    boolean composedNumberToken = false;\n    int startOffset = 0;\n    int endOffset = 0;\n    State preCompositionState = captureState();\n    String term = termAttr.toString();\n    boolean numeralTerm = isNumeral(term);\n    \n    while (moreTokens && numeralTerm) {\n\n      if (!composedNumberToken) {\n        startOffset = offsetAttr.startOffset();\n        composedNumberToken = true;\n      }\n\n      endOffset = offsetAttr.endOffset();\n      moreTokens = input.incrementToken();\n\n      if (posIncrAttr.getPositionIncrement() == 0) {\n        // This token is a stacked/synonym token, capture number of tokens \"under\" this token,\n        // except the first token, which we will emit below after restoring state\n        fallThroughTokens = posLengthAttr.getPositionLength() - 1;\n        state = captureState();\n        restoreState(preCompositionState);\n        return moreTokens;\n      }\n\n      numeral.append(term);\n\n      if (moreTokens) {\n        term = termAttr.toString();\n        numeralTerm = isNumeral(term) || isNumeralPunctuation(term);\n      }\n    }\n\n    if (composedNumberToken) {\n      if (moreTokens) {\n        // We have read past all numerals and there are still tokens left, so\n        // capture the state of this token and emit it on our next incrementToken()\n        state = captureState();\n      }\n\n      String normalizedNumber = normalizeNumber(numeral.toString());\n\n      termAttr.setEmpty();\n      termAttr.append(normalizedNumber);\n      offsetAttr.setOffset(startOffset, endOffset);\n\n      numeral = new StringBuilder();\n      return true;\n    }\n    return moreTokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ebe5243ceee1747a4161c2ea5f9be261be499288":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b25aad9e32a4ea939af5033914bd68e852a5f13d":["ebe5243ceee1747a4161c2ea5f9be261be499288"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ebe5243ceee1747a4161c2ea5f9be261be499288","b25aad9e32a4ea939af5033914bd68e852a5f13d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b25aad9e32a4ea939af5033914bd68e852a5f13d"]},"commit2Childs":{"ebe5243ceee1747a4161c2ea5f9be261be499288":["b25aad9e32a4ea939af5033914bd68e852a5f13d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebe5243ceee1747a4161c2ea5f9be261be499288"],"b25aad9e32a4ea939af5033914bd68e852a5f13d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}