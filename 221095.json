{"path":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","commits":[{"id":"ee3a275f925be62184fad78d647fa70e27ac7cea","date":1301416659,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile;\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile;\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile;\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile;\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c01638820c67fa5bda8b09b23dbd78b09f4c82","date":1468488035,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    final String osFileName = \"customrules.dat\";\n    final FileOutputStream os = new FileOutputStream(new File(confDir, osFileName));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    final ResourceLoader loader;\n    if (random().nextBoolean()) {\n      loader = new StringMockResourceLoader(tailoredRules);\n    } else {\n      loader = new FilesystemResourceLoader(confDir.toPath());\n    }\n    final Collator readCollator = ICUCollationField.createFromRules(osFileName, loader);\n    assertEquals(tailoredCollator, readCollator);\n\n    return tmpFile;\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    final String osFileName = \"customrules.dat\";\n    final FileOutputStream os = new FileOutputStream(new File(confDir, osFileName));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    final ResourceLoader loader;\n    if (random().nextBoolean()) {\n      loader = new StringMockResourceLoader(tailoredRules);\n    } else {\n      loader = new FilesystemResourceLoader(confDir.toPath());\n    }\n    final Collator readCollator = ICUCollationField.createFromRules(osFileName, loader);\n    assertEquals(tailoredCollator, readCollator);\n\n    return tmpFile;\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    final String osFileName = \"customrules.dat\";\n    final FileOutputStream os = new FileOutputStream(new File(confDir, osFileName));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    final ResourceLoader loader;\n    if (random().nextBoolean()) {\n      loader = new StringMockResourceLoader(tailoredRules);\n    } else {\n      loader = new FilesystemResourceLoader(confDir.toPath());\n    }\n    final Collator readCollator = ICUCollationField.createFromRules(osFileName, loader);\n    assertEquals(tailoredCollator, readCollator);\n\n    return tmpFile;\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    final String osFileName = \"customrules.dat\";\n    final FileOutputStream os = new FileOutputStream(new File(confDir, osFileName));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    final ResourceLoader loader;\n    if (random().nextBoolean()) {\n      loader = new StringMockResourceLoader(tailoredRules);\n    } else {\n      loader = new FilesystemResourceLoader(confDir.toPath());\n    }\n    final Collator readCollator = ICUCollationField.createFromRules(osFileName, loader);\n    assertEquals(tailoredCollator, readCollator);\n\n    return tmpFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    final String osFileName = \"customrules.dat\";\n    final FileOutputStream os = new FileOutputStream(new File(confDir, osFileName));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    final ResourceLoader loader;\n    if (random().nextBoolean()) {\n      loader = new StringMockResourceLoader(tailoredRules);\n    } else {\n      loader = new FilesystemResourceLoader(confDir.toPath());\n    }\n    final Collator readCollator = ICUCollationField.createFromRules(osFileName, loader);\n    assertEquals(tailoredCollator, readCollator);\n\n    return tmpFile;\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static String setupSolrHome() throws Exception {\n    String tmpFile = createTempDir().toFile().getAbsolutePath();\n    // make data and conf dirs\n    new File(tmpFile  + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    final String osFileName = \"customrules.dat\";\n    final FileOutputStream os = new FileOutputStream(new File(confDir, osFileName));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    final ResourceLoader loader;\n    if (random().nextBoolean()) {\n      loader = new StringMockResourceLoader(tailoredRules);\n    } else {\n      loader = new FilesystemResourceLoader(confDir.toPath());\n    }\n    final Collator readCollator = ICUCollationField.createFromRules(osFileName, loader);\n    assertEquals(tailoredCollator, readCollator);\n\n    return tmpFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c01638820c67fa5bda8b09b23dbd78b09f4c82":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["60c01638820c67fa5bda8b09b23dbd78b09f4c82"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","60c01638820c67fa5bda8b09b23dbd78b09f4c82"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f4abec28b874149a7223e32cc7a01704c27790de"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","ee3a275f925be62184fad78d647fa70e27ac7cea"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["abd55340ba9df8b62edcd692b34e46cf0614a52e","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ee3a275f925be62184fad78d647fa70e27ac7cea","ee3a275f925be62184fad78d647fa70e27ac7cea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"ee3a275f925be62184fad78d647fa70e27ac7cea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["ee3a275f925be62184fad78d647fa70e27ac7cea"]},"commit2Childs":{"60c01638820c67fa5bda8b09b23dbd78b09f4c82":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["60c01638820c67fa5bda8b09b23dbd78b09f4c82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","ee3a275f925be62184fad78d647fa70e27ac7cea"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45669a651c970812a680841b97a77cce06af559f":[],"ee3a275f925be62184fad78d647fa70e27ac7cea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f","abd55340ba9df8b62edcd692b34e46cf0614a52e"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","fe33227f6805edab2036cbb80645cc4e2d1fa424","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}