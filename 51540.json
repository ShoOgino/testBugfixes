{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseNonFuzzySpatialOpStrategyTest#testOperationRandomShapes(SpatialOperation).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseNonFuzzySpatialOpStrategyTest#testOperationRandomShapes(SpatialOperation).mjava","pathOld":"/dev/null","sourceNew":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseNonFuzzySpatialOpStrategyTest#testOperationRandomShapes(SpatialOperation).mjava","sourceNew":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","sourceOld":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0521546db127e358ced1772a9d696dbdd255b203":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0521546db127e358ced1772a9d696dbdd255b203"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["0521546db127e358ced1772a9d696dbdd255b203"],"0521546db127e358ced1772a9d696dbdd255b203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}