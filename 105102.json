{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","commits":[{"id":"df334aa9e12ddee14197967493d1a06616054048","date":1383568293,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public long sizeInBytes() {\n    return RamUsageEstimator.sizeOf(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1263de2bb0042265cc21611cccdf11992274edcf","date":1393266507,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","sourceNew":"  @Override\n  public long sizeInBytes() {\n    long mem = RamUsageEstimator.shallowSizeOf(this);\n    if (searcher != null) {\n      for (AtomicReaderContext context : searcher.getIndexReader().leaves()) {\n        AtomicReader reader = FilterAtomicReader.unwrap(context.reader());\n        if (reader instanceof SegmentReader) {\n          mem += ((SegmentReader) context.reader()).ramBytesUsed();\n        }\n      }\n    }\n    return mem;\n  }\n\n","sourceOld":"  @Override\n  public long sizeInBytes() {\n    return RamUsageEstimator.sizeOf(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","sourceNew":"  @Override\n  public long sizeInBytes() {\n    long mem = RamUsageEstimator.shallowSizeOf(this);\n    if (searcher != null) {\n      for (AtomicReaderContext context : searcher.getIndexReader().leaves()) {\n        AtomicReader reader = FilterAtomicReader.unwrap(context.reader());\n        if (reader instanceof SegmentReader) {\n          mem += ((SegmentReader) context.reader()).ramBytesUsed();\n        }\n      }\n    }\n    return mem;\n  }\n\n","sourceOld":"  @Override\n  public long sizeInBytes() {\n    return RamUsageEstimator.sizeOf(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a371aa649cc243e82cb8677ca960a1e0232ecedf","date":1393605574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","sourceNew":"  @Override\n  public long sizeInBytes() {\n    long mem = RamUsageEstimator.shallowSizeOf(this);\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (AtomicReaderContext context : searcher.getIndexReader().leaves()) {\n            AtomicReader reader = FilterAtomicReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              mem += ((SegmentReader) context.reader()).ramBytesUsed();\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return mem;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public long sizeInBytes() {\n    long mem = RamUsageEstimator.shallowSizeOf(this);\n    if (searcher != null) {\n      for (AtomicReaderContext context : searcher.getIndexReader().leaves()) {\n        AtomicReader reader = FilterAtomicReader.unwrap(context.reader());\n        if (reader instanceof SegmentReader) {\n          mem += ((SegmentReader) context.reader()).ramBytesUsed();\n        }\n      }\n    }\n    return mem;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8405d98acebb7e287bf7ac40e937ba05b8661285","date":1401433291,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#ramBytesUsed().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#sizeInBytes().mjava","sourceNew":"  @Override\n  public long ramBytesUsed() {\n    long mem = RamUsageEstimator.shallowSizeOf(this);\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (AtomicReaderContext context : searcher.getIndexReader().leaves()) {\n            AtomicReader reader = FilterAtomicReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              mem += ((SegmentReader) context.reader()).ramBytesUsed();\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return mem;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public long sizeInBytes() {\n    long mem = RamUsageEstimator.shallowSizeOf(this);\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (AtomicReaderContext context : searcher.getIndexReader().leaves()) {\n            AtomicReader reader = FilterAtomicReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              mem += ((SegmentReader) context.reader()).ramBytesUsed();\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return mem;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1263de2bb0042265cc21611cccdf11992274edcf":["df334aa9e12ddee14197967493d1a06616054048"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["1263de2bb0042265cc21611cccdf11992274edcf"],"df334aa9e12ddee14197967493d1a06616054048":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["df334aa9e12ddee14197967493d1a06616054048","1263de2bb0042265cc21611cccdf11992274edcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8405d98acebb7e287bf7ac40e937ba05b8661285"]},"commit2Childs":{"1263de2bb0042265cc21611cccdf11992274edcf":["a371aa649cc243e82cb8677ca960a1e0232ecedf","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df334aa9e12ddee14197967493d1a06616054048"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"df334aa9e12ddee14197967493d1a06616054048":["1263de2bb0042265cc21611cccdf11992274edcf","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}