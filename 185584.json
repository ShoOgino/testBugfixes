{"path":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ccffc7ac75591780f9b7d53e22b8bea58eb4166","date":1285352709,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","bugFix":null,"bugIntro":["45fa1757f5581a10e9c63294cf292a14c92d23b1","45fa1757f5581a10e9c63294cf292a14c92d23b1","45fa1757f5581a10e9c63294cf292a14c92d23b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["1ccffc7ac75591780f9b7d53e22b8bea58eb4166","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ccffc7ac75591780f9b7d53e22b8bea58eb4166":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1ccffc7ac75591780f9b7d53e22b8bea58eb4166"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["1ccffc7ac75591780f9b7d53e22b8bea58eb4166"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1ccffc7ac75591780f9b7d53e22b8bea58eb4166":["29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1ccffc7ac75591780f9b7d53e22b8bea58eb4166","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}