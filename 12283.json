{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMulipleTerms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMulipleTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testMulipleTerms().mjava","sourceNew":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMulipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMulipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMulipleTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMulipleTerms().mjava","sourceNew":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMulipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMulipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMultipleTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testMulipleTerms().mjava","sourceNew":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMultipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * slop is the total number of positional moves allowed\n   * to line up a phrase\n   */\n  public void testMulipleTerms() throws Exception {\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"one\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"two total moves\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(5); // it takes six moves to match this phrase\n    query.add(new Term(\"field\", \"five\"));\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 5 not close enough\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query.setSlop(6);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 6 just right\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}