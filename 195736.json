{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","commits":[{"id":"4d85423d45b4f1c56d97b657faad35d1a3100d50","date":1460895224,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536a864ce38bf14fb3f072a3129a389e95200e20","date":1461068886,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","sourceNew":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      System.err.println(\"Before: \"+originalPoints);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      System.err.println(\"After: \"+filteredPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99b0a9e4d18bb364d2546e5230cc61abcd2d366b","date":1461241852,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","sourceNew":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      System.err.println(\"Before: \"+originalPoints);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      System.err.println(\"After: \"+filteredPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      System.err.println(\"Before: \"+originalPoints);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints);\n      System.err.println(\"After: \"+filteredPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1a26cce088d68dd4a3c599994fbc52c06e37b4","date":1461672182,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","sourceNew":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      System.err.println(\"Before: \"+originalPoints);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      System.err.println(\"After: \"+filteredPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      System.err.println(\"Before: \"+originalPoints);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      System.err.println(\"After: \"+filteredPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"265e2d0799e876e7c751a97229b0d8007cd79f0a","date":1461779668,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","sourceNew":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      System.err.println(\"Before: \"+originalPoints);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      System.err.println(\"After: \"+filteredPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","date":1461888019,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","sourceNew":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      System.err.println(\"Before: \"+originalPoints);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      System.err.println(\"After: \"+filteredPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonPointFiltering().mjava","sourceNew":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      final List<GeoPoint> filteredPoints = GeoPolygonFactory.filterEdges(GeoPolygonFactory.filterPoints(originalPoints), 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonPointFiltering() {\n    final GeoPoint point1 = new GeoPoint(PlanetModel.WGS84, 1.0, 2.0);\n    final GeoPoint point2 = new GeoPoint(PlanetModel.WGS84, 0.5, 2.5);\n    final GeoPoint point3 = new GeoPoint(PlanetModel.WGS84, 0.0, 0.0);\n    final GeoPoint point4 = new GeoPoint(PlanetModel.WGS84, Math.PI * 0.5, 0.0);\n    final GeoPoint point5 = new GeoPoint(PlanetModel.WGS84, 1.0, 0.0);\n    \n    // First: duplicate points in the middle\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point2);\n      originalPoints.add(point2);\n      originalPoints.add(point3);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point2, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n    // Next, duplicate points at the beginning\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point2);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point2);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point2, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n    // Coplanar point removal\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      originalPoints.add(point5);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point1, filteredPoints.get(0));\n      assertEquals(point3, filteredPoints.get(1));\n      assertEquals(point5, filteredPoints.get(2));\n    }\n    // Over the boundary\n    {\n      final List<GeoPoint> originalPoints = new ArrayList<>();\n      originalPoints.add(point5);\n      originalPoints.add(point1);\n      originalPoints.add(point3);\n      originalPoints.add(point4);\n      System.err.println(\"Before: \"+originalPoints);\n      final List<GeoPoint> filteredPoints =GeoPolygonFactory.filterPoints(originalPoints, 0.0);\n      System.err.println(\"After: \"+filteredPoints);\n      assertEquals(3, filteredPoints.size());\n      assertEquals(point5, filteredPoints.get(0));\n      assertEquals(point1, filteredPoints.get(1));\n      assertEquals(point3, filteredPoints.get(2));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d85423d45b4f1c56d97b657faad35d1a3100d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"265e2d0799e876e7c751a97229b0d8007cd79f0a":["ba1a26cce088d68dd4a3c599994fbc52c06e37b4"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["99b0a9e4d18bb364d2546e5230cc61abcd2d366b","265e2d0799e876e7c751a97229b0d8007cd79f0a"],"ba1a26cce088d68dd4a3c599994fbc52c06e37b4":["99b0a9e4d18bb364d2546e5230cc61abcd2d366b"],"99b0a9e4d18bb364d2546e5230cc61abcd2d366b":["536a864ce38bf14fb3f072a3129a389e95200e20"],"536a864ce38bf14fb3f072a3129a389e95200e20":["4d85423d45b4f1c56d97b657faad35d1a3100d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["99b0a9e4d18bb364d2546e5230cc61abcd2d366b","c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"]},"commit2Childs":{"4d85423d45b4f1c56d97b657faad35d1a3100d50":["536a864ce38bf14fb3f072a3129a389e95200e20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d85423d45b4f1c56d97b657faad35d1a3100d50"],"265e2d0799e876e7c751a97229b0d8007cd79f0a":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"ba1a26cce088d68dd4a3c599994fbc52c06e37b4":["265e2d0799e876e7c751a97229b0d8007cd79f0a"],"99b0a9e4d18bb364d2546e5230cc61abcd2d366b":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","ba1a26cce088d68dd4a3c599994fbc52c06e37b4","55b50463286869f584cf849d1587a0fcd54d1dfa"],"536a864ce38bf14fb3f072a3129a389e95200e20":["99b0a9e4d18bb364d2546e5230cc61abcd2d366b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}