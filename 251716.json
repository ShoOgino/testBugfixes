{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)\n        .tokenStream(fieldName, text);\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)\n        .tokenStream(fieldName, text);\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)\n        .tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aeebe27bce18b879b80f68494c52cda1021b5705","date":1417792137,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = analyzer.tokenStream(fieldName, text);\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)\n        .tokenStream(fieldName, text);\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <code>testHighlightingWithDefaultField()</code>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = analyzer.tokenStream(fieldName, text);\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = analyzer.tokenStream(fieldName, text);\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["aeebe27bce18b879b80f68494c52cda1021b5705"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["eafa8c5eabc3dacd34680054e6a33bda024080ac","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"aeebe27bce18b879b80f68494c52cda1021b5705":["c83d6c4335f31cae14f625a222bc842f20073dcd"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","aeebe27bce18b879b80f68494c52cda1021b5705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"aeebe27bce18b879b80f68494c52cda1021b5705":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}