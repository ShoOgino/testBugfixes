{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetTest#meanTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetTest#meanTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void meanTest() throws Exception { \n    //Int\n    Double intResult = (Double)getStatResult(\"mr\", \"int_id\", VAL_TYPE.DOUBLE);\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"mean\");\n    assertEquals(getRawResponse(), intResult,intTest);\n    \n    //Long\n    Double longResult = (Double)getStatResult(\"mr\", \"long_ld\", VAL_TYPE.DOUBLE);\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"mean\");\n    assertEquals(getRawResponse(), longResult,longTest);\n    \n    //Float\n    Double floatResult = (Double)getStatResult(\"mr\", \"float_fd\", VAL_TYPE.DOUBLE);\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n    \n    //Double\n    Double doubleResult = (Double)getStatResult(\"mr\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"mean\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetTest#meanTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetTest#meanTest().mjava","sourceNew":"  @Test\n  public void meanTest() throws Exception {\n    //Int\n    Double intResult = (Double)getStatResult(\"mr\", \"int_id\", VAL_TYPE.DOUBLE);\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"mean\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Double longResult = (Double)getStatResult(\"mr\", \"long_ld\", VAL_TYPE.DOUBLE);\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"mean\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Double floatResult = (Double)getStatResult(\"mr\", \"float_fd\", VAL_TYPE.DOUBLE);\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mr\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"mean\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n  }\n\n","sourceOld":"  @Test\n  public void meanTest() throws Exception { \n    //Int\n    Double intResult = (Double)getStatResult(\"mr\", \"int_id\", VAL_TYPE.DOUBLE);\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"mean\");\n    assertEquals(getRawResponse(), intResult,intTest);\n    \n    //Long\n    Double longResult = (Double)getStatResult(\"mr\", \"long_ld\", VAL_TYPE.DOUBLE);\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"mean\");\n    assertEquals(getRawResponse(), longResult,longTest);\n    \n    //Float\n    Double floatResult = (Double)getStatResult(\"mr\", \"float_fd\", VAL_TYPE.DOUBLE);\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n    \n    //Double\n    Double doubleResult = (Double)getStatResult(\"mr\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"mean\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetTest#meanTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetTest#meanTest().mjava","sourceNew":"  @Test\n  public void meanTest() throws Exception {\n    //Int\n    Double intResult = (Double)getStatResult(\"mr\", \"int_id\", VAL_TYPE.DOUBLE);\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"mean\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Double longResult = (Double)getStatResult(\"mr\", \"long_ld\", VAL_TYPE.DOUBLE);\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"mean\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Double floatResult = (Double)getStatResult(\"mr\", \"float_fd\", VAL_TYPE.DOUBLE);\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mr\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"mean\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n  }\n\n","sourceOld":"  @Test\n  public void meanTest() throws Exception { \n    //Int\n    Double intResult = (Double)getStatResult(\"mr\", \"int_id\", VAL_TYPE.DOUBLE);\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"mean\");\n    assertEquals(getRawResponse(), intResult,intTest);\n    \n    //Long\n    Double longResult = (Double)getStatResult(\"mr\", \"long_ld\", VAL_TYPE.DOUBLE);\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"mean\");\n    assertEquals(getRawResponse(), longResult,longTest);\n    \n    //Float\n    Double floatResult = (Double)getStatResult(\"mr\", \"float_fd\", VAL_TYPE.DOUBLE);\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n    \n    //Double\n    Double doubleResult = (Double)getStatResult(\"mr\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"mean\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetTest#meanTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetTest#meanTest().mjava","sourceNew":"  @Test\n  public void meanTest() throws Exception {\n    //Int\n    Double intResult = (Double)getStatResult(\"mr\", \"int_id\", VAL_TYPE.DOUBLE);\n    Double intTest = calculateNumberStat(intTestStart, \"mean\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Double longResult = (Double)getStatResult(\"mr\", \"long_ld\", VAL_TYPE.DOUBLE);\n    Double longTest = calculateNumberStat(longTestStart, \"mean\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Double floatResult = (Double)getStatResult(\"mr\", \"float_fd\", VAL_TYPE.DOUBLE);\n    Double floatTest = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mr\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = calculateNumberStat(doubleTestStart, \"mean\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n  }\n\n","sourceOld":"  @Test\n  public void meanTest() throws Exception {\n    //Int\n    Double intResult = (Double)getStatResult(\"mr\", \"int_id\", VAL_TYPE.DOUBLE);\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"mean\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Double longResult = (Double)getStatResult(\"mr\", \"long_ld\", VAL_TYPE.DOUBLE);\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"mean\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Double floatResult = (Double)getStatResult(\"mr\", \"float_fd\", VAL_TYPE.DOUBLE);\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Double doubleResult = (Double)getStatResult(\"mr\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"mean\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","f8061ddd97f3352007d927dae445884a6f3d857b"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}