{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","commits":[{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore)\n        throws IOException {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","e4184751347df4dfb7bc0e2d4dc1b412857f301d","e4184751347df4dfb7bc0e2d4dc1b412857f301d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore)\n        throws IOException {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n    }\n\n","sourceOld":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore)\n        throws IOException {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n    }\n\n","bugFix":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n    }\n\n","sourceOld":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore)\n        throws IOException {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(\n                                FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      comparators = queue.getComparators();\n      reverseMul = queue.getReverseMul();\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["901e951cec2e6af4e503209a6721c8834db23279"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7615b855702e008d91a95a2578bf05d27372f599"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"901e951cec2e6af4e503209a6721c8834db23279":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["781239fc84d36be12b84e4d3e2618f5f07a182e3"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe","ef0d8a69209261514c5739c770bba706c2308450"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["901e951cec2e6af4e503209a6721c8834db23279"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"901e951cec2e6af4e503209a6721c8834db23279":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["27ab7b234eab0cbc020836989b96ed430e1065bb","fe33227f6805edab2036cbb80645cc4e2d1fa424","7615b855702e008d91a95a2578bf05d27372f599"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}