{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.startDoc docID=\" + docID);\n    }\n\n    // nocommit do this in finishDoc... but does it fail...?\n    // is it not always called...?\n    if (posOut != null && saveNextPosBlock) {\n      lastBlockPosFP = posOut.getFilePointer();\n      if (payOut != null) {\n        lastBlockPayFP = payOut.getFilePointer();\n      }\n      lastBlockPosBufferUpto = posBufferUpto;\n      lastBlockEndOffset = lastEndOffset;\n      lastBlockPayloadByteUpto = payloadByteUpto;\n      saveNextPosBlock = false;\n      if (DEBUG) {\n        System.out.println(\"  now save lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" + lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      }\n    }\n\n    final int docDelta = docID - lastDocID;\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n    lastDocID = docID;\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n    if (DEBUG) {\n      System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n    }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == blockSize) {\n      // nocommit maybe instead of buffering skip before\n      // writing a block based on last block's end data\n      // ... we could buffer after writing the block?  only\n      // iffiness with that approach is it could be a\n      // pointlness skip?  like we may stop adding docs\n      // right after that, then we have skip point AFTER\n      // last doc.  the thing is, in finishTerm we are\n      // already sometimes adding a skip point AFTER the\n      // last doc?\n      if (lastBlockDocID != -1) {\n        if (DEBUG) {\n          System.out.println(\"  bufferSkip at writeBlock: lastDocID=\" + lastBlockDocID + \" docCount=\" + (docCount-blockSize));\n        }\n        skipWriter.bufferSkip(lastBlockDocID, docCount-blockSize, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockEndOffset, lastBlockPayloadByteUpto);\n      }\n      lastBlockDocID = docID;\n      saveNextPosBlock = true;\n\n      if (DEBUG) {\n        System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      }\n      writeBlock(docDeltaLBuffer, docOut);\n      if (fieldHasFreqs) {\n        if (DEBUG) {\n          System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        }\n        writeBlock(freqLBuffer, docOut);\n      }\n      docBufferUpto = 0;\n    }\n\n    lastPosition = 0;\n    lastEndOffset = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.startDoc docID=\" + docID);\n    }\n\n    // nocommit do this in finishDoc... but does it fail...?\n    // is it not always called...?\n    if (posOut != null && saveNextPosBlock) {\n      lastBlockPosFP = posOut.getFilePointer();\n      if (payOut != null) {\n        lastBlockPayFP = payOut.getFilePointer();\n      }\n      lastBlockPosBufferUpto = posBufferUpto;\n      lastBlockStartOffset = lastStartOffset;\n      lastBlockPayloadByteUpto = payloadByteUpto;\n      saveNextPosBlock = false;\n      if (DEBUG) {\n        System.out.println(\"  now save lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" + lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      }\n    }\n\n    final int docDelta = docID - lastDocID;\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n    lastDocID = docID;\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n    if (DEBUG) {\n      System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n    }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == blockSize) {\n      // nocommit maybe instead of buffering skip before\n      // writing a block based on last block's end data\n      // ... we could buffer after writing the block?  only\n      // iffiness with that approach is it could be a\n      // pointlness skip?  like we may stop adding docs\n      // right after that, then we have skip point AFTER\n      // last doc.  the thing is, in finishTerm we are\n      // already sometimes adding a skip point AFTER the\n      // last doc?\n      if (lastBlockDocID != -1) {\n        if (DEBUG) {\n          System.out.println(\"  bufferSkip at writeBlock: lastDocID=\" + lastBlockDocID + \" docCount=\" + (docCount-blockSize));\n        }\n        skipWriter.bufferSkip(lastBlockDocID, docCount-blockSize, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockStartOffset, lastBlockPayloadByteUpto);\n      }\n      lastBlockDocID = docID;\n      saveNextPosBlock = true;\n\n      if (DEBUG) {\n        System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      }\n      writeBlock(docDeltaLBuffer, docOut);\n      if (fieldHasFreqs) {\n        if (DEBUG) {\n          System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        }\n        writeBlock(freqLBuffer, docOut);\n      }\n      docBufferUpto = 0;\n    }\n\n    lastPosition = 0;\n    lastStartOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.startDoc docID=\" + docID);\n    }\n\n    // nocommit do this in finishDoc... but does it fail...?\n    // is it not always called...?\n    if (posOut != null && saveNextPosBlock) {\n      lastBlockPosFP = posOut.getFilePointer();\n      if (payOut != null) {\n        lastBlockPayFP = payOut.getFilePointer();\n      }\n      lastBlockPosBufferUpto = posBufferUpto;\n      lastBlockEndOffset = lastEndOffset;\n      lastBlockPayloadByteUpto = payloadByteUpto;\n      saveNextPosBlock = false;\n      if (DEBUG) {\n        System.out.println(\"  now save lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" + lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      }\n    }\n\n    final int docDelta = docID - lastDocID;\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n    lastDocID = docID;\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n    if (DEBUG) {\n      System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n    }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == blockSize) {\n      // nocommit maybe instead of buffering skip before\n      // writing a block based on last block's end data\n      // ... we could buffer after writing the block?  only\n      // iffiness with that approach is it could be a\n      // pointlness skip?  like we may stop adding docs\n      // right after that, then we have skip point AFTER\n      // last doc.  the thing is, in finishTerm we are\n      // already sometimes adding a skip point AFTER the\n      // last doc?\n      if (lastBlockDocID != -1) {\n        if (DEBUG) {\n          System.out.println(\"  bufferSkip at writeBlock: lastDocID=\" + lastBlockDocID + \" docCount=\" + (docCount-blockSize));\n        }\n        skipWriter.bufferSkip(lastBlockDocID, docCount-blockSize, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockEndOffset, lastBlockPayloadByteUpto);\n      }\n      lastBlockDocID = docID;\n      saveNextPosBlock = true;\n\n      if (DEBUG) {\n        System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      }\n      writeBlock(docDeltaLBuffer, docOut);\n      if (fieldHasFreqs) {\n        if (DEBUG) {\n          System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        }\n        writeBlock(freqLBuffer, docOut);\n      }\n      docBufferUpto = 0;\n    }\n\n    lastPosition = 0;\n    lastEndOffset = 0;\n  }\n\n","bugFix":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.startDoc docID[\"+docBufferUpto+\"]=\" + docID);\n    }\n\n    final int docDelta = docID - lastDocID;\n\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n//    if (DEBUG) {\n//      System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n//    }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      }\n      ForUtil.writeBlock(docDeltaBuffer, encoded, docOut);\n      if (fieldHasFreqs) {\n        if (DEBUG) {\n          System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        }\n        ForUtil.writeBlock(freqBuffer, encoded, docOut);\n      }\n      // NOTE: don't set docBufferUpto back to 0 here;\n      // finishDoc will do so (because it needs to see that\n      // the block was filled so it can save skip data)\n    }\n\n    lastDocID = docID;\n    lastPosition = 0;\n    lastStartOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.startDoc docID=\" + docID);\n    }\n\n    // nocommit do this in finishDoc... but does it fail...?\n    // is it not always called...?\n    if (posOut != null && saveNextPosBlock) {\n      lastBlockPosFP = posOut.getFilePointer();\n      if (payOut != null) {\n        lastBlockPayFP = payOut.getFilePointer();\n      }\n      lastBlockPosBufferUpto = posBufferUpto;\n      lastBlockStartOffset = lastStartOffset;\n      lastBlockPayloadByteUpto = payloadByteUpto;\n      saveNextPosBlock = false;\n      if (DEBUG) {\n        System.out.println(\"  now save lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" + lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      }\n    }\n\n    final int docDelta = docID - lastDocID;\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n    lastDocID = docID;\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n    if (DEBUG) {\n      System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n    }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == blockSize) {\n      // nocommit maybe instead of buffering skip before\n      // writing a block based on last block's end data\n      // ... we could buffer after writing the block?  only\n      // iffiness with that approach is it could be a\n      // pointlness skip?  like we may stop adding docs\n      // right after that, then we have skip point AFTER\n      // last doc.  the thing is, in finishTerm we are\n      // already sometimes adding a skip point AFTER the\n      // last doc?\n      if (lastBlockDocID != -1) {\n        if (DEBUG) {\n          System.out.println(\"  bufferSkip at writeBlock: lastDocID=\" + lastBlockDocID + \" docCount=\" + (docCount-blockSize));\n        }\n        skipWriter.bufferSkip(lastBlockDocID, docCount-blockSize, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockStartOffset, lastBlockPayloadByteUpto);\n      }\n      lastBlockDocID = docID;\n      saveNextPosBlock = true;\n\n      if (DEBUG) {\n        System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      }\n      writeBlock(docDeltaLBuffer, docOut);\n      if (fieldHasFreqs) {\n        if (DEBUG) {\n          System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        }\n        writeBlock(freqLBuffer, docOut);\n      }\n      docBufferUpto = 0;\n    }\n\n    lastPosition = 0;\n    lastStartOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.startDoc docID[\"+docBufferUpto+\"]=\" + docID);\n    }\n\n    final int docDelta = docID - lastDocID;\n\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n//    if (DEBUG) {\n//      System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n//    }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      }\n      forUtil.writeBlock(docDeltaBuffer, encoded, docOut);\n      if (fieldHasFreqs) {\n        if (DEBUG) {\n          System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        }\n        forUtil.writeBlock(freqBuffer, encoded, docOut);\n      }\n      // NOTE: don't set docBufferUpto back to 0 here;\n      // finishDoc will do so (because it needs to see that\n      // the block was filled so it can save skip data)\n    }\n\n    lastDocID = docID;\n    lastPosition = 0;\n    lastStartOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.startDoc docID[\"+docBufferUpto+\"]=\" + docID);\n    }\n\n    final int docDelta = docID - lastDocID;\n\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n//    if (DEBUG) {\n//      System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n//    }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      }\n      ForUtil.writeBlock(docDeltaBuffer, encoded, docOut);\n      if (fieldHasFreqs) {\n        if (DEBUG) {\n          System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        }\n        ForUtil.writeBlock(freqBuffer, encoded, docOut);\n      }\n      // NOTE: don't set docBufferUpto back to 0 here;\n      // finishDoc will do so (because it needs to see that\n      // the block was filled so it can save skip data)\n    }\n\n    lastDocID = docID;\n    lastPosition = 0;\n    lastStartOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#startDoc(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.startDoc docID[\"+docBufferUpto+\"]=\" + docID);\n    }\n\n    final int docDelta = docID - lastDocID;\n\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n//    if (DEBUG) {\n//      System.out.println(\"  docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDelta);\n//    }\n    if (fieldHasFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write docDelta block @ fp=\" + docOut.getFilePointer());\n      }\n      forUtil.writeBlock(docDeltaBuffer, encoded, docOut);\n      if (fieldHasFreqs) {\n        if (DEBUG) {\n          System.out.println(\"  write freq block @ fp=\" + docOut.getFilePointer());\n        }\n        forUtil.writeBlock(freqBuffer, encoded, docOut);\n      }\n      // NOTE: don't set docBufferUpto back to 0 here;\n      // finishDoc will do so (because it needs to see that\n      // the block was filled so it can save skip data)\n    }\n\n    lastDocID = docID;\n    lastPosition = 0;\n    lastStartOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}