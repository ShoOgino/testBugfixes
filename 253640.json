{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","commits":[{"id":"f77293016c8f08da83022ca616e1aafaf36a9d48","date":1454530692,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","pathOld":"/dev/null","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd1f5a977dc3b97799ed300423294e2c457774f","date":1454537003,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","pathOld":"/dev/null","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","pathOld":"/dev/null","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e72e3ade782716457071fee4033f18689acc4c4f","date":1496770651,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName() + \" but no exception was thrown\");\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName() + \" but no exception was thrown\");\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName() + \" but no exception was thrown\");\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName() + \" but no exception was thrown\");\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName());\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125c4452515b4638410e4f89ef7637bc3d784fc8","date":1532392624,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    return expectThrows(expectedType, \"Expected exception \"+ expectedType.getSimpleName() + \" but no exception was thrown\", runnable);\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(\"Expected exception \" + expectedType.getSimpleName() + \" but no exception was thrown\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f77293016c8f08da83022ca616e1aafaf36a9d48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd1f5a977dc3b97799ed300423294e2c457774f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f77293016c8f08da83022ca616e1aafaf36a9d48"],"e72e3ade782716457071fee4033f18689acc4c4f":["f77293016c8f08da83022ca616e1aafaf36a9d48"],"125c4452515b4638410e4f89ef7637bc3d784fc8":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f77293016c8f08da83022ca616e1aafaf36a9d48"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["f77293016c8f08da83022ca616e1aafaf36a9d48","e72e3ade782716457071fee4033f18689acc4c4f"],"28288370235ed02234a64753cdbf0c6ec096304a":["f77293016c8f08da83022ca616e1aafaf36a9d48","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["f77293016c8f08da83022ca616e1aafaf36a9d48","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["125c4452515b4638410e4f89ef7637bc3d784fc8"]},"commit2Childs":{"f77293016c8f08da83022ca616e1aafaf36a9d48":["acd1f5a977dc3b97799ed300423294e2c457774f","e72e3ade782716457071fee4033f18689acc4c4f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"acd1f5a977dc3b97799ed300423294e2c457774f":[],"e72e3ade782716457071fee4033f18689acc4c4f":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f77293016c8f08da83022ca616e1aafaf36a9d48","acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"125c4452515b4638410e4f89ef7637bc3d784fc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["125c4452515b4638410e4f89ef7637bc3d784fc8"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}