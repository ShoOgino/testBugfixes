{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    if(params.get(DIRECTORY) != null) {\n      configDir = params.get(DIRECTORY);\n    } else {\n      SolrCore core = dataImporter.getCore();\n      configDir = (core == null ? \".\" : core.getResourceLoader().getConfigDir());\n    }\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName())) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","404e4677bc4268982257a220dda11d367778bed3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    if(params.get(DIRECTORY) != null) {\n      configDir = params.get(DIRECTORY);\n    } else {\n      SolrCore core = dataImporter.getCore();\n      configDir = (core == null ? \".\" : core.getResourceLoader().getConfigDir());\n    }\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName())) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","date":1357911503,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName())) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }  \n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    if(params.get(DIRECTORY) != null) {\n      configDir = params.get(DIRECTORY);\n    } else {\n      SolrCore core = dataImporter.getCore();\n      configDir = (core == null ? \".\" : core.getResourceLoader().getConfigDir());\n    }\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName())) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }\n\n","bugFix":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"bugIntro":["404e4677bc4268982257a220dda11d367778bed3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName())) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }  \n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    if(params.get(DIRECTORY) != null) {\n      configDir = params.get(DIRECTORY);\n    } else {\n      SolrCore core = dataImporter.getCore();\n      configDir = (core == null ? \".\" : core.getResourceLoader().getConfigDir());\n    }\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName())) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2208f43a9be2ac423812bb93060ad3f37910b24","date":1395263322,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName(Locale.ROOT))) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }  \n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName())) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }  \n\n","bugFix":null,"bugIntro":["404e4677bc4268982257a220dda11d367778bed3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"404e4677bc4268982257a220dda11d367778bed3","date":1472279922,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      locale = getLocale(params.get(LOCALE));\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName(Locale.ROOT))) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }  \n\n","bugFix":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","b2208f43a9be2ac423812bb93060ad3f37910b24","2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      locale = getLocale(params.get(LOCALE));\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName(Locale.ROOT))) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      locale = getLocale(params.get(LOCALE));\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      String localeStr = params.get(LOCALE);\n      for (Locale l : Locale.getAvailableLocales()) {\n        if(localeStr.equals(l.getDisplayName(Locale.ROOT))) {\n          locale = l;\n          break;\n        }\n      }\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale for PropertWriter: \" + localeStr);\n      }\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    if(params.get(FILENAME) != null) {\n      filename = params.get(FILENAME);\n    } else if(dataImporter.getHandlerName()!=null) {\n      filename = dataImporter.getHandlerName() +  \".properties\";\n    } else {\n      filename = \"dataimport.properties\";\n    }\n    findDirectory(dataImporter, params);\n    if(params.get(LOCALE) != null) {\n      locale = getLocale(params.get(LOCALE));\n    } else {\n      locale = Locale.ROOT;\n    }    \n    if(params.get(DATE_FORMAT) != null) {\n      dateFormat = new SimpleDateFormat(params.get(DATE_FORMAT), locale);\n    } else {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", locale);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"b2208f43a9be2ac423812bb93060ad3f37910b24":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b2208f43a9be2ac423812bb93060ad3f37910b24","404e4677bc4268982257a220dda11d367778bed3"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b2208f43a9be2ac423812bb93060ad3f37910b24","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"404e4677bc4268982257a220dda11d367778bed3":["b2208f43a9be2ac423812bb93060ad3f37910b24"]},"commit2Childs":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","407687e67faf6e1f02a211ca078d8e3eed631027"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2":["b2208f43a9be2ac423812bb93060ad3f37910b24","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b2208f43a9be2ac423812bb93060ad3f37910b24":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","404e4677bc4268982257a220dda11d367778bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"404e4677bc4268982257a220dda11d367778bed3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}