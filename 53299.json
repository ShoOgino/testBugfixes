{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testExplicitQueryDomain().mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testExplicitQueryDomain().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExplicitQueryDomain() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    { // simple 'query' domain\n      \n      // the facet buckets for all of the requests below should be identical\n      // only the numFound & top level facet count should differ\n      final String expectedFacets\n        = \"facets/w=={ buckets:[\"\n        + \"  { val:'NJ', count:2}, \"\n        + \"  { val:'NY', count:1} ] }\";\n      \n      assertJQ(req(\"rows\", \"0\", \"q\", \"cat_s:B\", \"json.facet\",\n                   \"{w: {type:terms, field:'where_s'}}\"),\n               \"response/numFound==3\",\n               \"facets/count==3\",\n               expectedFacets);\n      assertJQ(req(\"rows\", \"0\", \"q\", \"id:3\", \"json.facet\",\n                   \"{w: {type:terms, field:'where_s', domain: { query:'cat_s:B' }}}\"),\n               \"response/numFound==1\",\n               \"facets/count==1\",\n               expectedFacets);\n      assertJQ(req(\"rows\", \"0\", \"q\", \"*:*\", \"fq\", \"-*:*\", \"json.facet\",\n                   \"{w: {type:terms, field:'where_s', domain: { query:'cat_s:B' }}}\"),\n               \"response/numFound==0\",\n               \"facets/count==0\",\n               expectedFacets);\n      assertJQ(req(\"rows\", \"0\", \"q\", \"*:*\", \"fq\", \"-*:*\", \"domain_q\", \"cat_s:B\", \"json.facet\",\n                   \"{w: {type:terms, field:'where_s', domain: { query:{param:domain_q} }}}\"),\n               \"response/numFound==0\",\n               \"facets/count==0\",\n               expectedFacets);\n    }\n    \n    { // a nested explicit query domain\n\n      // for all of the \"top\" buckets, the subfacet should have identical sub-buckets\n      final String expectedSubBuckets = \"{ buckets:[ { val:'B', count:3}, { val:'A', count:2} ] }\";\n      assertJQ(req(\"rows\", \"0\", \"q\", \"num_i:[0 TO *]\", \"json.facet\",\n                   \"{w: {type:terms, field:'where_s', \" + \n                   \"     facet: { c: { type:terms, field:'cat_s', domain: { query:'*:*' }}}}}\")\n               , \"facets/w=={ buckets:[\"\n               + \"  { val:'NJ', count:2, c: \" + expectedSubBuckets + \"}, \"\n               + \"  { val:'NY', count:1, c: \" + expectedSubBuckets + \"} \"\n               + \"] }\"\n               );\n    }\n\n    { // an (effectively) empty query should produce an error\n      ignoreException(\"'query' domain can not be null\");\n      ignoreException(\"'query' domain must not evaluate to an empty list\");\n      for (String raw : Arrays.asList(\"null\", \"[ ]\", \"{param:bogus}\")) {\n        expectThrows(SolrException.class, () -> {\n            assertJQ(req(\"rows\", \"0\", \"q\", \"num_i:[0 TO *]\", \"json.facet\",\n                         \"{w: {type:terms, field:'where_s', \" + \n                         \"     facet: { c: { type:terms, field:'cat_s', domain: { query: \"+raw+\" }}}}}\"));\n          });\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c705a0d590cf911e7c942df49563ca2ea176e22"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}