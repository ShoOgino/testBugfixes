{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","commits":[{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert FutureArrays.compareUnsigned(minPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim, maxPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, minPackedValue, dim*bytesPerDim, maxPackedValue, dim*bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numIndexDims;dim++) {\n        assert FutureArrays.compareUnsigned(minPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim, maxPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numIndexDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numIndexDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numDims;dim++) {\n        assert FutureArrays.compareUnsigned(minPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim, maxPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numIndexDims;dim++) {\n        assert Arrays.compareUnsigned(minPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim, maxPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numIndexDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numIndexDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for(int dim=0;dim<numIndexDims;dim++) {\n        assert FutureArrays.compareUnsigned(minPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim, maxPackedValue, dim * bytesPerDim, dim * bytesPerDim + bytesPerDim) <= 0;\n      }\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, numIndexDims*bytesPerDim);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, numIndexDims*bytesPerDim);\n      lastCompareResult = in.compare(minPackedValue, maxPackedValue);\n      return lastCompareResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["41f60ea1802fda42d3c91d023406066d00ddb5f8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}