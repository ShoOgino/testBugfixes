{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","commits":[{"id":"0caf86b778fe22b63626ba65f24f7b69c5c5b384","date":1432213473,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    SolrCache cache = (SolrCache) h.getCore().getInfoRegistry().get(\"perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, ((SolrIndexSearcher) h.getCore().getInfoRegistry().get(\"searcher\")).getRawReader().leaves().size());\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n    boolean newSeg =\n      (((SolrIndexSearcher)h.getCore().getInfoRegistry().get(\"searcher\")).getRawReader().leaves().size() > 1);\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // when there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    assertEquals(newSeg ? \"2\" : \"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a09020294b3264917b0ca278ed2da9aef28488fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a09020294b3264917b0ca278ed2da9aef28488fb","date":1432698957,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","sourceNew":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    SolrCache cache = (SolrCache) h.getCore().getInfoRegistry().get(\"perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates wether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    SolrCache cache = (SolrCache) h.getCore().getInfoRegistry().get(\"perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, ((SolrIndexSearcher) h.getCore().getInfoRegistry().get(\"searcher\")).getRawReader().leaves().size());\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n    boolean newSeg =\n      (((SolrIndexSearcher)h.getCore().getInfoRegistry().get(\"searcher\")).getRawReader().leaves().size() > 1);\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // when there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    assertEquals(newSeg ? \"2\" : \"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":["0caf86b778fe22b63626ba65f24f7b69c5c5b384"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","sourceNew":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates wether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    SolrCache cache = (SolrCache) h.getCore().getInfoRegistry().get(\"perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates wether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","sourceNew":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates wether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    SolrCache cache = (SolrCache) h.getCore().getInfoRegistry().get(\"perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates wether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cache.getStatistics().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"255b1d03d3daae9aaaade60819388695622237d8","date":1506179019,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","sourceNew":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    testRptWithGeometryField(\"srptgeom\");//note: fails with \"srpt_geohash\" because it's not as precise\n  }\n\n","sourceOld":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates wether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8557552f7ab8e381c4d1a941a269e14f11e779d","date":1506320429,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","sourceNew":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    testRptWithGeometryField(\"srptgeom\");//note: fails with \"srpt_geohash\" because it's not as precise\n  }\n\n","sourceOld":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates wether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","sourceNew":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    testRptWithGeometryField(\"srptgeom\");//note: fails with \"srpt_geohash\" because it's not as precise\n  }\n\n","sourceOld":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    String fieldName = \"srptgeom\"; //note: fails with \"srpt_geohash\" because it's not as precise\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_srptgeom\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates wether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2ab9c07b4811bae96e992c901398ae4d50bc9e","date":1557972913,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField().mjava","sourceNew":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    //note: fails with \"srpt_geohash\" because it's not as precise\n    final boolean testCache = true;\n    final boolean testHeatmap = true;\n    final boolean testPolygon = false; // default spatialContext doesn't handle this\n    testRptWithGeometryField(\"srptgeom\", testCache, testHeatmap, testPolygon);\n  }\n\n","sourceOld":"  @Test\n  public void testRptWithGeometryField() throws Exception {\n    testRptWithGeometryField(\"srptgeom\");//note: fails with \"srpt_geohash\" because it's not as precise\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"255b1d03d3daae9aaaade60819388695622237d8":["816521ebaad5add9cb96bb88c577394e2938c40b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a09020294b3264917b0ca278ed2da9aef28488fb"],"7a2ab9c07b4811bae96e992c901398ae4d50bc9e":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["816521ebaad5add9cb96bb88c577394e2938c40b","255b1d03d3daae9aaaade60819388695622237d8"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","b8557552f7ab8e381c4d1a941a269e14f11e779d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a09020294b3264917b0ca278ed2da9aef28488fb":["0caf86b778fe22b63626ba65f24f7b69c5c5b384"],"0caf86b778fe22b63626ba65f24f7b69c5c5b384":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a09020294b3264917b0ca278ed2da9aef28488fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a2ab9c07b4811bae96e992c901398ae4d50bc9e"]},"commit2Childs":{"255b1d03d3daae9aaaade60819388695622237d8":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"7a2ab9c07b4811bae96e992c901398ae4d50bc9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["7a2ab9c07b4811bae96e992c901398ae4d50bc9e","6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0caf86b778fe22b63626ba65f24f7b69c5c5b384"],"a09020294b3264917b0ca278ed2da9aef28488fb":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"0caf86b778fe22b63626ba65f24f7b69c5c5b384":["a09020294b3264917b0ca278ed2da9aef28488fb"],"816521ebaad5add9cb96bb88c577394e2938c40b":["255b1d03d3daae9aaaade60819388695622237d8","b8557552f7ab8e381c4d1a941a269e14f11e779d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}