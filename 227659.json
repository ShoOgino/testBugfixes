{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  // nocommit public?\n  private static BitSet getLiveStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = new BitSet(numStates);\n    for(int state : a.getAcceptStates()) {\n      liveSet.set(state);\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<Integer> map[] = new Set[numStates];\n    for (int i = 0; i < numStates; i++) {\n      map[i] = new HashSet<>();\n    }\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        map[t.dest].add(s);\n      }\n    }\n    LinkedList<Integer> worklist = new LinkedList<>(a.getAcceptStates());\n    while (worklist.isEmpty() == false) {\n      int s = worklist.removeFirst();\n      for (int p : map[s]) {\n        if (liveSet.get(p) == false) {\n          liveSet.set(p);\n          worklist.add(p);\n        }\n      }\n    }\n\n    return liveSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  // nocommit public?\n  private static BitSet getLiveStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = new BitSet(numStates);\n    for(int state : a.getAcceptStates()) {\n      liveSet.set(state);\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<Integer> map[] = new Set[numStates];\n    for (int i = 0; i < numStates; i++) {\n      map[i] = new HashSet<>();\n    }\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        map[t.dest].add(s);\n      }\n    }\n    LinkedList<Integer> worklist = new LinkedList<>(a.getAcceptStates());\n    while (worklist.isEmpty() == false) {\n      int s = worklist.removeFirst();\n      for (int p : map[s]) {\n        if (liveSet.get(p) == false) {\n          liveSet.set(p);\n          worklist.add(p);\n        }\n      }\n    }\n\n    return liveSet;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  // nocommit public?\n  private static BitSet getLiveStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = new BitSet(numStates);\n    for(int state : a.getAcceptStates()) {\n      liveSet.set(state);\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<Integer> map[] = new Set[numStates];\n    for (int i = 0; i < numStates; i++) {\n      map[i] = new HashSet<>();\n    }\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        map[t.dest].add(s);\n      }\n    }\n    LinkedList<Integer> worklist = new LinkedList<>(a.getAcceptStates());\n    while (worklist.isEmpty() == false) {\n      int s = worklist.removeFirst();\n      for (int p : map[s]) {\n        if (liveSet.get(p) == false) {\n          liveSet.set(p);\n          worklist.add(p);\n        }\n      }\n    }\n\n    return liveSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it and if it is reachable from the initial state.\n   */\n  private static BitSet getLiveStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet reachableFromInitial = getLiveStatesFromInitial(a);\n    BitSet reachableFromAccept = getLiveStatesFromInitial(SpecialOperations.reverse(a));\n    for(int acceptState : a.getAcceptStates()) {\n      reachableFromAccept.set(1+acceptState);\n    }\n\n    for(int i=0;i<numStates;i++) {\n      if (reachableFromAccept.get(i+1) == false) {      \n        reachableFromInitial.clear(i);\n      }\n    }\n    return reachableFromInitial;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  // nocommit public?\n  private static BitSet getLiveStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = new BitSet(numStates);\n    for(int state : a.getAcceptStates()) {\n      liveSet.set(state);\n    }\n    // map<state, set<state>>\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<Integer> map[] = new Set[numStates];\n    for (int i = 0; i < numStates; i++) {\n      map[i] = new HashSet<>();\n    }\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        map[t.dest].add(s);\n      }\n    }\n    LinkedList<Integer> worklist = new LinkedList<>(a.getAcceptStates());\n    while (worklist.isEmpty() == false) {\n      int s = worklist.removeFirst();\n      for (int p : map[s]) {\n        if (liveSet.get(p) == false) {\n          liveSet.set(p);\n          worklist.add(p);\n        }\n      }\n    }\n\n    return liveSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it and if it is reachable from the initial state.\n   */\n  private static BitSet getLiveStates(LightAutomaton a) {\n    BitSet live = getLiveStatesFromInitial(a);\n    live.and(getLiveStatesToAccept(a));\n    return live;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it and if it is reachable from the initial state.\n   */\n  private static BitSet getLiveStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet reachableFromInitial = getLiveStatesFromInitial(a);\n    BitSet reachableFromAccept = getLiveStatesFromInitial(SpecialOperations.reverse(a));\n    for(int acceptState : a.getAcceptStates()) {\n      reachableFromAccept.set(1+acceptState);\n    }\n\n    for(int i=0;i<numStates;i++) {\n      if (reachableFromAccept.get(i+1) == false) {      \n        reachableFromInitial.clear(i);\n      }\n    }\n    return reachableFromInitial;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStates(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStates(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it and if it is reachable from the initial state.\n   */\n  private static BitSet getLiveStates(Automaton a) {\n    BitSet live = getLiveStatesFromInitial(a);\n    live.and(getLiveStatesToAccept(a));\n    return live;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it and if it is reachable from the initial state.\n   */\n  private static BitSet getLiveStates(LightAutomaton a) {\n    BitSet live = getLiveStatesFromInitial(a);\n    live.and(getLiveStatesToAccept(a));\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}