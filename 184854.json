{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","commits":[{"id":"083989a09fa84d64a9c05af07775ff9cec83c4bd","date":1366649056,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getContentType()).andReturn( \"application/x-www-form-urlencoded\" ).anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<String,String>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<String>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<String>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","sourceNew":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getContentType()).andReturn( \"application/x-www-form-urlencoded\" ).anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","sourceOld":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getContentType()).andReturn( \"application/x-www-form-urlencoded\" ).anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<String,String>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<String>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<String>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","sourceNew":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getContentType()).andReturn( \"application/x-www-form-urlencoded\" ).anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","sourceOld":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getContentType()).andReturn( \"application/x-www-form-urlencoded\" ).anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","sourceNew":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = getMock(\"/solr/select\", null, -1);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","sourceOld":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getContentType()).andReturn( \"application/x-www-form-urlencoded\" ).anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","sourceNew":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = getMock(\"/solr/select\", null, -1);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","sourceOld":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getContentType()).andReturn( \"application/x-www-form-urlencoded\" ).anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testAddHttpRequestToContext().mjava","sourceNew":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = getMock(\"/solr/select\", null, -1);\n    when(request.getMethod()).thenReturn(\"GET\");\n    when(request.getQueryString()).thenReturn(\"q=title:solr\");\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    when(request.getHeaderNames()).thenReturn(new Vector<>(headers.keySet()).elements());\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      when(request.getHeaders(entry.getKey())).thenReturn(v.elements());\n    }\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","sourceOld":"  @Test\n  public void testAddHttpRequestToContext() throws Exception {\n    HttpServletRequest request = getMock(\"/solr/select\", null, -1);\n    expect(request.getMethod()).andReturn(\"GET\").anyTimes();\n    expect(request.getQueryString()).andReturn(\"q=title:solr\").anyTimes();\n    Map<String, String> headers = new HashMap<>();\n    headers.put(\"X-Forwarded-For\", \"10.0.0.1\");\n    expect(request.getHeaderNames()).andReturn(new Vector<>(headers.keySet()).elements()).anyTimes();\n    for(Map.Entry<String,String> entry:headers.entrySet()) {\n      Vector<String> v = new Vector<>();\n      v.add(entry.getValue());\n      expect(request.getHeaders(entry.getKey())).andReturn(v.elements()).anyTimes();\n    }\n    replay(request);\n    \n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    assertFalse(parsers.isAddRequestHeadersToContext());\n    SolrQueryRequest solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertFalse(solrReq.getContext().containsKey(\"httpRequest\"));\n    \n    parsers.setAddRequestHeadersToContext(true);\n    solrReq = parsers.parse(h.getCore(), \"/select\", request);\n    assertEquals(request, solrReq.getContext().get(\"httpRequest\"));\n    assertEquals(\"10.0.0.1\", ((HttpServletRequest)solrReq.getContext().get(\"httpRequest\")).getHeaders(\"X-Forwarded-For\").nextElement());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["083989a09fa84d64a9c05af07775ff9cec83c4bd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0d17ec5164debc23076db7fd11d0331f201583b5"],"083989a09fa84d64a9c05af07775ff9cec83c4bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d17ec5164debc23076db7fd11d0331f201583b5":["da41004e1997059b4d0549fbeb56bf0858d14689"],"da41004e1997059b4d0549fbeb56bf0858d14689":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0d17ec5164debc23076db7fd11d0331f201583b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","da41004e1997059b4d0549fbeb56bf0858d14689"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"083989a09fa84d64a9c05af07775ff9cec83c4bd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["083989a09fa84d64a9c05af07775ff9cec83c4bd"],"da41004e1997059b4d0549fbeb56bf0858d14689":["0d17ec5164debc23076db7fd11d0331f201583b5"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}