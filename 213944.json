{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","commits":[{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(int).mjava","sourceNew":"  void finish(long startNode) throws IOException {\n    if (this.startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    if (startNode == FINAL_END_NODE && emptyOutput != null) {\n      startNode = 0;\n    }\n    this.startNode = startNode;\n    bytes.finish();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  void finish(int startNode) throws IOException {\n    if (startNode == FINAL_END_NODE && emptyOutput != null) {\n      startNode = 0;\n    }\n    if (this.startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    this.startNode = startNode;\n    bytes.finish();\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(int).mjava","sourceNew":"  void finish(long startNode) throws IOException {\n    if (this.startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    if (startNode == FINAL_END_NODE && emptyOutput != null) {\n      startNode = 0;\n    }\n    this.startNode = startNode;\n    bytes.finish();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  void finish(int startNode) throws IOException {\n    if (startNode == FINAL_END_NODE && emptyOutput != null) {\n      startNode = 0;\n    }\n    if (this.startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    byte[] finalBytes = new byte[writer.getPosition()];\n    System.arraycopy(bytes, 0, finalBytes, 0, writer.getPosition());\n    bytes = finalBytes;\n    this.startNode = startNode;\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da4174eb3f59c5154ea70c8ba6afa01232cde36f","date":1380725251,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","sourceNew":"  void finish(long newStartNode) throws IOException {\n    if (startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    if (newStartNode == FINAL_END_NODE && emptyOutput != null) {\n      newStartNode = 0;\n    }\n    startNode = newStartNode;\n    bytes.finish();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  void finish(long startNode) throws IOException {\n    if (this.startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    if (startNode == FINAL_END_NODE && emptyOutput != null) {\n      startNode = 0;\n    }\n    this.startNode = startNode;\n    bytes.finish();\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","sourceNew":"  void finish(long newStartNode) throws IOException {\n    assert newStartNode <= bytes.getPosition();\n    if (startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    if (newStartNode == FINAL_END_NODE && emptyOutput != null) {\n      newStartNode = 0;\n    }\n    startNode = newStartNode;\n    bytes.finish();\n    cacheRootArcs();\n  }\n\n","sourceOld":"  void finish(long newStartNode) throws IOException {\n    if (startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    if (newStartNode == FINAL_END_NODE && emptyOutput != null) {\n      newStartNode = 0;\n    }\n    startNode = newStartNode;\n    bytes.finish();\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfe04a006c42318f41df58bdd061cc1065b5f688","date":1574780842,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#finish(long).mjava","sourceNew":"  void finish(long newStartNode) throws IOException {\n    assert newStartNode <= bytes.getPosition();\n    if (startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    if (newStartNode == FINAL_END_NODE && emptyOutput != null) {\n      newStartNode = 0;\n    }\n    startNode = newStartNode;\n    bytes.finish();\n  }\n\n","sourceOld":"  void finish(long newStartNode) throws IOException {\n    assert newStartNode <= bytes.getPosition();\n    if (startNode != -1) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    if (newStartNode == FINAL_END_NODE && emptyOutput != null) {\n      newStartNode = 0;\n    }\n    startNode = newStartNode;\n    bytes.finish();\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["da4174eb3f59c5154ea70c8ba6afa01232cde36f"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"cfe04a006c42318f41df58bdd061cc1065b5f688":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"da4174eb3f59c5154ea70c8ba6afa01232cde36f":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","da4174eb3f59c5154ea70c8ba6afa01232cde36f"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","8917bfede3b4ca30f4305c1e391e9218959cd723"],"da4174eb3f59c5154ea70c8ba6afa01232cde36f":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"cfe04a006c42318f41df58bdd061cc1065b5f688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}