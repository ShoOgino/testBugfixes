{"path":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","commits":[{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"/dev/null","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    String[] docs = new String[]{};\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    String[] docs = new String[]{};\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    String[] docs = new String[]{};\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c552362c4be415eb1413084d5e7059213daa2d7","date":1250805107,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    String[] docs = new String[]{};\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new PayloadAnalyzer()).setSimilarity(\n        similarity));\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new PayloadAnalyzer()).setSimilarity(\n        similarity));\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(\n        similarity));\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(\n        similarity));\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(\n        similarity));\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(\n        similarity));\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(\n        similarity));\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3c552362c4be415eb1413084d5e7059213daa2d7":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["3c552362c4be415eb1413084d5e7059213daa2d7","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fd5947db4de866f035b932f219674c03562d904e"],"fd5947db4de866f035b932f219674c03562d904e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3c552362c4be415eb1413084d5e7059213daa2d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"3c552362c4be415eb1413084d5e7059213daa2d7":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3c552362c4be415eb1413084d5e7059213daa2d7"],"fd5947db4de866f035b932f219674c03562d904e":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd5947db4de866f035b932f219674c03562d904e"],"87c966e9308847938a7c905c2e46a56d8df788b8":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}