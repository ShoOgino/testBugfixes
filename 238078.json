{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","commits":[{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"/dev/null","sourceNew":"  public static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null) ? null : StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr) ? \"\" : createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  public static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null) ? null : StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr) ? \"\" : createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  public static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null) ? null :\n        StrUtils.splitSmart((OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY.equals(createNodeSetStr) ?\n            \"\" : createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE,\n          OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  public static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null) ? null : StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr) ? \"\" : createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":null,"sourceOld":"  public static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null) ? null : StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr) ? \"\" : createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["969718c368b28ed1b2335ea2deb275c696cddb4f","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["969718c368b28ed1b2335ea2deb275c696cddb4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["969718c368b28ed1b2335ea2deb275c696cddb4f","0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}