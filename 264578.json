{"path":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SlowSynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SlowSynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SlowSynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory(loader, tf);\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SlowSynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SlowSynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory(loader, tf);\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SlowSynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}