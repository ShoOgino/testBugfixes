{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","commits":[{"id":"ad55dd51ee5593c207639943b98a58782872b232","date":1520180625,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          if (broken(ctor, args)) {\n            continue;\n          }\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          if (broken(ctor, args)) {\n            continue;\n          }\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd","date":1526034899,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean()) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              descr.append(\"ConditionalTokenFilter: \");\n              TokenStream ts = createComponent(ctor, args, descr);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          if (broken(ctor, args)) {\n            continue;\n          }\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57e34488c685935a055be1bc57b850be1e8c850d","date":1526645499,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean() && avoidConditionals.contains(ctor.getDeclaringClass()) == false) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              descr.append(\"ConditionalTokenFilter: \");\n              TokenStream ts = createComponent(ctor, args, descr);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean()) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              descr.append(\"ConditionalTokenFilter: \");\n              TokenStream ts = createComponent(ctor, args, descr);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","date":1529312258,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean() && avoidConditionals.contains(ctor.getDeclaringClass()) == false) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              TokenStream ts = createComponent(ctor, args, descr, true);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr, false);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean() && avoidConditionals.contains(ctor.getDeclaringClass()) == false) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              descr.append(\"ConditionalTokenFilter: \");\n              TokenStream ts = createComponent(ctor, args, descr);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean() && avoidConditionals.contains(ctor.getDeclaringClass()) == false) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              TokenStream ts = createComponent(ctor, args, descr, true);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr, false);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean() && avoidConditionals.contains(ctor.getDeclaringClass()) == false) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              descr.append(\"ConditionalTokenFilter: \");\n              TokenStream ts = createComponent(ctor, args, descr);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean() && avoidConditionals.contains(ctor.getDeclaringClass()) == false) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              TokenStream ts = createComponent(ctor, args, descr, true);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr, false);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          if (random.nextBoolean() && avoidConditionals.contains(ctor.getDeclaringClass()) == false) {\n            long seed = random.nextLong();\n            spec.stream = new ConditionalTokenFilter(spec.stream, in -> {\n              final Object args[] = newFilterArgs(random, in, ctor.getParameterTypes());\n              if (broken(ctor, args)) {\n                return in;\n              }\n              descr.append(\"ConditionalTokenFilter: \");\n              TokenStream ts = createComponent(ctor, args, descr);\n              if (ts == null) {\n                return in;\n              }\n              return ts;\n            }) {\n              Random random = new Random(seed);\n\n              @Override\n              public void reset() throws IOException {\n                super.reset();\n                random = new Random(seed);\n              }\n\n              @Override\n              protected boolean shouldFilter() throws IOException {\n                return random.nextBoolean();\n              }\n            };\n            break;\n          }\n          else {\n            final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n            if (broken(ctor, args)) {\n              continue;\n            }\n            final TokenFilter flt = createComponent(ctor, args, descr);\n            if (flt != null) {\n              spec.stream = flt;\n              break;\n            }\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad55dd51ee5593c207639943b98a58782872b232":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["57e34488c685935a055be1bc57b850be1e8c850d","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["57e34488c685935a055be1bc57b850be1e8c850d"],"57e34488c685935a055be1bc57b850be1e8c850d":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["ad55dd51ee5593c207639943b98a58782872b232"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["57e34488c685935a055be1bc57b850be1e8c850d","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"]},"commit2Childs":{"ad55dd51ee5593c207639943b98a58782872b232":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad55dd51ee5593c207639943b98a58782872b232"],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"57e34488c685935a055be1bc57b850be1e8c850d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["57e34488c685935a055be1bc57b850be1e8c850d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}