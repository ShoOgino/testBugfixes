{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#intersectsTriangle(int,int,int,int,int,int).mjava","commits":[{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#intersectsTriangle(int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Checks if the rectangle intersects the provided triangle\n     **/\n    boolean intersectsTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {\n      // 1. query contains any triangle points\n      if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n        return true;\n      }\n\n      // compute bounding box of triangle\n      int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n      int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n      int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n      int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n      // 2. check bounding boxes are disjoint\n      if (this.crossesDateline() == true) {\n        if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n            && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n          return false;\n        }\n      } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n        return false;\n      }\n\n      // 3. check triangle contains any query points\n      if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n        return true;\n      } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n        return true;\n      } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n        return true;\n      } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n        return true;\n      }\n\n      // 4. last ditch effort: check crossings\n      if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#intersectsTriangle(int,int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#intersectsTriangle(int,int,int,int,int,int).mjava","sourceNew":"    /**\n     * Checks if the rectangle intersects the provided triangle\n     **/\n    boolean intersectsTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {\n      // query contains any triangle points\n      if (contains(aX, aY) || contains(bX, bY) || contains(cX, cY)) {\n        return true;\n      }\n      // check bounding box of triangle\n      int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n      int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n      // check bounding boxes are disjoint\n      if (tMaxY < minY || tMinY > maxY) {\n        return false;\n      }\n      int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n      int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n      if (crossesDateline) { // crosses dateline\n        if (tMinX > maxX && tMaxX < minX) {\n          return false;\n        }\n      } else {\n        if (tMinX > maxX || tMaxX < minX) {\n          return false;\n        }\n      }\n      // expensive part\n      return Component2D.pointInTriangle(tMinX, tMaxX, tMinY, tMaxY, minX, minY, aX, aY, bX, bY, cX, cY) ||\n             edgeIntersectsQuery(aX, aY, bX, bY) ||\n             edgeIntersectsQuery(bX, bY, cX, cY) ||\n             edgeIntersectsQuery(cX, cY, aX, aY);\n    }\n\n","sourceOld":"    /**\n     * Checks if the rectangle intersects the provided triangle\n     **/\n    boolean intersectsTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {\n      // 1. query contains any triangle points\n      if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n        return true;\n      }\n\n      // compute bounding box of triangle\n      int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n      int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n      int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n      int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n      // 2. check bounding boxes are disjoint\n      if (this.crossesDateline() == true) {\n        if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n            && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n          return false;\n        }\n      } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n        return false;\n      }\n\n      // 3. check triangle contains any query points\n      if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n        return true;\n      } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n        return true;\n      } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n        return true;\n      } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n        return true;\n      }\n\n      // 4. last ditch effort: check crossings\n      if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["c568a1e2a5125c2245150eebb030a81baa158b31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}