{"path":"backwards/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception\n    {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFile);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception\n    {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFile);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception\n    {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFile);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}