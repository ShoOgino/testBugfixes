{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","date":1459379660,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = this.makeNumericRangeQuery(field_minY, null, bbox.getMinY(), false, true);\n    Query qMaxY = this.makeNumericRangeQuery(field_maxY, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = this.makeNumericRangeQuery(field_minX, null, bbox.getMinX(), false, true);\n      Query qMaxX = this.makeNumericRangeQuery(field_maxX, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = this.makeNumericRangeQuery(field_minX, null, bbox.getMinX(), false, true);\n        Query qXDLRight = this.makeNumericRangeQuery(field_maxX, bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = this.makeNumericRangeQuery(field_minX, null, bbox.getMinX(), false, true);\n      Query qXDLRight = this.makeNumericRangeQuery(field_maxX, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["af2638813028b254a88b418ebeafb541afb49653"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"]},"commit2Childs":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af2638813028b254a88b418ebeafb541afb49653":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}