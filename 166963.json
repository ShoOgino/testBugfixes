{"path":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","commits":[{"id":"0b2ba7b58bce0f80c97a5eb2f11febac26681566","date":1542686312,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","pathOld":"/dev/null","sourceNew":"  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      ArrayList copy = new ArrayList(vals.size());\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e7ba4f223712927a09f4dfb65a4c261d07ccc54","date":1544513757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","sourceNew":"  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      Collection copy =  null;\n      if (vals instanceof Set){\n        copy = new HashSet(vals.size());\n      } else {\n        copy = new ArrayList(vals.size());\n      }\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","sourceOld":"  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      ArrayList copy = new ArrayList(vals.size());\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      Collection copy =  null;\n      if (vals instanceof Set){\n        copy = new HashSet(vals.size());\n      } else {\n        copy = new ArrayList(vals.size());\n      }\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","sourceOld":"  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      Collection copy =  null;\n      if (vals instanceof Set){\n        copy = new HashSet(vals.size());\n      } else {\n        copy = new ArrayList(vals.size());\n      }\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","sourceNew":"  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      Collection copy =  null;\n      if (vals instanceof Set){\n        copy = new HashSet(vals.size());\n      } else {\n        copy = new ArrayList(vals.size());\n      }\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      Collection copy =  null;\n      if (vals instanceof Set){\n        copy = new HashSet(vals.size());\n      } else {\n        copy = new ArrayList(vals.size());\n      }\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ByteArrayUtf8CharSequence#convertCharSeq(Collection).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      Collection copy =  null;\n      if (vals instanceof Set){\n        copy = new HashSet<>(vals.size());\n      } else {\n        copy = new ArrayList<>(vals.size());\n      }\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","sourceOld":"  public static Collection convertCharSeq(Collection vals) {\n    if (vals == null) return vals;\n    boolean needsCopy = false;\n    for (Object o : vals) {\n      if (o instanceof Utf8CharSequence) {\n        needsCopy = true;\n        break;\n      }\n    }\n    if (needsCopy) {\n      Collection copy =  null;\n      if (vals instanceof Set){\n        copy = new HashSet(vals.size());\n      } else {\n        copy = new ArrayList(vals.size());\n      }\n      for (Object o : vals) copy.add(convertCharSeq(o));\n      return copy;\n    }\n    return vals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}