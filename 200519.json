{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getLegacyBinary(FieldInfo).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getLegacyBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private LegacyBinaryDocValues getLegacyBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new LegacyBinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new LegacyBinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getLegacyBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private LegacyBinaryDocValues getLegacyBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new LegacyBinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new LegacyBinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getLegacyBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private LegacyBinaryDocValues getLegacyBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new LegacyBinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new LegacyBinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getLegacyBinary(FieldInfo).mjava","sourceNew":null,"sourceOld":"  private LegacyBinaryDocValues getLegacyBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new LegacyBinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new LegacyBinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24f89e8a6aac05753cde4c83d62a74356098200d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["24f89e8a6aac05753cde4c83d62a74356098200d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}