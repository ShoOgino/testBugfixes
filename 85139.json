{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(IndexReader).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) {\n      final OpenBitSet set = new OpenBitSet();\n      final int limit = docBase+reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        set.set(docId-docBase);\n      }\n      docBase = limit;\n      return set.isEmpty()?null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) {\n      final OpenBitSet set = new OpenBitSet();\n      final int limit = docBase+reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        set.set(docId-docBase);\n      }\n      docBase = limit;\n      return set.isEmpty()?null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(IndexReader).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) {\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = topReader.getSubReaderDocBase(reader);\n      final int limit = docBase+reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) {\n      final OpenBitSet set = new OpenBitSet();\n      final int limit = docBase+reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        set.set(docId-docBase);\n      }\n      docBase = limit;\n      return set.isEmpty()?null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(IndexReader).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(ReaderContext context) {\n      assert context.isAtomic;\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = ((AtomicReaderContext)context).docBase;\n      final int limit = docBase+context.reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) {\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = topReader.getSubReaderDocBase(reader);\n      final int limit = docBase+reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) {\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = topReader.getSubReaderDocBase(reader);\n      final int limit = docBase+reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) {\n      final OpenBitSet set = new OpenBitSet();\n      int docBase = topReader.getSubReaderDocBase(reader);\n      final int limit = docBase+reader.maxDoc();\n      for (;index < docs.length; index++) {\n        final int docId = docs[index];\n        if(docId > limit)\n          break;\n        if (docId >= docBase) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.isEmpty()?null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}