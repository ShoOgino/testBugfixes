{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#waitForNumDocsInAllReplicas(int,Collection[Replica],String,int).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#waitForNumDocsInAllReplicas(int,Collection[Replica],String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNumDocsInAllReplicas(int numDocs, Collection<Replica> replicas, String query, int timeout) throws IOException, SolrServerException, InterruptedException {\n    TimeOut t = new TimeOut(timeout, TimeUnit.SECONDS);\n    for (Replica r:replicas) {\n      if (!r.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        continue;\n      }\n      try (HttpSolrClient replicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after \" + timeout + \" seconds\",\n                numDocs, replicaClient.query(new SolrQuery(query)).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#waitForNumDocsInAllReplicas(int,Collection[Replica],String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNumDocsInAllReplicas(int numDocs, Collection<Replica> replicas, String query, int timeout) throws IOException, SolrServerException, InterruptedException {\n    TimeOut t = new TimeOut(timeout, TimeUnit.SECONDS);\n    for (Replica r:replicas) {\n      if (!r.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        continue;\n      }\n      try (HttpSolrClient replicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after \" + timeout + \" seconds\",\n                numDocs, replicaClient.query(new SolrQuery(query)).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#waitForNumDocsInAllReplicas(int,Collection[Replica],String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#waitForNumDocsInAllReplicas(int,Collection[Replica],String,int).mjava","sourceNew":"  private void waitForNumDocsInAllReplicas(int numDocs, Collection<Replica> replicas, String query, int timeout) throws IOException, SolrServerException, InterruptedException {\n    TimeOut t = new TimeOut(timeout, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    for (Replica r:replicas) {\n      if (!r.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        continue;\n      }\n      try (HttpSolrClient replicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after \" + timeout + \" seconds\",\n                numDocs, replicaClient.query(new SolrQuery(query)).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void waitForNumDocsInAllReplicas(int numDocs, Collection<Replica> replicas, String query, int timeout) throws IOException, SolrServerException, InterruptedException {\n    TimeOut t = new TimeOut(timeout, TimeUnit.SECONDS);\n    for (Replica r:replicas) {\n      if (!r.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        continue;\n      }\n      try (HttpSolrClient replicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after \" + timeout + \" seconds\",\n                numDocs, replicaClient.query(new SolrQuery(query)).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}