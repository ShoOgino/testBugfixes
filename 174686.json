{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","commits":[{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","pathOld":"/dev/null","sourceNew":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddReplicaProp addReplicaPropRequest = new CollectionAdminRequest.AddReplicaProp();\n    addReplicaPropRequest.setCollectionName(DEFAULT_COLLECTION);\n    addReplicaPropRequest.setShardName(SHARD1);\n    addReplicaPropRequest.setReplica(replica.getName());\n    addReplicaPropRequest.setPropertyName(\"preferredleader\");\n    addReplicaPropRequest.setPropertyValue(\"true\");\n    CollectionAdminResponse response = addReplicaPropRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    long timeout = System.currentTimeMillis() + 20000;\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (System.currentTimeMillis() < timeout) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    CollectionAdminRequest.DeleteReplicaProp deleteReplicaPropRequest = new CollectionAdminRequest.DeleteReplicaProp();\n    deleteReplicaPropRequest.setCollectionName(DEFAULT_COLLECTION);\n    deleteReplicaPropRequest.setShardName(SHARD1);\n    deleteReplicaPropRequest.setReplica(replicaName);\n    deleteReplicaPropRequest.setPropertyName(\"property.preferredleader\");\n    response = deleteReplicaPropRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = System.currentTimeMillis() + 20000;\n    boolean updated = false;\n\n    while (System.currentTimeMillis() < timeout) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","sourceNew":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    long timeout = System.currentTimeMillis() + 20000;\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (System.currentTimeMillis() < timeout) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = System.currentTimeMillis() + 20000;\n    boolean updated = false;\n\n    while (System.currentTimeMillis() < timeout) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","sourceOld":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddReplicaProp addReplicaPropRequest = new CollectionAdminRequest.AddReplicaProp();\n    addReplicaPropRequest.setCollectionName(DEFAULT_COLLECTION);\n    addReplicaPropRequest.setShardName(SHARD1);\n    addReplicaPropRequest.setReplica(replica.getName());\n    addReplicaPropRequest.setPropertyName(\"preferredleader\");\n    addReplicaPropRequest.setPropertyValue(\"true\");\n    CollectionAdminResponse response = addReplicaPropRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    long timeout = System.currentTimeMillis() + 20000;\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (System.currentTimeMillis() < timeout) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    CollectionAdminRequest.DeleteReplicaProp deleteReplicaPropRequest = new CollectionAdminRequest.DeleteReplicaProp();\n    deleteReplicaPropRequest.setCollectionName(DEFAULT_COLLECTION);\n    deleteReplicaPropRequest.setShardName(SHARD1);\n    deleteReplicaPropRequest.setReplica(replicaName);\n    deleteReplicaPropRequest.setPropertyName(\"property.preferredleader\");\n    response = deleteReplicaPropRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = System.currentTimeMillis() + 20000;\n    boolean updated = false;\n\n    while (System.currentTimeMillis() < timeout) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","sourceNew":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","sourceOld":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    long timeout = System.currentTimeMillis() + 20000;\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (System.currentTimeMillis() < timeout) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = System.currentTimeMillis() + 20000;\n    boolean updated = false;\n\n    while (System.currentTimeMillis() < timeout) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":5,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","sourceNew":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","sourceOld":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","sourceNew":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","sourceOld":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"922ddd897402a6df25c766ea8300443be5e82b3d":["bcf9886c8ff537aafde14de48ebf744f5673f08b","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["922ddd897402a6df25c766ea8300443be5e82b3d"]},"commit2Childs":{"922ddd897402a6df25c766ea8300443be5e82b3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}