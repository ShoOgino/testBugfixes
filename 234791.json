{"path":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForUtil#compress(int[],int,IntBuffer).mjava","commits":[{"id":"2c16b44289b3660573e653fe771c1528f4e2774f","date":1340208824,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForUtil#compress(int[],int,IntBuffer).mjava","pathOld":"/dev/null","sourceNew":"  public static int compress(final int[] data, int size, IntBuffer intBuffer) {\n    int numBits=getNumBits(data,size);\n  \n    for (int i=0; i<size; ++i) {\n      encodeNormalValue(intBuffer,i,data[i], numBits);\n    }\n    // encode header\n    encodeHeader(intBuffer, size, numBits);\n\n    return (HEADER_INT_SIZE+(size*numBits+31)/32)*4;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5373bc7574123da55ae25e216b6d768ccb1dcd91","date":1342013351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForUtil#compress(int[],int,IntBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForUtil#compress(int[],int,IntBuffer).mjava","sourceNew":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param size        num of ints to compress\n   * @param intBuffer   integer buffer to hold compressed data\n   */\n  public static int compress(final int[] data, int size, IntBuffer intBuffer) {\n    int numBits=getNumBits(data,size);\n  \n    for (int i=0; i<size; ++i) {\n      encodeNormalValue(intBuffer,i,data[i], numBits);\n    }\n    encodeHeader(intBuffer, size, numBits);\n\n    return (HEADER_INT_SIZE+(size*numBits+31)/32)*4;\n  }\n\n","sourceOld":"  public static int compress(final int[] data, int size, IntBuffer intBuffer) {\n    int numBits=getNumBits(data,size);\n  \n    for (int i=0; i<size; ++i) {\n      encodeNormalValue(intBuffer,i,data[i], numBits);\n    }\n    // encode header\n    encodeHeader(intBuffer, size, numBits);\n\n    return (HEADER_INT_SIZE+(size*numBits+31)/32)*4;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForUtil#compress(int[],IntBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForUtil#compress(int[],int,IntBuffer).mjava","sourceNew":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param size        num of ints to compress\n   * @param intBuffer   integer buffer to hold compressed data\n   * @return encoded block byte size\n   */\n  public static int compress(final int[] data, IntBuffer intBuffer) {\n    int numBits=getNumBits(data);\n    if (numBits == 0) {\n      return compressDuplicateBlock(data,intBuffer);\n    }\n \n    int size=data.length;\n    int encodedSize = (size*numBits+31)/32;\n\n    for (int i=0; i<size; ++i) {\n      encodeNormalValue(intBuffer,i,data[i], numBits);\n    }\n\n    return getHeader(encodedSize, numBits);\n  }\n\n","sourceOld":"  /** Compress given int[] into Integer buffer, with For format\n   *\n   * @param data        uncompressed data\n   * @param size        num of ints to compress\n   * @param intBuffer   integer buffer to hold compressed data\n   */\n  public static int compress(final int[] data, int size, IntBuffer intBuffer) {\n    int numBits=getNumBits(data,size);\n  \n    for (int i=0; i<size; ++i) {\n      encodeNormalValue(intBuffer,i,data[i], numBits);\n    }\n    encodeHeader(intBuffer, size, numBits);\n\n    return (HEADER_INT_SIZE+(size*numBits+31)/32)*4;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c16b44289b3660573e653fe771c1528f4e2774f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["2c16b44289b3660573e653fe771c1528f4e2774f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2c16b44289b3660573e653fe771c1528f4e2774f":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c16b44289b3660573e653fe771c1528f4e2774f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}