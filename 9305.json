{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"      @Override\n      public void addPosition(int pos, BytesRef payload, int startOffset, int endOffset) throws IOException {\n        assert payload == null || field.hasPayloads();\n\n        //System.out.println(\"      addPos pos=\" + pos + \" payload=\" + payload);\n\n        final int delta = pos - lastPos;\n        assert delta >= 0;\n        lastPos = pos;\n        \n        int payloadLen = 0;\n        \n        if (field.hasPayloads()) {\n          payloadLen = payload == null ? 0 : payload.length;\n          if (payloadLen != lastPayloadLen) {\n            lastPayloadLen = payloadLen;\n            buffer.writeVInt((delta<<1)|1);\n            buffer.writeVInt(payloadLen);\n          } else {\n            buffer.writeVInt(delta<<1);\n          }\n        } else {\n          buffer.writeVInt(delta);\n        }\n        \n        if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n          // and the numbers aren't that much smaller anyways.\n          int offsetDelta = startOffset - lastOffset;\n          int offsetLength = endOffset - startOffset;\n          if (offsetLength != lastOffsetLength) {\n            buffer.writeVInt(offsetDelta << 1 | 1);\n            buffer.writeVInt(offsetLength);\n          } else {\n            buffer.writeVInt(offsetDelta << 1);\n          }\n          lastOffset = startOffset;\n          lastOffsetLength = offsetLength;\n        }\n        \n        if (payloadLen > 0) {\n          buffer.writeBytes(payload.bytes, payload.offset, payloadLen);\n        }\n      }\n\n","sourceOld":"      @Override\n      public void addPosition(int pos, BytesRef payload, int startOffset, int endOffset) throws IOException {\n        assert payload == null || field.hasPayloads();\n\n        //System.out.println(\"      addPos pos=\" + pos + \" payload=\" + payload);\n\n        final int delta = pos - lastPos;\n        assert delta >= 0;\n        lastPos = pos;\n        \n        int payloadLen = 0;\n        \n        if (field.hasPayloads()) {\n          payloadLen = payload == null ? 0 : payload.length;\n          if (payloadLen != lastPayloadLen) {\n            lastPayloadLen = payloadLen;\n            buffer.writeVInt((delta<<1)|1);\n            buffer.writeVInt(payloadLen);\n          } else {\n            buffer.writeVInt(delta<<1);\n          }\n        } else {\n          buffer.writeVInt(delta);\n        }\n        \n        if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n          // and the numbers aren't that much smaller anyways.\n          int offsetDelta = startOffset - lastOffset;\n          int offsetLength = endOffset - startOffset;\n          if (offsetLength != lastOffsetLength) {\n            buffer.writeVInt(offsetDelta << 1 | 1);\n            buffer.writeVInt(offsetLength);\n          } else {\n            buffer.writeVInt(offsetDelta << 1);\n          }\n          lastOffset = startOffset;\n          lastOffsetLength = offsetLength;\n        }\n        \n        if (payloadLen > 0) {\n          buffer.writeBytes(payload.bytes, payload.offset, payloadLen);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"      public void addPosition(int pos, BytesRef payload, int startOffset, int endOffset) throws IOException {\n        assert payload == null || field.hasPayloads();\n\n        //System.out.println(\"      addPos pos=\" + pos + \" payload=\" + payload);\n\n        final int delta = pos - lastPos;\n        assert delta >= 0;\n        lastPos = pos;\n        \n        int payloadLen = 0;\n        \n        if (field.hasPayloads()) {\n          payloadLen = payload == null ? 0 : payload.length;\n          if (payloadLen != lastPayloadLen) {\n            lastPayloadLen = payloadLen;\n            buffer.writeVInt((delta<<1)|1);\n            buffer.writeVInt(payloadLen);\n          } else {\n            buffer.writeVInt(delta<<1);\n          }\n        } else {\n          buffer.writeVInt(delta);\n        }\n        \n        if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n          // and the numbers aren't that much smaller anyways.\n          int offsetDelta = startOffset - lastOffset;\n          int offsetLength = endOffset - startOffset;\n          if (offsetLength != lastOffsetLength) {\n            buffer.writeVInt(offsetDelta << 1 | 1);\n            buffer.writeVInt(offsetLength);\n          } else {\n            buffer.writeVInt(offsetDelta << 1);\n          }\n          lastOffset = startOffset;\n          lastOffsetLength = offsetLength;\n        }\n        \n        if (payloadLen > 0) {\n          buffer.writeBytes(payload.bytes, payload.offset, payloadLen);\n        }\n      }\n\n","sourceOld":"      @Override\n      public void addPosition(int pos, BytesRef payload, int startOffset, int endOffset) throws IOException {\n        assert payload == null || field.hasPayloads();\n\n        //System.out.println(\"      addPos pos=\" + pos + \" payload=\" + payload);\n\n        final int delta = pos - lastPos;\n        assert delta >= 0;\n        lastPos = pos;\n        \n        int payloadLen = 0;\n        \n        if (field.hasPayloads()) {\n          payloadLen = payload == null ? 0 : payload.length;\n          if (payloadLen != lastPayloadLen) {\n            lastPayloadLen = payloadLen;\n            buffer.writeVInt((delta<<1)|1);\n            buffer.writeVInt(payloadLen);\n          } else {\n            buffer.writeVInt(delta<<1);\n          }\n        } else {\n          buffer.writeVInt(delta);\n        }\n        \n        if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n          // and the numbers aren't that much smaller anyways.\n          int offsetDelta = startOffset - lastOffset;\n          int offsetLength = endOffset - startOffset;\n          if (offsetLength != lastOffsetLength) {\n            buffer.writeVInt(offsetDelta << 1 | 1);\n            buffer.writeVInt(offsetLength);\n          } else {\n            buffer.writeVInt(offsetDelta << 1);\n          }\n          lastOffset = startOffset;\n          lastOffsetLength = offsetLength;\n        }\n        \n        if (payloadLen > 0) {\n          buffer.writeBytes(payload.bytes, payload.offset, payloadLen);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":null,"sourceOld":"      public void addPosition(int pos, BytesRef payload, int startOffset, int endOffset) throws IOException {\n        assert payload == null || field.hasPayloads();\n\n        //System.out.println(\"      addPos pos=\" + pos + \" payload=\" + payload);\n\n        final int delta = pos - lastPos;\n        assert delta >= 0;\n        lastPos = pos;\n        \n        int payloadLen = 0;\n        \n        if (field.hasPayloads()) {\n          payloadLen = payload == null ? 0 : payload.length;\n          if (payloadLen != lastPayloadLen) {\n            lastPayloadLen = payloadLen;\n            buffer.writeVInt((delta<<1)|1);\n            buffer.writeVInt(payloadLen);\n          } else {\n            buffer.writeVInt(delta<<1);\n          }\n        } else {\n          buffer.writeVInt(delta);\n        }\n        \n        if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n          // and the numbers aren't that much smaller anyways.\n          int offsetDelta = startOffset - lastOffset;\n          int offsetLength = endOffset - startOffset;\n          if (offsetLength != lastOffsetLength) {\n            buffer.writeVInt(offsetDelta << 1 | 1);\n            buffer.writeVInt(offsetLength);\n          } else {\n            buffer.writeVInt(offsetDelta << 1);\n          }\n          lastOffset = startOffset;\n          lastOffsetLength = offsetLength;\n        }\n        \n        if (payloadLen > 0) {\n          buffer.writeBytes(payload.bytes, payload.offset, payloadLen);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24f89e8a6aac05753cde4c83d62a74356098200d":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["24f89e8a6aac05753cde4c83d62a74356098200d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}