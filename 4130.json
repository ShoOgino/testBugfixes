{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetFeed().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetFeed().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetFeed().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getFeed(ServerBaseFeed)'\n     */\n    public void testGetFeed() throws StorageException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseFeed feed = new ServerBaseFeed();\n        feed.setItemsPerPage(25);\n        feed.setStartIndex(1);\n        feed.setServiceType(SERVICENAME);\n        try{\n        storage.getFeed(feed);\n        fail(\"feedid is null\");\n        }catch (StorageException e) {\n            // \n        }\n        \n        feed.setId(FEEDID);\n        BaseFeed result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(0, result.getEntries().size());\n        List<String> idlist = new ArrayList<String>(30);\n        ServerBaseEntry e1 = null;\n        for (int i = 0; i < 30; i++) {\n            e1 = createServerBaseEntry();\n            storage.storeEntry(e1);\n            idlist.add(0, e1.getId());\n        }\n        String firstId = e1.getId();\n\n        storage = this.controller.getStorage();\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(25, result.getEntries().size());\n        for (int i = 0; i < 25; i++) {\n            assertEquals(idlist.get(i),\n                    ((BaseEntry) result.getEntries().get(i)).getId());\n        }\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(5);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(5, result.getEntries().size());\n        for (int i = 0; i < 5; i++) {\n            assertEquals(idlist.get(i),\n                    ((BaseEntry) result.getEntries().get(i)).getId());\n        }\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(1);\n        feed.setStartIndex(1);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(1, result.getEntries().size());\n\n        assertEquals(idlist.get(0), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(50);\n        feed.setStartIndex(28);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(3, result.getEntries().size());\n\n        assertEquals(idlist.get(27), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n        assertEquals(idlist.get(28), ((BaseEntry) result.getEntries().get(1))\n                .getId());\n        assertEquals(idlist.get(29), ((BaseEntry) result.getEntries().get(2))\n                .getId());\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(50);\n        feed.setStartIndex(30);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(1, result.getEntries().size());\n\n        assertEquals(idlist.get(29), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n\n        // assertNotSame(firstId,((BaseEntry)result.getEntries().get(0)).getId());\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getFeed(ServerBaseFeed)'\n     */\n    public void testGetFeed() throws StorageException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseFeed feed = new ServerBaseFeed();\n        feed.setItemsPerPage(25);\n        feed.setStartIndex(1);\n        feed.setServiceType(SERVICENAME);\n        try{\n        storage.getFeed(feed);\n        fail(\"feedid is null\");\n        }catch (StorageException e) {\n            // \n        }\n        \n        feed.setId(FEEDID);\n        BaseFeed result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(0, result.getEntries().size());\n        List<String> idlist = new ArrayList<String>(30);\n        ServerBaseEntry e1 = null;\n        for (int i = 0; i < 30; i++) {\n            e1 = createServerBaseEntry();\n            storage.storeEntry(e1);\n            idlist.add(0, e1.getId());\n        }\n        String firstId = e1.getId();\n\n        storage = this.controller.getStorage();\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(25, result.getEntries().size());\n        for (int i = 0; i < 25; i++) {\n            assertEquals(idlist.get(i),\n                    ((BaseEntry) result.getEntries().get(i)).getId());\n        }\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(5);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(5, result.getEntries().size());\n        for (int i = 0; i < 5; i++) {\n            assertEquals(idlist.get(i),\n                    ((BaseEntry) result.getEntries().get(i)).getId());\n        }\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(1);\n        feed.setStartIndex(1);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(1, result.getEntries().size());\n\n        assertEquals(idlist.get(0), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(50);\n        feed.setStartIndex(28);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(3, result.getEntries().size());\n\n        assertEquals(idlist.get(27), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n        assertEquals(idlist.get(28), ((BaseEntry) result.getEntries().get(1))\n                .getId());\n        assertEquals(idlist.get(29), ((BaseEntry) result.getEntries().get(2))\n                .getId());\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(50);\n        feed.setStartIndex(30);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(1, result.getEntries().size());\n\n        assertEquals(idlist.get(29), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n\n        // assertNotSame(firstId,((BaseEntry)result.getEntries().get(0)).getId());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetFeed().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetFeed().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getFeed(ServerBaseFeed)'\n     */\n    public void testGetFeed() throws StorageException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseFeed feed = new ServerBaseFeed();\n        feed.setItemsPerPage(25);\n        feed.setStartIndex(1);\n        feed.setServiceType(SERVICENAME);\n        try{\n        storage.getFeed(feed);\n        fail(\"feedid is null\");\n        }catch (StorageException e) {\n            // \n        }\n        \n        feed.setId(FEEDID);\n        BaseFeed result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(0, result.getEntries().size());\n        List<String> idlist = new ArrayList<String>(30);\n        ServerBaseEntry e1 = null;\n        for (int i = 0; i < 30; i++) {\n            e1 = createServerBaseEntry();\n            storage.storeEntry(e1);\n            idlist.add(0, e1.getId());\n        }\n        String firstId = e1.getId();\n\n        storage = this.controller.getStorage();\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(25, result.getEntries().size());\n        for (int i = 0; i < 25; i++) {\n            assertEquals(idlist.get(i),\n                    ((BaseEntry) result.getEntries().get(i)).getId());\n        }\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(5);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(5, result.getEntries().size());\n        for (int i = 0; i < 5; i++) {\n            assertEquals(idlist.get(i),\n                    ((BaseEntry) result.getEntries().get(i)).getId());\n        }\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(1);\n        feed.setStartIndex(1);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(1, result.getEntries().size());\n\n        assertEquals(idlist.get(0), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(50);\n        feed.setStartIndex(28);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(3, result.getEntries().size());\n\n        assertEquals(idlist.get(27), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n        assertEquals(idlist.get(28), ((BaseEntry) result.getEntries().get(1))\n                .getId());\n        assertEquals(idlist.get(29), ((BaseEntry) result.getEntries().get(2))\n                .getId());\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(50);\n        feed.setStartIndex(30);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(1, result.getEntries().size());\n\n        assertEquals(idlist.get(29), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n\n        // assertNotSame(firstId,((BaseEntry)result.getEntries().get(0)).getId());\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getFeed(ServerBaseFeed)'\n     */\n    public void testGetFeed() throws StorageException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseFeed feed = new ServerBaseFeed();\n        feed.setItemsPerPage(25);\n        feed.setStartIndex(1);\n        feed.setServiceType(SERVICENAME);\n        try{\n        storage.getFeed(feed);\n        fail(\"feedid is null\");\n        }catch (StorageException e) {\n            // \n        }\n        \n        feed.setId(FEEDID);\n        BaseFeed result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(0, result.getEntries().size());\n        List<String> idlist = new ArrayList<String>(30);\n        ServerBaseEntry e1 = null;\n        for (int i = 0; i < 30; i++) {\n            e1 = createServerBaseEntry();\n            storage.storeEntry(e1);\n            idlist.add(0, e1.getId());\n        }\n        String firstId = e1.getId();\n\n        storage = this.controller.getStorage();\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(25, result.getEntries().size());\n        for (int i = 0; i < 25; i++) {\n            assertEquals(idlist.get(i),\n                    ((BaseEntry) result.getEntries().get(i)).getId());\n        }\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(5);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(5, result.getEntries().size());\n        for (int i = 0; i < 5; i++) {\n            assertEquals(idlist.get(i),\n                    ((BaseEntry) result.getEntries().get(i)).getId());\n        }\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(1);\n        feed.setStartIndex(1);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(1, result.getEntries().size());\n\n        assertEquals(idlist.get(0), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(50);\n        feed.setStartIndex(28);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(3, result.getEntries().size());\n\n        assertEquals(idlist.get(27), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n        assertEquals(idlist.get(28), ((BaseEntry) result.getEntries().get(1))\n                .getId());\n        assertEquals(idlist.get(29), ((BaseEntry) result.getEntries().get(2))\n                .getId());\n\n        storage = this.controller.getStorage();\n        feed.setItemsPerPage(50);\n        feed.setStartIndex(30);\n        result = storage.getFeed(feed);\n        assertNotNull(result);\n        assertEquals(1, result.getEntries().size());\n\n        assertEquals(idlist.get(29), ((BaseEntry) result.getEntries().get(0))\n                .getId());\n\n        // assertNotSame(firstId,((BaseEntry)result.getEntries().get(0)).getId());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}