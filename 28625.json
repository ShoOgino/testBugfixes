{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T]_getValueList(NamedList[Object],String,String,String,String,boolean).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T]_getValueList(NamedList[Object],String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected <T> ArrayList<T> getValueList(NamedList<Object> response, String infoName, String facetType, String facetName, String exprName, boolean includeMissing) {\n    NamedList<NamedList<Object>> facetList = \n        (NamedList<NamedList<Object>>)response.findRecursive(AnalyticsResponseHeadings.COMPLETED_OLD_HEADER,\n                                                             infoName,\n                                                             facetType,\n                                                             facetName);\n    \n    ArrayList<T> results = new ArrayList<>();\n    facetList.forEach( (name, expressions) -> {\n      if (!includeMissing && !name.equals(\"(MISSING)\")) {\n        T result = (T)expressions.get(exprName);\n        if (result != null)\n          results.add(result);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T]_getValueList(NamedList[Object],String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected <T> ArrayList<T> getValueList(NamedList<Object> response, String infoName, String facetType, String facetName, String exprName, boolean includeMissing) {\n    NamedList<NamedList<Object>> facetList = \n        (NamedList<NamedList<Object>>)response.findRecursive(AnalyticsResponseHeadings.COMPLETED_OLD_HEADER,\n                                                             infoName,\n                                                             facetType,\n                                                             facetName);\n    \n    ArrayList<T> results = new ArrayList<>();\n    facetList.forEach( (name, expressions) -> {\n      if (!includeMissing && !name.equals(\"(MISSING)\")) {\n        T result = (T)expressions.get(exprName);\n        if (result != null)\n          results.add(result);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T]_getValueList(NamedList[Object],String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected <T> ArrayList<T> getValueList(NamedList<Object> response, String infoName, String facetType, String facetName, String exprName, boolean includeMissing) {\n    NamedList<NamedList<Object>> facetList = \n        (NamedList<NamedList<Object>>)response.findRecursive(AnalyticsResponseHeadings.COMPLETED_OLD_HEADER,\n                                                             infoName,\n                                                             facetType,\n                                                             facetName);\n    \n    ArrayList<T> results = new ArrayList<>();\n    facetList.forEach( (name, expressions) -> {\n      if (!includeMissing && !name.equals(\"(MISSING)\")) {\n        T result = (T)expressions.get(exprName);\n        if (result != null)\n          results.add(result);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetCloudTest#[T]_getValueList(NamedList[Object],String,String,String,String,boolean).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetCloudTest#[T]_getValueList(NamedList[Object],String,String,String,String,boolean).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected <T> ArrayList<T> getValueList(NamedList<Object> response, String infoName, String facetType, String facetName, String exprName, boolean includeMissing) {\n    NamedList<NamedList<Object>> facetList = \n        (NamedList<NamedList<Object>>)response.findRecursive(AnalyticsResponseHeadings.COMPLETED_OLD_HEADER,\n                                                             infoName,\n                                                             facetType,\n                                                             facetName);\n    \n    ArrayList<T> results = new ArrayList<>();\n    facetList.forEach( (name, expressions) -> {\n      if (!includeMissing && !name.equals(\"(MISSING)\")) {\n        T result = (T)expressions.get(exprName);\n        if (result != null)\n          results.add(result);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected <T> ArrayList<T> getValueList(NamedList<Object> response, String infoName, String facetType, String facetName, String exprName, boolean includeMissing) {\n    NamedList<NamedList<Object>> facetList = \n        (NamedList<NamedList<Object>>)response.findRecursive(AnalyticsResponseHeadings.COMPLETED_OLD_HEADER,\n                                                             infoName,\n                                                             facetType,\n                                                             facetName);\n    \n    ArrayList<T> results = new ArrayList<>();\n    facetList.forEach( (name, expressions) -> {\n      if (!includeMissing && !name.equals(\"(MISSING)\")) {\n        T result = (T)expressions.get(exprName);\n        if (result != null)\n          results.add(result);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}