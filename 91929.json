{"path":"solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","sourceNew":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","sourceNew":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory#shouldReverse(String).mjava","sourceNew":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * This method encapsulates the logic that determines whether\n   * a query token should be reversed in order to use the\n   * reversed terms in the index.\n   * @param token input token.\n   * @return true if input token should be reversed, false otherwise.\n   */\n  public boolean shouldReverse(String token) {\n    int posQ = token.indexOf('?');\n    int posA = token.indexOf('*');\n    if (posQ == -1 && posA == -1) { // not a wildcard query\n      return false;\n    }\n    int pos;\n    int lastPos;\n    int len = token.length();\n    lastPos = token.lastIndexOf('?');\n    pos = token.lastIndexOf('*');\n    if (pos > lastPos) lastPos = pos;\n    if (posQ != -1) {\n      pos = posQ;\n      if (posA != -1) {\n        pos = Math.min(posQ, posA);\n      }\n    } else {\n      pos = posA;\n    }\n    if (len - lastPos < minTrailing)  { // too few trailing chars\n      return false;\n    }\n    if (posQ != -1 && posQ < maxPosQuestion) {  // leading '?'\n      return true;\n    }\n    if (posA != -1 && posA < maxPosAsterisk) { // leading '*'\n      return true;\n    }\n    // '*' in the leading part\n    if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}