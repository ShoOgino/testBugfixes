{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}