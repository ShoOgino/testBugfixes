{"path":"solr/core/src/java/org/apache/solr/util/JsonSchemaValidator.SchemaNode#validateSchema(Map,List[String]).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/JsonSchemaValidator.SchemaNode#validateSchema(Map,List[String]).mjava","pathOld":"/dev/null","sourceNew":"    private void validateSchema(Map jsonSchema, List<String> errs) {\n      Object typeStr = jsonSchema.get(\"type\");\n      if (typeStr == null) {\n        errs.add(\"'type' is missing \");\n      }\n      Type type = Type.get(typeStr);\n      if (type == null) {\n        errs.add (\"Unknown type \" + typeStr + \" in object \"+ Utils.toJSONString(jsonSchema));\n        return;\n      }\n      this.type = type;\n\n      for (SchemaAttribute schemaAttribute : SchemaAttribute.values()) {\n        schemaAttribute.validateSchema(jsonSchema, this, errs);\n      }\n      jsonSchema.keySet().forEach(o -> {\n        if (!knownAttributes.containsKey(o)) errs.add(\"Unknown key : \" + o);\n      });\n      if (!errs.isEmpty()) return;\n\n      if (type == Type.OBJECT) {\n        Map m = (Map) jsonSchema.get(\"properties\");\n        if (m != null) {\n          for (Object o : m.entrySet()) {\n            Map.Entry e = (Map.Entry) o;\n            if (e.getValue() instanceof Map) {\n              Map od = (Map) e.getValue();\n              if (children == null) children = new LinkedHashMap<>();\n              SchemaNode child = new SchemaNode(this);\n              children.put((String) e.getKey(), child);\n              child.validateSchema(od, errs);\n            } else {\n              errs.add(\"Invalid Object definition for field \" + e.getKey());\n            }\n          }\n        } else {\n          additionalProperties = Boolean.TRUE;\n        }\n      }\n      for (SchemaAttribute attr : SchemaAttribute.values()) {\n        attr.postValidateSchema(jsonSchema, this, errs);\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/JsonSchemaValidator.SchemaNode#validateSchema(Map,List[String]).mjava","pathOld":"/dev/null","sourceNew":"    private void validateSchema(Map jsonSchema, List<String> errs) {\n      Object typeStr = jsonSchema.get(\"type\");\n      if (typeStr == null) {\n        errs.add(\"'type' is missing \");\n      }\n      Type type = Type.get(typeStr);\n      if (type == null) {\n        errs.add (\"Unknown type \" + typeStr + \" in object \"+ Utils.toJSONString(jsonSchema));\n        return;\n      }\n      this.type = type;\n\n      for (SchemaAttribute schemaAttribute : SchemaAttribute.values()) {\n        schemaAttribute.validateSchema(jsonSchema, this, errs);\n      }\n      jsonSchema.keySet().forEach(o -> {\n        if (!knownAttributes.containsKey(o)) errs.add(\"Unknown key : \" + o);\n      });\n      if (!errs.isEmpty()) return;\n\n      if (type == Type.OBJECT) {\n        Map m = (Map) jsonSchema.get(\"properties\");\n        if (m != null) {\n          for (Object o : m.entrySet()) {\n            Map.Entry e = (Map.Entry) o;\n            if (e.getValue() instanceof Map) {\n              Map od = (Map) e.getValue();\n              if (children == null) children = new LinkedHashMap<>();\n              SchemaNode child = new SchemaNode(this);\n              children.put((String) e.getKey(), child);\n              child.validateSchema(od, errs);\n            } else {\n              errs.add(\"Invalid Object definition for field \" + e.getKey());\n            }\n          }\n        } else {\n          additionalProperties = Boolean.TRUE;\n        }\n      }\n      for (SchemaAttribute attr : SchemaAttribute.values()) {\n        attr.postValidateSchema(jsonSchema, this, errs);\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7434d2a8c9efb18776e173b86f766ecee9d06663","date":1495081490,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/JsonSchemaValidator.SchemaNode#validateSchema(Map,List[String]).mjava","sourceNew":null,"sourceOld":"    private void validateSchema(Map jsonSchema, List<String> errs) {\n      Object typeStr = jsonSchema.get(\"type\");\n      if (typeStr == null) {\n        errs.add(\"'type' is missing \");\n      }\n      Type type = Type.get(typeStr);\n      if (type == null) {\n        errs.add (\"Unknown type \" + typeStr + \" in object \"+ Utils.toJSONString(jsonSchema));\n        return;\n      }\n      this.type = type;\n\n      for (SchemaAttribute schemaAttribute : SchemaAttribute.values()) {\n        schemaAttribute.validateSchema(jsonSchema, this, errs);\n      }\n      jsonSchema.keySet().forEach(o -> {\n        if (!knownAttributes.containsKey(o)) errs.add(\"Unknown key : \" + o);\n      });\n      if (!errs.isEmpty()) return;\n\n      if (type == Type.OBJECT) {\n        Map m = (Map) jsonSchema.get(\"properties\");\n        if (m != null) {\n          for (Object o : m.entrySet()) {\n            Map.Entry e = (Map.Entry) o;\n            if (e.getValue() instanceof Map) {\n              Map od = (Map) e.getValue();\n              if (children == null) children = new LinkedHashMap<>();\n              SchemaNode child = new SchemaNode(this);\n              children.put((String) e.getKey(), child);\n              child.validateSchema(od, errs);\n            } else {\n              errs.add(\"Invalid Object definition for field \" + e.getKey());\n            }\n          }\n        } else {\n          additionalProperties = Boolean.TRUE;\n        }\n      }\n      for (SchemaAttribute attr : SchemaAttribute.values()) {\n        attr.postValidateSchema(jsonSchema, this, errs);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/JsonSchemaValidator.SchemaNode#validateSchema(Map,List[String]).mjava","sourceNew":null,"sourceOld":"    private void validateSchema(Map jsonSchema, List<String> errs) {\n      Object typeStr = jsonSchema.get(\"type\");\n      if (typeStr == null) {\n        errs.add(\"'type' is missing \");\n      }\n      Type type = Type.get(typeStr);\n      if (type == null) {\n        errs.add (\"Unknown type \" + typeStr + \" in object \"+ Utils.toJSONString(jsonSchema));\n        return;\n      }\n      this.type = type;\n\n      for (SchemaAttribute schemaAttribute : SchemaAttribute.values()) {\n        schemaAttribute.validateSchema(jsonSchema, this, errs);\n      }\n      jsonSchema.keySet().forEach(o -> {\n        if (!knownAttributes.containsKey(o)) errs.add(\"Unknown key : \" + o);\n      });\n      if (!errs.isEmpty()) return;\n\n      if (type == Type.OBJECT) {\n        Map m = (Map) jsonSchema.get(\"properties\");\n        if (m != null) {\n          for (Object o : m.entrySet()) {\n            Map.Entry e = (Map.Entry) o;\n            if (e.getValue() instanceof Map) {\n              Map od = (Map) e.getValue();\n              if (children == null) children = new LinkedHashMap<>();\n              SchemaNode child = new SchemaNode(this);\n              children.put((String) e.getKey(), child);\n              child.validateSchema(od, errs);\n            } else {\n              errs.add(\"Invalid Object definition for field \" + e.getKey());\n            }\n          }\n        } else {\n          additionalProperties = Boolean.TRUE;\n        }\n      }\n      for (SchemaAttribute attr : SchemaAttribute.values()) {\n        attr.postValidateSchema(jsonSchema, this, errs);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7434d2a8c9efb18776e173b86f766ecee9d06663":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7434d2a8c9efb18776e173b86f766ecee9d06663"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7434d2a8c9efb18776e173b86f766ecee9d06663"]},"commit2Childs":{"7434d2a8c9efb18776e173b86f766ecee9d06663":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7434d2a8c9efb18776e173b86f766ecee9d06663","e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}