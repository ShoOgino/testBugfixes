{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","commits":[{"id":"9a9be5565efd659f2400b5f4db5144a4ffa1da3d","date":1429792192,"type":0,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n    boolean cont = true;\n    int cnt = 0;\n    \n    while (cont) {\n      if (verbose) System.out.println(\"-\");\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (!clusterState.hasCollection(collection)) break;\n      if (cnt == timeoutSeconds) {\n        if (verbose) System.out.println(\"Gave up waiting for \"+collection+\" to disappear..\");\n        if (failOnTimeout) {\n          Diagnostics.logThreadDumps(\"Gave up waiting for \"+collection+\" to disappear.  THREAD DUMP:\");\n          zkStateReader.getZkClient().printLayoutToStdOut();\n          fail(\"The collection (\"+collection+\") is still present - waited for \" + timeoutSeconds + \" seconds\");\n          // won't get here\n          return;\n        }\n        cont = false;\n      } else {\n        Thread.sleep(1000);\n      }\n      cnt++;\n    }\n\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","sourceNew":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n    boolean cont = true;\n    int cnt = 0;\n    \n    while (cont) {\n      if (verbose) System.out.println(\"-\");\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (!clusterState.hasCollection(collection)) break;\n      if (cnt == timeoutSeconds) {\n        if (verbose) System.out.println(\"Gave up waiting for \"+collection+\" to disappear..\");\n        if (failOnTimeout) {\n          Diagnostics.logThreadDumps(\"Gave up waiting for \"+collection+\" to disappear.  THREAD DUMP:\");\n          zkStateReader.getZkClient().printLayoutToStdOut();\n          fail(\"The collection (\"+collection+\") is still present - waited for \" + timeoutSeconds + \" seconds\");\n          // won't get here\n          return;\n        }\n        cont = false;\n      } else {\n        Thread.sleep(1000);\n      }\n      cnt++;\n    }\n\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","sourceOld":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n    boolean cont = true;\n    int cnt = 0;\n    \n    while (cont) {\n      if (verbose) System.out.println(\"-\");\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (!clusterState.hasCollection(collection)) break;\n      if (cnt == timeoutSeconds) {\n        if (verbose) System.out.println(\"Gave up waiting for \"+collection+\" to disappear..\");\n        if (failOnTimeout) {\n          Diagnostics.logThreadDumps(\"Gave up waiting for \"+collection+\" to disappear.  THREAD DUMP:\");\n          zkStateReader.getZkClient().printLayoutToStdOut();\n          fail(\"The collection (\"+collection+\") is still present - waited for \" + timeoutSeconds + \" seconds\");\n          // won't get here\n          return;\n        }\n        cont = false;\n      } else {\n        Thread.sleep(1000);\n      }\n      cnt++;\n    }\n\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","sourceNew":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n    boolean cont = true;\n    int cnt = 0;\n    \n    while (cont) {\n      if (verbose) System.out.println(\"-\");\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (!clusterState.hasCollection(collection)) break;\n      if (cnt == timeoutSeconds) {\n        if (verbose) System.out.println(\"Gave up waiting for \"+collection+\" to disappear..\");\n        if (failOnTimeout) {\n          Diagnostics.logThreadDumps(\"Gave up waiting for \"+collection+\" to disappear.  THREAD DUMP:\");\n          zkStateReader.getZkClient().printLayoutToStdOut();\n          fail(\"The collection (\"+collection+\") is still present - waited for \" + timeoutSeconds + \" seconds\");\n          // won't get here\n          return;\n        }\n        cont = false;\n      } else {\n        Thread.sleep(1000);\n      }\n      cnt++;\n    }\n\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","sourceOld":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n    boolean cont = true;\n    int cnt = 0;\n    \n    while (cont) {\n      if (verbose) System.out.println(\"-\");\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (!clusterState.hasCollection(collection)) break;\n      if (cnt == timeoutSeconds) {\n        if (verbose) System.out.println(\"Gave up waiting for \"+collection+\" to disappear..\");\n        if (failOnTimeout) {\n          Diagnostics.logThreadDumps(\"Gave up waiting for \"+collection+\" to disappear.  THREAD DUMP:\");\n          zkStateReader.getZkClient().printLayoutToStdOut();\n          fail(\"The collection (\"+collection+\") is still present - waited for \" + timeoutSeconds + \" seconds\");\n          // won't get here\n          return;\n        }\n        cont = false;\n      } else {\n        Thread.sleep(1000);\n      }\n      cnt++;\n    }\n\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","sourceNew":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n\n    zkStateReader.waitForState(collection, timeoutSeconds, TimeUnit.SECONDS, (liveNodes, docCollection) -> {\n      if (docCollection == null)\n        return true;\n      return false;\n    });\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","sourceOld":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n    boolean cont = true;\n    int cnt = 0;\n    \n    while (cont) {\n      if (verbose) System.out.println(\"-\");\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (!clusterState.hasCollection(collection)) break;\n      if (cnt == timeoutSeconds) {\n        if (verbose) System.out.println(\"Gave up waiting for \"+collection+\" to disappear..\");\n        if (failOnTimeout) {\n          Diagnostics.logThreadDumps(\"Gave up waiting for \"+collection+\" to disappear.  THREAD DUMP:\");\n          zkStateReader.getZkClient().printLayoutToStdOut();\n          fail(\"The collection (\"+collection+\") is still present - waited for \" + timeoutSeconds + \" seconds\");\n          // won't get here\n          return;\n        }\n        cont = false;\n      } else {\n        Thread.sleep(1000);\n      }\n      cnt++;\n    }\n\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","bugFix":["9a9be5565efd659f2400b5f4db5144a4ffa1da3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","sourceNew":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n\n    zkStateReader.waitForState(collection, timeoutSeconds, TimeUnit.SECONDS, (docCollection) -> {\n      if (docCollection == null)\n        return true;\n      return false;\n    });\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","sourceOld":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n\n    zkStateReader.waitForState(collection, timeoutSeconds, TimeUnit.SECONDS, (liveNodes, docCollection) -> {\n      if (docCollection == null)\n        return true;\n      return false;\n    });\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForCollectionToDisappear(String,ZkStateReader,boolean,boolean,int).mjava","sourceNew":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n\n    zkStateReader.waitForState(collection, timeoutSeconds, TimeUnit.SECONDS, (docCollection) -> docCollection == null);\n    log.info(\"Collection has disappeared - collection:{}\", collection);\n  }\n\n","sourceOld":"  public static void waitForCollectionToDisappear(String collection,\n      ZkStateReader zkStateReader, boolean verbose, boolean failOnTimeout, int timeoutSeconds)\n      throws Exception {\n    log.info(\"Wait for collection to disappear - collection: \" + collection + \" failOnTimeout:\" + failOnTimeout + \" timeout (sec):\" + timeoutSeconds);\n\n    zkStateReader.waitForState(collection, timeoutSeconds, TimeUnit.SECONDS, (docCollection) -> {\n      if (docCollection == null)\n        return true;\n      return false;\n    });\n    log.info(\"Collection has disappeared - collection: \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"9a9be5565efd659f2400b5f4db5144a4ffa1da3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["9a9be5565efd659f2400b5f4db5144a4ffa1da3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add1e7dd742ea533ff4318cea83ca0a1f669f662"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7b366e7dd3172289251a86be96031af4002cd19c"],"9a9be5565efd659f2400b5f4db5144a4ffa1da3d":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a9be5565efd659f2400b5f4db5144a4ffa1da3d"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b366e7dd3172289251a86be96031af4002cd19c":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}