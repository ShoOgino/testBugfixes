{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.shutdown();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.shutdown();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.shutdown();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.INSTANCE)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.shutdown();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.shutdown();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.shutdown();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10)\n                                                .setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.shutdown();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(NoMergePolicy.INSTANCE)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.shutdown();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10)\n                                    .setMergePolicy(ldmp)\n                                    .setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(10).setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.shutdown();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(NoMergePolicy.INSTANCE)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.shutdown();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setOpenMode(\n        OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10)\n                                                .setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(NoMergePolicy.INSTANCE)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10)\n                                    .setMergePolicy(ldmp)\n                                    .setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10)\n                                                .setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.shutdown();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(NoMergePolicy.INSTANCE)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.shutdown();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10)\n                                    .setMergePolicy(ldmp)\n                                    .setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeDocCount0().mjava","sourceNew":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10)\n                                                .setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(NoMergePolicy.INSTANCE)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10)\n                                    .setMergePolicy(ldmp)\n                                    .setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.getDocStats().maxDoc);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where a merge results in no doc at all\n  public void testMergeDocCount0() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10)\n                                                .setMergePolicy(ldmp));\n\n    for (int i = 0; i < 250; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n    }\n    writer.close();\n\n    // delete some docs without merging\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(NoMergePolicy.INSTANCE)\n    );\n    writer.deleteDocuments(new Term(\"content\", \"aaa\"));\n    writer.close();\n\n    ldmp = new LogDocMergePolicy();\n    ldmp.setMergeFactor(5);\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10)\n                                    .setMergePolicy(ldmp)\n                                    .setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    // merge factor is changed, so check invariants after all adds\n    for (int i = 0; i < 10; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    writer.waitForMerges();\n    writer.commit();\n    checkInvariants(writer);\n    assertEquals(10, writer.maxDoc());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}