{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","sourceNew":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), false);\n  }\n\n","sourceOld":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","sourceNew":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), DocsAndPositionsEnum.FLAG_PAYLOADS);\n  }\n\n","sourceOld":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","sourceNew":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), DocsAndPositionsEnum.FLAG_PAYLOADS);\n  }\n\n","sourceOld":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","sourceNew":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), DocsAndPositionsEnum.FLAG_PAYLOADS);\n  }\n\n","sourceOld":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b65d3e2c837614823b0652e54f44ff76463de22","date":1355144308,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","sourceNew":null,"sourceOld":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), DocsAndPositionsEnum.FLAG_PAYLOADS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#PayloadIterator(IndexReader,Term,byte[]).mjava","sourceNew":null,"sourceOld":"  public PayloadIterator(IndexReader indexReader, Term term, byte[] buffer)\n      throws IOException {\n    this.buffer = buffer;\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    this.tp = MultiFields.getTermPositionsEnum(indexReader, liveDocs, term.field(), term.bytes(), DocsAndPositionsEnum.FLAG_PAYLOADS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["322360ac5185a8446d3e0b530b2068bef67cd3d5","3b65d3e2c837614823b0652e54f44ff76463de22"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b65d3e2c837614823b0652e54f44ff76463de22"],"3b65d3e2c837614823b0652e54f44ff76463de22":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["407687e67faf6e1f02a211ca078d8e3eed631027","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","3b65d3e2c837614823b0652e54f44ff76463de22"],"3b65d3e2c837614823b0652e54f44ff76463de22":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}