{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testStringDocValuesMatch().mjava","commits":[{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testStringDocValuesMatch().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  string docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  public void testStringDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"stringdv\", \"car\"));\n    assertU(adoc(\"id\", \"5\", \"stringdv\", \"dog\", \"stringdv\", \"cat\"));\n    assertU(commit());\n    \n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\",\n        \"//result/doc[4]/str[@name='id'][.=5]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testStringDocValuesMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testStringDocValuesMatch().mjava","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  string docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testStringDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"stringdv\", \"car\"));\n    assertU(adoc(\"id\", \"5\", \"stringdv\", \"dog\", \"stringdv\", \"cat\"));\n    assertU(commit());\n    \n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\",\n        \"//result/doc[4]/str[@name='id'][.=5]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n  }\n\n","sourceOld":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  string docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  public void testStringDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"stringdv\", \"car\"));\n    assertU(adoc(\"id\", \"5\", \"stringdv\", \"dog\", \"stringdv\", \"cat\"));\n    assertU(commit());\n    \n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\",\n        \"//result/doc[4]/str[@name='id'][.=5]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testStringDocValuesMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testStringDocValuesMatch().mjava","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  string docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testStringDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"stringdv\", \"car\"));\n    assertU(adoc(\"id\", \"5\", \"stringdv\", \"dog\", \"stringdv\", \"cat\"));\n    assertU(commit());\n    \n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\",\n        \"//result/doc[4]/str[@name='id'][.=5]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n  }\n\n","sourceOld":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  string docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  public void testStringDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"stringdv\", \"b\"));\n    assertU(adoc(\"id\", \"2\", \"stringdv\", \"a\"));\n    assertU(adoc(\"id\", \"3\", \"stringdv\", \"c\"));\n    assertU(adoc(\"id\", \"4\", \"stringdv\", \"car\"));\n    assertU(adoc(\"id\", \"5\", \"stringdv\", \"dog\", \"stringdv\", \"cat\"));\n    assertU(commit());\n    \n    // string: termquery\n    assertQ(req(\"q\", \"stringdv:car\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: range query\n    assertQ(req(\"q\", \"stringdv:[b TO d]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=4]\",\n        \"//result/doc[4]/str[@name='id'][.=5]\"\n    );\n    \n    // string: prefix query\n    assertQ(req(\"q\", \"stringdv:c*\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=3]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\"\n    );\n    \n    // string: wildcard query\n    assertQ(req(\"q\", \"stringdv:c?r\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n    \n    // string: regexp query\n    assertQ(req(\"q\", \"stringdv:/c[a-b]r/\", \"sort\", \"id asc\"),\n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/str[@name='id'][.=4]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}