{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","commits":[{"id":"7e51716f34332b099f56a7bbdc34d7dacf4648aa","date":1329778294,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testTerms() throws Exception {\n    int num = atLeast(10000);\n    \n    TreeMap<BytesRef,Float> sorted = new TreeMap<BytesRef,Float>();\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      float value = random.nextFloat();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), BytesRef.getUTF8SortedAsUnicodeComparator());\n    Iterator<Map.Entry<BytesRef,Float>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Float> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().floatValue(), wrapper.freq(), 0F);\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Float> actual = new TreeMap<BytesRef,Float>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      float value = wrapper.freq();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    int num = atLeast(10000);\n    \n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>();\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), BytesRef.getUTF8SortedAsUnicodeComparator());\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight(), 0F);\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    int num = atLeast(10000);\n    \n    TreeMap<BytesRef,Float> sorted = new TreeMap<BytesRef,Float>();\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      float value = random.nextFloat();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), BytesRef.getUTF8SortedAsUnicodeComparator());\n    Iterator<Map.Entry<BytesRef,Float>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Float> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().floatValue(), wrapper.freq(), 0F);\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Float> actual = new TreeMap<BytesRef,Float>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      float value = wrapper.freq();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    int num = atLeast(10000);\n    \n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>();\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), BytesRef.getUTF8SortedAsUnicodeComparator());\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight(), 0F);\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testTerms() throws Exception {\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef,Long> sorted = new TreeMap<BytesRef,Long>(comparator);\n    TermFreq[] unsorted = new TermFreq[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sorted.put(key, value);\n      unsorted[i] = new TermFreq(key, value);\n    }\n    \n    // test the sorted iterator wrapper\n    TermFreqIterator wrapper = new SortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef,Long>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,Long> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().longValue(), wrapper.weight());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper\n    wrapper = new UnsortedTermFreqIteratorWrapper(new TermFreqArrayIterator(unsorted));\n    TreeMap<BytesRef,Long> actual = new TreeMap<BytesRef,Long>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      actual.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sorted, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["7e51716f34332b099f56a7bbdc34d7dacf4648aa"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"7e51716f34332b099f56a7bbdc34d7dacf4648aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7e51716f34332b099f56a7bbdc34d7dacf4648aa"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7e51716f34332b099f56a7bbdc34d7dacf4648aa":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}