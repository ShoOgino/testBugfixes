{"path":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the offset of the greatest index entry which is less than term.*/\n  private final int getIndexOffset(Term term) throws IOException {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94b652817904059d010f77b4de69e4e0b5681585","date":1085052233,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","sourceNew":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) throws IOException {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","sourceOld":"  /** Returns the offset of the greatest index entry which is less than term.*/\n  private final int getIndexOffset(Term term) throws IOException {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e03e3f081e8581c90e28db2f37ab70239194e12b","date":1086627352,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) throws IOException {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafd816608011f66422f3052c37962973582d12a","date":1087172166,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) throws IOException {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b194dd68c45dcab90573bcf23819361780012809"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e444951e98c00cc6f00fdbc2e00286be07067f8","date":1091825429,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","sourceNew":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","sourceOld":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) throws IOException {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b194dd68c45dcab90573bcf23819361780012809","date":1228347979,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","sourceNew":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","sourceOld":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","bugFix":["eafd816608011f66422f3052c37962973582d12a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getIndexOffset(Term).mjava","sourceNew":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","sourceOld":"  /** Returns the offset of the greatest index entry which is less than or equal to term.*/\n  private final int getIndexOffset(Term term) {\n    int lo = 0;\t\t\t\t\t  // binary search indexTerms[]\n    int hi = indexTerms.length - 1;\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int delta = term.compareTo(indexTerms[mid]);\n      if (delta < 0)\n\thi = mid - 1;\n      else if (delta > 0)\n\tlo = mid + 1;\n      else\n\treturn mid;\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eafd816608011f66422f3052c37962973582d12a":["e03e3f081e8581c90e28db2f37ab70239194e12b"],"3e444951e98c00cc6f00fdbc2e00286be07067f8":["eafd816608011f66422f3052c37962973582d12a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b194dd68c45dcab90573bcf23819361780012809":["3e444951e98c00cc6f00fdbc2e00286be07067f8"],"e03e3f081e8581c90e28db2f37ab70239194e12b":["94b652817904059d010f77b4de69e4e0b5681585"],"94b652817904059d010f77b4de69e4e0b5681585":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b194dd68c45dcab90573bcf23819361780012809"]},"commit2Childs":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["94b652817904059d010f77b4de69e4e0b5681585"],"eafd816608011f66422f3052c37962973582d12a":["3e444951e98c00cc6f00fdbc2e00286be07067f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"3e444951e98c00cc6f00fdbc2e00286be07067f8":["b194dd68c45dcab90573bcf23819361780012809"],"b194dd68c45dcab90573bcf23819361780012809":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e03e3f081e8581c90e28db2f37ab70239194e12b":["eafd816608011f66422f3052c37962973582d12a"],"94b652817904059d010f77b4de69e4e0b5681585":["e03e3f081e8581c90e28db2f37ab70239194e12b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}