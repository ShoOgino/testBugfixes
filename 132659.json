{"path":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testSimplePhraseRequest().mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testSimplePhraseRequest().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimplePhraseRequest() throws Exception {\n    final String input = \" did  a Quick    brown FOX perniciously jump over the lazy dog\";\n    final String expected = \" did  a Quick    {brown FOX} perniciously jump over {the lazy dog}\";\n\n    // should get same behavior regardless of wether we use \"q\" or \"phrases.q\"\n    for (String p : Arrays.asList(\"q\", \"phrases.q\")) {\n      // basic request...\n      assertQ(req(\"qt\", HANDLER, p, input)\n              // expect no search results...\n              , \"count(//result)=0\"\n              \n              // just phrase info...\n              , \"//lst[@name='phrases']/str[@name='input'][.='\"+input+\"']\"\n              , \"//lst[@name='phrases']/str[@name='summary'][.='\"+expected+\"']\"\n              , \"count(//lst[@name='phrases']/arr[@name='details']/lst) = 2\"\n              //\n              , \"//lst[@name='phrases']/arr[@name='details']/lst[1]/str[@name='text'][.='the lazy dog']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst[1]/int[@name='offset_start'][.='50']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst[1]/int[@name='offset_end'][.='62']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst[1]/double[@name='score'][number(.) > 0]\"\n              //\n              , \"//lst[@name='phrases']/arr[@name='details']/lst[2]/str[@name='text'][.='brown FOX']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst[2]/int[@name='offset_start'][.='17']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst[2]/int[@name='offset_end'][.='26']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst[2]/double[@name='score'][number(.) > 0]\"\n              );\n\n      // empty input, empty phrases (and no error)...\n      assertQ(req(\"qt\", HANDLER, p, \"\")\n              // expect no search results...\n              , \"count(//result)=0\"\n              // just empty phrase info for our empty input...\n              , \"//lst[@name='phrases']/str[@name='input'][.='']\"\n              , \"//lst[@name='phrases']/str[@name='summary'][.='']\"\n              , \"count(//lst[@name='phrases']/arr[@name='details']) = 1\"\n              , \"count(//lst[@name='phrases']/arr[@name='details']/lst) = 0\"\n              );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1411e62d30c460b09c6f3643df82daa10a27cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}