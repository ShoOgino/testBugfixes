{"path":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","commits":[{"id":"58b7eb80017f1c5b32035176b965fa0cc0287d04","date":1432069816,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password))      \n        filterChain.doFilter(request, response);\n      else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password))      \n        filterChain.doFilter(request, response);\n      else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password))      \n        filterChain.doFilter(request, response);\n      else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password))      \n        filterChain.doFilter(request, response);\n      else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password))      \n        filterChain.doFilter(request, response);\n      else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password))      \n        filterChain.doFilter(request, response);\n      else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20be168d828ac40d262f85364d02f15b491dd88b":["6bdcb86c29922edae9a14852e636303bc52df094"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6bdcb86c29922edae9a14852e636303bc52df094","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["6bdcb86c29922edae9a14852e636303bc52df094","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b436ffee26b67f87efef6a3bab24697332b6b2"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["6bdcb86c29922edae9a14852e636303bc52df094"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"20be168d828ac40d262f85364d02f15b491dd88b":["23b436ffee26b67f87efef6a3bab24697332b6b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}