{"path":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.shutdown();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.shutdown();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.shutdown();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.shutdown();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    int numThreads = TEST_NIGHTLY ? 4 : 2;\n    int numIterations = TEST_NIGHTLY ? 2000 : 50;\n    RunThread[] indexThreads = new RunThread[numThreads];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer, numIterations);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n   \n    for (RunThread thread : indexThreads) {\n      thread.join();\n    }\n\n    writer.close();\n    mainDir.close();\n    \n    for (RunThread thread : indexThreads) {\n      if (thread.failure != null) {\n        throw new RuntimeException(\"hit exception from \" + thread, thread.failure);\n      }\n    }\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e84628e1e00d06556b67af150a13dbfb1849a818","date":1588191102,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        ensureSaneIWCOnNightly(newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2)))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    int numThreads = TEST_NIGHTLY ? 4 : 2;\n    int numIterations = TEST_NIGHTLY ? 2000 : 50;\n    RunThread[] indexThreads = new RunThread[numThreads];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer, numIterations);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n   \n    for (RunThread thread : indexThreads) {\n      thread.join();\n    }\n\n    writer.close();\n    mainDir.close();\n    \n    for (RunThread thread : indexThreads) {\n      if (thread.failure != null) {\n        throw new RuntimeException(\"hit exception from \" + thread, thread.failure);\n      }\n    }\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    if (mainDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)mainDir).setAssertNoDeleteOpenFile(true);\n    }\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(10)\n           .setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    int numThreads = TEST_NIGHTLY ? 4 : 2;\n    int numIterations = TEST_NIGHTLY ? 2000 : 50;\n    RunThread[] indexThreads = new RunThread[numThreads];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer, numIterations);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n   \n    for (RunThread thread : indexThreads) {\n      thread.join();\n    }\n\n    writer.close();\n    mainDir.close();\n    \n    for (RunThread thread : indexThreads) {\n      if (thread.failure != null) {\n        throw new RuntimeException(\"hit exception from \" + thread, thread.failure);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e84628e1e00d06556b67af150a13dbfb1849a818":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["28288370235ed02234a64753cdbf0c6ec096304a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["527cc14542789f47d75da436cb4287d1ab887e34"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e84628e1e00d06556b67af150a13dbfb1849a818"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e84628e1e00d06556b67af150a13dbfb1849a818":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["e84628e1e00d06556b67af150a13dbfb1849a818"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["527cc14542789f47d75da436cb4287d1ab887e34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}