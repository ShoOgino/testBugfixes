{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testBetaDistribution().mjava","commits":[{"id":"ac48e00c2b85d168dcc8dbd361d109418ee01724","date":1506693465,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testBetaDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBetaDistribution() throws Exception {\n    String cexpr = \"let(a=sample(betaDistribution(1, 5), 50000), b=hist(a, 11), c=col(b, N))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> counts = (List<Number>)tuples.get(0).get(\"c\");\n\n    int lastCount = Integer.MAX_VALUE;\n    for(Number number : counts) {\n      int current = number.intValue();\n      if(current > lastCount) {\n        throw new Exception(\"This beta distribution should be descending\");\n      } else {\n        lastCount = current;\n      }\n    }\n\n    cexpr = \"let(a=sample(betaDistribution(5, 1), 50000), b=hist(a, 11), c=col(b, N))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    counts = (List<Number>)tuples.get(0).get(\"c\");\n\n    lastCount = Integer.MIN_VALUE;\n    for(Number number : counts) {\n      int current = number.intValue();\n      if(current < lastCount) {\n        throw new Exception(\"This beta distribution should be ascending\");\n      } else {\n        lastCount = current;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testBetaDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBetaDistribution() throws Exception {\n    String cexpr = \"let(a=sample(betaDistribution(1, 5), 50000), b=hist(a, 11), c=col(b, N))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> counts = (List<Number>)tuples.get(0).get(\"c\");\n\n    int lastCount = Integer.MAX_VALUE;\n    for(Number number : counts) {\n      int current = number.intValue();\n      if(current > lastCount) {\n        throw new Exception(\"This beta distribution should be descending\");\n      } else {\n        lastCount = current;\n      }\n    }\n\n    cexpr = \"let(a=sample(betaDistribution(5, 1), 50000), b=hist(a, 11), c=col(b, N))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    counts = (List<Number>)tuples.get(0).get(\"c\");\n\n    lastCount = Integer.MIN_VALUE;\n    for(Number number : counts) {\n      int current = number.intValue();\n      if(current < lastCount) {\n        throw new Exception(\"This beta distribution should be ascending\");\n      } else {\n        lastCount = current;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testBetaDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testBetaDistribution().mjava","sourceNew":"  @Test\n  public void testBetaDistribution() throws Exception {\n    String cexpr = \"let(a=sample(betaDistribution(1, 5), 50000), b=hist(a, 11), c=col(b, N))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> counts = (List<Number>)tuples.get(0).get(\"c\");\n\n    int lastCount = Integer.MAX_VALUE;\n    for(Number number : counts) {\n      int current = number.intValue();\n      if(current > lastCount) {\n        throw new Exception(\"This beta distribution should be descending\");\n      } else {\n        lastCount = current;\n      }\n    }\n\n    cexpr = \"let(a=sample(betaDistribution(5, 1), 50000), b=hist(a, 11), c=col(b, N))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    counts = (List<Number>)tuples.get(0).get(\"c\");\n\n    lastCount = Integer.MIN_VALUE;\n    for(Number number : counts) {\n      int current = number.intValue();\n      if(current < lastCount) {\n        throw new Exception(\"This beta distribution should be ascending\");\n      } else {\n        lastCount = current;\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBetaDistribution() throws Exception {\n    String cexpr = \"let(a=sample(betaDistribution(1, 5), 50000), b=hist(a, 11), c=col(b, N))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> counts = (List<Number>)tuples.get(0).get(\"c\");\n\n    int lastCount = Integer.MAX_VALUE;\n    for(Number number : counts) {\n      int current = number.intValue();\n      if(current > lastCount) {\n        throw new Exception(\"This beta distribution should be descending\");\n      } else {\n        lastCount = current;\n      }\n    }\n\n    cexpr = \"let(a=sample(betaDistribution(5, 1), 50000), b=hist(a, 11), c=col(b, N))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    counts = (List<Number>)tuples.get(0).get(\"c\");\n\n    lastCount = Integer.MIN_VALUE;\n    for(Number number : counts) {\n      int current = number.intValue();\n      if(current < lastCount) {\n        throw new Exception(\"This beta distribution should be ascending\");\n      } else {\n        lastCount = current;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac48e00c2b85d168dcc8dbd361d109418ee01724":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac48e00c2b85d168dcc8dbd361d109418ee01724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["ac48e00c2b85d168dcc8dbd361d109418ee01724"]},"commit2Childs":{"ac48e00c2b85d168dcc8dbd361d109418ee01724":["6240b74b884c5587f2a4062dd27d6c32bf228889","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac48e00c2b85d168dcc8dbd361d109418ee01724","6240b74b884c5587f2a4062dd27d6c32bf228889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}