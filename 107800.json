{"path":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","commits":[{"id":"d0a64ffcef6ae839baf314a48817008c796b053d","date":1499974056,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b271c46c3637c193cc37983fc38592b1b99d5f1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d91746c67539428e26abf078daf1d830c2dec3f4","date":1500321307,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","sourceNew":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n    assertIntervalQuery(field, \"[-0.0, 0.0]\", \"2\");\n    assertIntervalQuery(field, \"[-0.0, 0.0)\", \"1\");\n    assertIntervalQuery(field, \"(-0.0, 0.0]\", \"1\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n\n  }\n\n","sourceOld":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n    assertIntervalQuery(field, \"[-0.0, 0.0]\", \"2\");\n    assertIntervalQuery(field, \"[-0.0, 0.0)\", \"1\");\n    assertIntervalQuery(field, \"(-0.0, 0.0]\", \"1\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b271c46c3637c193cc37983fc38592b1b99d5f1c","date":1502322303,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","sourceNew":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n    assertIntervalQuery(field, \"[-0.0, 0.0]\", \"2\");\n    assertIntervalQuery(field, \"[-0.0, 0.0)\", \"1\");\n    assertIntervalQuery(field, \"(-0.0, 0.0]\", \"1\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n  }\n\n","sourceOld":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n    assertIntervalQuery(field, \"[-0.0, 0.0]\", \"2\");\n    assertIntervalQuery(field, \"[-0.0, 0.0)\", \"1\");\n    assertIntervalQuery(field, \"(-0.0, 0.0]\", \"1\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n\n  }\n\n","bugFix":["d0a64ffcef6ae839baf314a48817008c796b053d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","sourceNew":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n    assertIntervalQuery(field, \"[-0.0, 0.0]\", \"2\");\n    assertIntervalQuery(field, \"[-0.0, 0.0)\", \"1\");\n    assertIntervalQuery(field, \"(-0.0, 0.0]\", \"1\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n  }\n\n","sourceOld":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n    assertIntervalQuery(field, \"[-0.0, 0.0]\", \"2\");\n    assertIntervalQuery(field, \"[-0.0, 0.0)\", \"1\");\n    assertIntervalQuery(field, \"(-0.0, 0.0]\", \"1\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestFloat(String,boolean).mjava","sourceNew":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n    assertIntervalQuery(field, \"[-0.0, 0.0]\", \"2\");\n    assertIntervalQuery(field, \"[-0.0, 0.0)\", \"1\");\n    assertIntervalQuery(field, \"(-0.0, 0.0]\", \"1\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n  }\n\n","sourceOld":"  private void doTestFloat(String field, boolean testDouble) {\n    assertU(adoc(\"id\", \"1\", field, \"0\"));\n    assertU(adoc(\"id\", \"2\", field, \"1\"));\n    assertU(adoc(\"id\", \"3\", field, \"2\"));\n    assertU(adoc(\"id\", \"4\", field, \"3\"));\n    assertU(adoc(\"id\", \"5\", field, \"4\"));\n    assertU(adoc(\"id\", \"6\", field, \"5\"));\n    assertU(adoc(\"id\", \"7\", field, \"6\"));\n    assertU(adoc(\"id\", \"8\", field, \"7\"));\n    assertU(adoc(\"id\", \"9\", field, \"8\"));\n    assertU(adoc(\"id\", \"10\"));\n    assertU(adoc(\"id\", \"11\", field, \"10\"));\n    assertU(commit());\n\n    assertIntervalQueriesNumeric(field);\n\n    assertU(adoc(\"id\", \"12\", field, \"1.3\"));\n    assertU(adoc(\"id\", \"13\", field, \"4.5\"));\n    assertU(adoc(\"id\", \"14\", field, \"6.7\"));\n    assertU(adoc(\"id\", \"15\", field, \"123.45\"));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[0,\" + Integer.MAX_VALUE + \"]\", \"14\");\n    assertIntervalQuery(field, \"[0,1]\", \"2\");\n    assertIntervalQuery(field, \"[0,2]\", \"4\");\n    assertIntervalQuery(field, \"(1,2)\", \"1\");\n    assertIntervalQuery(field, \"(1,1)\", \"0\");\n    assertIntervalQuery(field, \"(4,7)\", \"4\");\n    assertIntervalQuery(field, \"(123,*)\", \"1\");\n\n    clearIndex();\n    assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n    assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n    assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n    assertU(adoc(\"id\", \"19\", field, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"20\", field, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"21\", field, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"22\", field, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n\n    assertIntervalQuery(field, \"[*,*]\", \"7\");\n    assertIntervalQuery(field, \"(*,*)\", \"7\");\n    assertIntervalQuery(field, \"(-1,1)\", \"3\");\n    assertIntervalQuery(field, \"(-2,1)\", \"4\");\n    assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n    assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n    assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n    assertIntervalQuery(field, \"(\" + Float.NEGATIVE_INFINITY + \",0)\", \"2\");\n    assertIntervalQuery(field, \"(* ,0)\", \"3\");\n    assertIntervalQuery(field, \"[\" + Float.NEGATIVE_INFINITY + \",0)\", \"3\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \")\", \"0\");\n    assertIntervalQuery(field, \"(0, \" + Float.MIN_VALUE + \"]\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \")\", \"1\");\n    assertIntervalQuery(field, \"(0, \" + Float.MAX_VALUE + \"]\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \")\", \"2\");\n    assertIntervalQuery(field, \"(0, \" + Float.POSITIVE_INFINITY + \"]\", \"3\");\n    assertIntervalQuery(field, \"[-0.0, 0.0]\", \"2\");\n    assertIntervalQuery(field, \"[-0.0, 0.0)\", \"1\");\n    assertIntervalQuery(field, \"(-0.0, 0.0]\", \"1\");\n\n    if (testDouble) {\n      clearIndex();\n      assertU(adoc(\"id\", \"16\", field, \"-1.3\"));\n      assertU(adoc(\"id\", \"17\", field, \"0.0\"));\n      assertU(adoc(\"id\", \"18\", field, \"-0.0\"));\n      assertU(adoc(\"id\", \"19\", field, String.valueOf(Double.MIN_VALUE)));\n      assertU(adoc(\"id\", \"20\", field, String.valueOf(Double.MAX_VALUE)));\n      assertU(adoc(\"id\", \"21\", field, String.valueOf(Double.NEGATIVE_INFINITY)));\n      assertU(adoc(\"id\", \"22\", field, String.valueOf(Double.POSITIVE_INFINITY)));\n      assertU(commit());\n\n      assertIntervalQuery(field, \"[*,*]\", \"7\");\n      assertIntervalQuery(field, \"(*,*)\", \"7\");\n      assertIntervalQuery(field, \"(-1,1)\", \"3\");\n      assertIntervalQuery(field, \"(-2,1)\", \"4\");\n      assertIntervalQuery(field, \"(-1.3,0)\", \"1\");\n      assertIntervalQuery(field, \"[-1.3,0)\", \"2\");\n      assertIntervalQuery(field, \"[-1.3,0]\", \"3\");\n      assertIntervalQuery(field, \"(\" + Double.NEGATIVE_INFINITY + \",0)\", \"2\");\n      assertIntervalQuery(field, \"(* ,0)\", \"3\");\n      assertIntervalQuery(field, \"[\" + Double.NEGATIVE_INFINITY + \",0)\", \"3\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \")\", \"0\");\n      assertIntervalQuery(field, \"(0, \" + Double.MIN_VALUE + \"]\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \")\", \"1\");\n      assertIntervalQuery(field, \"(0, \" + Double.MAX_VALUE + \"]\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \")\", \"2\");\n      assertIntervalQuery(field, \"(0, \" + Double.POSITIVE_INFINITY + \"]\", \"3\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["d91746c67539428e26abf078daf1d830c2dec3f4","b271c46c3637c193cc37983fc38592b1b99d5f1c"],"b271c46c3637c193cc37983fc38592b1b99d5f1c":["d91746c67539428e26abf078daf1d830c2dec3f4"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d91746c67539428e26abf078daf1d830c2dec3f4"],"d91746c67539428e26abf078daf1d830c2dec3f4":["d0a64ffcef6ae839baf314a48817008c796b053d"],"d0a64ffcef6ae839baf314a48817008c796b053d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["aaf90fc29510e72665ac7934f34c3d1c25efad64","b271c46c3637c193cc37983fc38592b1b99d5f1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b271c46c3637c193cc37983fc38592b1b99d5f1c"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"b271c46c3637c193cc37983fc38592b1b99d5f1c":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"d91746c67539428e26abf078daf1d830c2dec3f4":["58884af1f68e9d61c217c753fbd6266d86a63b14","b271c46c3637c193cc37983fc38592b1b99d5f1c","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"d0a64ffcef6ae839baf314a48817008c796b053d":["d91746c67539428e26abf078daf1d830c2dec3f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","d0a64ffcef6ae839baf314a48817008c796b053d"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}