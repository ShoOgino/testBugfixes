{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","commits":[{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"1d028314cced5858683a1bb4741423d0f934257b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}