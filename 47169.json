{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) throws IOException {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"f2126b84bd093fa3d921582a109a0ee578c28126":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9405f486872f1e416304dfe389741f4ee2f8a4d"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}