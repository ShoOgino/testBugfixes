{"path":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean,boolean).mjava","commits":[{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean).mjava","sourceNew":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory, boolean readOnly) throws IOException {\n    super(directory, sis, closeDirectory, readOnly);\n\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      try {\n        readers[i] = SegmentReader.get(readOnly, sis.info(i));\n      } catch (IOException e) {\n        // Close all readers we had opened:\n        for(i++;i<sis.size();i++) {\n          try {\n            readers[i].close();\n          } catch (IOException ignore) {\n            // keep going - we want to clean up as much as possible\n          }\n        }\n        throw e;\n      }\n    }\n\n    initialize(readers);\n  }\n\n","sourceOld":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory) throws IOException {\n    super(directory, sis, closeDirectory);\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      try {\n        readers[i] = SegmentReader.get(sis.info(i));\n      } catch (IOException e) {\n        // Close all readers we had opened:\n        for(i++;i<sis.size();i++) {\n          try {\n            readers[i].close();\n          } catch (IOException ignore) {\n            // keep going - we want to clean up as much as possible\n          }\n        }\n        throw e;\n      }\n    }\n\n    initialize(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory, boolean readOnly) throws IOException {\n    super(directory, sis, closeDirectory, readOnly);\n\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      boolean success = false;\n      try {\n        readers[i] = SegmentReader.get(readOnly, sis.info(i));\n        success = true;\n      } finally {\n        if (!success) {\n          // Close all readers we had opened:\n          for(i++;i<sis.size();i++) {\n            try {\n              readers[i].close();\n            } catch (Throwable ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    initialize(readers);\n  }\n\n","sourceOld":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory, boolean readOnly) throws IOException {\n    super(directory, sis, closeDirectory, readOnly);\n\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      try {\n        readers[i] = SegmentReader.get(readOnly, sis.info(i));\n      } catch (IOException e) {\n        // Close all readers we had opened:\n        for(i++;i<sis.size();i++) {\n          try {\n            readers[i].close();\n          } catch (IOException ignore) {\n            // keep going - we want to clean up as much as possible\n          }\n        }\n        throw e;\n      }\n    }\n\n    initialize(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,IndexDeletionPolicy,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Construct reading the named set of readers. */\n  DirectoryReader(Directory directory, SegmentInfos sis, IndexDeletionPolicy deletionPolicy, boolean closeDirectory, boolean readOnly) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.closeDirectory = closeDirectory;\n    this.segmentInfos = sis;\n    this.deletionPolicy = deletionPolicy;\n\n    if (!readOnly) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      synced.addAll(sis.files(directory, true));\n    }\n\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      boolean success = false;\n      try {\n        readers[i] = SegmentReader.get(readOnly, sis.info(i));\n        success = true;\n      } finally {\n        if (!success) {\n          // Close all readers we had opened:\n          for(i++;i<sis.size();i++) {\n            try {\n              readers[i].close();\n            } catch (Throwable ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    initialize(readers);\n  }\n\n","sourceOld":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory, boolean readOnly) throws IOException {\n    super(directory, sis, closeDirectory, readOnly);\n\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      boolean success = false;\n      try {\n        readers[i] = SegmentReader.get(readOnly, sis.info(i));\n        success = true;\n      } finally {\n        if (!success) {\n          // Close all readers we had opened:\n          for(i++;i<sis.size();i++) {\n            try {\n              readers[i].close();\n            } catch (Throwable ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    initialize(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"5712975970a595c28f1988efd007e1b8a617a92f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5712975970a595c28f1988efd007e1b8a617a92f":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5712975970a595c28f1988efd007e1b8a617a92f"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}