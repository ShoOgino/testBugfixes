{"path":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random())).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random())).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiTerms.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(7).setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newTextField(\"field1\", \"this is field1\", Field.Store.NO));\n        doc.add(newTextField(\"field2\", \"this is field2\", Field.Store.NO));\n        doc.add(newTextField(\"field3\", \"aaa\", Field.Store.NO));\n        doc.add(newTextField(\"field4\", \"bbb\", Field.Store.NO));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}