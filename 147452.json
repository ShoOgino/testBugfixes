{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testCJKTerm().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testCJKTerm().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testCJKTerm().mjava","sourceNew":"  public void testCJKTerm() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer();\n    \n    BooleanQuery expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    \n    assertEquals(expected, getQuery(\"中国\", analyzer));\n  }\n\n","sourceOld":"  public void testCJKTerm() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer();\n    \n    BooleanQuery expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    \n    assertEquals(expected, getQuery(\"中国\", analyzer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5dc366a7d1607715cc8f08fda777417daef8569","date":1320016490,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testCJKTerm().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testCJKTerm().mjava","sourceNew":"  public void testCJKTerm() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer();\n    \n    BooleanQuery expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    assertEquals(expected, getQuery(\"中国\", analyzer));\n    \n    expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.MUST);\n    BooleanQuery inner = new BooleanQuery();\n    inner.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    inner.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(inner, BooleanClause.Occur.MUST);\n    assertEquals(expected, getQuery(\"中 AND 中国\", new SimpleCJKAnalyzer()));\n\n  }\n\n","sourceOld":"  public void testCJKTerm() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer();\n    \n    BooleanQuery expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    \n    assertEquals(expected, getQuery(\"中国\", analyzer));\n  }\n\n","bugFix":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testCJKTerm().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testCJKTerm().mjava","sourceNew":"  public void testCJKTerm() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer();\n    \n    BooleanQuery expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    assertEquals(expected, getQuery(\"中国\", analyzer));\n    \n    expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.MUST);\n    BooleanQuery inner = new BooleanQuery();\n    inner.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    inner.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(inner, BooleanClause.Occur.MUST);\n    assertEquals(expected, getQuery(\"中 AND 中国\", new SimpleCJKAnalyzer()));\n\n  }\n\n","sourceOld":"  public void testCJKTerm() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer();\n    \n    BooleanQuery expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    assertEquals(expected, getQuery(\"中国\", analyzer));\n    \n    expected = new BooleanQuery();\n    expected.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.MUST);\n    BooleanQuery inner = new BooleanQuery();\n    inner.add(new TermQuery(new Term(\"field\", \"中\")), BooleanClause.Occur.SHOULD);\n    inner.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(inner, BooleanClause.Occur.MUST);\n    assertEquals(expected, getQuery(\"中 AND 中国\", new SimpleCJKAnalyzer()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e5dc366a7d1607715cc8f08fda777417daef8569"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5dc366a7d1607715cc8f08fda777417daef8569":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["e5dc366a7d1607715cc8f08fda777417daef8569"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"e5dc366a7d1607715cc8f08fda777417daef8569":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}