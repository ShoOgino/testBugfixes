{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle,BBoxFieldInfo).mjava","commits":[{"id":"ebd6f706eb59fe367493c820daeccd76587ec6bf","date":1340868972,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle,BBoxFieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get round it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox, fieldInfo);\n    Query qIsNonXDL = this.makeXDL(false, fieldInfo);\n    Query qIsXDL = this.makeXDL(true, fieldInfo);\n    Query qHasEnv = this.makeQuery(new Query[]{qIsNonXDL, qIsXDL}, BooleanClause.Occur.SHOULD);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle,BBoxFieldInfo).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get round it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox);\n    Query qIsNonXDL = this.makeXDL(false);\n    Query qIsXDL = this.makeXDL(true);\n    Query qHasEnv = this.makeQuery(new Query[]{qIsNonXDL, qIsXDL}, BooleanClause.Occur.SHOULD);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get round it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox, fieldInfo);\n    Query qIsNonXDL = this.makeXDL(false, fieldInfo);\n    Query qIsXDL = this.makeXDL(true, fieldInfo);\n    Query qHasEnv = this.makeQuery(new Query[]{qIsNonXDL, qIsXDL}, BooleanClause.Occur.SHOULD);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0415a016b37e58a017fed0a91234f733ab359971"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}