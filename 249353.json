{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#stressLogReplay().mjava","commits":[{"id":"defa11d88d50ec356d5e7428f1ebc89623e840ac","date":1527653148,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#stressLogReplay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void stressLogReplay() throws Exception {\n    final int NUM_UPDATES = 150;\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n      clearIndex();\n      assertU(commit());\n      Map<Integer, Integer> docIdToVal = new HashMap<>();\n      for (int i = 0; i < NUM_UPDATES; i++) {\n        int kindOfUpdate = random().nextInt(100);\n        if (docIdToVal.size() < 10) kindOfUpdate = 0;\n        if (kindOfUpdate <= 50) {\n          // add a new document update, may by duplicate with the current one\n          int val = random().nextInt(1000);\n          int docId = random().nextInt(10000);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", val), null);\n          docIdToVal.put(docId, val);\n        } else if (kindOfUpdate <= 80) {\n          // inc val of a document\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          int delta = random().nextInt(10);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", map(\"inc\", delta)), null);\n          docIdToVal.put(docId, docIdToVal.get(docId) + delta);\n        } else if (kindOfUpdate <= 85) {\n          // set val of a document\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          int val = random().nextInt(1000);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", map(\"set\", val)), null);\n          docIdToVal.put(docId, val);\n        } else if (kindOfUpdate <= 90) {\n          // delete by id\n          ArrayList<Integer> vals = new ArrayList<>(docIdToVal.values());\n          int val = vals.get(random().nextInt(vals.size()));\n          deleteByQueryAndGetVersion(\"val_i_dvo:\"+val, null);\n          docIdToVal.entrySet().removeIf(integerIntegerEntry -> integerIntegerEntry.getValue() == val);\n        } else {\n          // delete by query\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          deleteAndGetVersion(String.valueOf(docId), null);\n          docIdToVal.remove(docId);\n        }\n      }\n\n      h.close();\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n      // unblock recovery\n      logReplay.release(Integer.MAX_VALUE);\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertU(commit());\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\"+docIdToVal.size());\n\n      for (Map.Entry<Integer, Integer> entry : docIdToVal.entrySet()) {\n        assertJQ(req(\"q\",\"id:\"+entry.getKey(), \"fl\", \"val_i_dvo\") ,\n            \"/response/numFound==1\",\n            \"/response/docs==[{'val_i_dvo':\"+entry.getValue()+\"}]\");\n      }\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#stressLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#stressLogReplay().mjava","sourceNew":"  @Test\n  public void stressLogReplay() throws Exception {\n    final int NUM_UPDATES = 150;\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n      clearIndex();\n      assertU(commit());\n      Map<Integer, Integer> docIdToVal = new HashMap<>();\n      for (int i = 0; i < NUM_UPDATES; i++) {\n        int kindOfUpdate = random().nextInt(100);\n        if (docIdToVal.size() < 10) kindOfUpdate = 0;\n        if (kindOfUpdate <= 50) {\n          // add a new document update, may by duplicate with the current one\n          int val = random().nextInt(1000);\n          int docId = random().nextInt(10000);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", val), null);\n          docIdToVal.put(docId, val);\n        } else if (kindOfUpdate <= 80) {\n          // inc val of a document\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          int delta = random().nextInt(10);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", map(\"inc\", delta)), null);\n          docIdToVal.put(docId, docIdToVal.get(docId) + delta);\n        } else if (kindOfUpdate <= 85) {\n          // set val of a document\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          int val = random().nextInt(1000);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", map(\"set\", val)), null);\n          docIdToVal.put(docId, val);\n        } else if (kindOfUpdate <= 90) {\n          // delete by id\n          ArrayList<Integer> vals = new ArrayList<>(docIdToVal.values());\n          int val = vals.get(random().nextInt(vals.size()));\n          deleteByQueryAndGetVersion(\"val_i_dvo:\"+val, null);\n          docIdToVal.entrySet().removeIf(integerIntegerEntry -> integerIntegerEntry.getValue() == val);\n        } else {\n          // delete by query\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          deleteAndGetVersion(String.valueOf(docId), null);\n          docIdToVal.remove(docId);\n        }\n      }\n\n      h.close();\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n      // unblock recovery\n      logReplay.release(Integer.MAX_VALUE);\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertU(commit());\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\"+docIdToVal.size());\n\n      for (Map.Entry<Integer, Integer> entry : docIdToVal.entrySet()) {\n        assertJQ(req(\"q\",\"id:\"+entry.getKey(), \"fl\", \"val_i_dvo\") ,\n            \"/response/numFound==1\",\n            \"/response/docs==[{'val_i_dvo':\"+entry.getValue()+\"}]\");\n      }\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void stressLogReplay() throws Exception {\n    final int NUM_UPDATES = 150;\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n      clearIndex();\n      assertU(commit());\n      Map<Integer, Integer> docIdToVal = new HashMap<>();\n      for (int i = 0; i < NUM_UPDATES; i++) {\n        int kindOfUpdate = random().nextInt(100);\n        if (docIdToVal.size() < 10) kindOfUpdate = 0;\n        if (kindOfUpdate <= 50) {\n          // add a new document update, may by duplicate with the current one\n          int val = random().nextInt(1000);\n          int docId = random().nextInt(10000);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", val), null);\n          docIdToVal.put(docId, val);\n        } else if (kindOfUpdate <= 80) {\n          // inc val of a document\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          int delta = random().nextInt(10);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", map(\"inc\", delta)), null);\n          docIdToVal.put(docId, docIdToVal.get(docId) + delta);\n        } else if (kindOfUpdate <= 85) {\n          // set val of a document\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          int val = random().nextInt(1000);\n          addAndGetVersion(sdoc(\"id\", String.valueOf(docId), \"val_i_dvo\", map(\"set\", val)), null);\n          docIdToVal.put(docId, val);\n        } else if (kindOfUpdate <= 90) {\n          // delete by id\n          ArrayList<Integer> vals = new ArrayList<>(docIdToVal.values());\n          int val = vals.get(random().nextInt(vals.size()));\n          deleteByQueryAndGetVersion(\"val_i_dvo:\"+val, null);\n          docIdToVal.entrySet().removeIf(integerIntegerEntry -> integerIntegerEntry.getValue() == val);\n        } else {\n          // delete by query\n          ArrayList<Integer> ids = new ArrayList<>(docIdToVal.keySet());\n          int docId = ids.get(random().nextInt(ids.size()));\n          deleteAndGetVersion(String.valueOf(docId), null);\n          docIdToVal.remove(docId);\n        }\n      }\n\n      h.close();\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n      // unblock recovery\n      logReplay.release(Integer.MAX_VALUE);\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertU(commit());\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\"+docIdToVal.size());\n\n      for (Map.Entry<Integer, Integer> entry : docIdToVal.entrySet()) {\n        assertJQ(req(\"q\",\"id:\"+entry.getKey(), \"fl\", \"val_i_dvo\") ,\n            \"/response/numFound==1\",\n            \"/response/docs==[{'val_i_dvo':\"+entry.getValue()+\"}]\");\n      }\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"defa11d88d50ec356d5e7428f1ebc89623e840ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["defa11d88d50ec356d5e7428f1ebc89623e840ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"]},"commit2Childs":{"defa11d88d50ec356d5e7428f1ebc89623e840ac":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["defa11d88d50ec356d5e7428f1ebc89623e840ac"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}