{"path":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testMergeImpacts().mjava","commits":[{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testMergeImpacts().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeImpacts() throws IOException {\n    DummyImpactsEnum impacts1 = new DummyImpactsEnum();\n    impacts1.reset(42,\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) },\n          new Impact[] { new Impact(5, 11), new Impact(8, 13),  new Impact(12, 14) }\n        },\n        new int[] {\n            110,\n            945\n        });\n    DummyImpactsEnum impacts2 = new DummyImpactsEnum();\n    impacts2.reset(45,\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(6, 13) },\n          new Impact[] { new Impact(3, 9), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            90,\n            1000\n        });\n\n    ImpactsSource mergedImpacts = SynonymQuery.mergeImpacts(new ImpactsEnum[] { impacts1, impacts2 });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(5, 10), new Impact(7, 12), new Impact(14, 13) },\n          new Impact[] { new Impact(Integer.MAX_VALUE, 1) }\n        },\n        new int[] {\n            90,\n            1000\n        },\n        mergedImpacts.getImpacts());\n\n    // docID is > the first doIdUpTo of impacts1\n    impacts2.reset(112,\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(6, 13) },\n          new Impact[] { new Impact(3, 9), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            150,\n            1000\n        });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) }, // same as impacts1\n          new Impact[] { new Impact(3, 9), new Impact(10, 11), new Impact(15, 13), new Impact(19, 14) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testMergeImpacts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#testMergeImpacts().mjava","sourceNew":"  public void testMergeImpacts() throws IOException {\n    DummyImpactsEnum impacts1 = new DummyImpactsEnum();\n    impacts1.reset(42,\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) },\n          new Impact[] { new Impact(5, 11), new Impact(8, 13),  new Impact(12, 14) }\n        },\n        new int[] {\n            110,\n            945\n        });\n    DummyImpactsEnum impacts2 = new DummyImpactsEnum();\n    impacts2.reset(45,\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(6, 13) },\n          new Impact[] { new Impact(3, 9), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            90,\n            1000\n        });\n\n    ImpactsSource mergedImpacts = SynonymQuery.mergeImpacts(new ImpactsEnum[] { impacts1, impacts2 }, new float[] { 1f, 1f });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(5, 10), new Impact(7, 12), new Impact(14, 13) },\n          new Impact[] { new Impact(Integer.MAX_VALUE, 1) }\n        },\n        new int[] {\n            90,\n            1000\n        },\n        mergedImpacts.getImpacts());\n\n    ImpactsSource mergedBoostedImpacts = SynonymQuery.mergeImpacts(new ImpactsEnum[] { impacts1, impacts2 }, new float[] { 0.3f, 0.9f });\n    assertEquals(\n        new Impact[][] {\n            new Impact[] { new Impact(3, 10), new Impact(4, 12), new Impact(9, 13) },\n            new Impact[] { new Impact(Integer.MAX_VALUE, 1) }\n        },\n        new int[] {\n            90,\n            1000\n        },\n        mergedBoostedImpacts.getImpacts());\n\n    // docID is > the first doIdUpTo of impacts1\n    impacts2.reset(112,\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(6, 13) },\n          new Impact[] { new Impact(3, 9), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            150,\n            1000\n        });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) }, // same as impacts1\n          new Impact[] { new Impact(3, 9), new Impact(10, 11), new Impact(15, 13), new Impact(19, 14) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n\n    assertEquals(\n        new Impact[][] {\n            new Impact[] { new Impact(1, 10), new Impact(2, 12), new Impact(3, 13) }, // same as impacts1*boost\n            new Impact[] { new Impact(3, 9), new Impact(7, 11), new Impact(10, 13), new Impact(11, 14) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedBoostedImpacts.getImpacts());\n  }\n\n","sourceOld":"  public void testMergeImpacts() throws IOException {\n    DummyImpactsEnum impacts1 = new DummyImpactsEnum();\n    impacts1.reset(42,\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) },\n          new Impact[] { new Impact(5, 11), new Impact(8, 13),  new Impact(12, 14) }\n        },\n        new int[] {\n            110,\n            945\n        });\n    DummyImpactsEnum impacts2 = new DummyImpactsEnum();\n    impacts2.reset(45,\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(6, 13) },\n          new Impact[] { new Impact(3, 9), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            90,\n            1000\n        });\n\n    ImpactsSource mergedImpacts = SynonymQuery.mergeImpacts(new ImpactsEnum[] { impacts1, impacts2 });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(5, 10), new Impact(7, 12), new Impact(14, 13) },\n          new Impact[] { new Impact(Integer.MAX_VALUE, 1) }\n        },\n        new int[] {\n            90,\n            1000\n        },\n        mergedImpacts.getImpacts());\n\n    // docID is > the first doIdUpTo of impacts1\n    impacts2.reset(112,\n        new Impact[][] {\n          new Impact[] { new Impact(2, 10), new Impact(6, 13) },\n          new Impact[] { new Impact(3, 9), new Impact(5, 11), new Impact(7, 13) }\n        },\n        new int[] {\n            150,\n            1000\n        });\n    assertEquals(\n        new Impact[][] {\n          new Impact[] { new Impact(3, 10), new Impact(5, 12), new Impact(8, 13) }, // same as impacts1\n          new Impact[] { new Impact(3, 9), new Impact(10, 11), new Impact(15, 13), new Impact(19, 14) }\n        },\n        new int[] {\n            110,\n            945\n        },\n        mergedImpacts.getImpacts());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["2f2c13220a828a78007cedb364e22dd8986ed650"],"2f2c13220a828a78007cedb364e22dd8986ed650":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f2c13220a828a78007cedb364e22dd8986ed650"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f2c13220a828a78007cedb364e22dd8986ed650":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}