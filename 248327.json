{"path":"lucene/facet/src/test/org/apache/lucene/facet/collections/IntToIntMapTest#test4().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/IntToIntMapTest#test4().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToIntMapTest#test4().mjava","sourceNew":"  // now with random data.. and lots of it\n  @Test\n  public void test4() {\n    IntToIntMap map = new IntToIntMap();\n    int length = ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS;\n    \n    // for a repeatable random sequence\n    long seed = random().nextLong();\n    Random random = new Random(seed);\n    \n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      map.put(i*128, value);\n    }\n\n    assertEquals(length, map.size());\n\n    // now repeat\n    random.setSeed(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      \n      assertTrue(map.containsValue(value));\n      assertTrue(map.containsKey(i*128));\n      assertEquals(value, map.remove(i*128));\n    }\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  // now with random data.. and lots of it\n  @Test\n  public void test4() {\n    IntToIntMap map = new IntToIntMap();\n    int length = ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS;\n    \n    // for a repeatable random sequence\n    long seed = random().nextLong();\n    Random random = new Random(seed);\n    \n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      map.put(i*128, value);\n    }\n\n    assertEquals(length, map.size());\n\n    // now repeat\n    random.setSeed(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      \n      assertTrue(map.containsValue(value));\n      assertTrue(map.containsKey(i*128));\n      assertEquals(value, map.remove(i*128));\n    }\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/collections/IntToIntMapTest#test4().mjava","sourceNew":null,"sourceOld":"  // now with random data.. and lots of it\n  @Test\n  public void test4() {\n    IntToIntMap map = new IntToIntMap();\n    int length = ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS;\n    \n    // for a repeatable random sequence\n    long seed = random().nextLong();\n    Random random = new Random(seed);\n    \n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      map.put(i*128, value);\n    }\n\n    assertEquals(length, map.size());\n\n    // now repeat\n    random.setSeed(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      \n      assertTrue(map.containsValue(value));\n      assertTrue(map.containsKey(i*128));\n      assertEquals(value, map.remove(i*128));\n    }\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/collections/IntToIntMapTest#test4().mjava","sourceNew":null,"sourceOld":"  // now with random data.. and lots of it\n  @Test\n  public void test4() {\n    IntToIntMap map = new IntToIntMap();\n    int length = ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS;\n    \n    // for a repeatable random sequence\n    long seed = random().nextLong();\n    Random random = new Random(seed);\n    \n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      map.put(i*128, value);\n    }\n\n    assertEquals(length, map.size());\n\n    // now repeat\n    random.setSeed(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      \n      assertTrue(map.containsValue(value));\n      assertTrue(map.containsKey(i*128));\n      assertEquals(value, map.remove(i*128));\n    }\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}