{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClonedStreamsClosing().mjava","commits":[{"id":"f54234b89a8a52b1cb430f514dc8e8b6e15790b6","date":1412368217,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClonedStreamsClosing().mjava","pathOld":"/dev/null","sourceNew":"  public void testClonedStreamsClosing() throws IOException {\n    Directory dir = newDirectory();\n    Directory cr = createLargeCFS(dir);\n    \n    // basic clone\n    IndexInput expected = dir.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput one = cr.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput two = one.clone();\n    \n    assertSameStreams(\"basic clone one\", expected, one);\n    expected.seek(0);\n    assertSameStreams(\"basic clone two\", expected, two);\n    \n    // Now close the first stream\n    one.close();\n    \n    // The following should really fail since we couldn't expect to\n    // access a file once close has been called on it (regardless of\n    // buffering and/or clone magic)\n    expected.seek(0);\n    two.seek(0);\n    assertSameStreams(\"basic clone two/2\", expected, two);\n    \n    // Now close the compound reader\n    cr.close();\n    \n    // The following may also fail since the compound stream is closed\n    expected.seek(0);\n    two.seek(0);\n    //assertSameStreams(\"basic clone two/3\", expected, two);\n    \n    // Now close the second clone\n    two.close();\n    expected.seek(0);\n    //assertSameStreams(\"basic clone two/4\", expected, two);\n    \n    expected.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClonedStreamsClosing().mjava","pathOld":"/dev/null","sourceNew":"  public void testClonedStreamsClosing() throws IOException {\n    Directory dir = newDirectory();\n    Directory cr = createLargeCFS(dir);\n    \n    // basic clone\n    IndexInput expected = dir.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput one = cr.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput two = one.clone();\n    \n    assertSameStreams(\"basic clone one\", expected, one);\n    expected.seek(0);\n    assertSameStreams(\"basic clone two\", expected, two);\n    \n    // Now close the first stream\n    one.close();\n    \n    // The following should really fail since we couldn't expect to\n    // access a file once close has been called on it (regardless of\n    // buffering and/or clone magic)\n    expected.seek(0);\n    two.seek(0);\n    assertSameStreams(\"basic clone two/2\", expected, two);\n    \n    // Now close the compound reader\n    cr.close();\n    \n    // The following may also fail since the compound stream is closed\n    expected.seek(0);\n    two.seek(0);\n    //assertSameStreams(\"basic clone two/3\", expected, two);\n    \n    // Now close the second clone\n    two.close();\n    expected.seek(0);\n    //assertSameStreams(\"basic clone two/4\", expected, two);\n    \n    expected.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"887a6caa84b7851c4aeb90f9377a6b8ce1d040dd","date":1412603086,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClonedStreamsClosing().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClonedStreamsClosing().mjava","sourceNew":"  public void testClonedStreamsClosing() throws IOException {\n    Directory dir = newDirectory();\n    Directory cr = createLargeCFS(dir);\n    \n    // basic clone\n    IndexInput expected = dir.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput one = cr.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput two = one.clone();\n    \n    assertSameStreams(\"basic clone one\", expected, one);\n    expected.seek(0);\n    assertSameStreams(\"basic clone two\", expected, two);\n    \n    // Now close the compound reader\n    cr.close();\n    expected.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClonedStreamsClosing() throws IOException {\n    Directory dir = newDirectory();\n    Directory cr = createLargeCFS(dir);\n    \n    // basic clone\n    IndexInput expected = dir.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput one = cr.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput two = one.clone();\n    \n    assertSameStreams(\"basic clone one\", expected, one);\n    expected.seek(0);\n    assertSameStreams(\"basic clone two\", expected, two);\n    \n    // Now close the first stream\n    one.close();\n    \n    // The following should really fail since we couldn't expect to\n    // access a file once close has been called on it (regardless of\n    // buffering and/or clone magic)\n    expected.seek(0);\n    two.seek(0);\n    assertSameStreams(\"basic clone two/2\", expected, two);\n    \n    // Now close the compound reader\n    cr.close();\n    \n    // The following may also fail since the compound stream is closed\n    expected.seek(0);\n    two.seek(0);\n    //assertSameStreams(\"basic clone two/3\", expected, two);\n    \n    // Now close the second clone\n    two.close();\n    expected.seek(0);\n    //assertSameStreams(\"basic clone two/4\", expected, two);\n    \n    expected.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClonedStreamsClosing().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClonedStreamsClosing().mjava","sourceNew":"  public void testClonedStreamsClosing() throws IOException {\n    Directory dir = newDirectory();\n    Directory cr = createLargeCFS(dir);\n    \n    // basic clone\n    IndexInput expected = dir.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput one = cr.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput two = one.clone();\n    \n    assertSameStreams(\"basic clone one\", expected, one);\n    expected.seek(0);\n    assertSameStreams(\"basic clone two\", expected, two);\n    \n    // Now close the compound reader\n    cr.close();\n    expected.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testClonedStreamsClosing() throws IOException {\n    Directory dir = newDirectory();\n    Directory cr = createLargeCFS(dir);\n    \n    // basic clone\n    IndexInput expected = dir.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput one = cr.openInput(\"_123.f11\", newIOContext(random()));\n    \n    IndexInput two = one.clone();\n    \n    assertSameStreams(\"basic clone one\", expected, one);\n    expected.seek(0);\n    assertSameStreams(\"basic clone two\", expected, two);\n    \n    // Now close the first stream\n    one.close();\n    \n    // The following should really fail since we couldn't expect to\n    // access a file once close has been called on it (regardless of\n    // buffering and/or clone magic)\n    expected.seek(0);\n    two.seek(0);\n    assertSameStreams(\"basic clone two/2\", expected, two);\n    \n    // Now close the compound reader\n    cr.close();\n    \n    // The following may also fail since the compound stream is closed\n    expected.seek(0);\n    two.seek(0);\n    //assertSameStreams(\"basic clone two/3\", expected, two);\n    \n    // Now close the second clone\n    two.close();\n    expected.seek(0);\n    //assertSameStreams(\"basic clone two/4\", expected, two);\n    \n    expected.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["f54234b89a8a52b1cb430f514dc8e8b6e15790b6","887a6caa84b7851c4aeb90f9377a6b8ce1d040dd"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f54234b89a8a52b1cb430f514dc8e8b6e15790b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["887a6caa84b7851c4aeb90f9377a6b8ce1d040dd"],"887a6caa84b7851c4aeb90f9377a6b8ce1d040dd":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f54234b89a8a52b1cb430f514dc8e8b6e15790b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"9bb9a29a5e71a90295f175df8919802993142c9a":["887a6caa84b7851c4aeb90f9377a6b8ce1d040dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","f54234b89a8a52b1cb430f514dc8e8b6e15790b6"],"f54234b89a8a52b1cb430f514dc8e8b6e15790b6":["55980207f1977bd1463465de1659b821347e2fa8","9bb9a29a5e71a90295f175df8919802993142c9a"],"887a6caa84b7851c4aeb90f9377a6b8ce1d040dd":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}