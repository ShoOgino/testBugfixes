{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory,CodecProvider).mjava","commits":[{"id":"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6","date":1288888250,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @param codecs the {@link CodecProvider} holding all {@link Codec}s required to open the index\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(Directory directory, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return SegmentInfos.readCurrentVersion(directory, codecs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @param codecs the {@link CodecProvider} holding all {@link Codec}s required to open the index\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(Directory directory, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return SegmentInfos.readCurrentVersion(directory, codecs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @param codecs the {@link CodecProvider} holding all {@link Codec}s required to open the index\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(Directory directory, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return SegmentInfos.readCurrentVersion(directory, codecs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory,CodecProvider).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @param codecs the {@link CodecProvider} holding all {@link Codec}s required to open the index\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(Directory directory, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return SegmentInfos.readCurrentVersion(directory, codecs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"85a883878c0af761245ab048babc63d099f835f3":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["7b91922b55d15444d554721b352861d028eb8278","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}