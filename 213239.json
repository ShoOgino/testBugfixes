{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    AutoScalingSnitch snitch = new AutoScalingSnitch();\n    ClientSnitchCtx ctx = new ClientSnitchCtx(null, node, snitchSession, solrClient);\n    snitch.getTags(node, new HashSet<>(tags), ctx);\n    nodeVsTags.put(node, ctx.getTags());\n    return ctx.getTags();\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    AutoScalingSnitch snitch = new AutoScalingSnitch();\n    ClientSnitchCtx ctx = new ClientSnitchCtx(null, node, snitchSession, solrClient);\n    snitch.getTags(node, new HashSet<>(tags), ctx);\n    nodeVsTags.put(node, ctx.getTags());\n    return ctx.getTags();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    Map<String, Object> tagVals = fetchTagValues(node, tags);\n    nodeVsTags.put(node, tagVals);\n    return tagVals;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    AutoScalingSnitch snitch = new AutoScalingSnitch();\n    ClientSnitchCtx ctx = new ClientSnitchCtx(null, node, snitchSession, solrClient);\n    snitch.getTags(node, new HashSet<>(tags), ctx);\n    nodeVsTags.put(node, ctx.getTags());\n    return ctx.getTags();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    Map<String, Object> tagVals = fetchTagValues(node, tags);\n    nodeVsTags.put(node, tagVals);\n    return tagVals;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    AutoScalingSnitch snitch = new AutoScalingSnitch();\n    ClientSnitchCtx ctx = new ClientSnitchCtx(null, node, snitchSession, solrClient);\n    snitch.getTags(node, new HashSet<>(tags), ctx);\n    nodeVsTags.put(node, ctx.getTags());\n    return ctx.getTags();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    Map<String, Object> tagVals = fetchTagValues(node, tags);\n    nodeVsTags.put(node, tagVals);\n    return tagVals;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    AutoScalingSnitch snitch = new AutoScalingSnitch();\n    ClientSnitchCtx ctx = new ClientSnitchCtx(null, node, snitchSession, solrClient);\n    snitch.getTags(node, new HashSet<>(tags), ctx);\n    nodeVsTags.put(node, ctx.getTags());\n    return ctx.getTags();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    Map<String, Object> tagVals = fetchTagValues(node, tags);\n    nodeVsTags.put(node, tagVals);\n    if (tags.contains(WITH_COLLECTION.tagName)) {\n      tagVals.put(WITH_COLLECTION.tagName, withCollectionsMap);\n    }\n    return tagVals;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    Map<String, Object> tagVals = fetchTagValues(node, tags);\n    nodeVsTags.put(node, tagVals);\n    return tagVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    Map<String, Object> tagVals = fetchTagValues(node, tags);\n    nodeVsTags.put(node, tagVals);\n    return tagVals;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    Map<String, Object> tagVals = fetchTagValues(node, tags);\n    nodeVsTags.put(node, tagVals);\n    if (tags.contains(WITH_COLLECTION.tagName)) {\n      tagVals.put(WITH_COLLECTION.tagName, withCollectionsMap);\n    }\n    return tagVals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","7d6bec22994bec86702ad05304ae983f7be5b5a7"],"3f504512a03d978990cbff30db0522b354e846db":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"27639bb5e041490ce599065875dd2f6d8beef62a":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7d6bec22994bec86702ad05304ae983f7be5b5a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27639bb5e041490ce599065875dd2f6d8beef62a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"27639bb5e041490ce599065875dd2f6d8beef62a":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}