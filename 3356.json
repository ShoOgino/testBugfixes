{"path":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","commits":[{"id":"4bf528aa2b9571ce1ec892ecf726201ef1e404e3","date":1288732150,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"/dev/null","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int docsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(groupOffset, Math.max(0, ids.length - groupOffset), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"/dev/null","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int docsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(groupOffset, Math.max(0, ids.length - groupOffset), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e368cad6a1cc3992f44375801ea528f49b542e","date":1290206535,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int docsToCollect = getMax(groupOffset, docsPerGroup, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(groupOffset, Math.max(0, ids.length - groupOffset), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int docsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(groupOffset, Math.max(0, ids.length - groupOffset), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c32d2a50662592e12dae8ea10960cce611c7ba1c","date":1290627254,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (main) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int docsToCollect = getMax(groupOffset, docsPerGroup, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(groupOffset, Math.max(0, ids.length - groupOffset), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c800a92bdddc053fba2b1b33e434f7536a2daae1","date":1290628554,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (main) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int docsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(groupOffset, Math.max(0, ids.length - groupOffset), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"/dev/null","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b7427b76f5f2996bdf5245fa6096ce44bcd5af","date":1296426382,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, Math.max(docsToCollect,1));  // 0 isn't supported as a valid value\n      int docsCollected = Math.min(docsToCollect, topDocs.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, Math.max(docsToCollect,1));  // 0 isn't supported as a valid value\n      int docsCollected = Math.min(docsToCollect, topDocs.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, Math.max(docsToCollect,1));  // 0 isn't supported as a valid value\n      int docsCollected = Math.min(docsToCollect, topDocs.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, docsToCollect);\n\n      int ids[] = new int[topDocs.scoreDocs.length];\n      float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, Math.max(docsToCollect,1));  // 0 isn't supported as a valid value\n      int docsCollected = Math.min(docsToCollect, topDocs.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, Math.max(docsToCollect,1));  // 0 isn't supported as a valid value\n      int docsCollected = Math.min(docsToCollect, topDocs.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4bf528aa2b9571ce1ec892ecf726201ef1e404e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c32d2a50662592e12dae8ea10960cce611c7ba1c":["43e368cad6a1cc3992f44375801ea528f49b542e"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4bf528aa2b9571ce1ec892ecf726201ef1e404e3"],"c800a92bdddc053fba2b1b33e434f7536a2daae1":["c32d2a50662592e12dae8ea10960cce611c7ba1c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c800a92bdddc053fba2b1b33e434f7536a2daae1"],"19b7427b76f5f2996bdf5245fa6096ce44bcd5af":["c800a92bdddc053fba2b1b33e434f7536a2daae1"],"43e368cad6a1cc3992f44375801ea528f49b542e":["4bf528aa2b9571ce1ec892ecf726201ef1e404e3"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["19b7427b76f5f2996bdf5245fa6096ce44bcd5af","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","19b7427b76f5f2996bdf5245fa6096ce44bcd5af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["19b7427b76f5f2996bdf5245fa6096ce44bcd5af"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","19b7427b76f5f2996bdf5245fa6096ce44bcd5af"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","c800a92bdddc053fba2b1b33e434f7536a2daae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"]},"commit2Childs":{"4bf528aa2b9571ce1ec892ecf726201ef1e404e3":["85a883878c0af761245ab048babc63d099f835f3","43e368cad6a1cc3992f44375801ea528f49b542e"],"c32d2a50662592e12dae8ea10960cce611c7ba1c":["c800a92bdddc053fba2b1b33e434f7536a2daae1"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"c800a92bdddc053fba2b1b33e434f7536a2daae1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","19b7427b76f5f2996bdf5245fa6096ce44bcd5af","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"19b7427b76f5f2996bdf5245fa6096ce44bcd5af":["7edfc3f7caa7b49a18fe367692768b33b018e9db","29ef99d61cda9641b6250bf9567329a6e65f901d","9c7cdfe5a1ea9db97faa404b251fa644faa73597","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43e368cad6a1cc3992f44375801ea528f49b542e":["c32d2a50662592e12dae8ea10960cce611c7ba1c"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4bf528aa2b9571ce1ec892ecf726201ef1e404e3","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7edfc3f7caa7b49a18fe367692768b33b018e9db","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}