{"path":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","commits":[{"id":"7cefb6c0aa217f293070c43e7a77682dd56e0a33","date":1416928878,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    checkDeleteAccess(source);\n    super.move(source, target, options);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfed6e3427046e2823569b34ac8a6a100b4e84cc","date":1432671921,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","sourceNew":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    synchronized (openFiles) {\n      checkDeleteAccess(source);\n      super.move(source, target, options);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    checkDeleteAccess(source);\n    super.move(source, target, options);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29de260cd3b302f71077d76bf52667dcbbb475da","date":1526547755,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","sourceNew":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    synchronized (openFiles) {\n      checkDeleteAccess(source);\n      Object key = getKeyOrNull(target);\n      super.move(source, target, options);\n      if (key != null) {\n        Object newKey = getKey(target);\n        if (newKey.equals(key) == false) {\n          // we need to transfer ownership here if we have open files on this file since the getKey() method will\n          // return a different i-node next time we call it with the target path and our onClose method will\n          // trip an assert\n          Integer remove = openFiles.remove(key);\n          if (remove != null) {\n            openFiles.put(newKey, remove);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    synchronized (openFiles) {\n      checkDeleteAccess(source);\n      super.move(source, target, options);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23963f4ff234b34eac505a6e8cb93dc69bc7f693","date":1526628830,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","sourceNew":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    synchronized (openFiles) {\n      checkDeleteAccess(source);\n      Object key = getKeyOrNull(target);\n      super.move(source, target, options);\n      if (key != null) {\n        Object newKey = getKey(target);\n        if (newKey.equals(key) == false) {\n          // we need to transfer ownership here if we have open files on this file since the getKey() method will\n          // return a different i-node next time we call it with the target path and our onClose method will\n          // trip an assert\n          Map<Path, Integer> map = openFiles.get(key);\n          Integer v = map.remove(target);\n          if (v != null) {\n            Map<Path, Integer> pathIntegerMap = openFiles.computeIfAbsent(newKey, k -> new HashMap<>());\n            Integer existingValue = pathIntegerMap.getOrDefault(target, 0);\n            pathIntegerMap.put(target, existingValue + v);\n          }\n          if (map.isEmpty()) {\n            openFiles.remove(key);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    synchronized (openFiles) {\n      checkDeleteAccess(source);\n      Object key = getKeyOrNull(target);\n      super.move(source, target, options);\n      if (key != null) {\n        Object newKey = getKey(target);\n        if (newKey.equals(key) == false) {\n          // we need to transfer ownership here if we have open files on this file since the getKey() method will\n          // return a different i-node next time we call it with the target path and our onClose method will\n          // trip an assert\n          Integer remove = openFiles.remove(key);\n          if (remove != null) {\n            openFiles.put(newKey, remove);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["0b2690f6378bc25dc54af2b4f3e2101977b0991d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b2690f6378bc25dc54af2b4f3e2101977b0991d","date":1526665091,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/WindowsFS#move(Path,Path,CopyOption...).mjava","sourceNew":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    synchronized (openFiles) {\n      checkDeleteAccess(source);\n      Object key = getKeyOrNull(target);\n      super.move(source, target, options);\n      if (key != null) {\n        Object newKey = getKey(target);\n        if (newKey.equals(key) == false) {\n          // we need to transfer ownership here if we have open files on this file since the getKey() method will\n          // return a different i-node next time we call it with the target path and our onClose method will\n          // trip an assert\n          Map<Path, Integer> map = openFiles.get(key);\n          if (map != null) {\n            Integer v = map.remove(target);\n            if (v != null) {\n              Map<Path, Integer> pathIntegerMap = openFiles.computeIfAbsent(newKey, k -> new HashMap<>());\n              Integer existingValue = pathIntegerMap.getOrDefault(target, 0);\n              pathIntegerMap.put(target, existingValue + v);\n            }\n            if (map.isEmpty()) {\n              openFiles.remove(key);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void move(Path source, Path target, CopyOption... options) throws IOException {\n    synchronized (openFiles) {\n      checkDeleteAccess(source);\n      Object key = getKeyOrNull(target);\n      super.move(source, target, options);\n      if (key != null) {\n        Object newKey = getKey(target);\n        if (newKey.equals(key) == false) {\n          // we need to transfer ownership here if we have open files on this file since the getKey() method will\n          // return a different i-node next time we call it with the target path and our onClose method will\n          // trip an assert\n          Map<Path, Integer> map = openFiles.get(key);\n          Integer v = map.remove(target);\n          if (v != null) {\n            Map<Path, Integer> pathIntegerMap = openFiles.computeIfAbsent(newKey, k -> new HashMap<>());\n            Integer existingValue = pathIntegerMap.getOrDefault(target, 0);\n            pathIntegerMap.put(target, existingValue + v);\n          }\n          if (map.isEmpty()) {\n            openFiles.remove(key);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["23963f4ff234b34eac505a6e8cb93dc69bc7f693"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfed6e3427046e2823569b34ac8a6a100b4e84cc":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"0b2690f6378bc25dc54af2b4f3e2101977b0991d":["23963f4ff234b34eac505a6e8cb93dc69bc7f693"],"23963f4ff234b34eac505a6e8cb93dc69bc7f693":["29de260cd3b302f71077d76bf52667dcbbb475da"],"29de260cd3b302f71077d76bf52667dcbbb475da":["bfed6e3427046e2823569b34ac8a6a100b4e84cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b2690f6378bc25dc54af2b4f3e2101977b0991d"]},"commit2Childs":{"bfed6e3427046e2823569b34ac8a6a100b4e84cc":["29de260cd3b302f71077d76bf52667dcbbb475da"],"0b2690f6378bc25dc54af2b4f3e2101977b0991d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23963f4ff234b34eac505a6e8cb93dc69bc7f693":["0b2690f6378bc25dc54af2b4f3e2101977b0991d"],"29de260cd3b302f71077d76bf52667dcbbb475da":["23963f4ff234b34eac505a6e8cb93dc69bc7f693"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["bfed6e3427046e2823569b34ac8a6a100b4e84cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}