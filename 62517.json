{"path":"lucene/core/src/java/org/apache/lucene/util/IOUtils#rethrowAlways(Throwable).mjava","commits":[{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#rethrowAlways(Throwable).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This utility method takes a previously caught (non-null)\n   * {@code Throwable} and rethrows either the original argument\n   * if it was a subclass of the {@code IOException} or an \n   * {@code RuntimeException} with the cause set to the argument.\n   * \n   * <p>This method <strong>never returns any value</strong>, even though it declares\n   * a return value of type {@link Error}. The return value declaration\n   * is very useful to let the compiler know that the code path following\n   * the invocation of this method is unreachable. So in most cases the\n   * invocation of this method will be guarded by an {@code if} and\n   * used together with a {@code throw} statement, as in:\n   * </p>\n   * <pre>{@code\n   *   if (t != null) throw IOUtils.rethrowAlways(t)\n   * }\n   * </pre>\n   * \n   * @param th The throwable to rethrow, <strong>must not be null</strong>.\n   * @return This method always results in an exception, it never returns any value. \n   *         See method documentation for detailsa and usage example.\n   * @throws IOException if the argument was an instance of IOException\n   * @throws RuntimeException with the {@link RuntimeException#getCause()} set\n   *         to the argument, if it was not an instance of IOException. \n   */\n  public static Error rethrowAlways(Throwable th) throws IOException, RuntimeException {\n    if (th == null) {\n      throw new AssertionError(\"rethrow argument must not be null.\");\n    }\n\n    if (th instanceof IOException) {\n      throw (IOException) th;\n    }\n\n    if (th instanceof RuntimeException) {\n      throw (RuntimeException) th;\n    }\n\n    if (th instanceof Error) {\n      throw (Error) th;\n    }\n\n    throw new RuntimeException(th);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#rethrowAlways(Throwable).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This utility method takes a previously caught (non-null)\n   * {@code Throwable} and rethrows either the original argument\n   * if it was a subclass of the {@code IOException} or an \n   * {@code RuntimeException} with the cause set to the argument.\n   * \n   * <p>This method <strong>never returns any value</strong>, even though it declares\n   * a return value of type {@link Error}. The return value declaration\n   * is very useful to let the compiler know that the code path following\n   * the invocation of this method is unreachable. So in most cases the\n   * invocation of this method will be guarded by an {@code if} and\n   * used together with a {@code throw} statement, as in:\n   * </p>\n   * <pre>{@code\n   *   if (t != null) throw IOUtils.rethrowAlways(t)\n   * }\n   * </pre>\n   * \n   * @param th The throwable to rethrow, <strong>must not be null</strong>.\n   * @return This method always results in an exception, it never returns any value. \n   *         See method documentation for detailsa and usage example.\n   * @throws IOException if the argument was an instance of IOException\n   * @throws RuntimeException with the {@link RuntimeException#getCause()} set\n   *         to the argument, if it was not an instance of IOException. \n   */\n  public static Error rethrowAlways(Throwable th) throws IOException, RuntimeException {\n    if (th == null) {\n      throw new AssertionError(\"rethrow argument must not be null.\");\n    }\n\n    if (th instanceof IOException) {\n      throw (IOException) th;\n    }\n\n    if (th instanceof RuntimeException) {\n      throw (RuntimeException) th;\n    }\n\n    if (th instanceof Error) {\n      throw (Error) th;\n    }\n\n    throw new RuntimeException(th);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#rethrowAlways(Throwable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#rethrowAlways(Throwable).mjava","sourceNew":"  /**\n   * This utility method takes a previously caught (non-null)\n   * {@code Throwable} and rethrows either the original argument\n   * if it was a subclass of the {@code IOException} or an \n   * {@code RuntimeException} with the cause set to the argument.\n   * \n   * <p>This method <strong>never returns any value</strong>, even though it declares\n   * a return value of type {@link Error}. The return value declaration\n   * is very useful to let the compiler know that the code path following\n   * the invocation of this method is unreachable. So in most cases the\n   * invocation of this method will be guarded by an {@code if} and\n   * used together with a {@code throw} statement, as in:\n   * </p>\n   * <pre>{@code\n   *   if (t != null) throw IOUtils.rethrowAlways(t)\n   * }\n   * </pre>\n   * \n   * @param th The throwable to rethrow, <strong>must not be null</strong>.\n   * @return This method always results in an exception, it never returns any value. \n   *         See method documentation for details and usage example.\n   * @throws IOException if the argument was an instance of IOException\n   * @throws RuntimeException with the {@link RuntimeException#getCause()} set\n   *         to the argument, if it was not an instance of IOException. \n   */\n  public static Error rethrowAlways(Throwable th) throws IOException, RuntimeException {\n    if (th == null) {\n      throw new AssertionError(\"rethrow argument must not be null.\");\n    }\n\n    if (th instanceof IOException) {\n      throw (IOException) th;\n    }\n\n    if (th instanceof RuntimeException) {\n      throw (RuntimeException) th;\n    }\n\n    if (th instanceof Error) {\n      throw (Error) th;\n    }\n\n    throw new RuntimeException(th);\n  }\n\n","sourceOld":"  /**\n   * This utility method takes a previously caught (non-null)\n   * {@code Throwable} and rethrows either the original argument\n   * if it was a subclass of the {@code IOException} or an \n   * {@code RuntimeException} with the cause set to the argument.\n   * \n   * <p>This method <strong>never returns any value</strong>, even though it declares\n   * a return value of type {@link Error}. The return value declaration\n   * is very useful to let the compiler know that the code path following\n   * the invocation of this method is unreachable. So in most cases the\n   * invocation of this method will be guarded by an {@code if} and\n   * used together with a {@code throw} statement, as in:\n   * </p>\n   * <pre>{@code\n   *   if (t != null) throw IOUtils.rethrowAlways(t)\n   * }\n   * </pre>\n   * \n   * @param th The throwable to rethrow, <strong>must not be null</strong>.\n   * @return This method always results in an exception, it never returns any value. \n   *         See method documentation for detailsa and usage example.\n   * @throws IOException if the argument was an instance of IOException\n   * @throws RuntimeException with the {@link RuntimeException#getCause()} set\n   *         to the argument, if it was not an instance of IOException. \n   */\n  public static Error rethrowAlways(Throwable th) throws IOException, RuntimeException {\n    if (th == null) {\n      throw new AssertionError(\"rethrow argument must not be null.\");\n    }\n\n    if (th instanceof IOException) {\n      throw (IOException) th;\n    }\n\n    if (th instanceof RuntimeException) {\n      throw (RuntimeException) th;\n    }\n\n    if (th instanceof Error) {\n      throw (Error) th;\n    }\n\n    throw new RuntimeException(th);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","c9f94c392daa8f5708186bede16c84eafad4cdd2"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}