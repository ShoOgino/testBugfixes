{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,AtomicReference[PolicyHelper.SessionWrapper]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n         String collectionName, ZkNodeProps message, AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    boolean usePolicyFramework = CloudUtil.usePolicyFramework(collection, cloudManager);\n    List<ReplicaPosition> positions;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(cloudManager,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM),\n          collection.getName(),\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, totalReplicas,\n          createNodeSetStr, cloudManager);\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n         String collectionName, ZkNodeProps message, AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    boolean usePolicyFramework = CloudUtil.usePolicyFramework(collection, cloudManager);\n    List<ReplicaPosition> positions;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(cloudManager,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n          collection.getName(),\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collection.getName(), sliceName, totalReplicas,\n          createNodeSetStr, cloudManager);\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n         String collectionName, ZkNodeProps message, AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    boolean usePolicyFramework = CloudUtil.usePolicyFramework(collection, cloudManager);\n    List<ReplicaPosition> positions;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(cloudManager,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM),\n          collection.getName(),\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, totalReplicas,\n          createNodeSetStr, cloudManager);\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n         String collectionName, ZkNodeProps message, AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    boolean usePolicyFramework = CloudUtil.usePolicyFramework(collection, cloudManager);\n    List<ReplicaPosition> positions;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(cloudManager,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM),\n          collection.getName(),\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, totalReplicas,\n          createNodeSetStr, cloudManager);\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n         String collectionName, ZkNodeProps message, AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    boolean usePolicyFramework = CloudUtil.usePolicyFramework(collection, cloudManager);\n    List<ReplicaPosition> positions;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(cloudManager,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM),\n          collection.getName(),\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, totalReplicas,\n          createNodeSetStr, cloudManager);\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["b94236357aaa22b76c10629851fe4e376e0cea82","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deea3439de4f487ae553317e50d5d641ca386374":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}