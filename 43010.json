{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","commits":[{"id":"1e89ac7460543b39f8de96654421e96790abaa26","date":1239329386,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","pathOld":"/dev/null","sourceNew":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = null;\n        if (mode == SPAN) {\n          tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n              new StringReader(text)));\n          scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME,\n              (CachingTokenFilter) tokenStream, expandMT);\n        } else if (mode == STANDARD) {\n          scorer = new QueryScorer(query);\n          tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        if (mode == SPAN) {\n          ((CachingTokenFilter) tokenStream).reset();\n        }\n        highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","sourceNew":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = null;\n        if (mode == SPAN) {\n          tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n              new StringReader(text)));\n          scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME,\n              (CachingTokenFilter) tokenStream, expandMT);\n        } else if (mode == STANDARD) {\n          scorer = new QueryScorer(query);\n          tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        if (mode == SPAN) {\n          ((CachingTokenFilter) tokenStream).reset();\n        }\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = null;\n        if (mode == SPAN) {\n          tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n              new StringReader(text)));\n          scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME,\n              (CachingTokenFilter) tokenStream, expandMT);\n        } else if (mode == STANDARD) {\n          scorer = new QueryScorer(query);\n          tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        if (mode == SPAN) {\n          ((CachingTokenFilter) tokenStream).reset();\n        }\n        highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","sourceNew":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = null;\n        if (mode == SPAN) {\n          tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n              new StringReader(text)));\n          scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n        } else if (mode == STANDARD) {\n          scorer = new QueryTermScorer(query);\n          tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = null;\n        if (mode == SPAN) {\n          tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n              new StringReader(text)));\n          scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME,\n              (CachingTokenFilter) tokenStream, expandMT);\n        } else if (mode == STANDARD) {\n          scorer = new QueryScorer(query);\n          tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        if (mode == SPAN) {\n          ((CachingTokenFilter) tokenStream).reset();\n        }\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","sourceNew":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = null;\n        if (mode == SPAN) {\n          tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n              new StringReader(text)));\n          scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n        } else if (mode == STANDARD) {\n          scorer = new QueryTermScorer(query);\n          tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","sourceNew":"    void doStandardHighlights(Analyzer analyzer, IndexSearcher searcher, TopDocs hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.totalHits; i++) {\n        String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["1e89ac7460543b39f8de96654421e96790abaa26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e89ac7460543b39f8de96654421e96790abaa26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e89ac7460543b39f8de96654421e96790abaa26"],"1e89ac7460543b39f8de96654421e96790abaa26":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}