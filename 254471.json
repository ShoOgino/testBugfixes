{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/URLNormalizer#normalize(URL,HostResolver).mjava","commits":[{"id":"59bec3a271d0f273dcc64f3eea487d7726d6f765","date":1035300266,"type":1,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/URLNormalizer#normalize(URL,HostResolver).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/URLNormalizer#normalize(URL,HostManager).mjava","sourceNew":"    /**\n     * Description of the Method\n     *\n     * @param u                          Description of the Parameter\n     * @return                           Description of the Return Value\n     * @exception IOException            Description of the Exception\n     * @exception MalformedURLException  Description of the Exception\n     */\n    public static URL normalize(URL u, HostResolver hostResolver)\n    {\n        if(u == null)\n        {\n            return null;\n        }\n        if (u.getProtocol().equals(\"http\"))\n        {\n            try\n            {\n                int port = u.getPort();\n                /*URL url =*/\n                return  new URL(u.getProtocol(), normalizeHost(hostResolver, u.getHost()), port == 80 ? -1 : port, normalizePath(u.getFile()));\n                /*if(!u.equals(url))\n                {\n                    System.out.println(u.toExternalForm() + \" -> \" + url.toExternalForm());\n                }\n                return url;*/\n            }\n            catch(MalformedURLException e)\n            {\n                System.out.println(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n                throw new java.lang.InternalError(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n            }\n            catch(IOException e)\n            {\n                System.out.println(\"assertion failed: IOException in URLNormalizer.normalize()\");\n                throw new java.lang.InternalError(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n            }\n\n            //return url\n        }\n        else\n        {\n            return u;\n        }\n    }\n\n","sourceOld":"    /**\n     * Description of the Method\n     *\n     * @param u                          Description of the Parameter\n     * @return                           Description of the Return Value\n     * @exception IOException            Description of the Exception\n     * @exception MalformedURLException  Description of the Exception\n     */\n    public static URL normalize(URL u, HostManager hostManager)\n    {\n        if (u.getProtocol().equals(\"http\"))\n        {\n            try\n            {\n                int port = u.getPort();\n                /*URL url =*/\n                return  new URL(u.getProtocol(), normalizeHost(hostManager, u.getHost()), port == 80 ? -1 : port, normalizePath(u.getFile()));\n                /*if(!u.equals(url))\n                {\n                    System.out.println(u.toExternalForm() + \" -> \" + url.toExternalForm());\n                }\n                return url;*/\n            }\n            catch(MalformedURLException e)\n            {\n                System.out.println(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n                throw new java.lang.InternalError(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n            }\n            catch(IOException e)\n            {\n                System.out.println(\"assertion failed: IOException in URLNormalizer.normalize()\");\n                throw new java.lang.InternalError(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n            }\n\n            //return url\n        }\n        else\n        {\n            return u;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/URLNormalizer#normalize(URL,HostResolver).mjava","sourceNew":null,"sourceOld":"    /**\n     * Description of the Method\n     *\n     * @param u                          Description of the Parameter\n     * @return                           Description of the Return Value\n     * @exception IOException            Description of the Exception\n     * @exception MalformedURLException  Description of the Exception\n     */\n    public static URL normalize(URL u, HostResolver hostResolver)\n    {\n        if(u == null)\n        {\n            return null;\n        }\n        if (u.getProtocol().equals(\"http\"))\n        {\n            try\n            {\n                int port = u.getPort();\n                /*URL url =*/\n                return  new URL(u.getProtocol(), normalizeHost(hostResolver, u.getHost()), port == 80 ? -1 : port, normalizePath(u.getFile()));\n                /*if(!u.equals(url))\n                {\n                    System.out.println(u.toExternalForm() + \" -> \" + url.toExternalForm());\n                }\n                return url;*/\n            }\n            catch(MalformedURLException e)\n            {\n                System.out.println(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n                throw new java.lang.InternalError(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n            }\n            catch(IOException e)\n            {\n                System.out.println(\"assertion failed: IOException in URLNormalizer.normalize()\");\n                throw new java.lang.InternalError(\"assertion failed: MalformedURLException in URLNormalizer.normalize()\");\n            }\n\n            //return url\n        }\n        else\n        {\n            return u;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59bec3a271d0f273dcc64f3eea487d7726d6f765":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["59bec3a271d0f273dcc64f3eea487d7726d6f765"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"59bec3a271d0f273dcc64f3eea487d7726d6f765":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59bec3a271d0f273dcc64f3eea487d7726d6f765"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}