{"path":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores);\n      final Weight contextWeight = searcher.createWeight(context, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float boost) {\n          matchWeight.normalize(norm, boost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return getCacheHelper(context, matchWeight, contextWeight);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee9b4ce4f719b4add29b7e03f76700b506bedb63","date":1509707319,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return getCacheHelper(context, Arrays.asList(matchWeight, contextWeight));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return getCacheHelper(context, matchWeight, contextWeight);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return getCacheHelper(context, Arrays.asList(matchWeight, contextWeight));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return getCacheHelper(context, Arrays.asList(matchWeight, contextWeight));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return match.createWeight(searcher, scoreMode, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, scoreMode, boost);\n      final Weight contextWeight = searcher.createWeight(context, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n            @Override\n            public float maxScore() {\n              float maxScore = matchScorer.maxScore();\n              if (boost > 1) {\n                maxScore *= boost;\n              }\n              return maxScore;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return match.createWeight(searcher, scoreMode, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, scoreMode, boost);\n      final Weight contextWeight = searcher.createWeight(context, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n            @Override\n            public float maxScore() {\n              float maxScore = matchScorer.maxScore();\n              if (boost > 1) {\n                maxScore *= boost;\n              }\n              return maxScore;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","ee9b4ce4f719b4add29b7e03f76700b506bedb63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"ee9b4ce4f719b4add29b7e03f76700b506bedb63":["706a7a3396c030cc66dda92a0492eb492131c4c0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["ee9b4ce4f719b4add29b7e03f76700b506bedb63"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"ee9b4ce4f719b4add29b7e03f76700b506bedb63":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}