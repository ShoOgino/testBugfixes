{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","commits":[{"id":"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","date":1490757519,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4302dfeb5d01c940f69c48bec27f03ad8828668","date":1490873946,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60481acc5083329d2ffbf27397331a25baad88de","date":1492691547,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n\n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key);\n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n\n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key);\n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45ddee14ecadf18bc50fff428911687afb4745d","date":1560519742,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there are no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n\n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key);\n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n\n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key);\n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":["401b0b7bbdbac0027e5b44890c4131d808ec2c9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there are no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n\n      // loop though each field and add each term+freq to map\n      for (Map.Entry<String, HashMap<String, TermsResponse.Term>> entry : fieldmap.entrySet()) {\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(entry.getKey());\n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        HashMap<String, TermsResponse.Term> termmap = entry.getValue();\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there are no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n\n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key);\n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there are no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n\n      // loop though each field and add each term+freq to map\n      for (Map.Entry<String, HashMap<String, TermsResponse.Term>> entry : fieldmap.entrySet()) {\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(entry.getKey());\n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        HashMap<String, TermsResponse.Term> termmap = entry.getValue();\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there are no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n\n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key);\n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a4302dfeb5d01c940f69c48bec27f03ad8828668","60481acc5083329d2ffbf27397331a25baad88de"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["a45ddee14ecadf18bc50fff428911687afb4745d"],"60481acc5083329d2ffbf27397331a25baad88de":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53"],"a45ddee14ecadf18bc50fff428911687afb4745d":["60481acc5083329d2ffbf27397331a25baad88de"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a45ddee14ecadf18bc50fff428911687afb4745d","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"60481acc5083329d2ffbf27397331a25baad88de":["e9017cf144952056066919f1ebc7897ff9bd71b1","a45ddee14ecadf18bc50fff428911687afb4745d"],"a45ddee14ecadf18bc50fff428911687afb4745d":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["60481acc5083329d2ffbf27397331a25baad88de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","a4302dfeb5d01c940f69c48bec27f03ad8828668"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}