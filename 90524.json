{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#authorize(AuthorizationContext).mjava","commits":[{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#authorize(AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","sourceNew":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (log.isDebugEnabled()) {\n      log.debug(\"Attempting to authorize request to [{}] of type: [{}], associated with collections [{}]\",\n          context.getResource(), context.getRequestType(), collectionRequests);\n    }\n\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      log.debug(\"Authorizing an ADMIN request, checking admin permissions\");\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      log.debug(\"Authorizing collection-aware request, checking perms applicable to specific collection [{}]\",\n          collreq.collectionName);\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n\n    log.debug(\"Authorizing collection-aware request, checking perms applicable to all (*) collections\");\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","sourceOld":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (log.isDebugEnabled()) {\n      log.debug(\"Attempting to authorize request to [{}] of type: [{}], associated with collections [{}]\",\n          context.getResource(), context.getRequestType(), collectionRequests);\n    }\n\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      log.debug(\"Authorizing an ADMIN request, checking admin permissions\");\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      log.debug(\"Authorizing collection-aware request, checking perms applicable to specific collection [{}]\",\n          collreq.collectionName);\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n\n    log.debug(\"Authorizing collection-aware request, checking perms applicable to all (*) collections\");\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8076096f334b0665d0a69a63ee98ac09baad402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8076096f334b0665d0a69a63ee98ac09baad402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}