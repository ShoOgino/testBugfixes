{"path":"solr/core/src/java/org/apache/solr/handler/tagger/OffsetCorrector#spansNonTaggable(int,int).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/OffsetCorrector#spansNonTaggable(int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected boolean spansNonTaggable(int startOff, int endOff) {\n    if (nonTaggableOffsets == null)\n      return false;\n    int idx = Arrays.binarySearch(nonTaggableOffsets.buffer, 0, nonTaggableOffsets.size(), startOff);\n    //if tag start coincides with first or last char of non-taggable span then result is true.\n    // (probably never happens since those characters are actual element markup)\n    if (idx >= 0)\n      return true;\n    idx = -idx - 1;//modify for where we would insert\n    //if idx is odd then our span intersects a non-taggable span; return true\n    if ((idx & 1) == 1)\n      return true;\n    //it's non-taggable if the next non-taggable start span is before our endOff\n    if (idx == nonTaggableOffsets.size())\n      return false;\n    return nonTaggableOffsets.get(idx) < endOff;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/OffsetCorrector#spansNonTaggable(int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected boolean spansNonTaggable(int startOff, int endOff) {\n    if (nonTaggableOffsets == null)\n      return false;\n    int idx = Arrays.binarySearch(nonTaggableOffsets.buffer, 0, nonTaggableOffsets.size(), startOff);\n    //if tag start coincides with first or last char of non-taggable span then result is true.\n    // (probably never happens since those characters are actual element markup)\n    if (idx >= 0)\n      return true;\n    idx = -idx - 1;//modify for where we would insert\n    //if idx is odd then our span intersects a non-taggable span; return true\n    if ((idx & 1) == 1)\n      return true;\n    //it's non-taggable if the next non-taggable start span is before our endOff\n    if (idx == nonTaggableOffsets.size())\n      return false;\n    return nonTaggableOffsets.get(idx) < endOff;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/OffsetCorrector#spansNonTaggable(int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected boolean spansNonTaggable(int startOff, int endOff) {\n    if (nonTaggableOffsets == null)\n      return false;\n    int idx = Arrays.binarySearch(nonTaggableOffsets.buffer, 0, nonTaggableOffsets.size(), startOff);\n    //if tag start coincides with first or last char of non-taggable span then result is true.\n    // (probably never happens since those characters are actual element markup)\n    if (idx >= 0)\n      return true;\n    idx = -idx - 1;//modify for where we would insert\n    //if idx is odd then our span intersects a non-taggable span; return true\n    if ((idx & 1) == 1)\n      return true;\n    //it's non-taggable if the next non-taggable start span is before our endOff\n    if (idx == nonTaggableOffsets.size())\n      return false;\n    return nonTaggableOffsets.get(idx) < endOff;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}