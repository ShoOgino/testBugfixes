{"path":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","commits":[{"id":"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","date":1426252395,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL.substring(0, baseURL.lastIndexOf('/')), randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL.substring(0, baseURL.lastIndexOf('/')), randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL.substring(0, baseURL.lastIndexOf('/')), randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL.substring(0, baseURL.lastIndexOf('/')), randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay?wt=json\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    forAllRestTestHarnesses( new UnaryOperator<RestTestHarness>() {\n      @Override\n      public RestTestHarness apply(RestTestHarness restTestHarness) {\n        try {\n          TestSolrConfigHandler.testForResponseElement(restTestHarness,\n              null,\n              \"/config/overlay\",\n              null,\n              Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n              \"test_s\", 10);\n        } catch (Exception ex) {\n          fail(\"Caught exception: \"+ex);\n        }\n        return restTestHarness;\n      }\n    });\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    for (RestTestHarness restTestHarness : restTestHarnesses) {\n      TestSolrConfigHandler.testForResponseElement(restTestHarness,\n          null,\n          \"/config/overlay\",\n          null,\n          Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n          \"test_s\", 10);\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","date":1532119025,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    forAllRestTestHarnesses( new UnaryOperator<RestTestHarness>() {\n      @Override\n      public RestTestHarness apply(RestTestHarness restTestHarness) {\n        try {\n          TestSolrConfigHandler.testForResponseElement(restTestHarness,\n              null,\n              \"/config/overlay\",\n              null,\n              Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n              \"test_s\", 10);\n        } catch (Exception ex) {\n          fail(\"Caught exception: \"+ex);\n        }\n        return restTestHarness;\n      }\n    });\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    forAllRestTestHarnesses( new UnaryOperator<RestTestHarness>() {\n      @Override\n      public RestTestHarness apply(RestTestHarness restTestHarness) {\n        try {\n          TestSolrConfigHandler.testForResponseElement(restTestHarness,\n              null,\n              \"/config/overlay\",\n              null,\n              Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n              \"test_s\", 10);\n        } catch (Exception ex) {\n          fail(\"Caught exception: \"+ex);\n        }\n        return restTestHarness;\n      }\n    });\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc53359111a5e3782f56300070ab2878ec82cb9","date":1534542016,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    forAllRestTestHarnesses( new UnaryOperator<RestTestHarness>() {\n      @Override\n      public RestTestHarness apply(RestTestHarness restTestHarness) {\n        try {\n          TestSolrConfigHandler.testForResponseElement(restTestHarness,\n              null,\n              \"/config/overlay\",\n              null,\n              Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n              \"test_s\", 10);\n        } catch (Exception ex) {\n          fail(\"Caught exception: \"+ex);\n        }\n        return restTestHarness;\n      }\n    });\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    forAllRestTestHarnesses( new UnaryOperator<RestTestHarness>() {\n      @Override\n      public RestTestHarness apply(RestTestHarness restTestHarness) {\n        try {\n          TestSolrConfigHandler.testForResponseElement(restTestHarness,\n              null,\n              \"/config/overlay\",\n              null,\n              Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n              \"test_s\", 10);\n        } catch (Exception ex) {\n          fail(\"Caught exception: \"+ex);\n        }\n        return restTestHarness;\n      }\n    });\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    forAllRestTestHarnesses(restTestHarness -> {\n      try {\n        TestSolrConfigHandler.testForResponseElement(restTestHarness,\n            null,\n            \"/config/overlay\",\n            null,\n            Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n            \"test_s\", 10);\n      } catch (Exception ex) {\n        fail(\"Caught exception: \"+ex);\n      }\n    });\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    forAllRestTestHarnesses( new UnaryOperator<RestTestHarness>() {\n      @Override\n      public RestTestHarness apply(RestTestHarness restTestHarness) {\n        try {\n          TestSolrConfigHandler.testForResponseElement(restTestHarness,\n              null,\n              \"/config/overlay\",\n              null,\n              Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n              \"test_s\", 10);\n        } catch (Exception ex) {\n          fail(\"Caught exception: \"+ex);\n        }\n        return restTestHarness;\n      }\n    });\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestNamedUpdateProcessors#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n\n    final String solrClientUrl = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(solrClientUrl, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    TestBlobHandler.postAndCheck(cloudClient, baseURL.substring(0, baseURL.lastIndexOf('/')), blobName, TestDynamicLoading.generateZip(RuntimeUrp.class), 1);\n\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    payload = \"{\\n\" +\n        \"'create-updateprocessor' : { 'name' : 'firstFld', 'class': 'solr.FirstFieldValueUpdateProcessorFactory', 'fieldName':'test_s'}, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'test', 'class': 'org.apache.solr.update.processor.RuntimeUrp', 'runtimeLib':true }, \\n\" +\n        \"'create-updateprocessor' : { 'name' : 'maxFld', 'class': 'solr.MaxFieldValueUpdateProcessorFactory', 'fieldName':'mul_s'} \\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    forAllRestTestHarnesses(restTestHarness -> {\n      try {\n        TestSolrConfigHandler.testForResponseElement(restTestHarness,\n            null,\n            \"/config/overlay\",\n            null,\n            Arrays.asList(\"overlay\", \"updateProcessor\", \"firstFld\", \"fieldName\"),\n            \"test_s\", 10);\n      } catch (Exception ex) {\n        fail(\"Caught exception: \"+ex);\n      }\n    });\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"123\");\n    doc.addField(\"test_s\", Arrays.asList(\"one\", \"two\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    randomClient.add(doc);\n    randomClient.commit(true, true);\n    QueryResponse result = randomClient.query(new SolrQuery(\"id:123\"));\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"test_s\")).size());\n    assertEquals(2, ((Collection) result.getResults().get(0).getFieldValues(\"mul_s\")).size());\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", \"456\");\n    doc.addField(\"test_s\", Arrays.asList(\"three\", \"four\"));\n    doc.addField(\"mul_s\", Arrays.asList(\"aaa\", \"bbb\"));\n    UpdateRequest ur = new UpdateRequest();\n    ur.add(doc).setParam(\"processor\", \"firstFld,maxFld,test\");\n    randomClient.request(ur);\n    randomClient.commit(true, true);\n    result = randomClient.query(new SolrQuery(\"id:456\"));\n    SolrDocument d = result.getResults().get(0);\n    assertEquals(1, d.getFieldValues(\"test_s\").size());\n    assertEquals(1, d.getFieldValues(\"mul_s\").size());\n    assertEquals(\"three\", d.getFieldValues(\"test_s\").iterator().next());\n    assertEquals(\"bbb\", d.getFieldValues(\"mul_s\").iterator().next());\n    String processors = (String) d.getFirstValue(\"processors_s\");\n    assertNotNull(processors);\n    assertEquals(StrUtils.splitSmart(processors, '>'),\n        Arrays.asList(\"FirstFieldValueUpdateProcessorFactory\", \"MaxFieldValueUpdateProcessorFactory\", \"RuntimeUrp\", \"LogUpdateProcessorFactory\", \"DistributedUpdateProcessorFactory\", \"RunUpdateProcessorFactory\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"42210058b8ae092085fa2658880b69931512e8bf":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"a52341299179de5479672f7cf518bf4b173f34b3":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0853c291617e0f9d0474b720bf609eb350e9225c":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["42210058b8ae092085fa2658880b69931512e8bf"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["42210058b8ae092085fa2658880b69931512e8bf"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42210058b8ae092085fa2658880b69931512e8bf":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"a52341299179de5479672f7cf518bf4b173f34b3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"0853c291617e0f9d0474b720bf609eb350e9225c":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}