{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","commits":[{"id":"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","date":1523453225,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","pathOld":"/dev/null","sourceNew":"  private SegmentReader createNewReaderWithLatestLiveDocs(SegmentReader reader) throws IOException {\n    assert reader != null;\n    SegmentReader newReader = new SegmentReader(info, reader, pendingDeletes.getLiveDocs(),\n        info.info.maxDoc() - info.getDelCount() - pendingDeletes.numPendingDeletes());\n    boolean success2 = false;\n    try {\n      pendingDeletes.onNewReader(newReader, info);\n      reader.decRef();\n      success2 = true;\n    } finally {\n      if (success2 == false) {\n        newReader.decRef();\n      }\n    }\n    return newReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","pathOld":"/dev/null","sourceNew":"  private SegmentReader createNewReaderWithLatestLiveDocs(SegmentReader reader) throws IOException {\n    assert reader != null;\n    SegmentReader newReader = new SegmentReader(info, reader, pendingDeletes.getLiveDocs(),\n        info.info.maxDoc() - info.getDelCount() - pendingDeletes.numPendingDeletes());\n    boolean success2 = false;\n    try {\n      pendingDeletes.onNewReader(newReader, info);\n      reader.decRef();\n      success2 = true;\n    } finally {\n      if (success2 == false) {\n        newReader.decRef();\n      }\n    }\n    return newReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5640f95cd73b5d4138e0a0988164b0fa398a3256","date":1527054899,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","sourceNew":"  private SegmentReader createNewReaderWithLatestLiveDocs(SegmentReader reader) throws IOException {\n    assert reader != null;\n    assert Thread.holdsLock(this) : Thread.currentThread().getName();\n    SegmentReader newReader = new SegmentReader(info, reader, pendingDeletes.getLiveDocs(),\n        info.info.maxDoc() - info.getDelCount() - pendingDeletes.numPendingDeletes());\n    boolean success2 = false;\n    try {\n      pendingDeletes.onNewReader(newReader, info);\n      reader.decRef();\n      success2 = true;\n    } finally {\n      if (success2 == false) {\n        newReader.decRef();\n      }\n    }\n    return newReader;\n  }\n\n","sourceOld":"  private SegmentReader createNewReaderWithLatestLiveDocs(SegmentReader reader) throws IOException {\n    assert reader != null;\n    SegmentReader newReader = new SegmentReader(info, reader, pendingDeletes.getLiveDocs(),\n        info.info.maxDoc() - info.getDelCount() - pendingDeletes.numPendingDeletes());\n    boolean success2 = false;\n    try {\n      pendingDeletes.onNewReader(newReader, info);\n      reader.decRef();\n      success2 = true;\n    } finally {\n      if (success2 == false) {\n        newReader.decRef();\n      }\n    }\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef2a94da918b657d107b616a643e1759db43b6a","date":1527706131,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","sourceNew":"  private SegmentReader createNewReaderWithLatestLiveDocs(SegmentReader reader) throws IOException {\n    assert reader != null;\n    assert Thread.holdsLock(this) : Thread.currentThread().getName();\n    SegmentReader newReader = new SegmentReader(info, reader, pendingDeletes.getLiveDocs(), pendingDeletes.numDocs());\n    boolean success2 = false;\n    try {\n      pendingDeletes.onNewReader(newReader, info);\n      reader.decRef();\n      success2 = true;\n    } finally {\n      if (success2 == false) {\n        newReader.decRef();\n      }\n    }\n    return newReader;\n  }\n\n","sourceOld":"  private SegmentReader createNewReaderWithLatestLiveDocs(SegmentReader reader) throws IOException {\n    assert reader != null;\n    assert Thread.holdsLock(this) : Thread.currentThread().getName();\n    SegmentReader newReader = new SegmentReader(info, reader, pendingDeletes.getLiveDocs(),\n        info.info.maxDoc() - info.getDelCount() - pendingDeletes.numPendingDeletes());\n    boolean success2 = false;\n    try {\n      pendingDeletes.onNewReader(newReader, info);\n      reader.decRef();\n      success2 = true;\n    } finally {\n      if (success2 == false) {\n        newReader.decRef();\n      }\n    }\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578a4d73d90ecd838846cc32bf1098aaa262b524","date":1532504076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#createNewReaderWithLatestLiveDocs(SegmentReader).mjava","sourceNew":"  private SegmentReader createNewReaderWithLatestLiveDocs(SegmentReader reader) throws IOException {\n    assert reader != null;\n    assert Thread.holdsLock(this) : Thread.currentThread().getName();\n    SegmentReader newReader = new SegmentReader(info, reader, pendingDeletes.getLiveDocs(),\n        pendingDeletes.getHardLiveDocs(), pendingDeletes.numDocs(), true);\n    boolean success2 = false;\n    try {\n      pendingDeletes.onNewReader(newReader, info);\n      reader.decRef();\n      success2 = true;\n    } finally {\n      if (success2 == false) {\n        newReader.decRef();\n      }\n    }\n    return newReader;\n  }\n\n","sourceOld":"  private SegmentReader createNewReaderWithLatestLiveDocs(SegmentReader reader) throws IOException {\n    assert reader != null;\n    assert Thread.holdsLock(this) : Thread.currentThread().getName();\n    SegmentReader newReader = new SegmentReader(info, reader, pendingDeletes.getLiveDocs(), pendingDeletes.numDocs());\n    boolean success2 = false;\n    try {\n      pendingDeletes.onNewReader(newReader, info);\n      reader.decRef();\n      success2 = true;\n    } finally {\n      if (success2 == false) {\n        newReader.decRef();\n      }\n    }\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5640f95cd73b5d4138e0a0988164b0fa398a3256":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ae87c7be37e537f40fa3bb2c35fa4a368d12a72"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["aef2a94da918b657d107b616a643e1759db43b6a"],"aef2a94da918b657d107b616a643e1759db43b6a":["5640f95cd73b5d4138e0a0988164b0fa398a3256"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["578a4d73d90ecd838846cc32bf1098aaa262b524"]},"commit2Childs":{"5640f95cd73b5d4138e0a0988164b0fa398a3256":["aef2a94da918b657d107b616a643e1759db43b6a"],"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["5640f95cd73b5d4138e0a0988164b0fa398a3256"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aef2a94da918b657d107b616a643e1759db43b6a":["578a4d73d90ecd838846cc32bf1098aaa262b524"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}