{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","commits":[{"id":"9fb2c11bd0a5a7bef41cee10608d4429e976c528","date":1381463622,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = new MockTokenizer(\n        new StringReader(\"short toolong evenmuchlongertext a ab toolong foo\"), MockTokenizer.WHITESPACE, false);\n    CodepointCountFilter filter = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","sourceNew":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"short toolong evenmuchlongertext a ab toolong foo\");\n    CodepointCountFilter filter = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","sourceOld":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = new MockTokenizer(\n        new StringReader(\"short toolong evenmuchlongertext a ab toolong foo\"), MockTokenizer.WHITESPACE, false);\n    CodepointCountFilter filter = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","sourceNew":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"short toolong evenmuchlongertext a ab toolong foo\");\n    CodepointCountFilter filter = new CodepointCountFilter(stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","sourceOld":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"short toolong evenmuchlongertext a ab toolong foo\");\n    CodepointCountFilter filter = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","sourceNew":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"short toolong evenmuchlongertext a ab toolong foo\");\n    CodepointCountFilter filter = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","sourceOld":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"short toolong evenmuchlongertext a ab toolong foo\");\n    CodepointCountFilter filter = new CodepointCountFilter(stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testFilterWithPosIncr().mjava","sourceNew":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"short toolong evenmuchlongertext a ab toolong foo\");\n    CodepointCountFilter filter = new CodepointCountFilter(stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","sourceOld":"  public void testFilterWithPosIncr() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"short toolong evenmuchlongertext a ab toolong foo\");\n    CodepointCountFilter filter = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, 2, 6);\n    assertTokenStreamContents(filter,\n      new String[]{\"short\", \"ab\", \"foo\"},\n      new int[]{1, 4, 2}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}