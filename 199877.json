{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMerge(int,boolean).mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMerge(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #forceMerge(int)}, except you can\n   *  specify whether the call should block until\n   *  all merging completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMerge(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"forceMerge: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at forceMerge\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToMerge.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToMerge.put(info, Boolean.TRUE);\n      }\n      mergeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as isMaxNumSegments:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMerge\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.maxNumSegments != -1) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (maxNumSegmentsMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know merging did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"optimize: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at optimize\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToOptimize.put(info, Boolean.TRUE);\n      }\n      optimizeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n        segmentsToOptimize.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMerge(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMerge(int,boolean).mjava","sourceNew":"  /** Just like {@link #forceMerge(int)}, except you can\n   *  specify whether the call should block until\n   *  all merging completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMerge(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"forceMerge: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at forceMerge\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToMerge.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToMerge.put(info, Boolean.TRUE);\n      }\n      mergeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as isMaxNumSegments:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMerge\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.maxNumSegments != -1) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (maxNumSegmentsMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know merging did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #forceMerge(int)}, except you can\n   *  specify whether the call should block until\n   *  all merging completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMerge(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"forceMerge: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at forceMerge\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToMerge.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToMerge.put(info, Boolean.TRUE);\n      }\n      mergeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as isMaxNumSegments:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMerge\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.maxNumSegments != -1) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (maxNumSegmentsMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know merging did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMerge(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMerge(int,boolean).mjava","sourceNew":"  /** Just like {@link #forceMerge(int)}, except you can\n   *  specify whether the call should block until\n   *  all merging completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMerge(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"forceMerge: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at forceMerge\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToMerge.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToMerge.put(info, Boolean.TRUE);\n      }\n      mergeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as isMaxNumSegments:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMerge\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.maxNumSegments != -1) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (maxNumSegmentsMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know merging did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #forceMerge(int)}, except you can\n   *  specify whether the call should block until\n   *  all merging completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void forceMerge(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"forceMerge: index now \" + segString());\n      infoStream.message(\"IW\", \"now flush at forceMerge\");\n    }\n\n    flush(true, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToMerge.clear();\n      for(SegmentInfo info : segmentInfos) {\n        segmentsToMerge.put(info, Boolean.TRUE);\n      }\n      mergeMaxNumSegments = maxNumSegments;\n\n      // Now mark all pending & running merges as isMaxNumSegments:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.maxNumSegments = maxNumSegments;\n        segmentsToMerge.put(merge.info, Boolean.TRUE);\n      }\n    }\n\n    maybeMerge(maxNumSegments);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMerge\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.maxNumSegments != -1) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (maxNumSegmentsMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know merging did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}