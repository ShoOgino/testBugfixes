{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      res = new FacetSearchParams(original.getFacetIndexingParams());\n      for (FacetRequest frq: original.getFacetRequests()) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        res.addFacetRequest(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      res = new FacetSearchParams(original.getFacetIndexingParams());\n      for (FacetRequest frq: original.getFacetRequests()) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        res.addFacetRequest(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.getFacetRequests()) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(facetRequests, original.getFacetIndexingParams());\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      res = new FacetSearchParams(original.getFacetIndexingParams());\n      for (FacetRequest frq: original.getFacetRequests()) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        res.addFacetRequest(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.getFacetRequests()) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(facetRequests, original.getFacetIndexingParams());\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      res = new FacetSearchParams(original.getFacetIndexingParams());\n      for (FacetRequest frq: original.getFacetRequests()) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        res.addFacetRequest(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(facetRequests, original.indexingParams);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.getFacetRequests()) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(facetRequests, original.getFacetIndexingParams());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(facetRequests, original.indexingParams);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.getFacetRequests()) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(facetRequests, original.getFacetIndexingParams());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.numResults * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(original.indexingParams, facetRequests);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.getNumResults() * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(facetRequests, original.indexingParams);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.numResults * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(original.indexingParams, facetRequests);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.numResults * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(original.indexingParams, facetRequests);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}