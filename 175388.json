{"path":"src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector#collect(int).mjava","commits":[{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // This is the equals case.\n            if (doc + docBase > bottom.docID) {\n              // Definitely not competitive\n              return;\n            }\n            break;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c8ed50c3dc8a2400a303593e8ce6616be9d8429"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector#collect(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // This is the equals case.\n            if (doc + docBase > bottom.docID) {\n              // Definitely not competitive\n              return;\n            }\n            break;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // This is the equals case.\n            if (doc + docBase > bottom.docID) {\n              // Definitely not competitive\n              return;\n            }\n            break;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c8ed50c3dc8a2400a303593e8ce6616be9d8429","date":1257976685,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector#collect(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // This is the equals case.\n            if (doc + docBase > bottom.doc) {\n              // Definitely not competitive\n              return;\n            }\n            break;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // This is the equals case.\n            if (doc + docBase > bottom.docID) {\n              // Definitely not competitive\n              return;\n            }\n            break;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","bugFix":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector#collect(int).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // This is the equals case.\n            if (doc + docBase > bottom.doc) {\n              // Definitely not competitive\n              return;\n            }\n            break;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // This is the equals case.\n            if (doc + docBase > bottom.doc) {\n              // Definitely not competitive\n              return;\n            }\n            break;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n\n        // Compute score only if it is competitive.\n        final float score = scorer.score();\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c8ed50c3dc8a2400a303593e8ce6616be9d8429":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1c8ed50c3dc8a2400a303593e8ce6616be9d8429"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["8a9e385641d717e641408d8fbbc62be8fc766357"],"1c8ed50c3dc8a2400a303593e8ce6616be9d8429":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"8a9e385641d717e641408d8fbbc62be8fc766357":["1c8ed50c3dc8a2400a303593e8ce6616be9d8429"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}