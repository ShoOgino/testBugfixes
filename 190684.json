{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsQueries().mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsQueries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPivotFacetsQueries() throws Exception {\n    SolrClient client = getSolrClient();\n\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    client.add(docs);\n    client.commit();\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.addFacetPivotField(\"{!query=s1}features,manu\");\n    query.addFacetQuery(\"{!key=highPrice tag=s1}price:[100 TO *]\");\n    query.addFacetQuery(\"{!tag=s1 key=lowPrice}price:[0 TO 50]\");\n    query.setFacetMinCount(0);\n    query.setRows(0);\n    QueryResponse rsp = client.query(query);\n\n    Map<String,Integer> map = rsp.getFacetQuery();\n    assertEquals(2, map.get(\"highPrice\").intValue());\n    assertEquals(5, map.get(\"lowPrice\").intValue());\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    List<PivotField> pivotValues = pivots.get(\"features,manu\");\n\n    PivotField featuresBBBPivot = pivotValues.get(0);\n    assertEquals(\"features\", featuresBBBPivot.getField());\n    assertEquals(\"bbb\", featuresBBBPivot.getValue());\n    assertNotNull(featuresBBBPivot.getFacetQuery());\n    assertEquals(2, featuresBBBPivot.getFacetQuery().size());\n    assertEquals(1, featuresBBBPivot.getFacetQuery().get(\"highPrice\").intValue());\n    assertEquals(2, featuresBBBPivot.getFacetQuery().get(\"lowPrice\").intValue());\n    \n    PivotField featuresAAAPivot = pivotValues.get(1);\n    assertEquals(\"features\", featuresAAAPivot.getField());\n    assertEquals(\"aaa\", featuresAAAPivot.getValue());\n    assertNotNull(featuresAAAPivot.getFacetQuery());\n    assertEquals(2, featuresAAAPivot.getFacetQuery().size());\n    assertEquals(1, featuresAAAPivot.getFacetQuery().get(\"highPrice\").intValue());\n    assertEquals(3, featuresAAAPivot.getFacetQuery().get(\"lowPrice\").intValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}