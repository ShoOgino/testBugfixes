{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","commits":[{"id":"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43","date":1386062370,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","pathOld":"/dev/null","sourceNew":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(null).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n      fail(\"should throw SolrException\");\n    } catch (SolrException e) {\n      assertTrue(e.getMessage().startsWith(\"Must specify a Content-Type header with POST requests\"));\n      assertEquals(415, e.code());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","pathOld":"/dev/null","sourceNew":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(null).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n      fail(\"should throw SolrException\");\n    } catch (SolrException e) {\n      assertTrue(e.getMessage().startsWith(\"Must specify a Content-Type header with POST requests\"));\n      assertEquals(415, e.code());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d196318cb8ce39ae32035f290cd1397833e472","date":1418140712,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","sourceNew":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(null).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getHeader(anyObject())).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","sourceOld":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(null).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n      fail(\"should throw SolrException\");\n    } catch (SolrException e) {\n      assertTrue(e.getMessage().startsWith(\"Must specify a Content-Type header with POST requests\"));\n      assertEquals(415, e.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","sourceNew":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(null).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getHeader(anyObject())).andReturn(null).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","sourceOld":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(null).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getHeader(anyObject())).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","sourceNew":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = getMock();\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getHeader(anyObject())).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      log.error(\"should not throw SolrException\", e);\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","sourceOld":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(null).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getHeader(anyObject())).andReturn(null).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","sourceNew":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = getMock();\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getHeader(anyObject())).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      log.error(\"should not throw SolrException\", e);\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","sourceOld":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(null).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getHeader(anyObject())).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testPostMissingContentType().mjava","sourceNew":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = getMock();\n    when(request.getMethod()).thenReturn(\"POST\");\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      log.error(\"should not throw SolrException\", e);\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","sourceOld":"  public void testPostMissingContentType() throws Exception {\n    HttpServletRequest request = getMock();\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getHeader(anyObject())).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    try {\n      parsers.parse(h.getCore(), \"/select\", request);\n    } catch (SolrException e) {\n      log.error(\"should not throw SolrException\", e);\n      fail(\"should not throw SolrException\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0d196318cb8ce39ae32035f290cd1397833e472","0d17ec5164debc23076db7fd11d0331f201583b5"],"0d17ec5164debc23076db7fd11d0331f201583b5":["da41004e1997059b4d0549fbeb56bf0858d14689"],"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da41004e1997059b4d0549fbeb56bf0858d14689":["a0d196318cb8ce39ae32035f290cd1397833e472"],"a0d196318cb8ce39ae32035f290cd1397833e472":["4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0d17ec5164debc23076db7fd11d0331f201583b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43":["a0d196318cb8ce39ae32035f290cd1397833e472","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0d196318cb8ce39ae32035f290cd1397833e472":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","da41004e1997059b4d0549fbeb56bf0858d14689"],"da41004e1997059b4d0549fbeb56bf0858d14689":["0d17ec5164debc23076db7fd11d0331f201583b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}