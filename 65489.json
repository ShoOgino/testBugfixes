{"path":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.Reader r = PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d42318a265b3c85d1a1a19475790a4f65d2e7dec","date":1270587502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.Reader r = PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory(newRandom());\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory(newRandom());\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\", IOContext.DEFAULT);\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\", IOContext.DEFAULT);\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\", newIOContext(random));\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\", newIOContext(random));\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\", IOContext.DEFAULT);\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\", IOContext.DEFAULT);\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\", newIOContext(random));\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\", newIOContext(random));\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\", newIOContext(random));\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\", newIOContext(random));\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\");\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\");\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testSingleValue().mjava","sourceNew":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\", newIOContext(random));\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\", newIOContext(random));\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"out\", newIOContext(random));\n    PackedInts.Writer w = PackedInts.getWriter(out, 1, 8);\n    w.add(17);\n    w.finish();\n    final long end = out.getFilePointer();\n    out.close();\n\n    IndexInput in = dir.openInput(\"out\", newIOContext(random));\n    PackedInts.getReader(in);\n    assertEquals(end, in.getFilePointer());\n    in.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d42318a265b3c85d1a1a19475790a4f65d2e7dec":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["d42318a265b3c85d1a1a19475790a4f65d2e7dec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["1f653cfcf159baeaafe5d01682a911e95bba4012","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["1f653cfcf159baeaafe5d01682a911e95bba4012","b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d42318a265b3c85d1a1a19475790a4f65d2e7dec","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d42318a265b3c85d1a1a19475790a4f65d2e7dec":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d42318a265b3c85d1a1a19475790a4f65d2e7dec"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}