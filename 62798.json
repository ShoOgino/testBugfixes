{"path":"lucene/src/test/org/apache/lucene/util/TestBitVector#testDgaps().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#testDgaps().mjava","pathOld":"src/test/org/apache/lucene/util/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0f277693790b6ff2e44509d1b5a1ca5a18f16de","date":1310325911,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#testDgaps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testDgaps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#testDgaps().mjava","sourceNew":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","sourceOld":"    /**\n     * Test r/w when size/count cause switching between bit-set and d-gaps file formats.  \n     */\n    public void testDgaps() throws IOException {\n      doTestDgaps(1,0,1);\n      doTestDgaps(10,0,1);\n      doTestDgaps(100,0,1);\n      doTestDgaps(1000,4,7);\n      doTestDgaps(10000,40,43);\n      doTestDgaps(100000,415,418);\n      doTestDgaps(1000000,3123,3126);\n      // now exercise skipping of fully populated byte in the bitset (they are omitted if bitset is sparse)\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(10000);\n      bv.set(0);\n      for (int i = 8; i < 16; i++) {\n        bv.set(i);\n      } // make sure we have once byte full of set bits\n      for (int i = 32; i < 40; i++) {\n        bv.set(i);\n      } // get a second byte full of set bits\n      // add some more bits here \n      for (int i = 40; i < 10000; i++) {\n        if (random.nextInt(1000) == 0) {\n          bv.set(i);\n        }\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n      assertTrue(doCompare(bv,compare));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","e3a73b15d807e41306466aec106b4cb85b8d5335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["e3a73b15d807e41306466aec106b4cb85b8d5335","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}