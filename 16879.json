{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager.Node#removeEphemeralChildren(String).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager.Node#removeEphemeralChildren(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager.Node#removeEphemeralChildren(String).mjava","sourceNew":"    public void removeEphemeralChildren(String id) throws NoSuchElementException, BadVersionException, IOException {\n      Set<String> kids = new HashSet<>(children.keySet());\n      for (String kid : kids) {\n        Node n = children.get(kid);\n        if (n == null) {\n          continue;\n        }\n        if ((CreateMode.EPHEMERAL == n.mode || CreateMode.EPHEMERAL_SEQUENTIAL == n.mode) &&\n            id.equals(n.clientId)) {\n          removeChild(n.name, -1);\n        } else {\n          n.removeEphemeralChildren(id);\n        }\n      }\n    }\n\n","sourceOld":"    public void removeEphemeralChildren(String id) throws NoSuchElementException, BadVersionException, IOException {\n      Set<String> kids = new HashSet<>(children.keySet());\n      for (String kid : kids) {\n        Node n = children.get(kid);\n        if (n == null) {\n          continue;\n        }\n        if ((CreateMode.EPHEMERAL == n.mode || CreateMode.EPHEMERAL_SEQUENTIAL == n.mode) &&\n            id.equals(n.clientId)) {\n          removeChild(n.name, -1);\n        } else {\n          n.removeEphemeralChildren(id);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager.Node#removeEphemeralChildren(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager.Node#removeEphemeralChildren(String).mjava","sourceNew":"    public void removeEphemeralChildren(String id) throws NoSuchElementException, BadVersionException, IOException {\n      Set<String> kids = new HashSet<>(children.keySet());\n      for (String kid : kids) {\n        Node n = children.get(kid);\n        if (n == null) {\n          continue;\n        }\n        if ((CreateMode.EPHEMERAL == n.mode || CreateMode.EPHEMERAL_SEQUENTIAL == n.mode) &&\n            id.equals(n.owner)) {\n          removeChild(n.name, -1);\n        } else {\n          n.removeEphemeralChildren(id);\n        }\n      }\n    }\n\n","sourceOld":"    public void removeEphemeralChildren(String id) throws NoSuchElementException, BadVersionException, IOException {\n      Set<String> kids = new HashSet<>(children.keySet());\n      for (String kid : kids) {\n        Node n = children.get(kid);\n        if (n == null) {\n          continue;\n        }\n        if ((CreateMode.EPHEMERAL == n.mode || CreateMode.EPHEMERAL_SEQUENTIAL == n.mode) &&\n            id.equals(n.clientId)) {\n          removeChild(n.name, -1);\n        } else {\n          n.removeEphemeralChildren(id);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager.Node#removeEphemeralChildren(String).mjava","sourceNew":null,"sourceOld":"    public void removeEphemeralChildren(String id) throws NoSuchElementException, BadVersionException, IOException {\n      Set<String> kids = new HashSet<>(children.keySet());\n      for (String kid : kids) {\n        Node n = children.get(kid);\n        if (n == null) {\n          continue;\n        }\n        if ((CreateMode.EPHEMERAL == n.mode || CreateMode.EPHEMERAL_SEQUENTIAL == n.mode) &&\n            id.equals(n.owner)) {\n          removeChild(n.name, -1);\n        } else {\n          n.removeEphemeralChildren(id);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["3f504512a03d978990cbff30db0522b354e846db"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}