{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","commits":[{"id":"9cf250cb8fdff62f4b753866d44e5bf59bfd1616","date":1483789944,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o != null && getClass() == o.getClass();\n        }\n\n        @Override\n        public int hashCode() {\n          return getClass().hashCode();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o != null && getClass() == o.getClass();\n        }\n\n        @Override\n        public int hashCode() {\n          return getClass().hashCode();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        return Explanation.match(docId + 1, \"\");\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        return Explanation.match(docId + 1, \"\");\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ea72350b903b90cb4fda2a5adbce31aa00c074","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        return Explanation.match(docId + 1, \"\");\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        return Explanation.match(docId + 1, \"\");\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        return Explanation.match(docId + 1, \"\");\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits.value);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits.value);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132e4d2b791f182f095041c89860f21eb11c31a5","date":1600099601,"type":3,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n\n    IndexSearcher s = newSearcher(r, false, false);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits.value);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits.value);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits.value);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits.value);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n\n    IndexSearcher s = newSearcher(r, false, false);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits.value);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits.value);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new PlusOneValuesSource();\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits.value);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits.value);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"132e4d2b791f182f095041c89860f21eb11c31a5":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"41ea72350b903b90cb4fda2a5adbce31aa00c074":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616","501fdb8d708778ae5368dd5c44879e1d46487e43"],"680b6449f09827f58fe987aff279e014c311d966":["83788ad129a5154d5c6562c4e8ce3db48793aada","132e4d2b791f182f095041c89860f21eb11c31a5"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["28288370235ed02234a64753cdbf0c6ec096304a"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["501fdb8d708778ae5368dd5c44879e1d46487e43","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"132e4d2b791f182f095041c89860f21eb11c31a5":["680b6449f09827f58fe987aff279e014c311d966"],"41ea72350b903b90cb4fda2a5adbce31aa00c074":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["41ea72350b903b90cb4fda2a5adbce31aa00c074","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["132e4d2b791f182f095041c89860f21eb11c31a5","680b6449f09827f58fe987aff279e014c311d966"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"28288370235ed02234a64753cdbf0c6ec096304a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}