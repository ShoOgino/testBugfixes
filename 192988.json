{"path":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    return new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    return new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    return new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateTools.dateToString(d1, DateTools.Resolution.DAY);\n      part2 = DateTools.dateToString(d2, DateTools.Resolution.DAY);\n    }\n    catch (Exception e) { }\n\n    return new TermRangeQuery(field, part1, part2, inclusive, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}