{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestTermVectorCorruption().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void xxxtestTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void xxxtestTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}