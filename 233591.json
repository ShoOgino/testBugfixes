{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#expandDelimiterData().mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#expandDelimiterData().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * 原词库将所有标点符号的信息合并到一个列表里(从1开始的3755处)。这里将其展开，分别放到各个符号对应的列表中\n   */\n  private void expandDelimiterData() {\n    int i;\n    int cnt;\n    // 标点符号在从1开始的3755处，将原始的标点符号对应的字典分配到对应的标点符号中\n    int delimiterIndex = 3755 + GB2312_FIRST_CHAR;\n    i = 0;\n    while (i < wordItem_charArrayTable[delimiterIndex].length) {\n      char c = wordItem_charArrayTable[delimiterIndex][i][0];\n      int j = getGB2312Id(c);// 该标点符号应该所在的index值\n      if (wordItem_charArrayTable[j] == null) {\n\n        int k = i;\n        // 从i开始计数后面以j开头的符号的worditem的个数\n        while (k < wordItem_charArrayTable[delimiterIndex].length\n            && wordItem_charArrayTable[delimiterIndex][k][0] == c) {\n          k++;\n        }\n        // 此时k-i为id为j的标点符号对应的wordItem的个数\n        cnt = k - i;\n        if (cnt != 0) {\n          wordItem_charArrayTable[j] = new char[cnt][];\n          wordItem_frequencyTable[j] = new int[cnt];\n        }\n\n        // 为每一个wordItem赋值\n        for (k = 0; k < cnt; k++, i++) {\n          // wordItemTable[j][k] = new WordItem();\n          wordItem_frequencyTable[j][k] = wordItem_frequencyTable[delimiterIndex][i];\n          wordItem_charArrayTable[j][k] = new char[wordItem_charArrayTable[delimiterIndex][i].length - 1];\n          System.arraycopy(wordItem_charArrayTable[delimiterIndex][i], 1,\n              wordItem_charArrayTable[j][k], 0,\n              wordItem_charArrayTable[j][k].length);\n        }\n        setTableIndex(c, j);\n      }\n    }\n    // 将原符号对应的数组删除\n    wordItem_charArrayTable[delimiterIndex] = null;\n    wordItem_frequencyTable[delimiterIndex] = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#expandDelimiterData().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#expandDelimiterData().mjava","sourceNew":"  /**\n   * 原词库将所有标点符号的信息合并到一个列表里(从1开始的3755处)。这里将其展开，分别放到各个符号对应的列表中\n   */\n  private void expandDelimiterData() {\n    int i;\n    int cnt;\n    // 标点符号在从1开始的3755处，将原始的标点符号对应的字典分配到对应的标点符号中\n    int delimiterIndex = 3755 + GB2312_FIRST_CHAR;\n    i = 0;\n    while (i < wordItem_charArrayTable[delimiterIndex].length) {\n      char c = wordItem_charArrayTable[delimiterIndex][i][0];\n      int j = getGB2312Id(c);// 该标点符号应该所在的index值\n      if (wordItem_charArrayTable[j] == null) {\n\n        int k = i;\n        // 从i开始计数后面以j开头的符号的worditem的个数\n        while (k < wordItem_charArrayTable[delimiterIndex].length\n            && wordItem_charArrayTable[delimiterIndex][k][0] == c) {\n          k++;\n        }\n        // 此时k-i为id为j的标点符号对应的wordItem的个数\n        cnt = k - i;\n        if (cnt != 0) {\n          wordItem_charArrayTable[j] = new char[cnt][];\n          wordItem_frequencyTable[j] = new int[cnt];\n        }\n\n        // 为每一个wordItem赋值\n        for (k = 0; k < cnt; k++, i++) {\n          // wordItemTable[j][k] = new WordItem();\n          wordItem_frequencyTable[j][k] = wordItem_frequencyTable[delimiterIndex][i];\n          wordItem_charArrayTable[j][k] = new char[wordItem_charArrayTable[delimiterIndex][i].length - 1];\n          System.arraycopy(wordItem_charArrayTable[delimiterIndex][i], 1,\n              wordItem_charArrayTable[j][k], 0,\n              wordItem_charArrayTable[j][k].length);\n        }\n        setTableIndex(c, j);\n      }\n    }\n    // 将原符号对应的数组删除\n    wordItem_charArrayTable[delimiterIndex] = null;\n    wordItem_frequencyTable[delimiterIndex] = null;\n  }\n\n","sourceOld":"  /**\n   * 原词库将所有标点符号的信息合并到一个列表里(从1开始的3755处)。这里将其展开，分别放到各个符号对应的列表中\n   */\n  private void expandDelimiterData() {\n    int i;\n    int cnt;\n    // 标点符号在从1开始的3755处，将原始的标点符号对应的字典分配到对应的标点符号中\n    int delimiterIndex = 3755 + GB2312_FIRST_CHAR;\n    i = 0;\n    while (i < wordItem_charArrayTable[delimiterIndex].length) {\n      char c = wordItem_charArrayTable[delimiterIndex][i][0];\n      int j = getGB2312Id(c);// 该标点符号应该所在的index值\n      if (wordItem_charArrayTable[j] == null) {\n\n        int k = i;\n        // 从i开始计数后面以j开头的符号的worditem的个数\n        while (k < wordItem_charArrayTable[delimiterIndex].length\n            && wordItem_charArrayTable[delimiterIndex][k][0] == c) {\n          k++;\n        }\n        // 此时k-i为id为j的标点符号对应的wordItem的个数\n        cnt = k - i;\n        if (cnt != 0) {\n          wordItem_charArrayTable[j] = new char[cnt][];\n          wordItem_frequencyTable[j] = new int[cnt];\n        }\n\n        // 为每一个wordItem赋值\n        for (k = 0; k < cnt; k++, i++) {\n          // wordItemTable[j][k] = new WordItem();\n          wordItem_frequencyTable[j][k] = wordItem_frequencyTable[delimiterIndex][i];\n          wordItem_charArrayTable[j][k] = new char[wordItem_charArrayTable[delimiterIndex][i].length - 1];\n          System.arraycopy(wordItem_charArrayTable[delimiterIndex][i], 1,\n              wordItem_charArrayTable[j][k], 0,\n              wordItem_charArrayTable[j][k].length);\n        }\n        setTableIndex(c, j);\n      }\n    }\n    // 将原符号对应的数组删除\n    wordItem_charArrayTable[delimiterIndex] = null;\n    wordItem_frequencyTable[delimiterIndex] = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}