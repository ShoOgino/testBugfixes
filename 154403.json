{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#buildFilter(PivotField).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#buildFilter(PivotField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a PivotField constraint, generate a query for the field+value\n   * for use in an <code>fq</code> to verify the constraint count\n   */\n  private static String buildFilter(PivotField constraint) {\n    Object value = constraint.getValue();\n    if (null == value) {\n      // facet.missing, exclude any indexed term\n      return \"-\" + constraint.getField() + \":[* TO *]\";\n    }\n    // otherwise, build up a term filter...\n    String prefix = \"{!term f=\" + constraint.getField() + \"}\";\n    if (value instanceof Date) {\n      return prefix + TrieDateField.formatExternal((Date)value);\n    } else {\n      return prefix + value;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#buildFilter(PivotField).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#buildFilter(PivotField).mjava","sourceNew":"  /**\n   * Given a PivotField constraint, generate a query for the field+value\n   * for use in an <code>fq</code> to verify the constraint count\n   */\n  private static String buildFilter(PivotField constraint) {\n    Object value = constraint.getValue();\n    if (null == value) {\n      // facet.missing, exclude any indexed term\n      return \"-\" + constraint.getField() + \":[* TO *]\";\n    }\n    // otherwise, build up a term filter...\n    String prefix = \"{!term f=\" + constraint.getField() + \"}\";\n    if (value instanceof Date) {\n      return prefix + DateFormatUtil.formatExternal((Date)value);\n    } else {\n      return prefix + value;\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a PivotField constraint, generate a query for the field+value\n   * for use in an <code>fq</code> to verify the constraint count\n   */\n  private static String buildFilter(PivotField constraint) {\n    Object value = constraint.getValue();\n    if (null == value) {\n      // facet.missing, exclude any indexed term\n      return \"-\" + constraint.getField() + \":[* TO *]\";\n    }\n    // otherwise, build up a term filter...\n    String prefix = \"{!term f=\" + constraint.getField() + \"}\";\n    if (value instanceof Date) {\n      return prefix + TrieDateField.formatExternal((Date)value);\n    } else {\n      return prefix + value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#buildFilter(PivotField).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#buildFilter(PivotField).mjava","sourceNew":"  /**\n   * Given a PivotField constraint, generate a query for the field+value\n   * for use in an <code>fq</code> to verify the constraint count\n   */\n  private static String buildFilter(PivotField constraint) {\n    Object value = constraint.getValue();\n    if (null == value) {\n      // facet.missing, exclude any indexed term\n      return \"-\" + constraint.getField() + \":[* TO *]\";\n    }\n    // otherwise, build up a term filter...\n    String prefix = \"{!term f=\" + constraint.getField() + \"}\";\n    if (value instanceof Date) {\n      return prefix + ((Date) value).toInstant();\n    } else {\n      return prefix + value;\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a PivotField constraint, generate a query for the field+value\n   * for use in an <code>fq</code> to verify the constraint count\n   */\n  private static String buildFilter(PivotField constraint) {\n    Object value = constraint.getValue();\n    if (null == value) {\n      // facet.missing, exclude any indexed term\n      return \"-\" + constraint.getField() + \":[* TO *]\";\n    }\n    // otherwise, build up a term filter...\n    String prefix = \"{!term f=\" + constraint.getField() + \"}\";\n    if (value instanceof Date) {\n      return prefix + DateFormatUtil.formatExternal((Date)value);\n    } else {\n      return prefix + value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["92751ba9273251eab6a2e379ec42a1697a32ff96"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}