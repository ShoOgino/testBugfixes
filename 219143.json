{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseRepeatExp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseRepeatExp().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#parseRepeatExp().mjava","sourceNew":"  final RegExp parseRepeatExp() throws IllegalArgumentException {\n    RegExp e = parseComplExp();\n    while (peek(\"?*+{\")) {\n      if (match('?')) e = makeOptional(e);\n      else if (match('*')) e = makeRepeat(e);\n      else if (match('+')) e = makeRepeat(e, 1);\n      else if (match('{')) {\n        int start = pos;\n        while (peek(\"0123456789\"))\n          next();\n        if (start == pos) throw new IllegalArgumentException(\n            \"integer expected at position \" + pos);\n        int n = Integer.parseInt(b.substring(start, pos));\n        int m = -1;\n        if (match(',')) {\n          start = pos;\n          while (peek(\"0123456789\"))\n            next();\n          if (start != pos) m = Integer.parseInt(b.substring(start, pos));\n        } else m = n;\n        if (!match('}')) throw new IllegalArgumentException(\n            \"expected '}' at position \" + pos);\n        if (m == -1) e = makeRepeat(e, n);\n        else e = makeRepeat(e, n, m);\n      }\n    }\n    return e;\n  }\n\n","sourceOld":"  final RegExp parseRepeatExp() throws IllegalArgumentException {\n    RegExp e = parseComplExp();\n    while (peek(\"?*+{\")) {\n      if (match('?')) e = makeOptional(e);\n      else if (match('*')) e = makeRepeat(e);\n      else if (match('+')) e = makeRepeat(e, 1);\n      else if (match('{')) {\n        int start = pos;\n        while (peek(\"0123456789\"))\n          next();\n        if (start == pos) throw new IllegalArgumentException(\n            \"integer expected at position \" + pos);\n        int n = Integer.parseInt(b.substring(start, pos));\n        int m = -1;\n        if (match(',')) {\n          start = pos;\n          while (peek(\"0123456789\"))\n            next();\n          if (start != pos) m = Integer.parseInt(b.substring(start, pos));\n        } else m = n;\n        if (!match('}')) throw new IllegalArgumentException(\n            \"expected '}' at position \" + pos);\n        if (m == -1) e = makeRepeat(e, n);\n        else e = makeRepeat(e, n, m);\n      }\n    }\n    return e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseRepeatExp().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseRepeatExp().mjava","sourceNew":"  final RegExp parseRepeatExp() throws IllegalArgumentException {\n    RegExp e = parseComplExp();\n    while (peek(\"?*+{\")) {\n      if (match('?')) e = makeOptional(e);\n      else if (match('*')) e = makeRepeat(e);\n      else if (match('+')) e = makeRepeat(e, 1);\n      else if (match('{')) {\n        int start = pos;\n        while (peek(\"0123456789\"))\n          next();\n        if (start == pos) throw new IllegalArgumentException(\n            \"integer expected at position \" + pos);\n        int n = Integer.parseInt(originalString.substring(start, pos));\n        int m = -1;\n        if (match(',')) {\n          start = pos;\n          while (peek(\"0123456789\"))\n            next();\n          if (start != pos) m = Integer.parseInt(\n            originalString.substring(start, pos));\n        } else m = n;\n        if (!match('}')) throw new IllegalArgumentException(\n            \"expected '}' at position \" + pos);\n        if (m == -1) e = makeRepeat(e, n);\n        else e = makeRepeat(e, n, m);\n      }\n    }\n    return e;\n  }\n\n","sourceOld":"  final RegExp parseRepeatExp() throws IllegalArgumentException {\n    RegExp e = parseComplExp();\n    while (peek(\"?*+{\")) {\n      if (match('?')) e = makeOptional(e);\n      else if (match('*')) e = makeRepeat(e);\n      else if (match('+')) e = makeRepeat(e, 1);\n      else if (match('{')) {\n        int start = pos;\n        while (peek(\"0123456789\"))\n          next();\n        if (start == pos) throw new IllegalArgumentException(\n            \"integer expected at position \" + pos);\n        int n = Integer.parseInt(b.substring(start, pos));\n        int m = -1;\n        if (match(',')) {\n          start = pos;\n          while (peek(\"0123456789\"))\n            next();\n          if (start != pos) m = Integer.parseInt(b.substring(start, pos));\n        } else m = n;\n        if (!match('}')) throw new IllegalArgumentException(\n            \"expected '}' at position \" + pos);\n        if (m == -1) e = makeRepeat(e, n);\n        else e = makeRepeat(e, n, m);\n      }\n    }\n    return e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601","date":1594220892,"type":3,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseRepeatExp().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseRepeatExp().mjava","sourceNew":"  final RegExp parseRepeatExp() throws IllegalArgumentException {\n    RegExp e = parseComplExp();\n    while (peek(\"?*+{\")) {\n      if (match('?')) e = makeOptional(flags, e);\n      else if (match('*')) e = makeRepeat(flags, e);\n      else if (match('+')) e = makeRepeat(flags, e, 1);\n      else if (match('{')) {\n        int start = pos;\n        while (peek(\"0123456789\"))\n          next();\n        if (start == pos) throw new IllegalArgumentException(\n            \"integer expected at position \" + pos);\n        int n = Integer.parseInt(originalString.substring(start, pos));\n        int m = -1;\n        if (match(',')) {\n          start = pos;\n          while (peek(\"0123456789\"))\n            next();\n          if (start != pos) m = Integer.parseInt(\n            originalString.substring(start, pos));\n        } else m = n;\n        if (!match('}')) throw new IllegalArgumentException(\n            \"expected '}' at position \" + pos);\n        if (m == -1) e = makeRepeat(flags, e, n);\n        else e = makeRepeat(flags, e, n, m);\n      }\n    }\n    return e;\n  }\n\n","sourceOld":"  final RegExp parseRepeatExp() throws IllegalArgumentException {\n    RegExp e = parseComplExp();\n    while (peek(\"?*+{\")) {\n      if (match('?')) e = makeOptional(e);\n      else if (match('*')) e = makeRepeat(e);\n      else if (match('+')) e = makeRepeat(e, 1);\n      else if (match('{')) {\n        int start = pos;\n        while (peek(\"0123456789\"))\n          next();\n        if (start == pos) throw new IllegalArgumentException(\n            \"integer expected at position \" + pos);\n        int n = Integer.parseInt(originalString.substring(start, pos));\n        int m = -1;\n        if (match(',')) {\n          start = pos;\n          while (peek(\"0123456789\"))\n            next();\n          if (start != pos) m = Integer.parseInt(\n            originalString.substring(start, pos));\n        } else m = n;\n        if (!match('}')) throw new IllegalArgumentException(\n            \"expected '}' at position \" + pos);\n        if (m == -1) e = makeRepeat(e, n);\n        else e = makeRepeat(e, n, m);\n      }\n    }\n    return e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}