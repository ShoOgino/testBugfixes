{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to (\" + errorCode + \") {}, retry={} commError={} errorCode={} \",\n          inputCollections, rootCause.toString(), retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) \"+inputCollections+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n          boolean wasCommError =\n              (rootCause instanceof ConnectException ||\n                  rootCause instanceof ConnectTimeoutException ||\n                  rootCause instanceof NoHttpResponseException ||\n                  rootCause instanceof SocketException);\n          \n      log.error(\"Request to collection {} failed due to (\" + errorCode + \") {}, retry={} commError={} errorCode={} \",\n          inputCollections, rootCause.toString(), retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n          //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n          ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) \"+inputCollections+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"813335f324f8bd40ae4d83d8391674b42b536cc0","date":1555591986,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to (\" + errorCode + \") {}, retry={} commError={} errorCode={} \",\n          inputCollections, rootCause.toString(), retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) \"+inputCollections+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to (\" + errorCode + \") {}, retry={} commError={} errorCode={} \",\n          inputCollections, rootCause.toString(), retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) \"+inputCollections+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to ({}) {}, retry={} commError={} errorCode={} \",\n          inputCollections, errorCode, rootCause, retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) {} after stale state error from server.\", inputCollections);\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to (\" + errorCode + \") {}, retry={} commError={} errorCode={} \",\n          inputCollections, rootCause.toString(), retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) \"+inputCollections+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n        requestedCollections.add(coll);\n\n        if (stateVerParamBuilder == null) {\n          stateVerParamBuilder = new StringBuilder();\n        } else {\n          stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n        }\n\n        stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to ({}) {}, retry={} commError={} errorCode={} \",\n          inputCollections, errorCode, rootCause, retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) {} after stale state error from server.\", inputCollections);\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to ({}) {}, retry={} commError={} errorCode={} \",\n          inputCollections, errorCode, rootCause, retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) {} after stale state error from server.\", inputCollections);\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(@SuppressWarnings({\"rawtypes\"})SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n        requestedCollections.add(coll);\n\n        if (stateVerParamBuilder == null) {\n          stateVerParamBuilder = new StringBuilder();\n        } else {\n          stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n        }\n\n        stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        @SuppressWarnings({\"rawtypes\"})\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to ({}) {}, retry={} commError={} errorCode={} \",\n          inputCollections, errorCode, rootCause, retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) {} after stale state error from server.\", inputCollections);\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n        requestedCollections.add(coll);\n\n        if (stateVerParamBuilder == null) {\n          stateVerParamBuilder = new StringBuilder();\n        } else {\n          stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n        }\n\n        stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to ({}) {}, retry={} commError={} errorCode={} \",\n          inputCollections, errorCode, rootCause, retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) {} after stale state error from server.\", inputCollections);\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9482d16391fd586dca43aee9046b1128fe12ae","date":1600963605,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(@SuppressWarnings({\"rawtypes\"})SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n        requestedCollections.add(coll);\n\n        if (stateVerParamBuilder == null) {\n          stateVerParamBuilder = new StringBuilder();\n        } else {\n          stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n        }\n\n        stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        @SuppressWarnings({\"rawtypes\"})\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"Request to collection {} failed due to ({}) {}, retry={} maxRetries={} commError={} errorCode={} - retrying\",\n              inputCollections, errorCode, rootCause, retryCount, MAX_STALE_RETRIES, wasCommError, errorCode);\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n      log.info(\"Request to collection {} failed due to ({}) {}, retry={} maxRetries={} commError={} errorCode={} \",\n          inputCollections, errorCode, rootCause, retryCount, MAX_STALE_RETRIES, wasCommError, errorCode);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) {} after stale state error from server.\", inputCollections);\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(@SuppressWarnings({\"rawtypes\"})SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    boolean isUpdate = (request instanceof IsUpdateRequest) && (request instanceof UpdateRequest);\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections, isUpdate);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n        requestedCollections.add(coll);\n\n        if (stateVerParamBuilder == null) {\n          stateVerParamBuilder = new StringBuilder();\n        } else {\n          stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n        }\n\n        stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        @SuppressWarnings({\"rawtypes\"})\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof SocketException ||\n              wasCommError(rootCause));\n\n      log.error(\"Request to collection {} failed due to ({}) {}, retry={} commError={} errorCode={} \",\n          inputCollections, errorCode, rootCause, retryCount, wasCommError, errorCode);\n\n      if (wasCommError\n          || (exc instanceof RouteException && (errorCode == 503)) // 404 because the core does not exist 503 service unavailable\n        //TODO there are other reasons for 404. We need to change the solr response format from HTML to structured data to know that\n      ) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        if (requestedCollections != null) {\n          for (DocCollection ext : requestedCollections) {\n            ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n            if (cacheEntry == null) continue;\n            cacheEntry.maybeStale = true;\n          }\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          log.info(\"trying request again\");\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      } else {\n        log.info(\"request was not communication error it seems\");\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          (SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE || errorCode == 404))\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to collection(s) {} after stale state error from server.\", inputCollections);\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if (exc instanceof SolrException || exc instanceof SolrServerException || exc instanceof IOException) {\n          throw exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c9482d16391fd586dca43aee9046b1128fe12ae":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"813335f324f8bd40ae4d83d8391674b42b536cc0":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c9482d16391fd586dca43aee9046b1128fe12ae"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"6c9482d16391fd586dca43aee9046b1128fe12ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["6c9482d16391fd586dca43aee9046b1128fe12ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}