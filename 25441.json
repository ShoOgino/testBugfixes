{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crosses(double,double,double,double).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crosses(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D.Edge#crosses(double,double,double,double).mjava","sourceNew":"    /** Returns true if the box crosses any edge in this edge subtree */\n    boolean crosses(double minLat, double maxLat, double minLon, double maxLon) {\n      // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n      if (minLat <= max) {\n        // we compute line intersections of every polygon edge with every box line.\n        // if we find one, return true.\n        // for each box line (AB):\n        //   for each poly line (CD):\n        //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n        double cy = lat1;\n        double dy = lat2;\n        double cx = lon1;\n        double dx = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (cy < minLat && dy < minLat) ||\n            (cy > maxLat && dy > maxLat) ||\n            (cx < minLon && dx < minLon) ||\n            (cx > maxLon && dx > maxLon);\n        // optimization: see if either end of the line segment is contained by the rectangle\n        if (Rectangle.containsPoint(cy, cx, minLat, maxLat, minLon, maxLon)\n            || Rectangle.containsPoint(dy, dx, minLat, maxLat, minLon, maxLon)) {\n          return true;\n        }\n\n        if (outside == false) {\n          // does box's top edge intersect polyline?\n          // ax = minLon, bx = maxLon, ay = maxLat, by = maxLat\n          if (orient(cx, cy, dx, dy, minLon, maxLat) * orient(cx, cy, dx, dy, maxLon, maxLat) <= 0 &&\n              orient(minLon, maxLat, maxLon, maxLat, cx, cy) * orient(minLon, maxLat, maxLon, maxLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's right edge intersect polyline?\n          // ax = maxLon, bx = maxLon, ay = maxLat, by = minLat\n          if (orient(cx, cy, dx, dy, maxLon, maxLat) * orient(cx, cy, dx, dy, maxLon, minLat) <= 0 &&\n              orient(maxLon, maxLat, maxLon, minLat, cx, cy) * orient(maxLon, maxLat, maxLon, minLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's bottom edge intersect polyline?\n          // ax = maxLon, bx = minLon, ay = minLat, by = minLat\n          if (orient(cx, cy, dx, dy, maxLon, minLat) * orient(cx, cy, dx, dy, minLon, minLat) <= 0 &&\n              orient(maxLon, minLat, minLon, minLat, cx, cy) * orient(maxLon, minLat, minLon, minLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's left edge intersect polyline?\n          // ax = minLon, bx = minLon, ay = minLat, by = maxLat\n          if (orient(cx, cy, dx, dy, minLon, minLat) * orient(cx, cy, dx, dy, minLon, maxLat) <= 0 &&\n              orient(minLon, minLat, minLon, maxLat, cx, cy) * orient(minLon, minLat, minLon, maxLat, dx, dy) <= 0) {\n            return true;\n          }\n        }\n\n        if (left != null) {\n          if (left.crosses(minLat, maxLat, minLon, maxLon)) {\n            return true;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if (right.crosses(minLat, maxLat, minLon, maxLon)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    /** Returns true if the box crosses any edge in this edge subtree */\n    boolean crosses(double minLat, double maxLat, double minLon, double maxLon) {\n      // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n      if (minLat <= max) {\n        // we compute line intersections of every polygon edge with every box line.\n        // if we find one, return true.\n        // for each box line (AB):\n        //   for each poly line (CD):\n        //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n        double cy = lat1;\n        double dy = lat2;\n        double cx = lon1;\n        double dx = lon2;\n        \n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (cy < minLat && dy < minLat) ||\n                          (cy > maxLat && dy > maxLat) ||\n                          (cx < minLon && dx < minLon) ||\n                          (cx > maxLon && dx > maxLon);\n        if (outside == false) {\n          // does box's top edge intersect polyline?\n          // ax = minLon, bx = maxLon, ay = maxLat, by = maxLat\n          if (orient(cx, cy, dx, dy, minLon, maxLat) * orient(cx, cy, dx, dy, maxLon, maxLat) <= 0 &&\n              orient(minLon, maxLat, maxLon, maxLat, cx, cy) * orient(minLon, maxLat, maxLon, maxLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's right edge intersect polyline?\n          // ax = maxLon, bx = maxLon, ay = maxLat, by = minLat\n          if (orient(cx, cy, dx, dy, maxLon, maxLat) * orient(cx, cy, dx, dy, maxLon, minLat) <= 0 &&\n              orient(maxLon, maxLat, maxLon, minLat, cx, cy) * orient(maxLon, maxLat, maxLon, minLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's bottom edge intersect polyline?\n          // ax = maxLon, bx = minLon, ay = minLat, by = minLat\n          if (orient(cx, cy, dx, dy, maxLon, minLat) * orient(cx, cy, dx, dy, minLon, minLat) <= 0 &&\n              orient(maxLon, minLat, minLon, minLat, cx, cy) * orient(maxLon, minLat, minLon, minLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's left edge intersect polyline?\n          // ax = minLon, bx = minLon, ay = minLat, by = maxLat\n          if (orient(cx, cy, dx, dy, minLon, minLat) * orient(cx, cy, dx, dy, minLon, maxLat) <= 0 &&\n              orient(minLon, minLat, minLon, maxLat, cx, cy) * orient(minLon, minLat, minLon, maxLat, dx, dy) <= 0) {\n            return true;\n          }\n        }\n        \n        if (left != null) {\n          if (left.crosses(minLat, maxLat, minLon, maxLon)) {\n            return true;\n          }\n        }\n        \n        if (right != null && maxLat >= low) {\n          if (right.crosses(minLat, maxLat, minLon, maxLon)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crossesBox(double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crosses(double,double,double,double).mjava","sourceNew":"    /** Returns true if the box crosses any edge in this edge subtree */\n    boolean crossesBox(double minLat, double maxLat, double minLon, double maxLon, boolean includeBoundary) {\n      // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n      if (minLat <= max) {\n        // we compute line intersections of every polygon edge with every box line.\n        // if we find one, return true.\n        // for each box line (AB):\n        //   for each poly line (CD):\n        //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n        double cy = lat1;\n        double dy = lat2;\n        double cx = lon1;\n        double dx = lon2;\n\n        // optimization: see if either end of the line segment is contained by the rectangle\n        if (Rectangle.containsPoint(cy, cx, minLat, maxLat, minLon, maxLon) ||\n            Rectangle.containsPoint(dy, dx, minLat, maxLat, minLon, maxLon)) {\n          return true;\n        }\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (cy < minLat && dy < minLat) ||\n            (cy > maxLat && dy > maxLat) ||\n            (cx < minLon && dx < minLon) ||\n            (cx > maxLon && dx > maxLon);\n\n        if (outside == false) {\n          if (includeBoundary == true &&\n              lineCrossesLineWithBoundary(cx, cy, dx, dy, minLon, minLat, maxLon, minLat) ||\n              lineCrossesLineWithBoundary(cx, cy, dx, dy, maxLon, minLat, maxLon, maxLat) ||\n              lineCrossesLineWithBoundary(cx, cy, dx, dy, maxLon, maxLat, maxLon, minLat) ||\n              lineCrossesLineWithBoundary(cx, cy, dx, dy, minLon, maxLat, minLon, minLat)) {\n            // include boundaries: ensures box edges that terminate on the polygon are included\n            return true;\n          } else if (lineCrossesLine(cx, cy, dx, dy, minLon, minLat, maxLon, minLat) ||\n              lineCrossesLine(cx, cy, dx, dy, maxLon, minLat, maxLon, maxLat) ||\n              lineCrossesLine(cx, cy, dx, dy, maxLon, maxLat, maxLon, minLat) ||\n              lineCrossesLine(cx, cy, dx, dy, minLon, maxLat, minLon, minLat)) {\n            return true;\n          }\n        }\n\n        if (left != null && left.crossesBox(minLat, maxLat, minLon, maxLon, includeBoundary)) {\n          return true;\n        }\n\n        if (right != null && maxLat >= low && right.crossesBox(minLat, maxLat, minLon, maxLon, includeBoundary)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    /** Returns true if the box crosses any edge in this edge subtree */\n    boolean crosses(double minLat, double maxLat, double minLon, double maxLon) {\n      // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n      if (minLat <= max) {\n        // we compute line intersections of every polygon edge with every box line.\n        // if we find one, return true.\n        // for each box line (AB):\n        //   for each poly line (CD):\n        //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n        double cy = lat1;\n        double dy = lat2;\n        double cx = lon1;\n        double dx = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (cy < minLat && dy < minLat) ||\n            (cy > maxLat && dy > maxLat) ||\n            (cx < minLon && dx < minLon) ||\n            (cx > maxLon && dx > maxLon);\n        // optimization: see if either end of the line segment is contained by the rectangle\n        if (Rectangle.containsPoint(cy, cx, minLat, maxLat, minLon, maxLon)\n            || Rectangle.containsPoint(dy, dx, minLat, maxLat, minLon, maxLon)) {\n          return true;\n        }\n\n        if (outside == false) {\n          // does box's top edge intersect polyline?\n          // ax = minLon, bx = maxLon, ay = maxLat, by = maxLat\n          if (orient(cx, cy, dx, dy, minLon, maxLat) * orient(cx, cy, dx, dy, maxLon, maxLat) <= 0 &&\n              orient(minLon, maxLat, maxLon, maxLat, cx, cy) * orient(minLon, maxLat, maxLon, maxLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's right edge intersect polyline?\n          // ax = maxLon, bx = maxLon, ay = maxLat, by = minLat\n          if (orient(cx, cy, dx, dy, maxLon, maxLat) * orient(cx, cy, dx, dy, maxLon, minLat) <= 0 &&\n              orient(maxLon, maxLat, maxLon, minLat, cx, cy) * orient(maxLon, maxLat, maxLon, minLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's bottom edge intersect polyline?\n          // ax = maxLon, bx = minLon, ay = minLat, by = minLat\n          if (orient(cx, cy, dx, dy, maxLon, minLat) * orient(cx, cy, dx, dy, minLon, minLat) <= 0 &&\n              orient(maxLon, minLat, minLon, minLat, cx, cy) * orient(maxLon, minLat, minLon, minLat, dx, dy) <= 0) {\n            return true;\n          }\n\n          // does box's left edge intersect polyline?\n          // ax = minLon, bx = minLon, ay = minLat, by = maxLat\n          if (orient(cx, cy, dx, dy, minLon, minLat) * orient(cx, cy, dx, dy, minLon, maxLat) <= 0 &&\n              orient(minLon, minLat, minLon, maxLat, cx, cy) * orient(minLon, minLat, minLon, maxLat, dx, dy) <= 0) {\n            return true;\n          }\n        }\n\n        if (left != null) {\n          if (left.crosses(minLat, maxLat, minLon, maxLon)) {\n            return true;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if (right.crosses(minLat, maxLat, minLon, maxLon)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["e4fccad460342b1af30cb328cc8297751a218d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc005279ab64cbf458ccef2ada610bc1a04b6139"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}