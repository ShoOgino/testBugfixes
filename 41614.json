{"path":"lucene/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"568cba246a11f491637ba492f881589c2142667c","date":1323623267,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer,\n                         new SearcherFactory() {\n                          @Override\n                          public IndexSearcher newSearcher(IndexReader r) throws IOException {\n                            TestNRTManager.this.warmCalled = true;\n                            IndexSearcher s = new IndexSearcher(r, es);\n                            s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                            return s;\n                          }\n                        }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer,\n                         new SearcherFactory() {\n                          @Override\n                          public IndexSearcher newSearcher(IndexReader r) throws IOException {\n                            TestNRTManager.this.warmCalled = true;\n                            IndexSearcher s = new IndexSearcher(r, es);\n                            s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                            return s;\n                          }\n                        }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer,\n                         new SearcherFactory() {\n                          @Override\n                          public IndexSearcher newSearcher(IndexReader r) throws IOException {\n                            TestNRTManager.this.warmCalled = true;\n                            IndexSearcher s = new IndexSearcher(r, es);\n                            s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                            return s;\n                          }\n                        }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(final ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer,\n                         new SearcherFactory() {\n                          @Override\n                          public IndexSearcher newSearcher(IndexReader r) throws IOException {\n                            TestNRTManager.this.warmCalled = true;\n                            IndexSearcher s = new IndexSearcher(r, es);\n                            s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                            return s;\n                          }\n                        }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"568cba246a11f491637ba492f881589c2142667c":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["568cba246a11f491637ba492f881589c2142667c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["df16fc2e9b615e0138edac46655ae628f5d098ad","568cba246a11f491637ba492f881589c2142667c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"568cba246a11f491637ba492f881589c2142667c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["568cba246a11f491637ba492f881589c2142667c","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}