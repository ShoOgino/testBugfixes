{"path":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getValue(SchemaField,IndexableField).mjava","commits":[{"id":"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","date":1318552491,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getValue(SchemaField,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"    public Object getValue(SchemaField sf, IndexableField f) throws Exception {\n      FieldType ft = null;\n      if(sf != null) ft =sf.getType();\n      \n      if (ft == null) {  // handle fields not in the schema\n        BytesRef bytesRef = f.binaryValue();\n        if (bytesRef != null) {\n          if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n            return bytesRef.bytes;\n          } else {\n            final byte[] bytes = new byte[bytesRef.length];\n            System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n            return bytes;\n          }\n        } else return f.stringValue();\n      } else {\n        if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n          return ft.toObject(f);\n        } else {\n          return ft.toExternal(f);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getValue(SchemaField,StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getValue(SchemaField,IndexableField).mjava","sourceNew":"    public Object getValue(SchemaField sf, StorableField f) throws Exception {\n      FieldType ft = null;\n      if(sf != null) ft =sf.getType();\n      \n      if (ft == null) {  // handle fields not in the schema\n        BytesRef bytesRef = f.binaryValue();\n        if (bytesRef != null) {\n          if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n            return bytesRef.bytes;\n          } else {\n            final byte[] bytes = new byte[bytesRef.length];\n            System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n            return bytes;\n          }\n        } else return f.stringValue();\n      } else {\n        if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n          return ft.toObject(f);\n        } else {\n          return ft.toExternal(f);\n        }\n      }\n    }\n\n","sourceOld":"    public Object getValue(SchemaField sf, IndexableField f) throws Exception {\n      FieldType ft = null;\n      if(sf != null) ft =sf.getType();\n      \n      if (ft == null) {  // handle fields not in the schema\n        BytesRef bytesRef = f.binaryValue();\n        if (bytesRef != null) {\n          if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n            return bytesRef.bytes;\n          } else {\n            final byte[] bytes = new byte[bytesRef.length];\n            System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n            return bytes;\n          }\n        } else return f.stringValue();\n      } else {\n        if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n          return ft.toObject(f);\n        } else {\n          return ft.toExternal(f);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getValue(SchemaField,StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getValue(SchemaField,IndexableField).mjava","sourceNew":"    public Object getValue(SchemaField sf, StorableField f) throws Exception {\n      FieldType ft = null;\n      if(sf != null) ft =sf.getType();\n      \n      if (ft == null) {  // handle fields not in the schema\n        BytesRef bytesRef = f.binaryValue();\n        if (bytesRef != null) {\n          if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n            return bytesRef.bytes;\n          } else {\n            final byte[] bytes = new byte[bytesRef.length];\n            System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n            return bytes;\n          }\n        } else return f.stringValue();\n      } else {\n        if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n          return ft.toObject(f);\n        } else {\n          return ft.toExternal(f);\n        }\n      }\n    }\n\n","sourceOld":"    public Object getValue(SchemaField sf, IndexableField f) throws Exception {\n      FieldType ft = null;\n      if(sf != null) ft =sf.getType();\n      \n      if (ft == null) {  // handle fields not in the schema\n        BytesRef bytesRef = f.binaryValue();\n        if (bytesRef != null) {\n          if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n            return bytesRef.bytes;\n          } else {\n            final byte[] bytes = new byte[bytesRef.length];\n            System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n            return bytes;\n          }\n        } else return f.stringValue();\n      } else {\n        if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n          return ft.toObject(f);\n        } else {\n          return ft.toExternal(f);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}