{"path":"src/test/org/apache/solr/search/TestDocSet#getDocSlice(OpenBitSet).mjava","commits":[{"id":"a52b36144a82ee78da623c584575fe306342dada","date":1246633761,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#getDocSlice(OpenBitSet).mjava","pathOld":"/dev/null","sourceNew":"  public DocSet getDocSlice(OpenBitSet bs) {\n    int len = (int)bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    OpenBitSetIterator iter = new OpenBitSetIterator(bs);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#getDocSlice(OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#getDocSlice(OpenBitSet).mjava","sourceNew":"  public DocSet getDocSlice(OpenBitSet bs) {\n    int len = (int)bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    OpenBitSetIterator iter = new OpenBitSetIterator(bs);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","sourceOld":"  public DocSet getDocSlice(OpenBitSet bs) {\n    int len = (int)bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    OpenBitSetIterator iter = new OpenBitSetIterator(bs);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52b36144a82ee78da623c584575fe306342dada":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a52b36144a82ee78da623c584575fe306342dada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a52b36144a82ee78da623c584575fe306342dada":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a52b36144a82ee78da623c584575fe306342dada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}