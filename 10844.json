{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","commits":[{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    create.process(cluster.getSolrClient());\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(cluster.getSolrClient());\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      cluster.getSolrClient().commit();\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fe190f27cc4076d6681cb10c6a326503ad5a17e7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    create.process(cluster.getSolrClient());\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(cluster.getSolrClient());\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      cluster.getSolrClient().commit();\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    create.process(cluster.getSolrClient());\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(cluster.getSolrClient());\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      cluster.getSolrClient().commit();\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a8694a87008a807285cc5c5bf08343d192fa4f5","date":1462392236,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(collectionName);\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    create.process(cluster.getSolrClient());\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(cluster.getSolrClient());\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      cluster.getSolrClient().commit();\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(collectionName);\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    create.process(cluster.getSolrClient());\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(cluster.getSolrClient());\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      cluster.getSolrClient().commit();\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(collectionName);\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    create.process(cluster.getSolrClient());\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(cluster.getSolrClient());\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      cluster.getSolrClient().commit();\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(collectionName);\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    create.process(cluster.getSolrClient());\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(cluster.getSolrClient());\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      cluster.getSolrClient().commit();\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(collectionName);\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","bugFix":null,"bugIntro":["076d58da25128e8a4c511abf07c5d86c4ebddcbf","076d58da25128e8a4c511abf07c5d86c4ebddcbf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(collectionName);\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["73450c0955930295d34703e7ddbfc6973b7a121a"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["55b50463286869f584cf849d1587a0fcd54d1dfa","6a8694a87008a807285cc5c5bf08343d192fa4f5"],"73450c0955930295d34703e7ddbfc6973b7a121a":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","6a8694a87008a807285cc5c5bf08343d192fa4f5"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a8694a87008a807285cc5c5bf08343d192fa4f5":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","4c623a7f72be34d6c45bee682028c50327d9e4b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c7a21395bae9e2f61aeb639f47aaca771c426ed"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"73450c0955930295d34703e7ddbfc6973b7a121a":["4c623a7f72be34d6c45bee682028c50327d9e4b7","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","6a8694a87008a807285cc5c5bf08343d192fa4f5","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed","55b50463286869f584cf849d1587a0fcd54d1dfa"],"6a8694a87008a807285cc5c5bf08343d192fa4f5":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}