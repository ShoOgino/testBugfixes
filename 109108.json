{"path":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveFreqNormAccumulator#add(int,long).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveFreqNormAccumulator#add(int,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Accumulate a (freq,norm) pair, updating this structure if there is no\n   *  equivalent or more competitive entry already. */\n  public void add(int freq, long norm) {\n    if (norm >= Byte.MIN_VALUE && norm <= Byte.MAX_VALUE) {\n      int index = Byte.toUnsignedInt((byte) norm);\n      maxFreqs[index] = Math.max(maxFreqs[index], freq); \n      dirty = true;\n    } else {\n      add(new FreqAndNorm(freq, norm));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#add(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveFreqNormAccumulator#add(int,long).mjava","sourceNew":"  /** Accumulate a (freq,norm) pair, updating this structure if there is no\n   *  equivalent or more competitive entry already. */\n  public void add(int freq, long norm) {\n    if (norm >= Byte.MIN_VALUE && norm <= Byte.MAX_VALUE) {\n      int index = Byte.toUnsignedInt((byte) norm);\n      maxFreqs[index] = Math.max(maxFreqs[index], freq); \n      dirty = true;\n    } else {\n      add(new Impact(freq, norm));\n    }\n  }\n\n","sourceOld":"  /** Accumulate a (freq,norm) pair, updating this structure if there is no\n   *  equivalent or more competitive entry already. */\n  public void add(int freq, long norm) {\n    if (norm >= Byte.MIN_VALUE && norm <= Byte.MAX_VALUE) {\n      int index = Byte.toUnsignedInt((byte) norm);\n      maxFreqs[index] = Math.max(maxFreqs[index], freq); \n      dirty = true;\n    } else {\n      add(new FreqAndNorm(freq, norm));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}