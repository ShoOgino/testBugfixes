{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","commits":[{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","pathOld":"/dev/null","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, false));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          // assume we're dead\n        } catch (InterruptedException e) {\n          // assume we're dead\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","pathOld":"/dev/null","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, false));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          // assume we're dead\n        } catch (InterruptedException e) {\n          // assume we're dead\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","pathOld":"/dev/null","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, false));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          // assume we're dead\n        } catch (InterruptedException e) {\n          // assume we're dead\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dd2b430bd970d889d5c094962234669067b7736","date":1328111530,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, false));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, false));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          // assume we're dead\n        } catch (InterruptedException e) {\n          // assume we're dead\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d7858f9d4fef8baad606ac4170dd29e1bc4008b","date":1330358427,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, true));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, false));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, true));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, false));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, true));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, true));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, true));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, true));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#amILeader().mjava","sourceNew":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, true));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","sourceOld":"      private boolean amILeader() {\n        try {\n          ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\"/overseer_elect/leader\", null, null, true));\n          if(myId.equals(props.get(\"id\"))) {\n            return true;\n          }\n        } catch (KeeperException e) {\n          log.warn(\"\", e);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n        return false;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["8d7858f9d4fef8baad606ac4170dd29e1bc4008b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["8dd2b430bd970d889d5c094962234669067b7736","8d7858f9d4fef8baad606ac4170dd29e1bc4008b"],"8dd2b430bd970d889d5c094962234669067b7736":["d0492616b11aace806d95ec9df44f57a60160bf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["8d7858f9d4fef8baad606ac4170dd29e1bc4008b","3f767f8c99eaedb984df754fe61f21c5de260f94"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0492616b11aace806d95ec9df44f57a60160bf7"],"d0492616b11aace806d95ec9df44f57a60160bf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0492616b11aace806d95ec9df44f57a60160bf7"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["8d7858f9d4fef8baad606ac4170dd29e1bc4008b","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8d7858f9d4fef8baad606ac4170dd29e1bc4008b":["8dd2b430bd970d889d5c094962234669067b7736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"8dd2b430bd970d889d5c094962234669067b7736":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8d7858f9d4fef8baad606ac4170dd29e1bc4008b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd92b8bcc88e969302510acf77bd6970da3994c4","d0492616b11aace806d95ec9df44f57a60160bf7","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"d0492616b11aace806d95ec9df44f57a60160bf7":["8dd2b430bd970d889d5c094962234669067b7736","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"8d7858f9d4fef8baad606ac4170dd29e1bc4008b":["3f767f8c99eaedb984df754fe61f21c5de260f94","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}