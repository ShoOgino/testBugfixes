{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    IndexReader reader = IndexReader.open(directory, true);\n    for (int i = 0; i < docs.length; i++) {\n      final FieldSelectorVisitor visitor = new FieldSelectorVisitor(SELECTOR);\n      reader.document(docs[i], visitor);\n      Document d = visitor.getDocument();\n      d.get(MAGIC_FIELD);\n\n      List<IndexableField> fields = d.getFields();\n      for (Iterator<IndexableField> fi = fields.iterator(); fi.hasNext(); ) {\n        IndexableField f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    IndexReader reader = IndexReader.open(directory, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":null,"sourceOld":"  public void doTest(int[] docs) throws Exception {\n    IndexReader reader = IndexReader.open(directory, true);\n    for (int i = 0; i < docs.length; i++) {\n      final FieldSelectorVisitor visitor = new FieldSelectorVisitor(SELECTOR);\n      reader.document(docs[i], visitor);\n      Document d = visitor.getDocument();\n      d.get(MAGIC_FIELD);\n\n      List<IndexableField> fields = d.getFields();\n      for (Iterator<IndexableField> fi = fields.iterator(); fi.hasNext(); ) {\n        IndexableField f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}