{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"dbba3c5be159d190b2b308dfc250c43531694ddb","date":1375234944,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      postingsWriter.finishTerm(longs, metaBytesOut, stats);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n      lastLongs = longs;\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b","date":1375270956,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      postingsWriter.finishTerm(longs, metaBytesOut, stats);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n      lastLongs = longs;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      postingsWriter.finishTerm(longs, metaBytesOut, stats);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n      lastLongs = longs;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abfc4a4873131874a50c6f6e3deb59a743ee1f44","date":1376737165,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, false);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i]);\n        lastLongs[i] += longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      postingsWriter.finishTerm(longs, metaBytesOut, stats);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n      lastLongs = longs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f8633b56150a205774ee3e2adf1452a81b0d904","date":1376926002,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, false);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i]);\n        lastLongs[i] += longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abfc4a4873131874a50c6f6e3deb59a743ee1f44":["646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b"],"646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b":["dbba3c5be159d190b2b308dfc250c43531694ddb"],"dbba3c5be159d190b2b308dfc250c43531694ddb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"4f8633b56150a205774ee3e2adf1452a81b0d904":["abfc4a4873131874a50c6f6e3deb59a743ee1f44"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abfc4a4873131874a50c6f6e3deb59a743ee1f44":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b":["abfc4a4873131874a50c6f6e3deb59a743ee1f44"],"dbba3c5be159d190b2b308dfc250c43531694ddb":["646afd4e29139bf4b06a5d88f6dcfdb5c2cd625b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbba3c5be159d190b2b308dfc250c43531694ddb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"4f8633b56150a205774ee3e2adf1452a81b0d904":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}