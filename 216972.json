{"path":"lucene/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","sourceNew":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","sourceOld":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}