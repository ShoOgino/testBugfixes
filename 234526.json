{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testAnalyzer().mjava","commits":[{"id":"a1607c8d45d996ef40c243758811c95b3670fd4d","date":1374047432,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that analyzer and tokenizerFactory is both specified */\n  public void testAnalyzer() throws Exception {\n    final String analyzer = CJKAnalyzer.class.getName();\n    final String tokenizerFactory = PatternTokenizerFactory.class.getName();\n    TokenFilterFactory factory = null;\n\n    factory = tokenFilterFactory(\"Synonym\",\n        \"synonyms\", \"synonyms2.txt\",\n        \"analyzer\", analyzer);\n    assertNotNull(factory);\n\n    try {\n      tokenFilterFactory(\"Synonym\",\n          \"synonyms\", \"synonyms.txt\",\n          \"analyzer\", analyzer,\n          \"tokenizerFactory\", tokenizerFactory);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Analyzer and TokenizerFactory can't be specified both\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that analyzer and tokenizerFactory is both specified */\n  public void testAnalyzer() throws Exception {\n    final String analyzer = CJKAnalyzer.class.getName();\n    final String tokenizerFactory = PatternTokenizerFactory.class.getName();\n    TokenFilterFactory factory = null;\n\n    factory = tokenFilterFactory(\"Synonym\",\n        \"synonyms\", \"synonyms2.txt\",\n        \"analyzer\", analyzer);\n    assertNotNull(factory);\n\n    try {\n      tokenFilterFactory(\"Synonym\",\n          \"synonyms\", \"synonyms.txt\",\n          \"analyzer\", analyzer,\n          \"tokenizerFactory\", tokenizerFactory);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Analyzer and TokenizerFactory can't be specified both\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testAnalyzer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testAnalyzer().mjava","sourceNew":"  /** Test that analyzer and tokenizerFactory is both specified */\n  public void testAnalyzer() throws Exception {\n    final String analyzer = CJKAnalyzer.class.getName();\n    final String tokenizerFactory = PatternTokenizerFactory.class.getName();\n    TokenFilterFactory factory = null;\n\n    factory = tokenFilterFactory(\"Synonym\",\n        \"synonyms\", \"synonyms2.txt\",\n        \"analyzer\", analyzer);\n    assertNotNull(factory);\n\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Synonym\",\n          \"synonyms\", \"synonyms.txt\",\n          \"analyzer\", analyzer,\n          \"tokenizerFactory\", tokenizerFactory);\n    });\n    assertTrue(expected.getMessage().contains(\"Analyzer and TokenizerFactory can't be specified both\"));\n  }\n\n","sourceOld":"  /** Test that analyzer and tokenizerFactory is both specified */\n  public void testAnalyzer() throws Exception {\n    final String analyzer = CJKAnalyzer.class.getName();\n    final String tokenizerFactory = PatternTokenizerFactory.class.getName();\n    TokenFilterFactory factory = null;\n\n    factory = tokenFilterFactory(\"Synonym\",\n        \"synonyms\", \"synonyms2.txt\",\n        \"analyzer\", analyzer);\n    assertNotNull(factory);\n\n    try {\n      tokenFilterFactory(\"Synonym\",\n          \"synonyms\", \"synonyms.txt\",\n          \"analyzer\", analyzer,\n          \"tokenizerFactory\", tokenizerFactory);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Analyzer and TokenizerFactory can't be specified both\"));\n    }\n  }\n\n","bugFix":["a1607c8d45d996ef40c243758811c95b3670fd4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["a1607c8d45d996ef40c243758811c95b3670fd4d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1607c8d45d996ef40c243758811c95b3670fd4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","a1607c8d45d996ef40c243758811c95b3670fd4d"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"a1607c8d45d996ef40c243758811c95b3670fd4d":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}