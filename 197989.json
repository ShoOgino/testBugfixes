{"path":"src/java/org/apache/lucene/search/function/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","commits":[{"id":"affefdda19991b74568e601456baad0c8e5c2f65","date":1266776825,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery#customExplain(int,Explanation,Explanation).mjava","sourceNew":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    exp.addDetail(valSrcExpl);\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    exp.addDetail(valSrcExpl);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreProvider#customExplain(int,Explanation,Explanation).mjava","sourceNew":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    exp.addDetail(valSrcExpl);\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float)}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpl explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) throws IOException {\n    float valSrcScore = 1;\n    if (valSrcExpl != null) {\n      valSrcScore *= valSrcExpl.getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    exp.addDetail(valSrcExpl);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"affefdda19991b74568e601456baad0c8e5c2f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["affefdda19991b74568e601456baad0c8e5c2f65"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["affefdda19991b74568e601456baad0c8e5c2f65"],"affefdda19991b74568e601456baad0c8e5c2f65":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}