{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryParserHelper#setQueryNodeProcessor(QueryNodeProcessor).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryParserHelper#setQueryNodeProcessor(QueryNodeProcessor).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryParserHelper#setQueryNodeProcessor(QueryNodeProcessor).mjava","sourceNew":"  /**\n   * Sets the processor that will be used to process the query node tree. If\n   * there is any {@link QueryConfigHandler} returned by\n   * {@link #getQueryConfigHandler()}, it will be set on the processor. The\n   * argument can be <code>null</code>, which means that no processor will be\n   * used to process the query node tree.\n   * \n   * @param processor\n   *          the processor that will be used to process the query node tree,\n   *          this argument can be <code>null</code>\n   * \n   * @see #getQueryNodeProcessor()\n   * @see QueryNodeProcessor\n   */\n  public void setQueryNodeProcessor(QueryNodeProcessor processor) {\n    this.processor = processor;\n    this.processor.setQueryConfigHandler(getQueryConfigHandler());\n\n  }\n\n","sourceOld":"  /**\n   * Sets the processor that will be used to process the query node tree. If\n   * there is any {@link QueryConfigHandler} returned by\n   * {@link #getQueryConfigHandler()}, it will be set on the processor. The\n   * argument can be <code>null</code>, which means that no processor will be\n   * used to process the query node tree.\n   * \n   * @param processor\n   *          the processor that will be used to process the query node tree,\n   *          this argument can be <code>null</code>\n   * \n   * @see #getQueryNodeProcessor()\n   * @see QueryNodeProcessor\n   */\n  public void setQueryNodeProcessor(QueryNodeProcessor processor) {\n    this.processor = processor;\n    this.processor.setQueryConfigHandler(getQueryConfigHandler());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryParserHelper#setQueryNodeProcessor(QueryNodeProcessor).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryParserHelper#setQueryNodeProcessor(QueryNodeProcessor).mjava","sourceNew":"  /**\n   * Sets the processor that will be used to process the query node tree. If\n   * there is any {@link QueryConfigHandler} returned by\n   * {@link #getQueryConfigHandler()}, it will be set on the processor. The\n   * argument can be <code>null</code>, which means that no processor will be\n   * used to process the query node tree.\n   * \n   * @param processor\n   *          the processor that will be used to process the query node tree,\n   *          this argument can be <code>null</code>\n   * \n   * @see #getQueryNodeProcessor()\n   * @see QueryNodeProcessor\n   */\n  public void setQueryNodeProcessor(QueryNodeProcessor processor) {\n    this.processor = processor;\n    this.processor.setQueryConfigHandler(getQueryConfigHandler());\n\n  }\n\n","sourceOld":"  /**\n   * Sets the processor that will be used to process the query node tree. If\n   * there is any {@link QueryConfigHandler} returned by\n   * {@link #getQueryConfigHandler()}, it will be set on the processor. The\n   * argument can be <code>null</code>, which means that no processor will be\n   * used to process the query node tree.\n   * \n   * @param processor\n   *          the processor that will be used to process the query node tree,\n   *          this argument can be <code>null</code>\n   * \n   * @see #getQueryNodeProcessor()\n   * @see QueryNodeProcessor\n   */\n  public void setQueryNodeProcessor(QueryNodeProcessor processor) {\n    this.processor = processor;\n    this.processor.setQueryConfigHandler(getQueryConfigHandler());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}