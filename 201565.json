{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","commits":[{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","pathOld":"/dev/null","sourceNew":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          assert scorer instanceof TermAutomatonScorer;\n          this.scorer = scorer;\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","sourceNew":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n          while (scorer instanceof AssertingScorer) {\n            scorer = ((AssertingScorer) scorer).getIn();\n          }\n          assert scorer instanceof TermAutomatonScorer;\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          assert scorer instanceof TermAutomatonScorer;\n          this.scorer = scorer;\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","sourceNew":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n          while (scorer instanceof AssertingScorer) {\n            scorer = ((AssertingScorer) scorer).getIn();\n          }\n          assert scorer instanceof TermAutomatonScorer;\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n          while (scorer instanceof AssertingScorer) {\n            scorer = ((AssertingScorer) scorer).getIn();\n          }\n          assert scorer instanceof TermAutomatonScorer;\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f39ae26126a88ee050e14ab738bb6c6d0dad877","date":1478516006,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","sourceNew":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n          while (scorer instanceof AssertingScorer) {\n            scorer = ((AssertingScorer) scorer).getIn();\n          }\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n          while (scorer instanceof AssertingScorer) {\n            scorer = ((AssertingScorer) scorer).getIn();\n          }\n          assert scorer instanceof TermAutomatonScorer;\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","sourceNew":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n          while (scorer instanceof AssertingScorer) {\n            scorer = ((AssertingScorer) scorer).getIn();\n          }\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n          while (scorer instanceof AssertingScorer) {\n            scorer = ((AssertingScorer) scorer).getIn();\n          }\n          assert scorer instanceof TermAutomatonScorer;\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testFreq().mjava","sourceNew":null,"sourceOld":"  public void testFreq() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // matches freq == 3\n    doc.add(newTextField(\"field\", \"here comes the sun foo bar here comes another sun here comes shiny sun\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // doesn't match\n    doc.add(newTextField(\"field\", \"here comes the other sun\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int init = q.createState();\n    int s1 = q.createState();\n    q.addTransition(init, s1, \"comes\");\n    int s2 = q.createState();\n    q.addAnyTransition(s1, s2);\n    int s3 = q.createState();\n    q.setAccept(s3, true);\n    q.addTransition(s2, s3, \"sun\");\n    q.finish();\n\n    s.search(q, new SimpleCollector() {\n        private Scorer scorer;\n\n        @Override\n        public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n          while (scorer instanceof AssertingScorer) {\n            scorer = ((AssertingScorer) scorer).getIn();\n          }\n        }\n\n        @Override\n        public void collect(int docID) throws IOException {\n          assertEquals(3, scorer.freq());\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6f39ae26126a88ee050e14ab738bb6c6d0dad877":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["6f39ae26126a88ee050e14ab738bb6c6d0dad877"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["781239fc84d36be12b84e4d3e2618f5f07a182e3","6f39ae26126a88ee050e14ab738bb6c6d0dad877"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"]},"commit2Childs":{"6f39ae26126a88ee050e14ab738bb6c6d0dad877":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["6f39ae26126a88ee050e14ab738bb6c6d0dad877","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}