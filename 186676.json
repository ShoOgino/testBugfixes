{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","commits":[{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Extracts all the alised fields from the requests and adds them to up\n   * @param up\n   * @param tiebreaker\n   * @throws ParseException \n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) throws ParseException {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Extracts all the alised fields from the requests and adds them to up\n   * @param up\n   * @param tiebreaker\n   * @throws ParseException \n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) throws ParseException {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","sourceNew":"  /**\n   * Extracts all the alised fields from the requests and adds them to up\n   * @param up\n   * @param tiebreaker\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Extracts all the alised fields from the requests and adds them to up\n   * @param up\n   * @param tiebreaker\n   * @throws ParseException \n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) throws ParseException {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","bugFix":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","sourceNew":"  /**\n   * Extracts all the alised fields from the requests and adds them to up\n   * @param up\n   * @param tiebreaker\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Extracts all the alised fields from the requests and adds them to up\n   * @param up\n   * @param tiebreaker\n   * @throws ParseException \n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) throws ParseException {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","sourceNew":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Extracts all the alised fields from the requests and adds them to up\n   * @param up\n   * @param tiebreaker\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","sourceNew":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = config.solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = config.solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","sourceNew":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = config.solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = config.solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"c7e79e31f55cbb444e3023d430a340658755aa31":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}