{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","commits":[{"id":"4b53a9a930ee01857178a1b512fbab24642f3fa8","date":1354471097,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.isIndexed() && !field.omitsNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = new NumericDocValues.EMPTY(reader.maxDoc());\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30664cb1b9c7d634d5001fa13052e8adb962ea7c","date":1355178731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.isIndexed() && !field.omitsNorms() && field.getNormType() != null) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = new NumericDocValues.EMPTY(reader.maxDoc());\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.isIndexed() && !field.omitsNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = new NumericDocValues.EMPTY(reader.maxDoc());\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dec29dc8d723895339aee1463a6393a4026558d8","date":1355857014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.isIndexed() && !field.omitsNorms() && field.getNormType() != null) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = new NumericDocValues.EMPTY(reader.maxDoc());\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.isIndexed() && !field.omitsNorms() && field.getNormType() != null) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = new NumericDocValues.EMPTY(reader.maxDoc());\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.isIndexed() && !field.omitsNorms() && field.getNormType() != null) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.isIndexed() && !field.omitsNorms() && field.getNormType() != null) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = new NumericDocValues.EMPTY(reader.maxDoc());\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6","date":1357912799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.isIndexed() && !field.omitsNorms() && field.getNormType() != null) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.normsFormat() != null) {\n      DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.getNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.simpleNormsFormat() != null) {\n      SimpleDVConsumer consumer = codec.simpleNormsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.simpleNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b57ad184373369f2ee65828cd86b30da949653f6","date":1360243980,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.normsFormat() != null) {\n      DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.getNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleNorms(SegmentWriteState segmentWriteState) throws IOException {\n    if (codec.normsFormat() != null) {\n      DocValuesConsumer consumer = codec.normsFormat().normsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          if (field.hasNorms()) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues norms = reader.getNormValues(field.name);\n              if (norms == null) {\n                norms = NumericDocValues.EMPTY;\n              }\n              toMerge.add(norms);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dec29dc8d723895339aee1463a6393a4026558d8":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"b57ad184373369f2ee65828cd86b30da949653f6":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["4b53a9a930ee01857178a1b512fbab24642f3fa8"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["dec29dc8d723895339aee1463a6393a4026558d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["b57ad184373369f2ee65828cd86b30da949653f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b53a9a930ee01857178a1b512fbab24642f3fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dec29dc8d723895339aee1463a6393a4026558d8":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["dec29dc8d723895339aee1463a6393a4026558d8"],"b57ad184373369f2ee65828cd86b30da949653f6":[],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b57ad184373369f2ee65828cd86b30da949653f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}