{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":"    @Override\n    public void setNextReader(IndexReader reader, int docBase) throws IOException {\n      currentReaderValues = FieldCache.DEFAULT.getShorts(reader, field, parser);\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(IndexReader reader, int docBase) throws IOException {\n      currentReaderValues = FieldCache.DEFAULT.getShorts(reader, field, parser);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eed5547b2f58afdc475cc06312622f5bcf220c2","date":1284156494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      currentReaderValues = FieldCache.DEFAULT.getShorts(reader, field, parser);\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(IndexReader reader, int docBase) throws IOException {\n      currentReaderValues = FieldCache.DEFAULT.getShorts(reader, field, parser);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff1421d1974cfd5072e195bbb63592657da2f66e","date":1285733489,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      cached = FieldCache.DEFAULT.getShorts(reader, creator.field, creator );\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      currentReaderValues = FieldCache.DEFAULT.getShorts(reader, field, parser);\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53b177c3833d5ccb59768c3b9ff78e9d0bdb213a","date":1291860358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      setup( FieldCache.DEFAULT.getShorts(reader, creator.field, creator));\n      docValues = cached.values;\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      cached = FieldCache.DEFAULT.getShorts(reader, creator.field, creator );\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      setup( FieldCache.DEFAULT.getShorts(reader, creator.field, creator));\n      docValues = cached.values;\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      cached = FieldCache.DEFAULT.getShorts(reader, creator.field, creator );\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      setup( FieldCache.DEFAULT.getShorts(reader, creator.field, creator));\n      docValues = cached.values;\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(IndexReader reader, int docBase) throws IOException {\n      currentReaderValues = FieldCache.DEFAULT.getShorts(reader, field, parser);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      setup( FieldCache.DEFAULT.getShorts(reader, creator.field, creator));\n      docValues = cached.values;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      setup( FieldCache.DEFAULT.getShorts(reader, creator.field, creator));\n      docValues = cached.values;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.ShortComparator#setNextReader(IndexReader,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n      setup( FieldCache.DEFAULT.getShorts(reader, creator.field, creator));\n      docValues = cached.values;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"323f871ffe96b871d8c534a614be60751bb023c2":["53b177c3833d5ccb59768c3b9ff78e9d0bdb213a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","323f871ffe96b871d8c534a614be60751bb023c2"],"53b177c3833d5ccb59768c3b9ff78e9d0bdb213a":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["ff1421d1974cfd5072e195bbb63592657da2f66e","53b177c3833d5ccb59768c3b9ff78e9d0bdb213a"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53b177c3833d5ccb59768c3b9ff78e9d0bdb213a"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["9eed5547b2f58afdc475cc06312622f5bcf220c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["323f871ffe96b871d8c534a614be60751bb023c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"323f871ffe96b871d8c534a614be60751bb023c2":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"53b177c3833d5ccb59768c3b9ff78e9d0bdb213a":["323f871ffe96b871d8c534a614be60751bb023c2","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["53b177c3833d5ccb59768c3b9ff78e9d0bdb213a","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9eed5547b2f58afdc475cc06312622f5bcf220c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}