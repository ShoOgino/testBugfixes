{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n    assert ordBitSet.cardinality() == 0: \"cardinality=\" + ordBitSet.cardinality();\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n\n      ordBitSet.set(reader.ord());\n\n      // Start at 1 because we already did the first value above (so we could keep the split value):\n      for(int i=1;i<rightCount;i++) {\n        result = reader.next();\n        assert result;\n        ordBitSet.set(reader.ord());\n      }\n\n      assert rightCount == ordBitSet.cardinality(): \"rightCount=\" + rightCount + \" cardinality=\" + ordBitSet.cardinality();\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n    assert numDims == 1 || ordBitSet.cardinality() == 0: \"cardinality=\" + ordBitSet.cardinality();\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          assert result;\n          ordBitSet.set(reader.ord());\n        }\n\n        assert rightCount == ordBitSet.cardinality(): \"rightCount=\" + rightCount + \" cardinality=\" + ordBitSet.cardinality();\n      }\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n    assert ordBitSet.cardinality() == 0: \"cardinality=\" + ordBitSet.cardinality();\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n\n      ordBitSet.set(reader.ord());\n\n      // Start at 1 because we already did the first value above (so we could keep the split value):\n      for(int i=1;i<rightCount;i++) {\n        result = reader.next();\n        assert result;\n        ordBitSet.set(reader.ord());\n      }\n\n      assert rightCount == ordBitSet.cardinality(): \"rightCount=\" + rightCount + \" cardinality=\" + ordBitSet.cardinality();\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f98003536a7c3219145464b5257847e14d301cd","date":1457781423,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          assert result;\n          ordBitSet.set(reader.ord());\n        }\n      }\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n    assert numDims == 1 || ordBitSet.cardinality() == 0: \"cardinality=\" + ordBitSet.cardinality();\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          assert result;\n          ordBitSet.set(reader.ord());\n        }\n\n        assert rightCount == ordBitSet.cardinality(): \"rightCount=\" + rightCount + \" cardinality=\" + ordBitSet.cardinality();\n      }\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ed62631cb6b87224983183db11a843905d02a8","date":1458223828,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          assert result;\n          assert ordBitSet.get(reader.ord()) == false;\n          ordBitSet.set(reader.ord());\n        }\n      }\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          assert result;\n          ordBitSet.set(reader.ord());\n        }\n      }\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          if (result == false) {\n            throw new IllegalStateException(\"did not see enough points from reader=\" + reader);\n          }\n          assert ordBitSet.get(reader.ord()) == false: \"ord=\" + reader.ord() + \" was seen twice from \" + source.writer;\n          ordBitSet.set(reader.ord());\n        }\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          assert result;\n          assert ordBitSet.get(reader.ord()) == false;\n          ordBitSet.set(reader.ord());\n        }\n      }\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40","date":1458553787,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          if (result == false) {\n            throw new IllegalStateException(\"did not see enough points from reader=\" + reader);\n          }\n          assert ordBitSet.get(reader.ord()) == false: \"ord=\" + reader.ord() + \" was seen twice from \" + source.writer;\n          ordBitSet.set(reader.ord());\n        }\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          if (result == false) {\n            throw new IllegalStateException(\"did not see enough points from reader=\" + reader);\n          }\n          assert ordBitSet.get(reader.ord()) == false: \"ord=\" + reader.ord() + \" was seen twice from \" + source.writer;\n          ordBitSet.set(reader.ord());\n        }\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eb86b08ad0b927f25ab9f04d077bc51fc6df039","date":1458906280,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n\n        // Start at 1 because we already did the first value above (so we could keep the split value):\n        for(int i=1;i<rightCount;i++) {\n          result = reader.next();\n          if (result == false) {\n            throw new IllegalStateException(\"did not see enough points from reader=\" + reader);\n          }\n          assert ordBitSet.get(reader.ord()) == false: \"ord=\" + reader.ord() + \" was seen twice from \" + source.writer;\n          ordBitSet.set(reader.ord());\n        }\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDataDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"452aca01058c8a4e6827ff9096664dde4a1d9790","date":1543310809,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numIndexDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDataDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5db3224bb6ba28cb735531b45593da725fa751d1","date":1547448966,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numIndexDims > 1 && ordBitSet != null) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numIndexDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":null,"sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result: \"rightCount=\" + rightCount + \" source.count=\" + source.count + \" source.writer=\" + source.writer;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numIndexDims > 1 && ordBitSet != null) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"452aca01058c8a4e6827ff9096664dde4a1d9790":["f6652c943595e92c187ee904c382863013eae28f"],"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["950b7a6881d14da782b60444c11295e3ec50d41a"],"f7ed62631cb6b87224983183db11a843905d02a8":["7f98003536a7c3219145464b5257847e14d301cd"],"5db3224bb6ba28cb735531b45593da725fa751d1":["452aca01058c8a4e6827ff9096664dde4a1d9790"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"f6652c943595e92c187ee904c382863013eae28f":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"3eb86b08ad0b927f25ab9f04d077bc51fc6df039":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["5db3224bb6ba28cb735531b45593da725fa751d1"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["3eb86b08ad0b927f25ab9f04d077bc51fc6df039"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"950b7a6881d14da782b60444c11295e3ec50d41a":["f7ed62631cb6b87224983183db11a843905d02a8"],"7f98003536a7c3219145464b5257847e14d301cd":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"9856095f7afb5a607bf5e65077615ed91273508c":["3eb86b08ad0b927f25ab9f04d077bc51fc6df039","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"452aca01058c8a4e6827ff9096664dde4a1d9790":["5db3224bb6ba28cb735531b45593da725fa751d1"],"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["3eb86b08ad0b927f25ab9f04d077bc51fc6df039"],"f7ed62631cb6b87224983183db11a843905d02a8":["950b7a6881d14da782b60444c11295e3ec50d41a"],"5db3224bb6ba28cb735531b45593da725fa751d1":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["f6652c943595e92c187ee904c382863013eae28f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["7f98003536a7c3219145464b5257847e14d301cd"],"f6652c943595e92c187ee904c382863013eae28f":["452aca01058c8a4e6827ff9096664dde4a1d9790"],"3eb86b08ad0b927f25ab9f04d077bc51fc6df039":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"950b7a6881d14da782b60444c11295e3ec50d41a":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"7f98003536a7c3219145464b5257847e14d301cd":["f7ed62631cb6b87224983183db11a843905d02a8"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}