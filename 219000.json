{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testBlendedInfixSuggesterDedupsOnWeightTitleAndPayload().mjava","commits":[{"id":"2ec6c19dff256627e4b5aabbeb0ae45379f0cbb2","date":1436996676,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggesterTest#testBlendedInfixSuggesterDedupsOnWeightTitleAndPayload().mjava","pathOld":"/dev/null","sourceNew":"  public void testBlendedInfixSuggesterDedupsOnWeightTitleAndPayload() throws Exception {\n\n    //exactly same inputs\n    Input[] inputDocuments = new Input[] {\n        new Input(\"lend me your ear\", 7, new BytesRef(\"uid1\")),\n        new Input(\"lend me your ear\", 7, new BytesRef(\"uid1\")),\n    };\n    duplicateCheck(inputDocuments, 1);\n\n    // inputs differ on payload\n    inputDocuments = new Input[] {\n        new Input(\"lend me your ear\", 7, new BytesRef(\"uid1\")),\n        new Input(\"lend me your ear\", 7, new BytesRef(\"uid2\")),\n    };\n    duplicateCheck(inputDocuments, 2);\n\n    //exactly same input without payloads\n    inputDocuments = new Input[] {\n        new Input(\"lend me your ear\", 7),\n        new Input(\"lend me your ear\", 7),\n    };\n    duplicateCheck(inputDocuments, 1);\n\n    //Same input with first has payloads, second does not\n    inputDocuments = new Input[] {\n        new Input(\"lend me your ear\", 7, new BytesRef(\"uid1\")),\n        new Input(\"lend me your ear\", 7),\n    };\n    duplicateCheck(inputDocuments, 2);\n\n    /**same input, first not having a payload, the second having payload\n     * we would expect 2 entries out but we are getting only 1 because\n     * the InputArrayIterator#hasPayloads() returns false because the first\n     * item has no payload, therefore, when ingested, none of the 2 input has payload and become 1\n     */\n    inputDocuments = new Input[] {\n        new Input(\"lend me your ear\", 7),\n        new Input(\"lend me your ear\", 7, new BytesRef(\"uid2\")),\n    };\n    List<Lookup.LookupResult> results = duplicateCheck(inputDocuments, 1);\n    assertNull(results.get(0).payload);\n\n\n    //exactly same inputs but different weight\n    inputDocuments = new Input[] {\n        new Input(\"lend me your ear\", 1, new BytesRef(\"uid1\")),\n        new Input(\"lend me your ear\", 7, new BytesRef(\"uid1\")),\n    };\n    duplicateCheck(inputDocuments, 2);\n\n    //exactly same inputs but different text\n    inputDocuments = new Input[] {\n        new Input(\"lend me your earings\", 7, new BytesRef(\"uid1\")),\n        new Input(\"lend me your ear\", 7, new BytesRef(\"uid1\")),\n    };\n    duplicateCheck(inputDocuments, 2);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ec6c19dff256627e4b5aabbeb0ae45379f0cbb2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ec6c19dff256627e4b5aabbeb0ae45379f0cbb2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ec6c19dff256627e4b5aabbeb0ae45379f0cbb2"],"2ec6c19dff256627e4b5aabbeb0ae45379f0cbb2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}