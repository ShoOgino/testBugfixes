{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrServer,long,Date).mjava","sourceNew":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrClient to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrClient client, final long timeout,\n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    SolrParams p = params(\"action\",\"status\", \"core\", \"collection1\");\n    while (timeSlept < timeout) {\n      QueryRequest req = new QueryRequest(p);\n      req.setPath(\"/admin/cores\");\n      try {\n        NamedList data = client.request(req);\n        for (String k : new String[] {\"status\",\"collection1\"}) {\n          Object o = data.get(k);\n          assertNotNull(\"core status rsp missing key: \" + k, o);\n          data = (NamedList) o;\n        }\n        Date startTime = (Date) data.get(\"startTime\");\n        assertNotNull(\"core has null startTime\", startTime);\n        if (null == min || startTime.after(min)) {\n          return startTime;\n        }\n      } catch (SolrException e) {\n        // workarround for SOLR-4668\n        if (500 != e.code()) {\n          throw e;\n        } // else server possibly from the core reload in progress...\n      }\n\n      timeSlept += sleepInterval;\n      Thread.sleep(sleepInterval);\n    }\n    fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n    return min; // compilation neccessity\n  }\n\n","sourceOld":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrServer to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrServer client, final long timeout, \n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    SolrParams p = params(\"action\",\"status\", \"core\", \"collection1\");\n    while (timeSlept < timeout) {\n      QueryRequest req = new QueryRequest(p);\n      req.setPath(\"/admin/cores\");\n      try {\n        NamedList data = client.request(req);\n        for (String k : new String[] {\"status\",\"collection1\"}) {\n          Object o = data.get(k);\n          assertNotNull(\"core status rsp missing key: \" + k, o);\n          data = (NamedList) o;\n        }\n        Date startTime = (Date) data.get(\"startTime\");\n        assertNotNull(\"core has null startTime\", startTime);\n        if (null == min || startTime.after(min)) {\n          return startTime;\n        }\n      } catch (SolrException e) {\n        // workarround for SOLR-4668\n        if (500 != e.code()) {\n          throw e;\n        } // else server possibly from the core reload in progress...\n      }\n\n      timeSlept += sleepInterval;\n      Thread.sleep(sleepInterval);\n    }\n    fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n    return min; // compilation neccessity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","sourceNew":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrClient to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrClient client, final long timeout,\n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    HttpSolrClient adminClient = adminClient(client);\n    try {\n      SolrParams p = params(\"action\", \"status\", \"core\", \"collection1\");\n      while (timeSlept < timeout) {\n        QueryRequest req = new QueryRequest(p);\n        req.setPath(\"/admin/cores\");\n        try {\n          NamedList data = adminClient.request(req);\n          for (String k : new String[]{\"status\", \"collection1\"}) {\n            Object o = data.get(k);\n            assertNotNull(\"core status rsp missing key: \" + k, o);\n            data = (NamedList) o;\n          }\n          Date startTime = (Date) data.get(\"startTime\");\n          assertNotNull(\"core has null startTime\", startTime);\n          if (null == min || startTime.after(min)) {\n            return startTime;\n          }\n        } catch (SolrException e) {\n          // workarround for SOLR-4668\n          if (500 != e.code()) {\n            throw e;\n          } // else server possibly from the core reload in progress...\n        }\n\n        timeSlept += sleepInterval;\n        Thread.sleep(sleepInterval);\n      }\n      fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n      return min; // compilation neccessity\n    }\n    finally {\n      adminClient.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrClient to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrClient client, final long timeout,\n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    SolrParams p = params(\"action\",\"status\", \"core\", \"collection1\");\n    while (timeSlept < timeout) {\n      QueryRequest req = new QueryRequest(p);\n      req.setPath(\"/admin/cores\");\n      try {\n        NamedList data = client.request(req);\n        for (String k : new String[] {\"status\",\"collection1\"}) {\n          Object o = data.get(k);\n          assertNotNull(\"core status rsp missing key: \" + k, o);\n          data = (NamedList) o;\n        }\n        Date startTime = (Date) data.get(\"startTime\");\n        assertNotNull(\"core has null startTime\", startTime);\n        if (null == min || startTime.after(min)) {\n          return startTime;\n        }\n      } catch (SolrException e) {\n        // workarround for SOLR-4668\n        if (500 != e.code()) {\n          throw e;\n        } // else server possibly from the core reload in progress...\n      }\n\n      timeSlept += sleepInterval;\n      Thread.sleep(sleepInterval);\n    }\n    fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n    return min; // compilation neccessity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","sourceNew":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrClient to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrClient client, final long timeout,\n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    try (HttpSolrClient adminClient = adminClient(client)) {\n      SolrParams p = params(\"action\", \"status\", \"core\", \"collection1\");\n      while (timeSlept < timeout) {\n        QueryRequest req = new QueryRequest(p);\n        req.setPath(\"/admin/cores\");\n        try {\n          NamedList data = adminClient.request(req);\n          for (String k : new String[]{\"status\", \"collection1\"}) {\n            Object o = data.get(k);\n            assertNotNull(\"core status rsp missing key: \" + k, o);\n            data = (NamedList) o;\n          }\n          Date startTime = (Date) data.get(\"startTime\");\n          assertNotNull(\"core has null startTime\", startTime);\n          if (null == min || startTime.after(min)) {\n            return startTime;\n          }\n        } catch (SolrException e) {\n          // workarround for SOLR-4668\n          if (500 != e.code()) {\n            throw e;\n          } // else server possibly from the core reload in progress...\n        }\n\n        timeSlept += sleepInterval;\n        Thread.sleep(sleepInterval);\n      }\n      fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n      return min; // compilation neccessity\n    }\n  }\n\n","sourceOld":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrClient to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrClient client, final long timeout,\n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    HttpSolrClient adminClient = adminClient(client);\n    try {\n      SolrParams p = params(\"action\", \"status\", \"core\", \"collection1\");\n      while (timeSlept < timeout) {\n        QueryRequest req = new QueryRequest(p);\n        req.setPath(\"/admin/cores\");\n        try {\n          NamedList data = adminClient.request(req);\n          for (String k : new String[]{\"status\", \"collection1\"}) {\n            Object o = data.get(k);\n            assertNotNull(\"core status rsp missing key: \" + k, o);\n            data = (NamedList) o;\n          }\n          Date startTime = (Date) data.get(\"startTime\");\n          assertNotNull(\"core has null startTime\", startTime);\n          if (null == min || startTime.after(min)) {\n            return startTime;\n          }\n        } catch (SolrException e) {\n          // workarround for SOLR-4668\n          if (500 != e.code()) {\n            throw e;\n          } // else server possibly from the core reload in progress...\n        }\n\n        timeSlept += sleepInterval;\n        Thread.sleep(sleepInterval);\n      }\n      fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n      return min; // compilation neccessity\n    }\n    finally {\n      adminClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","sourceNew":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrClient to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrClient client, final long timeout,\n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    try (HttpSolrClient adminClient = adminClient(client)) {\n      SolrParams p = params(\"action\", \"status\", \"core\", \"collection1\");\n      while (timeSlept < timeout) {\n        QueryRequest req = new QueryRequest(p);\n        req.setPath(\"/admin/cores\");\n        try {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList data = adminClient.request(req);\n          for (String k : new String[]{\"status\", \"collection1\"}) {\n            Object o = data.get(k);\n            assertNotNull(\"core status rsp missing key: \" + k, o);\n            data = (NamedList) o;\n          }\n          Date startTime = (Date) data.get(\"startTime\");\n          assertNotNull(\"core has null startTime\", startTime);\n          if (null == min || startTime.after(min)) {\n            return startTime;\n          }\n        } catch (SolrException e) {\n          // workarround for SOLR-4668\n          if (500 != e.code()) {\n            throw e;\n          } // else server possibly from the core reload in progress...\n        }\n\n        timeSlept += sleepInterval;\n        Thread.sleep(sleepInterval);\n      }\n      fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n      return min; // compilation neccessity\n    }\n  }\n\n","sourceOld":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrClient to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrClient client, final long timeout,\n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    try (HttpSolrClient adminClient = adminClient(client)) {\n      SolrParams p = params(\"action\", \"status\", \"core\", \"collection1\");\n      while (timeSlept < timeout) {\n        QueryRequest req = new QueryRequest(p);\n        req.setPath(\"/admin/cores\");\n        try {\n          NamedList data = adminClient.request(req);\n          for (String k : new String[]{\"status\", \"collection1\"}) {\n            Object o = data.get(k);\n            assertNotNull(\"core status rsp missing key: \" + k, o);\n            data = (NamedList) o;\n          }\n          Date startTime = (Date) data.get(\"startTime\");\n          assertNotNull(\"core has null startTime\", startTime);\n          if (null == min || startTime.after(min)) {\n            return startTime;\n          }\n        } catch (SolrException e) {\n          // workarround for SOLR-4668\n          if (500 != e.code()) {\n            throw e;\n          } // else server possibly from the core reload in progress...\n        }\n\n        timeSlept += sleepInterval;\n        Thread.sleep(sleepInterval);\n      }\n      fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n      return min; // compilation neccessity\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["cc3b13b430571c2e169f98fe38e1e7666f88522d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}