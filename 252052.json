{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(ReaderContext,Weight,Filter,Collector).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(ReaderContext,Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(IndexReader,Weight,Filter,Collector).mjava","sourceNew":"  private void searchWithFilter(ReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, true, false);\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":"  private void searchWithFilter(IndexReader reader, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(reader, true, false);\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(reader);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(ReaderContext,Weight,Filter,Collector).mjava","sourceNew":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, true, false);\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":"  private void searchWithFilter(ReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, true, false);\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}