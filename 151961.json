{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum,NormsProducer).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum, NormsProducer norms) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen, norms);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}