{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#WordDelimiterGraphFilterFactory(Map[String,String]).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#WordDelimiterGraphFilterFactory(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a new WordDelimiterGraphFilterFactory */\n  public WordDelimiterGraphFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#WordDelimiterGraphFilterFactory(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a new WordDelimiterGraphFilterFactory */\n  public WordDelimiterGraphFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47e241984c8185946746fd8e18cff4200659091e","date":1543916862,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#WordDelimiterGraphFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#WordDelimiterGraphFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new WordDelimiterGraphFilterFactory */\n  public WordDelimiterGraphFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    this.adjustOffsets = getBoolean(args, OFFSETS, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new WordDelimiterGraphFilterFactory */\n  public WordDelimiterGraphFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = get(args, PROTECTED_TOKENS);\n    types = get(args, TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47e241984c8185946746fd8e18cff4200659091e":["098528909bb70948871fd7ed865fafb87ed73964"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47e241984c8185946746fd8e18cff4200659091e"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["47e241984c8185946746fd8e18cff4200659091e","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"47e241984c8185946746fd8e18cff4200659091e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}