{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","sourceNew":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","sourceOld":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ac6407286ebd80d6754a6586316e11c06f37b3","date":1469634359,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","sourceNew":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try (ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","sourceOld":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","bugFix":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","sourceNew":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try (ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","sourceOld":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","sourceNew":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try (ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","sourceOld":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","sourceNew":null,"sourceOld":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try (ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","sourceNew":null,"sourceOld":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try (ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","a7ac6407286ebd80d6754a6586316e11c06f37b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}