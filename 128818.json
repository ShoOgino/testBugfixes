{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","sourceNew":"    public static char toLowerCase(char letter, char[] charset)\n    {\n        if (charset == UnicodeGreek) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= '\\u03B1' && letter <= '\\u03C9')\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == '\\u03C2') {\n                \treturn '\\u03C3';\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == '\\u03AC') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u03AD') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u03AE') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == '\\u03AF' || letter == '\\u03CA' || letter == '\\u0390') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == '\\u03CD' || letter == '\\u03CB' || letter == '\\u03B0') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u03CC') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u03CE') {\n            \treturn '\\u03C9';\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= '\\u0391' && letter <= '\\u03A9')\n            {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == '\\u0386') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u0388') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u0389') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == '\\u038A' || letter == '\\u03AA') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == '\\u038E' || letter == '\\u03AB') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u038C') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u038F') {\n            \treturn '\\u03C9';\n            }\n        } else if (charset == ISO) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xb6) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        } else if (charset == CP1253) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xa2) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        }\n\n        return Character.toLowerCase(letter);\n    }\n\n","sourceOld":"    public static char toLowerCase(char letter, char[] charset)\n    {\n        if (charset == UnicodeGreek) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= '\\u03B1' && letter <= '\\u03C9')\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == '\\u03C2') {\n                \treturn '\\u03C3';\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == '\\u03AC') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u03AD') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u03AE') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == '\\u03AF' || letter == '\\u03CA' || letter == '\\u0390') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == '\\u03CD' || letter == '\\u03CB' || letter == '\\u03B0') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u03CC') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u03CE') {\n            \treturn '\\u03C9';\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= '\\u0391' && letter <= '\\u03A9')\n            {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == '\\u0386') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u0388') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u0389') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == '\\u038A' || letter == '\\u03AA') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == '\\u038E' || letter == '\\u03AB') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u038C') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u038F') {\n            \treturn '\\u03C9';\n            }\n        } else if (charset == ISO) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xb6) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        } else if (charset == CP1253) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xa2) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        }\n\n        return Character.toLowerCase(letter);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db07cbc50e33371ac44b6829104a06d485c5fe70","date":1254424809,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","sourceNew":null,"sourceOld":"    public static char toLowerCase(char letter, char[] charset)\n    {\n        if (charset == UnicodeGreek) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= '\\u03B1' && letter <= '\\u03C9')\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == '\\u03C2') {\n                \treturn '\\u03C3';\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == '\\u03AC') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u03AD') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u03AE') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == '\\u03AF' || letter == '\\u03CA' || letter == '\\u0390') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == '\\u03CD' || letter == '\\u03CB' || letter == '\\u03B0') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u03CC') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u03CE') {\n            \treturn '\\u03C9';\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= '\\u0391' && letter <= '\\u03A9')\n            {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == '\\u0386') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u0388') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u0389') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == '\\u038A' || letter == '\\u03AA') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == '\\u038E' || letter == '\\u03AB') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u038C') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u038F') {\n            \treturn '\\u03C9';\n            }\n        } else if (charset == ISO) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xb6) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        } else if (charset == CP1253) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xa2) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        }\n\n        return Character.toLowerCase(letter);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db07cbc50e33371ac44b6829104a06d485c5fe70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db07cbc50e33371ac44b6829104a06d485c5fe70"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["db07cbc50e33371ac44b6829104a06d485c5fe70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"db07cbc50e33371ac44b6829104a06d485c5fe70":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}