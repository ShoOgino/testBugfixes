{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockGraphTokenFilter#afterPosition().mjava","commits":[{"id":"914394e583f0258b2fe327df337ea44c908a0aab","date":1333904214,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockGraphTokenFilter#afterPosition().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void afterPosition() throws IOException {\n    if (DEBUG) {\n      System.out.println(\"MockGraphTF.afterPos\");\n    }\n    if (random.nextInt(7) == 5) {\n\n      final int posLength = _TestUtil.nextInt(random, 1, 5);\n\n      if (DEBUG) {\n        System.out.println(\"  do insert! posLen=\" + posLength);\n      }\n\n      final Position posEndData = positions.get(outputPos + posLength);\n\n      // Look ahead as needed until we figure out the right\n      // endOffset:\n      while(!end && posEndData.endOffset == -1 && inputPos <= (outputPos + posLength)) {\n        if (!peekToken()) {\n          break;\n        }\n      }\n\n      if (posEndData.endOffset != -1) {\n        // Notify super class that we are injecting a token:\n        insertToken();\n        clearAttributes();\n        posLenAtt.setPositionLength(posLength);\n        termAtt.append(_TestUtil.randomUnicodeString(random));\n        posIncAtt.setPositionIncrement(0);\n        offsetAtt.setOffset(positions.get(outputPos).startOffset,\n                            posEndData.endOffset);\n        if (DEBUG) {\n          System.out.println(\"  inject: outputPos=\" + outputPos + \" startOffset=\" + offsetAtt.startOffset() +\n                             \" endOffset=\" + offsetAtt.endOffset() +\n                             \" posLength=\" + posLenAtt.getPositionLength());\n        }\n        // TODO: set TypeAtt too?\n      } else {\n        // Either 1) the tokens ended before our posLength,\n        // or 2) our posLength ended inside a hole from the\n        // input.  In each case we just skip the inserted\n        // token.\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockGraphTokenFilter#afterPosition().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockGraphTokenFilter#afterPosition().mjava","sourceNew":"  @Override\n  protected void afterPosition() throws IOException {\n    if (DEBUG) {\n      System.out.println(\"MockGraphTF.afterPos\");\n    }\n    if (random.nextInt(7) == 5) {\n\n      final int posLength = TestUtil.nextInt(random, 1, 5);\n\n      if (DEBUG) {\n        System.out.println(\"  do insert! posLen=\" + posLength);\n      }\n\n      final Position posEndData = positions.get(outputPos + posLength);\n\n      // Look ahead as needed until we figure out the right\n      // endOffset:\n      while(!end && posEndData.endOffset == -1 && inputPos <= (outputPos + posLength)) {\n        if (!peekToken()) {\n          break;\n        }\n      }\n\n      if (posEndData.endOffset != -1) {\n        // Notify super class that we are injecting a token:\n        insertToken();\n        clearAttributes();\n        posLenAtt.setPositionLength(posLength);\n        termAtt.append(TestUtil.randomUnicodeString(random));\n        posIncAtt.setPositionIncrement(0);\n        offsetAtt.setOffset(positions.get(outputPos).startOffset,\n                            posEndData.endOffset);\n        if (DEBUG) {\n          System.out.println(\"  inject: outputPos=\" + outputPos + \" startOffset=\" + offsetAtt.startOffset() +\n                             \" endOffset=\" + offsetAtt.endOffset() +\n                             \" posLength=\" + posLenAtt.getPositionLength());\n        }\n        // TODO: set TypeAtt too?\n      } else {\n        // Either 1) the tokens ended before our posLength,\n        // or 2) our posLength ended inside a hole from the\n        // input.  In each case we just skip the inserted\n        // token.\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterPosition() throws IOException {\n    if (DEBUG) {\n      System.out.println(\"MockGraphTF.afterPos\");\n    }\n    if (random.nextInt(7) == 5) {\n\n      final int posLength = _TestUtil.nextInt(random, 1, 5);\n\n      if (DEBUG) {\n        System.out.println(\"  do insert! posLen=\" + posLength);\n      }\n\n      final Position posEndData = positions.get(outputPos + posLength);\n\n      // Look ahead as needed until we figure out the right\n      // endOffset:\n      while(!end && posEndData.endOffset == -1 && inputPos <= (outputPos + posLength)) {\n        if (!peekToken()) {\n          break;\n        }\n      }\n\n      if (posEndData.endOffset != -1) {\n        // Notify super class that we are injecting a token:\n        insertToken();\n        clearAttributes();\n        posLenAtt.setPositionLength(posLength);\n        termAtt.append(_TestUtil.randomUnicodeString(random));\n        posIncAtt.setPositionIncrement(0);\n        offsetAtt.setOffset(positions.get(outputPos).startOffset,\n                            posEndData.endOffset);\n        if (DEBUG) {\n          System.out.println(\"  inject: outputPos=\" + outputPos + \" startOffset=\" + offsetAtt.startOffset() +\n                             \" endOffset=\" + offsetAtt.endOffset() +\n                             \" posLength=\" + posLenAtt.getPositionLength());\n        }\n        // TODO: set TypeAtt too?\n      } else {\n        // Either 1) the tokens ended before our posLength,\n        // or 2) our posLength ended inside a hole from the\n        // input.  In each case we just skip the inserted\n        // token.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["914394e583f0258b2fe327df337ea44c908a0aab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"914394e583f0258b2fe327df337ea44c908a0aab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["914394e583f0258b2fe327df337ea44c908a0aab"],"914394e583f0258b2fe327df337ea44c908a0aab":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}