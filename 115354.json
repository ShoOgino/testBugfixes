{"path":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","commits":[{"id":"db447c88c3c3367999a54f10d9a207f3e63db201","date":1435740861,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, DocValues.docsWithValue(sortedNumerics, parents.length()), selection, parents, children);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, selection, parents, children);\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, DocValues.docsWithValue(sortedNumerics, parents.length()), selection, parents, children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, selection, parents, children);\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, DocValues.docsWithValue(sortedNumerics, parents.length()), selection, parents, children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, selection, parents, children);\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, DocValues.docsWithValue(sortedNumerics, parents.length()), selection, parents, children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181db58a040d7aebaeb7a74578bd9b9aa603af6c","date":1497965469,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  @Deprecated\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    return wrap(sortedNumerics, selection, parents, toIter(children));\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, selection, parents, children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedNumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  @Deprecated\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    return wrap(sortedNumerics, selection, parents, toIter(children));\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedNumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumerics, Type selection, BitSet parents, BitSet children) {\n    NumericDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MIN, SortField.Type.LONG);\n        break;\n      case MAX:\n        values = SortedNumericSelector.wrap(sortedNumerics, SortedNumericSelector.Type.MAX, SortField.Type.LONG);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, selection, parents, children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db447c88c3c3367999a54f10d9a207f3e63db201":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["db447c88c3c3367999a54f10d9a207f3e63db201","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["db447c88c3c3367999a54f10d9a207f3e63db201"],"30c8e5574b55d57947e989443dfde611646530ee":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["db447c88c3c3367999a54f10d9a207f3e63db201","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181db58a040d7aebaeb7a74578bd9b9aa603af6c"]},"commit2Childs":{"db447c88c3c3367999a54f10d9a207f3e63db201":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db447c88c3c3367999a54f10d9a207f3e63db201"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["30c8e5574b55d57947e989443dfde611646530ee","181db58a040d7aebaeb7a74578bd9b9aa603af6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"30c8e5574b55d57947e989443dfde611646530ee":[],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}