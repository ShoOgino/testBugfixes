{"path":"src/java/org/apache/solr/util/SolrPluginUtils#partialEscape(CharSequence).mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#partialEscape(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Escapes all special characters except '\"', '-', and '+'\n   *\n   * @see QueryParser#escape\n   */\n  public static CharSequence partialEscape(CharSequence s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == ':'  || c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          ) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bda22b2e12e7f4b9fdd2b362f334ec1840dc0b31","date":1204673743,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#partialEscape(CharSequence).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#partialEscape(CharSequence).mjava","sourceNew":"  /**\n   * Escapes all special characters except '\"', '-', and '+'\n   *\n   * @see QueryParser#escape\n   */\n  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == ':'  || c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          ) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":"  /**\n   * Escapes all special characters except '\"', '-', and '+'\n   *\n   * @see QueryParser#escape\n   */\n  public static CharSequence partialEscape(CharSequence s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == ':'  || c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          ) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#partialEscape(CharSequence).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#partialEscape(CharSequence).mjava","sourceNew":"  /**\n   * Escapes all special characters except '\"', '-', and '+'\n   *\n   * @see QueryParser#escape\n   */\n  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == ':'  || c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          ) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":"  /**\n   * Escapes all special characters except '\"', '-', and '+'\n   *\n   * @see QueryParser#escape\n   */\n  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == ':'  || c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          ) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["bda22b2e12e7f4b9fdd2b362f334ec1840dc0b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bda22b2e12e7f4b9fdd2b362f334ec1840dc0b31":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"]},"commit2Childs":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["bda22b2e12e7f4b9fdd2b362f334ec1840dc0b31"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bda22b2e12e7f4b9fdd2b362f334ec1840dc0b31":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}