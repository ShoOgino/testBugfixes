{"path":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#testBasicClassification().mjava","commits":[{"id":"9140d3568539d7cd892885f2979289c780ba93c8","date":1458041347,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#testBasicClassification().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicClassification() throws Exception {\n    prepareTrainedIndex();\n    // To be classified,we index documents without a class and verify the expected one is returned\n    addDoc(adoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word5 word5 \",\n        AUTHOR, \"Name1 Surname1\"));\n    addDoc(adoc(ID, \"11\",\n        TITLE, \"word1 word1\",\n        CONTENT, \"word2 word2\",\n        AUTHOR, \"Name Surname\"));\n    addDoc(commit());\n\n    Document doc10 = getDoc(\"10\");\n    assertEquals(\"class2\", doc10.get(CLASS));\n    Document doc11 = getDoc(\"11\");\n    assertEquals(\"class1\", doc11.get(CLASS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1ec46dc24c2330c5e9dd0edefaede91c962926","date":1480027437,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorIntegrationTest#classify_fullConfiguration_shouldAutoClassify().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#testBasicClassification().mjava","sourceNew":"  @Test\n  public void classify_fullConfiguration_shouldAutoClassify() throws Exception {\n    indexTrainingSet();\n    // To be classified,we index documents without a class and verify the expected one is returned\n    addDoc(adoc(ID, \"22\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word5 word5 \",\n        AUTHOR, \"Name1 Surname1\"), CHAIN);\n    addDoc(adoc(ID, \"21\",\n        TITLE, \"word1 word1\",\n        CONTENT, \"word2 word2\",\n        AUTHOR, \"Name Surname\"), CHAIN);\n    addDoc(commit());\n\n    Document doc22 = getDoc(\"22\");\n    assertThat(doc22.get(CLASS),is(\"class2\"));\n    Document doc21 = getDoc(\"21\");\n    assertThat(doc21.get(CLASS),is(\"class1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasicClassification() throws Exception {\n    prepareTrainedIndex();\n    // To be classified,we index documents without a class and verify the expected one is returned\n    addDoc(adoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word5 word5 \",\n        AUTHOR, \"Name1 Surname1\"));\n    addDoc(adoc(ID, \"11\",\n        TITLE, \"word1 word1\",\n        CONTENT, \"word2 word2\",\n        AUTHOR, \"Name Surname\"));\n    addDoc(commit());\n\n    Document doc10 = getDoc(\"10\");\n    assertEquals(\"class2\", doc10.get(CLASS));\n    Document doc11 = getDoc(\"11\");\n    assertEquals(\"class1\", doc11.get(CLASS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorIntegrationTest#classify_fullConfiguration_shouldAutoClassify().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#testBasicClassification().mjava","sourceNew":"  @Test\n  public void classify_fullConfiguration_shouldAutoClassify() throws Exception {\n    indexTrainingSet();\n    // To be classified,we index documents without a class and verify the expected one is returned\n    addDoc(adoc(ID, \"22\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word5 word5 \",\n        AUTHOR, \"Name1 Surname1\"), CHAIN);\n    addDoc(adoc(ID, \"21\",\n        TITLE, \"word1 word1\",\n        CONTENT, \"word2 word2\",\n        AUTHOR, \"Name Surname\"), CHAIN);\n    addDoc(commit());\n\n    Document doc22 = getDoc(\"22\");\n    assertThat(doc22.get(CLASS),is(\"class2\"));\n    Document doc21 = getDoc(\"21\");\n    assertThat(doc21.get(CLASS),is(\"class1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasicClassification() throws Exception {\n    prepareTrainedIndex();\n    // To be classified,we index documents without a class and verify the expected one is returned\n    addDoc(adoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word5 word5 \",\n        AUTHOR, \"Name1 Surname1\"));\n    addDoc(adoc(ID, \"11\",\n        TITLE, \"word1 word1\",\n        CONTENT, \"word2 word2\",\n        AUTHOR, \"Name Surname\"));\n    addDoc(commit());\n\n    Document doc10 = getDoc(\"10\");\n    assertEquals(\"class2\", doc10.get(CLASS));\n    Document doc11 = getDoc(\"11\");\n    assertEquals(\"class1\", doc11.get(CLASS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorIntegrationTest#classify_fullConfiguration_shouldAutoClassify().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ClassificationUpdateProcessorFactoryTest#testBasicClassification().mjava","sourceNew":"  @Test\n  public void classify_fullConfiguration_shouldAutoClassify() throws Exception {\n    indexTrainingSet();\n    // To be classified,we index documents without a class and verify the expected one is returned\n    addDoc(adoc(ID, \"22\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word5 word5 \",\n        AUTHOR, \"Name1 Surname1\"), CHAIN);\n    addDoc(adoc(ID, \"21\",\n        TITLE, \"word1 word1\",\n        CONTENT, \"word2 word2\",\n        AUTHOR, \"Name Surname\"), CHAIN);\n    addDoc(commit());\n\n    Document doc22 = getDoc(\"22\");\n    assertThat(doc22.get(CLASS),is(\"class2\"));\n    Document doc21 = getDoc(\"21\");\n    assertThat(doc21.get(CLASS),is(\"class1\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasicClassification() throws Exception {\n    prepareTrainedIndex();\n    // To be classified,we index documents without a class and verify the expected one is returned\n    addDoc(adoc(ID, \"10\",\n        TITLE, \"word4 word4 word4\",\n        CONTENT, \"word5 word5 \",\n        AUTHOR, \"Name1 Surname1\"));\n    addDoc(adoc(ID, \"11\",\n        TITLE, \"word1 word1\",\n        CONTENT, \"word2 word2\",\n        AUTHOR, \"Name Surname\"));\n    addDoc(commit());\n\n    Document doc10 = getDoc(\"10\");\n    assertEquals(\"class2\", doc10.get(CLASS));\n    Document doc11 = getDoc(\"11\");\n    assertEquals(\"class1\", doc11.get(CLASS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9140d3568539d7cd892885f2979289c780ba93c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["9140d3568539d7cd892885f2979289c780ba93c8"],"727bb765ff2542275f6d31f67be18d7104bae148":["9140d3568539d7cd892885f2979289c780ba93c8","75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["9140d3568539d7cd892885f2979289c780ba93c8","9f1ec46dc24c2330c5e9dd0edefaede91c962926"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75babd1dfc2521603bfeb0968042e921d8c6c652"]},"commit2Childs":{"9140d3568539d7cd892885f2979289c780ba93c8":["9f1ec46dc24c2330c5e9dd0edefaede91c962926","727bb765ff2542275f6d31f67be18d7104bae148","75babd1dfc2521603bfeb0968042e921d8c6c652"],"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"75babd1dfc2521603bfeb0968042e921d8c6c652":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9140d3568539d7cd892885f2979289c780ba93c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}