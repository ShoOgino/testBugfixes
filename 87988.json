{"path":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0451c421afa567194fd4312af9389e07003a7941","date":1331317047,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6feb73792151f56a1f4604450996c7e4e18f5e0","date":1398257018,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    \n    try {\n      return lockFile.createNewFile();\n    } catch (IOException ioe) {\n      // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n      // In that case, the lock was not aquired successfully, so return false.\n      // We record the failure reason here; the obtain with timeout (usually the\n      // one calling us) will use this as \"root cause\" if it fails to get the lock.\n      failureReason = ioe;\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    \n    try {\n      return lockFile.createNewFile();\n    } catch (IOException ioe) {\n      // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n      // In that case, the lock was not aquired successfully, so return false.\n      // We record the failure reason here; the obtain with timeout (usually the\n      // one calling us) will use this as \"root cause\" if it fails to get the lock.\n      failureReason = ioe;\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public boolean obtain() throws IOException {\n    try {\n      Files.createDirectories(lockDir);\n      Files.createFile(lockFile);\n      return true;\n    } catch (IOException ioe) {\n      // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n      // In that case, the lock was not aquired successfully, so return false.\n      // We record the failure reason here; the obtain with timeout (usually the\n      // one calling us) will use this as \"root cause\" if it fails to get the lock.\n      failureReason = ioe;\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      // TODO: NoSuchDirectoryException instead?\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n    \n    try {\n      return lockFile.createNewFile();\n    } catch (IOException ioe) {\n      // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n      // In that case, the lock was not aquired successfully, so return false.\n      // We record the failure reason here; the obtain with timeout (usually the\n      // one calling us) will use this as \"root cause\" if it fails to get the lock.\n      failureReason = ioe;\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLock[SimpleFSLockFactory]#obtain().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean obtain() throws IOException {\n    try {\n      Files.createDirectories(lockDir);\n      Files.createFile(lockFile);\n      return true;\n    } catch (IOException ioe) {\n      // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n      // In that case, the lock was not aquired successfully, so return false.\n      // We record the failure reason here; the obtain with timeout (usually the\n      // one calling us) will use this as \"root cause\" if it fails to get the lock.\n      failureReason = ioe;\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0451c421afa567194fd4312af9389e07003a7941"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["19275ba31e621f6da1b83bf13af75233876fd3d4","e6feb73792151f56a1f4604450996c7e4e18f5e0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6feb73792151f56a1f4604450996c7e4e18f5e0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["0451c421afa567194fd4312af9389e07003a7941"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0451c421afa567194fd4312af9389e07003a7941"],"f4abec28b874149a7223e32cc7a01704c27790de":["e6feb73792151f56a1f4604450996c7e4e18f5e0"],"0451c421afa567194fd4312af9389e07003a7941":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","0451c421afa567194fd4312af9389e07003a7941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6feb73792151f56a1f4604450996c7e4e18f5e0":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f4abec28b874149a7223e32cc7a01704c27790de"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","e6feb73792151f56a1f4604450996c7e4e18f5e0"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"0451c421afa567194fd4312af9389e07003a7941":["38e3b736c7ca086d61b7dbb841c905ee115490da","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}