{"path":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"    /** Returns the length of a file in the directory.\n     * @throws IOException if the file does not exist */\n    @Override\n    public long fileLength(String name)\n    throws IOException\n    {\n        FileEntry e = entries.get(name);\n        if (e == null)\n            throw new IOException(\"File \" + name + \" does not exist\");\n        return e.length;\n    }\n\n","sourceOld":"    /** Returns the length of a file in the directory.\n     * @throws IOException if the file does not exist */\n    @Override\n    public long fileLength(String name)\n    throws IOException\n    {\n        FileEntry e = entries.get(name);\n        if (e == null)\n            throw new IOException(\"File \" + name + \" does not exist\");\n        return e.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e956a12cd04014022a7d97aefb34c563a5634018","date":1271233731,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"    /** Returns the length of a file in the directory.\n     * @throws IOException if the file does not exist */\n    @Override\n    public long fileLength(String name) throws IOException {\n        FileEntry e = entries.get(name);\n        if (e == null)\n            throw new FileNotFoundException(name);\n        return e.length;\n    }\n\n","sourceOld":"    /** Returns the length of a file in the directory.\n     * @throws IOException if the file does not exist */\n    @Override\n    public long fileLength(String name)\n    throws IOException\n    {\n        FileEntry e = entries.get(name);\n        if (e == null)\n            throw new IOException(\"File \" + name + \" does not exist\");\n        return e.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"    /** Returns the length of a file in the directory.\n     * @throws IOException if the file does not exist */\n    @Override\n    public long fileLength(String name) throws IOException {\n        FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n        if (e == null)\n            throw new FileNotFoundException(name);\n        return e.length;\n    }\n\n","sourceOld":"    /** Returns the length of a file in the directory.\n     * @throws IOException if the file does not exist */\n    @Override\n    public long fileLength(String name) throws IOException {\n        FileEntry e = entries.get(name);\n        if (e == null)\n            throw new FileNotFoundException(name);\n        return e.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4162a1cda4082030c3dd849ade21f33fb5e6f09","date":1308020263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"    /** Returns the length of a file in the directory.\n     * @throws IOException if the file does not exist */\n    @Override\n    public long fileLength(String name) throws IOException {\n        FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n        if (e == null)\n            throw new FileNotFoundException(name);\n        return e.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"    /** Returns the length of a file in the directory.\n     * @throws IOException if the file does not exist */\n    @Override\n    public long fileLength(String name) throws IOException {\n        FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n        if (e == null)\n            throw new FileNotFoundException(name);\n        return e.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLenght(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLenght(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":null,"sourceOld":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e956a12cd04014022a7d97aefb34c563a5634018":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f4162a1cda4082030c3dd849ade21f33fb5e6f09":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["f4162a1cda4082030c3dd849ade21f33fb5e6f09"],"2553b00f699380c64959ccb27991289aae87be2e":["9ed208afa1e7aa98899ddb1dedfddedddf898253","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f4162a1cda4082030c3dd849ade21f33fb5e6f09","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","f4162a1cda4082030c3dd849ade21f33fb5e6f09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["e956a12cd04014022a7d97aefb34c563a5634018"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e956a12cd04014022a7d97aefb34c563a5634018":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"f4162a1cda4082030c3dd849ade21f33fb5e6f09":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["2553b00f699380c64959ccb27991289aae87be2e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e956a12cd04014022a7d97aefb34c563a5634018"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["f4162a1cda4082030c3dd849ade21f33fb5e6f09","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}