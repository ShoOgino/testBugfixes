{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#createFacetProcessor(FacetContext).mjava","commits":[{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#createFacetProcessor(FacetContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FacetProcessor createFacetProcessor(FacetContext fcontext) {\n    return new FacetProcessor(fcontext, this) {\n      @Override\n      public void process() throws IOException {\n        super.process(); // handles domain changes\n\n        //Compute!\n        final HeatmapFacetCounter.Heatmap heatmap;\n        try {\n          heatmap = HeatmapFacetCounter.calcFacets(\n              strategy,\n              fcontext.searcher.getTopReaderContext(),\n              getTopAcceptDocs(fcontext.base, fcontext.searcher), // turn DocSet into Bits\n              boundsShape,\n              gridLevel,\n              maxCells);\n        } catch (IllegalArgumentException e) {//e.g. too many cells\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.toString(), e);\n        }\n\n        //Populate response\n        response = new SimpleOrderedMap();\n        response.add(\"gridLevel\", gridLevel);\n        response.add(\"columns\", heatmap.columns);\n        response.add(\"rows\", heatmap.rows);\n        response.add(\"minX\", heatmap.region.getMinX());\n        response.add(\"maxX\", heatmap.region.getMaxX());\n        response.add(\"minY\", heatmap.region.getMinY());\n        response.add(\"maxY\", heatmap.region.getMaxY());\n\n        //A shard request will always be a PNG\n        String format = fcontext.isShard() ? FORMAT_PNG : FacetHeatmap.this.format;\n\n        response.add(\"counts_\" + format, formatCountsVal(format, heatmap.columns, heatmap.rows, heatmap.counts, fcontext.getDebugInfo()));\n\n        // note: we do not call processStats or processSubs as it's not supported yet\n      }\n\n      //TODO this is a general utility that should go elsewhere?  DocSetUtil?  Then should DocSetBase.getBits go away?\n      private Bits getTopAcceptDocs(DocSet docSet, SolrIndexSearcher searcher) throws IOException {\n        if (docSet.size() == searcher.numDocs()) {\n          return null; // means match everything (all live docs). This can speedup things a lot.\n        } else if (docSet.size() == 0) {\n          return new Bits.MatchNoBits(searcher.maxDoc()); // can speedup things a lot\n        } else if (docSet instanceof BitDocSet) {\n          return ((BitDocSet) docSet).getBits();\n        } else {\n          // TODO DocSetBase.getBits ought to be at DocSet level?  Though it doesn't know maxDoc but it could?\n          FixedBitSet bits = new FixedBitSet(searcher.maxDoc());\n          for (DocIterator iter = docSet.iterator(); iter.hasNext();) {\n            bits.set(iter.nextDoc());\n          }\n          return bits;\n        }\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#createFacetProcessor(FacetContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FacetProcessor createFacetProcessor(FacetContext fcontext) {\n    return new FacetProcessor(fcontext, this) {\n      @Override\n      public void process() throws IOException {\n        super.process(); // handles domain changes\n\n        //Compute!\n        final HeatmapFacetCounter.Heatmap heatmap;\n        try {\n          heatmap = HeatmapFacetCounter.calcFacets(\n              strategy,\n              fcontext.searcher.getTopReaderContext(),\n              getTopAcceptDocs(fcontext.base, fcontext.searcher), // turn DocSet into Bits\n              boundsShape,\n              gridLevel,\n              maxCells);\n        } catch (IllegalArgumentException e) {//e.g. too many cells\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.toString(), e);\n        }\n\n        //Populate response\n        response = new SimpleOrderedMap();\n        response.add(\"gridLevel\", gridLevel);\n        response.add(\"columns\", heatmap.columns);\n        response.add(\"rows\", heatmap.rows);\n        response.add(\"minX\", heatmap.region.getMinX());\n        response.add(\"maxX\", heatmap.region.getMaxX());\n        response.add(\"minY\", heatmap.region.getMinY());\n        response.add(\"maxY\", heatmap.region.getMaxY());\n\n        //A shard request will always be a PNG\n        String format = fcontext.isShard() ? FORMAT_PNG : FacetHeatmap.this.format;\n\n        response.add(\"counts_\" + format, formatCountsVal(format, heatmap.columns, heatmap.rows, heatmap.counts, fcontext.getDebugInfo()));\n\n        // note: we do not call processStats or processSubs as it's not supported yet\n      }\n\n      //TODO this is a general utility that should go elsewhere?  DocSetUtil?  Then should DocSetBase.getBits go away?\n      private Bits getTopAcceptDocs(DocSet docSet, SolrIndexSearcher searcher) throws IOException {\n        if (docSet.size() == searcher.numDocs()) {\n          return null; // means match everything (all live docs). This can speedup things a lot.\n        } else if (docSet.size() == 0) {\n          return new Bits.MatchNoBits(searcher.maxDoc()); // can speedup things a lot\n        } else if (docSet instanceof BitDocSet) {\n          return ((BitDocSet) docSet).getBits();\n        } else {\n          // TODO DocSetBase.getBits ought to be at DocSet level?  Though it doesn't know maxDoc but it could?\n          FixedBitSet bits = new FixedBitSet(searcher.maxDoc());\n          for (DocIterator iter = docSet.iterator(); iter.hasNext();) {\n            bits.set(iter.nextDoc());\n          }\n          return bits;\n        }\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#createFacetProcessor(FacetContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FacetProcessor createFacetProcessor(FacetContext fcontext) {\n    return new FacetProcessor(fcontext, this) {\n      @Override\n      public void process() throws IOException {\n        super.process(); // handles domain changes\n\n        //Compute!\n        final HeatmapFacetCounter.Heatmap heatmap;\n        try {\n          heatmap = HeatmapFacetCounter.calcFacets(\n              strategy,\n              fcontext.searcher.getTopReaderContext(),\n              getTopAcceptDocs(fcontext.base, fcontext.searcher), // turn DocSet into Bits\n              boundsShape,\n              gridLevel,\n              maxCells);\n        } catch (IllegalArgumentException e) {//e.g. too many cells\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.toString(), e);\n        }\n\n        //Populate response\n        response = new SimpleOrderedMap();\n        response.add(\"gridLevel\", gridLevel);\n        response.add(\"columns\", heatmap.columns);\n        response.add(\"rows\", heatmap.rows);\n        response.add(\"minX\", heatmap.region.getMinX());\n        response.add(\"maxX\", heatmap.region.getMaxX());\n        response.add(\"minY\", heatmap.region.getMinY());\n        response.add(\"maxY\", heatmap.region.getMaxY());\n\n        //A shard request will always be a PNG\n        String format = fcontext.isShard() ? FORMAT_PNG : FacetHeatmap.this.format;\n\n        response.add(\"counts_\" + format, formatCountsVal(format, heatmap.columns, heatmap.rows, heatmap.counts, fcontext.getDebugInfo()));\n\n        // note: we do not call processStats or processSubs as it's not supported yet\n      }\n\n      //TODO this is a general utility that should go elsewhere?  DocSetUtil?  Then should DocSetBase.getBits go away?\n      private Bits getTopAcceptDocs(DocSet docSet, SolrIndexSearcher searcher) throws IOException {\n        if (docSet.size() == searcher.numDocs()) {\n          return null; // means match everything (all live docs). This can speedup things a lot.\n        } else if (docSet.size() == 0) {\n          return new Bits.MatchNoBits(searcher.maxDoc()); // can speedup things a lot\n        } else if (docSet instanceof BitDocSet) {\n          return ((BitDocSet) docSet).getBits();\n        } else {\n          // TODO DocSetBase.getBits ought to be at DocSet level?  Though it doesn't know maxDoc but it could?\n          FixedBitSet bits = new FixedBitSet(searcher.maxDoc());\n          for (DocIterator iter = docSet.iterator(); iter.hasNext();) {\n            bits.set(iter.nextDoc());\n          }\n          return bits;\n        }\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca","date":1541737946,"type":3,"author":"Tim Underwood","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#createFacetProcessor(FacetContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#createFacetProcessor(FacetContext).mjava","sourceNew":"  @Override\n  public FacetProcessor createFacetProcessor(FacetContext fcontext) {\n    return new FacetHeatmapProcessor(fcontext);\n  }\n\n","sourceOld":"  @Override\n  public FacetProcessor createFacetProcessor(FacetContext fcontext) {\n    return new FacetProcessor(fcontext, this) {\n      @Override\n      public void process() throws IOException {\n        super.process(); // handles domain changes\n\n        //Compute!\n        final HeatmapFacetCounter.Heatmap heatmap;\n        try {\n          heatmap = HeatmapFacetCounter.calcFacets(\n              strategy,\n              fcontext.searcher.getTopReaderContext(),\n              getTopAcceptDocs(fcontext.base, fcontext.searcher), // turn DocSet into Bits\n              boundsShape,\n              gridLevel,\n              maxCells);\n        } catch (IllegalArgumentException e) {//e.g. too many cells\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.toString(), e);\n        }\n\n        //Populate response\n        response = new SimpleOrderedMap();\n        response.add(\"gridLevel\", gridLevel);\n        response.add(\"columns\", heatmap.columns);\n        response.add(\"rows\", heatmap.rows);\n        response.add(\"minX\", heatmap.region.getMinX());\n        response.add(\"maxX\", heatmap.region.getMaxX());\n        response.add(\"minY\", heatmap.region.getMinY());\n        response.add(\"maxY\", heatmap.region.getMaxY());\n\n        //A shard request will always be a PNG\n        String format = fcontext.isShard() ? FORMAT_PNG : FacetHeatmap.this.format;\n\n        response.add(\"counts_\" + format, formatCountsVal(format, heatmap.columns, heatmap.rows, heatmap.counts, fcontext.getDebugInfo()));\n\n        // note: we do not call processStats or processSubs as it's not supported yet\n      }\n\n      //TODO this is a general utility that should go elsewhere?  DocSetUtil?  Then should DocSetBase.getBits go away?\n      private Bits getTopAcceptDocs(DocSet docSet, SolrIndexSearcher searcher) throws IOException {\n        if (docSet.size() == searcher.numDocs()) {\n          return null; // means match everything (all live docs). This can speedup things a lot.\n        } else if (docSet.size() == 0) {\n          return new Bits.MatchNoBits(searcher.maxDoc()); // can speedup things a lot\n        } else if (docSet instanceof BitDocSet) {\n          return ((BitDocSet) docSet).getBits();\n        } else {\n          // TODO DocSetBase.getBits ought to be at DocSet level?  Though it doesn't know maxDoc but it could?\n          FixedBitSet bits = new FixedBitSet(searcher.maxDoc());\n          for (DocIterator iter = docSet.iterator(); iter.hasNext();) {\n            bits.set(iter.nextDoc());\n          }\n          return bits;\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#createFacetProcessor(FacetContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#createFacetProcessor(FacetContext).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public FacetProcessor createFacetProcessor(FacetContext fcontext) {\n    return new FacetHeatmapProcessor(fcontext);\n  }\n\n","sourceOld":"  @Override\n  public FacetProcessor createFacetProcessor(FacetContext fcontext) {\n    return new FacetHeatmapProcessor(fcontext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca":["2ab027bdfe663227636ccbeda13ae82add302939"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7e2b01ba3eea386e6e8d07b7ff5f5d78b1c0deca":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}