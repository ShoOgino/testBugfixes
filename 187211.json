{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","commits":[{"id":"2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d","date":1169573591,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"/dev/null","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"did not get right number of hits\", 100, hits.length());\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741a5cca05cabe1e7482410a29e563a08379251a","date":1196676550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"did not get right number of hits\", 100, hits.length());\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"did not get right number of hits\", 100, hits.length());\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"did not get right number of hits\", 100, hits.length());\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"did not get right number of hits\", 100, hits.length());\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"did not get right number of hits\", 100, hits.length());\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void xxxtestNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void xxxtestNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["741a5cca05cabe1e7482410a29e563a08379251a"],"741a5cca05cabe1e7482410a29e563a08379251a":["2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d":["741a5cca05cabe1e7482410a29e563a08379251a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"741a5cca05cabe1e7482410a29e563a08379251a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}