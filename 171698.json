{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6","date":1421884114,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException | TokenMgrError tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false).build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException | TokenMgrError tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery().build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false).build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery().build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    } catch (TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery().build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6"],"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}