{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testInvalidVariableMethods().mjava","commits":[{"id":"bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a","date":1429899342,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testInvalidVariableMethods().mjava","pathOld":"/dev/null","sourceNew":"  /** tests invalid methods that are not allowed to become variables to be mapped */\n  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      //expected\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      //expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10fcb49fe038c75fa2e8f8029db57203be947728","date":1452203404,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testInvalidVariableMethods().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testInvalidVariableMethods().mjava","sourceNew":"  /** tests invalid methods that are not allowed to become variables to be mapped */\n  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n      assertTrue(expected.getCause() != null && expected.getCause() != expected);\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(4, expected.getErrorOffset());\n    }\n  }\n\n","sourceOld":"  /** tests invalid methods that are not allowed to become variables to be mapped */\n  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      //expected\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (ParseException exception) {\n      fail();\n    } catch (IllegalArgumentException exception) {\n      //expected\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70eccb1c774388e66090a3a2603a01400458a303","date":1452209894,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testInvalidVariableMethods().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testInvalidVariableMethods().mjava","sourceNew":"  /** tests invalid methods that are not allowed to become variables to be mapped */\n  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(4, expected.getErrorOffset());\n    }\n  }\n\n","sourceOld":"  /** tests invalid methods that are not allowed to become variables to be mapped */\n  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n      assertTrue(expected.getCause() != null && expected.getCause() != expected);\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(4, expected.getErrorOffset());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testInvalidVariableMethods().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/js/TestCustomFunctions#testInvalidVariableMethods().mjava","sourceNew":"  /** tests invalid methods that are not allowed to become variables to be mapped */\n  public void testInvalidVariableMethods() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"method()\");\n    });\n    assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n    assertEquals(0, expected.getErrorOffset());\n\n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"method.method(1)\");\n    });\n    assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n    assertEquals(0, expected.getErrorOffset());\n    \n    expected = expectThrows(ParseException.class, () -> {\n      JavascriptCompiler.compile(\"1 + method()\");\n    });\n    assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n    assertEquals(4, expected.getErrorOffset());\n  }\n\n","sourceOld":"  /** tests invalid methods that are not allowed to become variables to be mapped */\n  public void testInvalidVariableMethods() {\n    try {\n      JavascriptCompiler.compile(\"method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression 'method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n\n    try {\n      JavascriptCompiler.compile(\"method.method(1)\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression 'method.method(1)': Unrecognized function call (method.method).\", expected.getMessage());\n      assertEquals(0, expected.getErrorOffset());\n    }\n    \n    try {\n      JavascriptCompiler.compile(\"1 + method()\");\n      fail();\n    } catch (IllegalArgumentException exception) {\n      fail();\n    } catch (ParseException expected) {\n      //expected\n      assertEquals(\"Invalid expression '1 + method()': Unrecognized function call (method).\", expected.getMessage());\n      assertEquals(4, expected.getErrorOffset());\n    }\n  }\n\n","bugFix":["10fcb49fe038c75fa2e8f8029db57203be947728","bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10fcb49fe038c75fa2e8f8029db57203be947728":["bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a"],"70eccb1c774388e66090a3a2603a01400458a303":["10fcb49fe038c75fa2e8f8029db57203be947728"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["70eccb1c774388e66090a3a2603a01400458a303"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"10fcb49fe038c75fa2e8f8029db57203be947728":["70eccb1c774388e66090a3a2603a01400458a303"],"70eccb1c774388e66090a3a2603a01400458a303":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8344f9e8b303df6f90068c5dc0bcfaccc0f74a":["10fcb49fe038c75fa2e8f8029db57203be947728"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}