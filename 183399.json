{"path":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayNumerics().mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayNumerics().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetArrayNumerics() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      indexValues(w, numValues, val, numVariantList,\n          false, 7);\n      IndexReader r = IndexReader.open(w, true);\n      DocValues docValues = getDocValues(r, val.name());\n      assertNotNull(docValues);\n      // make sure we don't get a direct source since they don't support getArray()\n      Source source = docValues.getSource();\n      \n      switch (source.type()) {\n      case FIXED_INTS_8:\n      {\n        assertTrue(source.hasArray());\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_16:\n      {\n        assertTrue(source.hasArray());\n        short[] values = (short[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_32:\n      {\n        assertTrue(source.hasArray());\n        int[] values = (int[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_64:\n      {\n        assertTrue(source.hasArray());\n        long[] values = (long[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals(values[i], source.getInt(i));\n        }\n      }\n      break;\n      case VAR_INTS: \n        assertFalse(source.hasArray());\n        break;\n      case FLOAT_32:\n      {\n        assertTrue(source.hasArray());\n        float[] values = (float[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((double)values[i], source.getFloat(i), 0.0d);\n        }\n      }\n      break;\n      case FLOAT_64:\n      {\n        assertTrue(source.hasArray());\n        double[] values = (double[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals(values[i], source.getFloat(i), 0.0d);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + source.type());\n      }\n      r.close();\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayNumerics().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayNumerics().mjava","sourceNew":"  public void testGetArrayNumerics() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      indexValues(w, numValues, val, numVariantList,\n          false, 7);\n      IndexReader r = IndexReader.open(w, true);\n      DocValues docValues = getDocValues(r, val.name());\n      assertNotNull(docValues);\n      // make sure we don't get a direct source since they don't support getArray()\n      Source source = docValues.getSource();\n      \n      switch (source.type()) {\n      case FIXED_INTS_8:\n      {\n        assertTrue(source.hasArray());\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_16:\n      {\n        assertTrue(source.hasArray());\n        short[] values = (short[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_32:\n      {\n        assertTrue(source.hasArray());\n        int[] values = (int[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_64:\n      {\n        assertTrue(source.hasArray());\n        long[] values = (long[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals(values[i], source.getInt(i));\n        }\n      }\n      break;\n      case VAR_INTS: \n        assertFalse(source.hasArray());\n        break;\n      case FLOAT_32:\n      {\n        assertTrue(source.hasArray());\n        float[] values = (float[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((double)values[i], source.getFloat(i), 0.0d);\n        }\n      }\n      break;\n      case FLOAT_64:\n      {\n        assertTrue(source.hasArray());\n        double[] values = (double[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals(values[i], source.getFloat(i), 0.0d);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + source.type());\n      }\n      r.close();\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testGetArrayNumerics() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);\n    Collections.shuffle(numVariantList, random);\n    for (Type val : numVariantList) {\n      indexValues(w, numValues, val, numVariantList,\n          false, 7);\n      IndexReader r = IndexReader.open(w, true);\n      DocValues docValues = getDocValues(r, val.name());\n      assertNotNull(docValues);\n      // make sure we don't get a direct source since they don't support getArray()\n      Source source = docValues.getSource();\n      \n      switch (source.type()) {\n      case FIXED_INTS_8:\n      {\n        assertTrue(source.hasArray());\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_16:\n      {\n        assertTrue(source.hasArray());\n        short[] values = (short[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_32:\n      {\n        assertTrue(source.hasArray());\n        int[] values = (int[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((long)values[i], source.getInt(i));\n        }\n      }\n      break;\n      case FIXED_INTS_64:\n      {\n        assertTrue(source.hasArray());\n        long[] values = (long[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals(values[i], source.getInt(i));\n        }\n      }\n      break;\n      case VAR_INTS: \n        assertFalse(source.hasArray());\n        break;\n      case FLOAT_32:\n      {\n        assertTrue(source.hasArray());\n        float[] values = (float[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals((double)values[i], source.getFloat(i), 0.0d);\n        }\n      }\n      break;\n      case FLOAT_64:\n      {\n        assertTrue(source.hasArray());\n        double[] values = (double[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          assertEquals(values[i], source.getFloat(i), 0.0d);\n        }\n      }\n        break;\n      default:\n        fail(\"unexpected value \" + source.type());\n      }\n      r.close();\n    }\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}