{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#KnnStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab","date":1495627141,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#KnnStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public KnnStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter qfExpression = factory.getNamedOperand(expression, \"qf\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    System.out.println(\"####Params:\"+namedParams.size());\n    if(namedParams.size() < 2){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least two named parameters expected. eg. 'id' and 'qf'\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"id\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String id = null;\n    if(idExpression != null) {\n      id = ((StreamExpressionValue)idExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(\"id parameter is expected for KnnStream\");\n    }\n\n    if(qfExpression == null) {\n      throw new IOException(\"qf parameter is expected for KnnStream\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, id,  params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a64c0abfc0522500e49bf63c77e66fa2265078","date":1495627623,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#KnnStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#KnnStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public KnnStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter qfExpression = factory.getNamedOperand(expression, \"qf\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(namedParams.size() < 2){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least two named parameters expected. eg. 'id' and 'qf'\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"id\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String id = null;\n    if(idExpression != null) {\n      id = ((StreamExpressionValue)idExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(\"id parameter is expected for KnnStream\");\n    }\n\n    if(qfExpression == null) {\n      throw new IOException(\"qf parameter is expected for KnnStream\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, id,  params);\n  }\n\n","sourceOld":"  public KnnStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter qfExpression = factory.getNamedOperand(expression, \"qf\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    System.out.println(\"####Params:\"+namedParams.size());\n    if(namedParams.size() < 2){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least two named parameters expected. eg. 'id' and 'qf'\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"id\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String id = null;\n    if(idExpression != null) {\n      id = ((StreamExpressionValue)idExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(\"id parameter is expected for KnnStream\");\n    }\n\n    if(qfExpression == null) {\n      throw new IOException(\"qf parameter is expected for KnnStream\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, id,  params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#KnnStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public KnnStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter qfExpression = factory.getNamedOperand(expression, \"qf\");\n\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(namedParams.size() < 2){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least two named parameters expected. eg. 'id' and 'qf'\",expression));\n    }\n\n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"id\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String id = null;\n    if(idExpression != null) {\n      id = ((StreamExpressionValue)idExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(\"id parameter is expected for KnnStream\");\n    }\n\n    if(qfExpression == null) {\n      throw new IOException(\"qf parameter is expected for KnnStream\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, id,  params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30a64c0abfc0522500e49bf63c77e66fa2265078"],"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30a64c0abfc0522500e49bf63c77e66fa2265078":["876a7de1b2da8fe9fa734ac0aba2c979a1c3daab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30a64c0abfc0522500e49bf63c77e66fa2265078"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab":["30a64c0abfc0522500e49bf63c77e66fa2265078"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","876a7de1b2da8fe9fa734ac0aba2c979a1c3daab"],"30a64c0abfc0522500e49bf63c77e66fa2265078":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}