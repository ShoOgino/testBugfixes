{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#equals(Object).mjava","commits":[{"id":"80ff50a565777c812ef7871453d715713fb6fb9c","date":1430307731,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    SpanContainQuery other = (SpanContainQuery)o;\n    return big.equals(other.big) && little.equals(other.little);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  } \n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    SpanContainQuery other = (SpanContainQuery)o;\n    return big.equals(other.big) && little.equals(other.little);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  } \n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    SpanContainQuery other = (SpanContainQuery)o;\n    return big.equals(other.big) && little.equals(other.little);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80ff50a565777c812ef7871453d715713fb6fb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["80ff50a565777c812ef7871453d715713fb6fb9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80ff50a565777c812ef7871453d715713fb6fb9c","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"80ff50a565777c812ef7871453d715713fb6fb9c":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ff50a565777c812ef7871453d715713fb6fb9c"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}