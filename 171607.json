{"path":"solr/contrib/jaegertracer-configurator/src/java/org/apache/solr/jaeger/JaegerTracerConfigurator#init(NamedList).mjava","commits":[{"id":"cbaf96cfda5422c42955ce34344f0e01839894ea","date":1559675051,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/jaegertracer-configurator/src/java/org/apache/solr/jaeger/JaegerTracerConfigurator#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    Object host = args.get(AGENT_HOST);\n    if (!(host instanceof String)) {\n      throw new IllegalArgumentException(\"Expected a required string for param '\" + AGENT_HOST + \"'\");\n    }\n\n    Object portArg = args.get(AGENT_PORT);\n    if (!(portArg instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + AGENT_PORT + \"'\");\n    }\n    int port = (Integer) portArg;\n\n    Boolean logSpans = args.getBooleanArg(LOG_SPANS);\n    if (logSpans == null)\n      logSpans = true;\n\n    Object flushIntervalArg = args.get(FLUSH_INTERVAL);\n    if (flushIntervalArg != null && !(flushIntervalArg instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + FLUSH_INTERVAL +\"'\");\n    }\n    int flushInterval = flushIntervalArg == null ? 1000 : (Integer) flushIntervalArg;\n\n    Object maxQueueArgs = args.get(MAX_QUEUE_SIZE);\n    if (maxQueueArgs != null && !(maxQueueArgs instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + MAX_QUEUE_SIZE +\"'\");\n    }\n    int maxQueue = maxQueueArgs == null ? 10000 : (Integer) maxQueueArgs;\n\n    Configuration.SamplerConfiguration samplerConfig = new Configuration.SamplerConfiguration()\n        .withType(ConstSampler.TYPE)\n        .withParam(1);\n\n    Configuration.ReporterConfiguration reporterConfig = Configuration.ReporterConfiguration.fromEnv();\n    Configuration.SenderConfiguration senderConfig = reporterConfig.getSenderConfiguration()\n        .withAgentHost(host.toString())\n        .withAgentPort(port);\n\n    reporterConfig.withLogSpans(logSpans)\n        .withFlushInterval(flushInterval)\n        .withMaxQueueSize(maxQueue)\n        .withSender(senderConfig);\n    tracer = new Configuration(\"solr\")\n        .withSampler(samplerConfig)\n        .withReporter(reporterConfig)\n        .getTracer();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/jaegertracer-configurator/src/java/org/apache/solr/jaeger/JaegerTracerConfigurator#init(NamedList).mjava","pathOld":"solr/contrib/jaegertracer-configurator/src/java/org/apache/solr/jaeger/JaegerTracerConfigurator#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    Object host = args.get(AGENT_HOST);\n    if (!(host instanceof String)) {\n      throw new IllegalArgumentException(\"Expected a required string for param '\" + AGENT_HOST + \"'\");\n    }\n\n    Object portArg = args.get(AGENT_PORT);\n    if (!(portArg instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + AGENT_PORT + \"'\");\n    }\n    int port = (Integer) portArg;\n\n    Boolean logSpans = args.getBooleanArg(LOG_SPANS);\n    if (logSpans == null)\n      logSpans = true;\n\n    Object flushIntervalArg = args.get(FLUSH_INTERVAL);\n    if (flushIntervalArg != null && !(flushIntervalArg instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + FLUSH_INTERVAL +\"'\");\n    }\n    int flushInterval = flushIntervalArg == null ? 1000 : (Integer) flushIntervalArg;\n\n    Object maxQueueArgs = args.get(MAX_QUEUE_SIZE);\n    if (maxQueueArgs != null && !(maxQueueArgs instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + MAX_QUEUE_SIZE +\"'\");\n    }\n    int maxQueue = maxQueueArgs == null ? 10000 : (Integer) maxQueueArgs;\n\n    Configuration.SamplerConfiguration samplerConfig = new Configuration.SamplerConfiguration()\n        .withType(ConstSampler.TYPE)\n        .withParam(1);\n\n    Configuration.ReporterConfiguration reporterConfig = Configuration.ReporterConfiguration.fromEnv();\n    Configuration.SenderConfiguration senderConfig = reporterConfig.getSenderConfiguration()\n        .withAgentHost(host.toString())\n        .withAgentPort(port);\n\n    reporterConfig.withLogSpans(logSpans)\n        .withFlushInterval(flushInterval)\n        .withMaxQueueSize(maxQueue)\n        .withSender(senderConfig);\n    tracer = new Configuration(\"solr\")\n        .withSampler(samplerConfig)\n        .withReporter(reporterConfig)\n        .getTracer();\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    Object host = args.get(AGENT_HOST);\n    if (!(host instanceof String)) {\n      throw new IllegalArgumentException(\"Expected a required string for param '\" + AGENT_HOST + \"'\");\n    }\n\n    Object portArg = args.get(AGENT_PORT);\n    if (!(portArg instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + AGENT_PORT + \"'\");\n    }\n    int port = (Integer) portArg;\n\n    Boolean logSpans = args.getBooleanArg(LOG_SPANS);\n    if (logSpans == null)\n      logSpans = true;\n\n    Object flushIntervalArg = args.get(FLUSH_INTERVAL);\n    if (flushIntervalArg != null && !(flushIntervalArg instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + FLUSH_INTERVAL +\"'\");\n    }\n    int flushInterval = flushIntervalArg == null ? 1000 : (Integer) flushIntervalArg;\n\n    Object maxQueueArgs = args.get(MAX_QUEUE_SIZE);\n    if (maxQueueArgs != null && !(maxQueueArgs instanceof Integer)) {\n      throw new IllegalArgumentException(\"Expected a required int for param '\" + MAX_QUEUE_SIZE +\"'\");\n    }\n    int maxQueue = maxQueueArgs == null ? 10000 : (Integer) maxQueueArgs;\n\n    Configuration.SamplerConfiguration samplerConfig = new Configuration.SamplerConfiguration()\n        .withType(ConstSampler.TYPE)\n        .withParam(1);\n\n    Configuration.ReporterConfiguration reporterConfig = Configuration.ReporterConfiguration.fromEnv();\n    Configuration.SenderConfiguration senderConfig = reporterConfig.getSenderConfiguration()\n        .withAgentHost(host.toString())\n        .withAgentPort(port);\n\n    reporterConfig.withLogSpans(logSpans)\n        .withFlushInterval(flushInterval)\n        .withMaxQueueSize(maxQueue)\n        .withSender(senderConfig);\n    tracer = new Configuration(\"solr\")\n        .withSampler(samplerConfig)\n        .withReporter(reporterConfig)\n        .getTracer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbaf96cfda5422c42955ce34344f0e01839894ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"]},"commit2Childs":{"cbaf96cfda5422c42955ce34344f0e01839894ea":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}