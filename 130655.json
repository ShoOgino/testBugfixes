{"path":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","commits":[{"id":"dacab2c037901da80e538bdc0f2cf1557c0eb543","date":1308744386,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory).mjava","sourceNew":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    if (forWrite) {\n      super.initForWrite();\n    } else {\n      super.initForRead(Collections.<String,FileEntry>emptyMap());\n    }\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","sourceOld":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    super.initForRead(Collections.<String,FileEntry>emptyMap());\n    parent.addFileHandle(this, name, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    if (forWrite) {\n      super.initForWrite();\n    } else {\n      super.initForRead(Collections.<String,FileEntry>emptyMap());\n    }\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, IOContext.DEFAULT);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    if (forWrite) {\n      super.initForWrite();\n    } else {\n      super.initForRead(Collections.<String,FileEntry>emptyMap());\n    }\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64d8c4b572c9d5e49a6f831e8d4ebc203b770272","date":1310038257,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","sourceNew":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    // don't initialize here since we delegate everything - if not initialized a direct call will cause an assert to fail!\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","sourceOld":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    if (forWrite) {\n      super.initForWrite();\n    } else {\n      super.initForRead(Collections.<String,FileEntry>emptyMap());\n    }\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","sourceNew":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    // don't initialize here since we delegate everything - if not initialized a direct call will cause an assert to fail!\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","sourceOld":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    if (forWrite) {\n      super.initForWrite();\n    } else {\n      super.initForRead(Collections.<String,FileEntry>emptyMap());\n    }\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","sourceNew":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, IOContext.DEFAULT);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    // don't initialize here since we delegate everything - if not initialized a direct call will cause an assert to fail!\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","sourceOld":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, IOContext.DEFAULT);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    if (forWrite) {\n      super.initForWrite();\n    } else {\n      super.initForRead(Collections.<String,FileEntry>emptyMap());\n    }\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","sourceNew":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, IOContext.DEFAULT);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    // don't initialize here since we delegate everything - if not initialized a direct call will cause an assert to fail!\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","sourceOld":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    // don't initialize here since we delegate everything - if not initialized a direct call will cause an assert to fail!\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","sourceNew":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, IOContext.DEFAULT);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    // don't initialize here since we delegate everything - if not initialized a direct call will cause an assert to fail!\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","sourceOld":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, 1024);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    // don't initialize here since we delegate everything - if not initialized a direct call will cause an assert to fail!\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockCompoundFileDirectoryWrapper#MockCompoundFileDirectoryWrapper(String,MockDirectoryWrapper,CompoundFileDirectory,boolean).mjava","sourceNew":null,"sourceOld":"  public MockCompoundFileDirectoryWrapper(String name, MockDirectoryWrapper parent, CompoundFileDirectory delegate, boolean forWrite) throws IOException {\n    super(parent, name, IOContext.DEFAULT);\n    this.name = name;\n    this.parent = parent;\n    this.delegate = delegate;\n    // don't initialize here since we delegate everything - if not initialized a direct call will cause an assert to fail!\n    parent.addFileHandle(this, name, !forWrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","64d8c4b572c9d5e49a6f831e8d4ebc203b770272"],"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"64d8c4b572c9d5e49a6f831e8d4ebc203b770272":["dacab2c037901da80e538bdc0f2cf1557c0eb543"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["2553b00f699380c64959ccb27991289aae87be2e","64d8c4b572c9d5e49a6f831e8d4ebc203b770272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["64d8c4b572c9d5e49a6f831e8d4ebc203b770272","1291e4568eb7d9463d751627596ef14baf4c1603"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dacab2c037901da80e538bdc0f2cf1557c0eb543"],"dacab2c037901da80e538bdc0f2cf1557c0eb543":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dacab2c037901da80e538bdc0f2cf1557c0eb543"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["67aadace85f701c87a4e0721eedcda25d8415a70"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"64d8c4b572c9d5e49a6f831e8d4ebc203b770272":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"67aadace85f701c87a4e0721eedcda25d8415a70":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","dacab2c037901da80e538bdc0f2cf1557c0eb543","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"dacab2c037901da80e538bdc0f2cf1557c0eb543":["64d8c4b572c9d5e49a6f831e8d4ebc203b770272","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}