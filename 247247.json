{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/BaseSynonymParserTestCase#assertEntryAbsent(SynonymMap,String).mjava","commits":[{"id":"927d09add12b0fa3c10f6f9ae564d85bef5dc12c","date":1429219595,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/BaseSynonymParserTestCase#assertEntryAbsent(SynonymMap,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates that there are no synonyms for the given word.\n   * @param synonynMap  the generated synonym map after parsing\n   * @param word        word (phrase) we are validating the synonyms for. Should be the value that comes out of the analyzer.\n   *                    All spaces will be replaced by word separators.\n   */\n  public static void assertEntryAbsent(SynonymMap synonynMap, String word) throws IOException {\n    word = word.replace(' ', SynonymMap.WORD_SEPARATOR);\n    BytesRef value = Util.get(synonynMap.fst, Util.toUTF32(new CharsRef(word), new IntsRefBuilder()));\n    assertNull(\"There should be no synonyms for: \" + word, value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"927d09add12b0fa3c10f6f9ae564d85bef5dc12c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["927d09add12b0fa3c10f6f9ae564d85bef5dc12c"]},"commit2Childs":{"927d09add12b0fa3c10f6f9ae564d85bef5dc12c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["927d09add12b0fa3c10f6f9ae564d85bef5dc12c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}