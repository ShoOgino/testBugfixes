{"path":"src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","commits":[{"id":"9a70797e2ad3b67325d3043155af4baf6445fdd9","date":1227585729,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["275f40e1400de0b5ab5e33051ac11e8973813a2c","275f40e1400de0b5ab5e33051ac11e8973813a2c","275f40e1400de0b5ab5e33051ac11e8973813a2c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c008338f79bd89b144d1fc8a57a39060df14b67","date":1243431296,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3c008338f79bd89b144d1fc8a57a39060df14b67":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3c008338f79bd89b144d1fc8a57a39060df14b67"],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3c008338f79bd89b144d1fc8a57a39060df14b67":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["3c008338f79bd89b144d1fc8a57a39060df14b67"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}