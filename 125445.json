{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","sourceNew":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","sourceOld":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","sourceNew":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","sourceOld":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","sourceNew":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"    'cluster-policy':[\" +\n          \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n          \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n          \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n          \"      { 'replica':1, nodeset: {'sysprop.rack':'rack1'}}]\" +\n          \"  }\";\n\n    }\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","sourceOld":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","sourceNew":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"    'cluster-policy':[\" +\n          \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n          \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n          \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n          \"      { 'replica':1, nodeset: {'sysprop.rack':'rack1'}}]\" +\n          \"  }\";\n\n    }\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","sourceOld":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","sourceNew":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"    'cluster-policy':[\" +\n          \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n          \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n          \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n          \"      { 'replica':1, nodeset: {'sysprop.rack':'rack1'}}]\" +\n          \"  }\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","sourceOld":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"    'cluster-policy':[\" +\n          \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n          \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n          \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n          \"      { 'replica':1, nodeset: {'sysprop.rack':'rack1'}}]\" +\n          \"  }\";\n\n    }\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testConditionsSort().mjava","sourceNew":null,"sourceOld":"  public void testConditionsSort() {\n    String rules = \"{\" +\n        \"    'cluster-policy':[\" +\n        \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n        \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n        \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n        \"      { 'replica':1, 'sysprop.rack':'rack1'}]\" +\n        \"  }\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"    'cluster-policy':[\" +\n          \"      { 'nodeRole':'overseer', replica: 0,  'strict':false},\" +\n          \"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},\" +\n          \"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},\" +\n          \"      { 'replica':1, nodeset: {'sysprop.rack':'rack1'}}]\" +\n          \"  }\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Policy p = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    List<Clause> clauses = new ArrayList<>(p.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(\"nodeRole\", clauses.get(1).tag.getName());\n    assertEquals(\"sysprop.rack\", clauses.get(0).tag.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["28288370235ed02234a64753cdbf0c6ec096304a","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["9ba1b632c041956c93c41aa1143d16a567014891","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"28288370235ed02234a64753cdbf0c6ec096304a":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}