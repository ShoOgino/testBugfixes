{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(LeafReader,PrintStream,boolean).mjava","commits":[{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(LeafReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test live docs.\n   * @lucene.experimental\n   */\n  public static Status.LiveDocStatus testLiveDocs(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.LiveDocStatus status = new Status.LiveDocStatus();\n    \n    try {\n      if (infoStream != null)\n        infoStream.print(\"    test: check live docs.....\");\n      final int numDocs = reader.numDocs();\n      if (reader.hasDeletions()) {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs == null) {\n          throw new RuntimeException(\"segment should have deletions, but liveDocs is null\");\n        } else {\n          int numLive = 0;\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (liveDocs.get(j)) {\n              numLive++;\n            }\n          }\n          if (numLive != numDocs) {\n            throw new RuntimeException(\"liveDocs count mismatch: info=\" + numDocs + \", vs bits=\" + numLive);\n          }\n        }\n        \n        status.numDeleted = reader.numDeletedDocs();\n        msg(infoStream, \"OK [\" + (status.numDeleted) + \" deleted docs]\");\n      } else {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs != null) {\n          // its ok for it to be non-null here, as long as none are set right?\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (!liveDocs.get(j)) {\n              throw new RuntimeException(\"liveDocs mismatch: info says no deletions but doc \" + j + \" is deleted.\");\n            }\n          }\n        }\n        msg(infoStream, \"OK\");\n      }\n      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b64ceb507ba9aa71920c0bfad91032e2c03d42f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(LeafReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(LeafReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test live docs.\n   * @lucene.experimental\n   */\n  public static Status.LiveDocStatus testLiveDocs(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.LiveDocStatus status = new Status.LiveDocStatus();\n    \n    try {\n      if (infoStream != null)\n        infoStream.print(\"    test: check live docs.....\");\n      final int numDocs = reader.numDocs();\n      if (reader.hasDeletions()) {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs == null) {\n          throw new RuntimeException(\"segment should have deletions, but liveDocs is null\");\n        } else {\n          int numLive = 0;\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (liveDocs.get(j)) {\n              numLive++;\n            }\n          }\n          if (numLive != numDocs) {\n            throw new RuntimeException(\"liveDocs count mismatch: info=\" + numDocs + \", vs bits=\" + numLive);\n          }\n        }\n        \n        status.numDeleted = reader.numDeletedDocs();\n        msg(infoStream, \"OK [\" + (status.numDeleted) + \" deleted docs]\");\n      } else {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs != null) {\n          // it's ok for it to be non-null here, as long as none are set right?\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (!liveDocs.get(j)) {\n              throw new RuntimeException(\"liveDocs mismatch: info says no deletions but doc \" + j + \" is deleted.\");\n            }\n          }\n        }\n        msg(infoStream, \"OK\");\n      }\n      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test live docs.\n   * @lucene.experimental\n   */\n  public static Status.LiveDocStatus testLiveDocs(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.LiveDocStatus status = new Status.LiveDocStatus();\n    \n    try {\n      if (infoStream != null)\n        infoStream.print(\"    test: check live docs.....\");\n      final int numDocs = reader.numDocs();\n      if (reader.hasDeletions()) {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs == null) {\n          throw new RuntimeException(\"segment should have deletions, but liveDocs is null\");\n        } else {\n          int numLive = 0;\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (liveDocs.get(j)) {\n              numLive++;\n            }\n          }\n          if (numLive != numDocs) {\n            throw new RuntimeException(\"liveDocs count mismatch: info=\" + numDocs + \", vs bits=\" + numLive);\n          }\n        }\n        \n        status.numDeleted = reader.numDeletedDocs();\n        msg(infoStream, \"OK [\" + (status.numDeleted) + \" deleted docs]\");\n      } else {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs != null) {\n          // its ok for it to be non-null here, as long as none are set right?\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (!liveDocs.get(j)) {\n              throw new RuntimeException(\"liveDocs mismatch: info says no deletions but doc \" + j + \" is deleted.\");\n            }\n          }\n        }\n        msg(infoStream, \"OK\");\n      }\n      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b64ceb507ba9aa71920c0bfad91032e2c03d42f","date":1423608862,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(LeafReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(LeafReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test live docs.\n   * @lucene.experimental\n   */\n  public static Status.LiveDocStatus testLiveDocs(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.LiveDocStatus status = new Status.LiveDocStatus();\n    \n    try {\n      if (infoStream != null)\n        infoStream.print(\"    test: check live docs.....\");\n      final int numDocs = reader.numDocs();\n      if (reader.hasDeletions()) {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs == null) {\n          throw new RuntimeException(\"segment should have deletions, but liveDocs is null\");\n        } else {\n          int numLive = 0;\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (liveDocs.get(j)) {\n              numLive++;\n            }\n          }\n          if (numLive != numDocs) {\n            throw new RuntimeException(\"liveDocs count mismatch: info=\" + numDocs + \", vs bits=\" + numLive);\n          }\n        }\n        \n        status.numDeleted = reader.numDeletedDocs();\n        msg(infoStream, String.format(Locale.ROOT, \"OK [%d deleted docs] [took %.3f sec]\", status.numDeleted, nsToSec(System.nanoTime()-startNS)));\n      } else {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs != null) {\n          // it's ok for it to be non-null here, as long as none are set right?\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (!liveDocs.get(j)) {\n              throw new RuntimeException(\"liveDocs mismatch: info says no deletions but doc \" + j + \" is deleted.\");\n            }\n          }\n        }\n        msg(infoStream, String.format(Locale.ROOT, \"OK [took %.3f sec]\", (nsToSec(System.nanoTime()-startNS))));\n      }\n      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test live docs.\n   * @lucene.experimental\n   */\n  public static Status.LiveDocStatus testLiveDocs(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.LiveDocStatus status = new Status.LiveDocStatus();\n    \n    try {\n      if (infoStream != null)\n        infoStream.print(\"    test: check live docs.....\");\n      final int numDocs = reader.numDocs();\n      if (reader.hasDeletions()) {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs == null) {\n          throw new RuntimeException(\"segment should have deletions, but liveDocs is null\");\n        } else {\n          int numLive = 0;\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (liveDocs.get(j)) {\n              numLive++;\n            }\n          }\n          if (numLive != numDocs) {\n            throw new RuntimeException(\"liveDocs count mismatch: info=\" + numDocs + \", vs bits=\" + numLive);\n          }\n        }\n        \n        status.numDeleted = reader.numDeletedDocs();\n        msg(infoStream, \"OK [\" + (status.numDeleted) + \" deleted docs]\");\n      } else {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs != null) {\n          // it's ok for it to be non-null here, as long as none are set right?\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (!liveDocs.get(j)) {\n              throw new RuntimeException(\"liveDocs mismatch: info says no deletions but doc \" + j + \" is deleted.\");\n            }\n          }\n        }\n        msg(infoStream, \"OK\");\n      }\n      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(LeafReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test live docs.\n   * @lucene.experimental\n   */\n  public static Status.LiveDocStatus testLiveDocs(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.LiveDocStatus status = new Status.LiveDocStatus();\n    \n    try {\n      if (infoStream != null)\n        infoStream.print(\"    test: check live docs.....\");\n      final int numDocs = reader.numDocs();\n      if (reader.hasDeletions()) {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs == null) {\n          throw new RuntimeException(\"segment should have deletions, but liveDocs is null\");\n        } else {\n          int numLive = 0;\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (liveDocs.get(j)) {\n              numLive++;\n            }\n          }\n          if (numLive != numDocs) {\n            throw new RuntimeException(\"liveDocs count mismatch: info=\" + numDocs + \", vs bits=\" + numLive);\n          }\n        }\n        \n        status.numDeleted = reader.numDeletedDocs();\n        msg(infoStream, String.format(Locale.ROOT, \"OK [%d deleted docs] [took %.3f sec]\", status.numDeleted, nsToSec(System.nanoTime()-startNS)));\n      } else {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs != null) {\n          // it's ok for it to be non-null here, as long as none are set right?\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (!liveDocs.get(j)) {\n              throw new RuntimeException(\"liveDocs mismatch: info says no deletions but doc \" + j + \" is deleted.\");\n            }\n          }\n        }\n        msg(infoStream, String.format(Locale.ROOT, \"OK [took %.3f sec]\", (nsToSec(System.nanoTime()-startNS))));\n      }\n      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test live docs.\n   * @lucene.experimental\n   */\n  public static Status.LiveDocStatus testLiveDocs(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.LiveDocStatus status = new Status.LiveDocStatus();\n    \n    try {\n      if (infoStream != null)\n        infoStream.print(\"    test: check live docs.....\");\n      final int numDocs = reader.numDocs();\n      if (reader.hasDeletions()) {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs == null) {\n          throw new RuntimeException(\"segment should have deletions, but liveDocs is null\");\n        } else {\n          int numLive = 0;\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (liveDocs.get(j)) {\n              numLive++;\n            }\n          }\n          if (numLive != numDocs) {\n            throw new RuntimeException(\"liveDocs count mismatch: info=\" + numDocs + \", vs bits=\" + numLive);\n          }\n        }\n        \n        status.numDeleted = reader.numDeletedDocs();\n        msg(infoStream, String.format(Locale.ROOT, \"OK [%d deleted docs] [took %.3f sec]\", status.numDeleted, nsToSec(System.nanoTime()-startNS)));\n      } else {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs != null) {\n          // it's ok for it to be non-null here, as long as none are set right?\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (!liveDocs.get(j)) {\n              throw new RuntimeException(\"liveDocs mismatch: info says no deletions but doc \" + j + \" is deleted.\");\n            }\n          }\n        }\n        msg(infoStream, String.format(Locale.ROOT, \"OK [took %.3f sec]\", (nsToSec(System.nanoTime()-startNS))));\n      }\n      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testLiveDocs(LeafReader,PrintStream,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Test live docs.\n   * @lucene.experimental\n   */\n  public static Status.LiveDocStatus testLiveDocs(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.LiveDocStatus status = new Status.LiveDocStatus();\n    \n    try {\n      if (infoStream != null)\n        infoStream.print(\"    test: check live docs.....\");\n      final int numDocs = reader.numDocs();\n      if (reader.hasDeletions()) {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs == null) {\n          throw new RuntimeException(\"segment should have deletions, but liveDocs is null\");\n        } else {\n          int numLive = 0;\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (liveDocs.get(j)) {\n              numLive++;\n            }\n          }\n          if (numLive != numDocs) {\n            throw new RuntimeException(\"liveDocs count mismatch: info=\" + numDocs + \", vs bits=\" + numLive);\n          }\n        }\n        \n        status.numDeleted = reader.numDeletedDocs();\n        msg(infoStream, String.format(Locale.ROOT, \"OK [%d deleted docs] [took %.3f sec]\", status.numDeleted, nsToSec(System.nanoTime()-startNS)));\n      } else {\n        Bits liveDocs = reader.getLiveDocs();\n        if (liveDocs != null) {\n          // it's ok for it to be non-null here, as long as none are set right?\n          for (int j = 0; j < liveDocs.length(); j++) {\n            if (!liveDocs.get(j)) {\n              throw new RuntimeException(\"liveDocs mismatch: info says no deletions but doc \" + j + \" is deleted.\");\n            }\n          }\n        }\n        msg(infoStream, String.format(Locale.ROOT, \"OK [took %.3f sec]\", (nsToSec(System.nanoTime()-startNS))));\n      }\n      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["6b64ceb507ba9aa71920c0bfad91032e2c03d42f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6b64ceb507ba9aa71920c0bfad91032e2c03d42f","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b64ceb507ba9aa71920c0bfad91032e2c03d42f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["6b64ceb507ba9aa71920c0bfad91032e2c03d42f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"6b64ceb507ba9aa71920c0bfad91032e2c03d42f":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}