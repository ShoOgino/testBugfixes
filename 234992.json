{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#getZombieLeader(ZkController,String,String).mjava","commits":[{"id":"23899910c6ea46c4aff96056cfae91d3e31b262a","date":1522788117,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#getZombieLeader(ZkController,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Zombie leader is a replica won the election but does not exist in clusterstate\n   * @return null if the zombie leader does not exist\n   */\n  private static ZkCoreNodeProps getZombieLeader(ZkController zkController, String collection, String shardId) {\n    try {\n      ZkCoreNodeProps leaderProps = zkController.getLeaderProps(collection, shardId, 1000);\n      DocCollection docCollection = zkController.getClusterState().getCollection(collection);\n      Replica replica = docCollection.getReplica(leaderProps.getNodeProps().getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n      if (replica == null) return leaderProps;\n      if (!replica.getNodeName().equals(leaderProps.getNodeName())) {\n        return leaderProps;\n      }\n      return null;\n    } catch (Exception e) {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#getZombieLeader(ZkController,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Zombie leader is a replica won the election but does not exist in clusterstate\n   * @return null if the zombie leader does not exist\n   */\n  private static ZkCoreNodeProps getZombieLeader(ZkController zkController, String collection, String shardId) {\n    try {\n      ZkCoreNodeProps leaderProps = zkController.getLeaderProps(collection, shardId, 1000);\n      DocCollection docCollection = zkController.getClusterState().getCollection(collection);\n      Replica replica = docCollection.getReplica(leaderProps.getNodeProps().getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n      if (replica == null) return leaderProps;\n      if (!replica.getNodeName().equals(leaderProps.getNodeName())) {\n        return leaderProps;\n      }\n      return null;\n    } catch (Exception e) {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23899910c6ea46c4aff96056cfae91d3e31b262a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28ba172425e443e0f08a49de6d73586c418d7251":["23899910c6ea46c4aff96056cfae91d3e31b262a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28ba172425e443e0f08a49de6d73586c418d7251"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23899910c6ea46c4aff96056cfae91d3e31b262a"],"23899910c6ea46c4aff96056cfae91d3e31b262a":["28ba172425e443e0f08a49de6d73586c418d7251"],"28ba172425e443e0f08a49de6d73586c418d7251":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}