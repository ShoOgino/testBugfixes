{"path":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","commits":[{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void refresh(String path) {\n    try {\n      List l = null;\n      try {\n        l = coreContainer.getZkController().getZkClient().getChildren(ZK_PACKAGESTORE+ path, null, true);\n      } catch (KeeperException.NoNodeException e) {\n        // does not matter\n      }\n      if (l != null && !l.isEmpty()) {\n        List myFiles = list(path, s -> true);\n        for (Object f : l) {\n          if (!myFiles.contains(f)) {\n            log.info(\"{} does not exist locally, downloading.. \",f);\n            fetch(path + \"/\" + f.toString(), \"*\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Could not refresh files in \" +path, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void refresh(String path) {\n    try {\n      List l = null;\n      try {\n        l = coreContainer.getZkController().getZkClient().getChildren(ZK_PACKAGESTORE+ path, null, true);\n      } catch (KeeperException.NoNodeException e) {\n        // does not matter\n      }\n      if (l != null && !l.isEmpty()) {\n        List myFiles = list(path, s -> true);\n        for (Object f : l) {\n          if (!myFiles.contains(f)) {\n            log.info(\"{} does not exist locally, downloading.. \",f);\n            fetch(path + \"/\" + f.toString(), \"*\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Could not refresh files in \" +path, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","sourceNew":"  @Override\n  public void refresh(String path) {\n    try {\n      List l = null;\n      try {\n        l = coreContainer.getZkController().getZkClient().getChildren(ZK_PACKAGESTORE+ path, null, true);\n      } catch (KeeperException.NoNodeException e) {\n        // does not matter\n      }\n      if (l != null && !l.isEmpty()) {\n        List myFiles = list(path, s -> true);\n        for (Object f : l) {\n          if (!myFiles.contains(f)) {\n            log.info(\"{} does not exist locally, downloading.. \",f);\n            fetch(path + \"/\" + f.toString(), \"*\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Could not refresh files in {}\", path, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void refresh(String path) {\n    try {\n      List l = null;\n      try {\n        l = coreContainer.getZkController().getZkClient().getChildren(ZK_PACKAGESTORE+ path, null, true);\n      } catch (KeeperException.NoNodeException e) {\n        // does not matter\n      }\n      if (l != null && !l.isEmpty()) {\n        List myFiles = list(path, s -> true);\n        for (Object f : l) {\n          if (!myFiles.contains(f)) {\n            log.info(\"{} does not exist locally, downloading.. \",f);\n            fetch(path + \"/\" + f.toString(), \"*\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Could not refresh files in \" +path, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","sourceNew":"  @Override\n  public void refresh(String path) {\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      List l = null;\n      try {\n        l = coreContainer.getZkController().getZkClient().getChildren(ZK_PACKAGESTORE+ path, null, true);\n      } catch (KeeperException.NoNodeException e) {\n        // does not matter\n      }\n      if (l != null && !l.isEmpty()) {\n        @SuppressWarnings({\"rawtypes\"})\n        List myFiles = list(path, s -> true);\n        for (Object f : l) {\n          if (!myFiles.contains(f)) {\n            log.info(\"{} does not exist locally, downloading.. \",f);\n            fetch(path + \"/\" + f.toString(), \"*\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Could not refresh files in {}\", path, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void refresh(String path) {\n    try {\n      List l = null;\n      try {\n        l = coreContainer.getZkController().getZkClient().getChildren(ZK_PACKAGESTORE+ path, null, true);\n      } catch (KeeperException.NoNodeException e) {\n        // does not matter\n      }\n      if (l != null && !l.isEmpty()) {\n        List myFiles = list(path, s -> true);\n        for (Object f : l) {\n          if (!myFiles.contains(f)) {\n            log.info(\"{} does not exist locally, downloading.. \",f);\n            fetch(path + \"/\" + f.toString(), \"*\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Could not refresh files in {}\", path, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#refresh(String).mjava","sourceNew":"  @Override\n  public void refresh(String path) {\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      List l = null;\n      try {\n        l = coreContainer.getZkController().getZkClient().getChildren(ZK_PACKAGESTORE + path, null, true);\n      } catch (KeeperException.NoNodeException e) {\n        // does not matter\n      }\n      if (l != null && !l.isEmpty()) {\n        @SuppressWarnings({\"rawtypes\"})\n        List myFiles = list(path, s -> true);\n        for (Object f : l) {\n          if (!myFiles.contains(f)) {\n            log.info(\"{} does not exist locally, downloading.. \", f);\n            fetch(path + \"/\" + f.toString(), \"*\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Could not refresh files in {}\", path, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void refresh(String path) {\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      List l = null;\n      try {\n        l = coreContainer.getZkController().getZkClient().getChildren(ZK_PACKAGESTORE+ path, null, true);\n      } catch (KeeperException.NoNodeException e) {\n        // does not matter\n      }\n      if (l != null && !l.isEmpty()) {\n        @SuppressWarnings({\"rawtypes\"})\n        List myFiles = list(path, s -> true);\n        for (Object f : l) {\n          if (!myFiles.contains(f)) {\n            log.info(\"{} does not exist locally, downloading.. \",f);\n            fetch(path + \"/\" + f.toString(), \"*\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Could not refresh files in {}\", path, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d218decf811b7a0a4d86218c54c79c74a962374b"],"64ec73f19361ec6354e55c878a349735fa8bc52e":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"140be51d03394488536f4aacedace29f9b318347":["d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ec73f19361ec6354e55c878a349735fa8bc52e"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"64ec73f19361ec6354e55c878a349735fa8bc52e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b"],"140be51d03394488536f4aacedace29f9b318347":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","140be51d03394488536f4aacedace29f9b318347"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}