{"path":"solr/core/src/java/org/apache/solr/store/blockcache/CustomBufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/CustomBufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len, boolean useBuffer)\n      throws IOException {\n    \n    if (len <= (bufferLength - bufferPosition)) {\n      // the buffer contains enough data to satisfy this request\n      if (len > 0) // to allow b to be null if len is 0...\n      System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition += len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if (available > 0) {\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if (useBuffer && len < bufferSize) {\n        // If the amount left to read is small enough, and\n        // we are allowed to use our buffer, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if (bufferLength < len) {\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition = len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer\n        // or we've been asked to not use our buffer -\n        // there's no performance reason not to read it all\n        // at once. Note that unlike the previous code of\n        // this function, there is no need to do a seek\n        // here, because there's no need to reread what we\n        // had in the buffer.\n        long after = bufferStart + bufferPosition + len;\n        if (after > length()) throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0; // trigger refill() on read\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f3d4f2f9043e300449e8d17c8779e5720d99e2af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/CustomBufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len, boolean useBuffer)\n      throws IOException {\n    \n    if (len <= (bufferLength - bufferPosition)) {\n      // the buffer contains enough data to satisfy this request\n      if (len > 0) // to allow b to be null if len is 0...\n      System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition += len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if (available > 0) {\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if (useBuffer && len < bufferSize) {\n        // If the amount left to read is small enough, and\n        // we are allowed to use our buffer, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if (bufferLength < len) {\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition = len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer\n        // or we've been asked to not use our buffer -\n        // there's no performance reason not to read it all\n        // at once. Note that unlike the previous code of\n        // this function, there is no need to do a seek\n        // here, because there's no need to reread what we\n        // had in the buffer.\n        long after = bufferStart + bufferPosition + len;\n        if (after > length()) throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0; // trigger refill() on read\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d4f2f9043e300449e8d17c8779e5720d99e2af","date":1448045755,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/CustomBufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/CustomBufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len, boolean useBuffer)\n      throws IOException {\n    \n    if (len <= (bufferLength - bufferPosition)) {\n      // the buffer contains enough data to satisfy this request\n      if (len > 0) // to allow b to be null if len is 0...\n      System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition += len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if (available > 0) {\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if (useBuffer && len < bufferSize) {\n        // If the amount left to read is small enough, and\n        // we are allowed to use our buffer, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if (bufferLength < len) {\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new EOFException(\"read past EOF: \" + this);\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition = len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer\n        // or we've been asked to not use our buffer -\n        // there's no performance reason not to read it all\n        // at once. Note that unlike the previous code of\n        // this function, there is no need to do a seek\n        // here, because there's no need to reread what we\n        // had in the buffer.\n        long after = bufferStart + bufferPosition + len;\n        if (after > length()) throw new EOFException(\"read past EOF: \" + this);\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0; // trigger refill() on read\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readBytes(byte[] b, int offset, int len, boolean useBuffer)\n      throws IOException {\n    \n    if (len <= (bufferLength - bufferPosition)) {\n      // the buffer contains enough data to satisfy this request\n      if (len > 0) // to allow b to be null if len is 0...\n      System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition += len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if (available > 0) {\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if (useBuffer && len < bufferSize) {\n        // If the amount left to read is small enough, and\n        // we are allowed to use our buffer, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if (bufferLength < len) {\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition = len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer\n        // or we've been asked to not use our buffer -\n        // there's no performance reason not to read it all\n        // at once. Note that unlike the previous code of\n        // this function, there is no need to do a seek\n        // here, because there's no need to reread what we\n        // had in the buffer.\n        long after = bufferStart + bufferPosition + len;\n        if (after > length()) throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0; // trigger refill() on read\n      }\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3d4f2f9043e300449e8d17c8779e5720d99e2af":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3d4f2f9043e300449e8d17c8779e5720d99e2af"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f3d4f2f9043e300449e8d17c8779e5720d99e2af"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f3d4f2f9043e300449e8d17c8779e5720d99e2af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}