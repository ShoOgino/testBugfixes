{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#claimAsyncId(String).mjava","commits":[{"id":"dd8a9ad1acc754f713e220250044c2bf06a22a0b","date":1518740056,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#claimAsyncId(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * When an operation needs to be performed in an asynchronous mode, the asyncId needs\n   * to be claimed by calling this method to make sure it's not duplicate (hasn't been\n   * claimed by other request). If this method returns true, the asyncId in the parameter\n   * has been reserved for the operation, meaning that no other thread/operation can claim\n   * it. If for whatever reason, the operation is not scheduled, the asuncId needs to be\n   * cleared using {@link #clearAsyncId(String)}.\n   * If this method returns false, no reservation has been made, and this asyncId can't \n   * be used, since it's being used by another operation (currently or in the past)\n   * @param asyncId A string representing the asyncId of an operation. Can't be null.\n   * @return True if the reservation succeeds.\n   *         False if this ID is already in use.\n   */\n  public boolean claimAsyncId(String asyncId) throws KeeperException {\n    try {\n      return asyncIdsMap.putIfAbsent(asyncId, new byte[0]);\n    } catch (InterruptedException e) {\n      log.error(\"Could not claim asyncId=\" + asyncId, e);\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#claimAsyncId(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#claimAsyncId(String).mjava","sourceNew":"  /**\n   * When an operation needs to be performed in an asynchronous mode, the asyncId needs\n   * to be claimed by calling this method to make sure it's not duplicate (hasn't been\n   * claimed by other request). If this method returns true, the asyncId in the parameter\n   * has been reserved for the operation, meaning that no other thread/operation can claim\n   * it. If for whatever reason, the operation is not scheduled, the asuncId needs to be\n   * cleared using {@link #clearAsyncId(String)}.\n   * If this method returns false, no reservation has been made, and this asyncId can't\n   * be used, since it's being used by another operation (currently or in the past)\n   * @param asyncId A string representing the asyncId of an operation. Can't be null.\n   * @return True if the reservation succeeds.\n   *         False if this ID is already in use.\n   */\n  public boolean claimAsyncId(String asyncId) throws KeeperException {\n    try {\n      return asyncIdsMap.putIfAbsent(asyncId, new byte[0]);\n    } catch (InterruptedException e) {\n      log.error(\"Could not claim asyncId=\" + asyncId, e);\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * When an operation needs to be performed in an asynchronous mode, the asyncId needs\n   * to be claimed by calling this method to make sure it's not duplicate (hasn't been\n   * claimed by other request). If this method returns true, the asyncId in the parameter\n   * has been reserved for the operation, meaning that no other thread/operation can claim\n   * it. If for whatever reason, the operation is not scheduled, the asuncId needs to be\n   * cleared using {@link #clearAsyncId(String)}.\n   * If this method returns false, no reservation has been made, and this asyncId can't \n   * be used, since it's being used by another operation (currently or in the past)\n   * @param asyncId A string representing the asyncId of an operation. Can't be null.\n   * @return True if the reservation succeeds.\n   *         False if this ID is already in use.\n   */\n  public boolean claimAsyncId(String asyncId) throws KeeperException {\n    try {\n      return asyncIdsMap.putIfAbsent(asyncId, new byte[0]);\n    } catch (InterruptedException e) {\n      log.error(\"Could not claim asyncId=\" + asyncId, e);\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#claimAsyncId(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#claimAsyncId(String).mjava","sourceNew":"  /**\n   * When an operation needs to be performed in an asynchronous mode, the asyncId needs\n   * to be claimed by calling this method to make sure it's not duplicate (hasn't been\n   * claimed by other request). If this method returns true, the asyncId in the parameter\n   * has been reserved for the operation, meaning that no other thread/operation can claim\n   * it. If for whatever reason, the operation is not scheduled, the asuncId needs to be\n   * cleared using {@link #clearAsyncId(String)}.\n   * If this method returns false, no reservation has been made, and this asyncId can't\n   * be used, since it's being used by another operation (currently or in the past)\n   * @param asyncId A string representing the asyncId of an operation. Can't be null.\n   * @return True if the reservation succeeds.\n   *         False if this ID is already in use.\n   */\n  public boolean claimAsyncId(String asyncId) throws KeeperException {\n    try {\n      return asyncIdsMap.putIfAbsent(asyncId, new byte[0]);\n    } catch (InterruptedException e) {\n      log.error(\"Could not claim asyncId={}\", asyncId, e);\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * When an operation needs to be performed in an asynchronous mode, the asyncId needs\n   * to be claimed by calling this method to make sure it's not duplicate (hasn't been\n   * claimed by other request). If this method returns true, the asyncId in the parameter\n   * has been reserved for the operation, meaning that no other thread/operation can claim\n   * it. If for whatever reason, the operation is not scheduled, the asuncId needs to be\n   * cleared using {@link #clearAsyncId(String)}.\n   * If this method returns false, no reservation has been made, and this asyncId can't\n   * be used, since it's being used by another operation (currently or in the past)\n   * @param asyncId A string representing the asyncId of an operation. Can't be null.\n   * @return True if the reservation succeeds.\n   *         False if this ID is already in use.\n   */\n  public boolean claimAsyncId(String asyncId) throws KeeperException {\n    try {\n      return asyncIdsMap.putIfAbsent(asyncId, new byte[0]);\n    } catch (InterruptedException e) {\n      log.error(\"Could not claim asyncId=\" + asyncId, e);\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["ad4957cde742defe6db19689abdc267c5d948066"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}