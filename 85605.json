{"path":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","date":1344893790,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n\n    inject = getBoolean(INJECT, true);\n\n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new IllegalArgumentException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name, loader);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new IllegalArgumentException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n\n    inject = getBoolean(INJECT, true);\n\n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new IllegalArgumentException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name, loader);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new IllegalArgumentException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n\n    inject = getBoolean(INJECT, true);\n\n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new IllegalArgumentException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name, loader);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new IllegalArgumentException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name, loader);\n    }\n\n    if (maxCodeLength != null) {\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n\n    inject = getBoolean(INJECT, true);\n\n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new IllegalArgumentException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name, loader);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","57da959ec15bb701bd1d1bf3c613b69009ff4bfd","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}