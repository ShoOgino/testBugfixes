{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","commits":[{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n\n    createCollection(collectionInfos, collectionName,\n        OverseerCollectionProcessor.asMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, numReplicas,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client);\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n\n    createCollection(collectionInfos, collectionName,\n        OverseerCollectionProcessor.asMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, numReplicas,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client);\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n\n    createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, numReplicas,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client);\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n\n    createCollection(collectionInfos, collectionName,\n        OverseerCollectionProcessor.asMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, numReplicas,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8f0529666139e562ee655d544b667bfedab70c7","date":1394717900,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client);\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n\n    createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, numReplicas,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["1cfa38e36fa296bb93d77df7d5556257dffa4535","1eeda7e62e149f90eee8895af874c74efa7d4852"],"e8f0529666139e562ee655d544b667bfedab70c7":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e187a371a1d09379bb452c2c13a7b9221525dff8":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"bafca15d8e408346a67f4282ad1143b88023893b":["e8f0529666139e562ee655d544b667bfedab70c7"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"e8f0529666139e562ee655d544b667bfedab70c7":["bafca15d8e408346a67f4282ad1143b88023893b"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["e8f0529666139e562ee655d544b667bfedab70c7"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e187a371a1d09379bb452c2c13a7b9221525dff8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}