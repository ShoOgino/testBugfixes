{"path":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testWithThreads().mjava","commits":[{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b156d846032fbeed5bbb6c45481d6dcab2339ec6","date":1358288319,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testWithThreads().mjava","sourceNew":null,"sourceOld":"  public void testWithThreads() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<String>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<BytesRef>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = _TestUtil.randomSimpleString(random);\n      } else {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedBytesDocValuesField(\"stringdv\", br));\n      doc.add(new PackedLongDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n    final DocValues dv = sr.docValues(\"stringdv\");\n    assertNotNull(dv);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final DocValues.Source docIDToID = sr.docValues(\"id\").getSource();\n\n    final int NUM_THREADS = _TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final DocValues.Source stringDVSource;\n            final DocValues.Source stringDVDirectSource;\n            try {\n              stringDVSource = dv.getSource();\n              assertNotNull(stringDVSource);\n              stringDVDirectSource = dv.getDirectSource();\n              assertNotNull(stringDVDirectSource);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final DocValues.Source source;\n              if (random.nextBoolean()) {\n                source = stringDVSource;\n              } else {\n                source = stringDVDirectSource;\n              }\n\n              final DocValues.SortedSource sortedSource = source.asSortedSource();\n              assertNotNull(sortedSource);\n\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                final BytesRef br = sortedSource.getBytes(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.getInt(docID)), br);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55d38708477d49511977195bad066d9ced001005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b156d846032fbeed5bbb6c45481d6dcab2339ec6":["55d38708477d49511977195bad066d9ced001005"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55d38708477d49511977195bad066d9ced001005","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55d38708477d49511977195bad066d9ced001005":["b156d846032fbeed5bbb6c45481d6dcab2339ec6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b156d846032fbeed5bbb6c45481d6dcab2339ec6":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b156d846032fbeed5bbb6c45481d6dcab2339ec6"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}