{"path":"src/test/org/apache/lucene/analysis/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","commits":[{"id":"41ce0ce6485d29a241c4ca4b6179d14df6a66bae","date":1259357651,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(new StringReader(\n        \"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(Version.LUCENE_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(TermAttribute.class));\n    char[] termBuffer = filter.getAttribute(TermAttribute.class).termBuffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(Version.LUCENE_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(Version.LUCENE_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(TermAttribute.class));\n    char[] termBuffer = filter.getAttribute(TermAttribute.class).termBuffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(new StringReader(\n        \"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(Version.LUCENE_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(TermAttribute.class));\n    char[] termBuffer = filter.getAttribute(TermAttribute.class).termBuffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(TermAttribute.class));\n    char[] termBuffer = filter.getAttribute(TermAttribute.class).termBuffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(Version.LUCENE_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(Version.LUCENE_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(TermAttribute.class));\n    char[] termBuffer = filter.getAttribute(TermAttribute.class).termBuffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(TermAttribute.class));\n    char[] termBuffer = filter.getAttribute(TermAttribute.class).termBuffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(TermAttribute.class));\n    char[] termBuffer = filter.getAttribute(TermAttribute.class).termBuffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}