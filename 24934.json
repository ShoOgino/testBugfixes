{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["84bc3a0dd894d2448badac45302b79cc2e445214"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84bc3a0dd894d2448badac45302b79cc2e445214","date":1462494639,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(int idx = 0; idx < leftHashOn.size(); ++idx){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      \n      // we know that left and right hashOns are the same size\n      String left = leftHashOn.get(idx);\n      String right = rightHashOn.get(idx);\n      \n      if(left.equals(right)){ \n        sb.append(left); \n      }\n      else{\n        sb.append(left);\n        sb.append(\"=\");\n        sb.append(right);\n      }\n    }\n    \n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    return expression;   \n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n\n","bugFix":["e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2233462ade0e629affa69a6f1e8d0205e4d6e596","date":1462534852,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(int idx = 0; idx < leftHashOn.size(); ++idx){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      \n      // we know that left and right hashOns are the same size\n      String left = leftHashOn.get(idx);\n      String right = rightHashOn.get(idx);\n      \n      if(left.equals(right)){ \n        sb.append(left); \n      }\n      else{\n        sb.append(left);\n        sb.append(\"=\");\n        sb.append(right);\n      }\n    }\n    \n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    return expression;   \n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(int idx = 0; idx < leftHashOn.size(); ++idx){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      \n      // we know that left and right hashOns are the same size\n      String left = leftHashOn.get(idx);\n      String right = rightHashOn.get(idx);\n      \n      if(left.equals(right)){ \n        sb.append(left); \n      }\n      else{\n        sb.append(left);\n        sb.append(\"=\");\n        sb.append(right);\n      }\n    }\n    \n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    return expression;   \n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(int idx = 0; idx < leftHashOn.size(); ++idx){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      \n      // we know that left and right hashOns are the same size\n      String left = leftHashOn.get(idx);\n      String right = rightHashOn.get(idx);\n      \n      if(left.equals(right)){ \n        sb.append(left); \n      }\n      else{\n        sb.append(left);\n        sb.append(\"=\");\n        sb.append(right);\n      }\n    }\n    \n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    return expression;   \n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // streams\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    // on\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","84bc3a0dd894d2448badac45302b79cc2e445214"],"84bc3a0dd894d2448badac45302b79cc2e445214":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2233462ade0e629affa69a6f1e8d0205e4d6e596"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","2233462ade0e629affa69a6f1e8d0205e4d6e596","84bc3a0dd894d2448badac45302b79cc2e445214","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84bc3a0dd894d2448badac45302b79cc2e445214":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}