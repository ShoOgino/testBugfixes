{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeights(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeights(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","pathOld":"/dev/null","sourceNew":"  private void createWeights(IndexSearcher searcher, boolean needsScores, float boost,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws IOException {\n    final SolrQueryRequest req = getRequest();\n    // since the feature store is a linkedhashmap order is preserved\n    for (final Feature f : features) {\n      try{\n        Feature.FeatureWeight fw = f.createWeight(searcher, needsScores, req, originalQuery, efi);\n        featureWeights.add(fw);\n      } catch (final Exception e) {\n        throw new RuntimeException(\"Exception from createWeight for \" + f.toString() + \" \"\n            + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeights(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","pathOld":"/dev/null","sourceNew":"  private void createWeights(IndexSearcher searcher, boolean needsScores, float boost,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws IOException {\n    final SolrQueryRequest req = getRequest();\n    // since the feature store is a linkedhashmap order is preserved\n    for (final Feature f : features) {\n      try{\n        Feature.FeatureWeight fw = f.createWeight(searcher, needsScores, req, originalQuery, efi);\n        featureWeights.add(fw);\n      } catch (final Exception e) {\n        throw new RuntimeException(\"Exception from createWeight for \" + f.toString() + \" \"\n            + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef8d46ad3265812d247126beb45b283763afee","date":1481143602,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeights(IndexSearcher,boolean,List[Feature.FeatureWeight],Collection[Feature]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeights(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","sourceNew":"  private void createWeights(IndexSearcher searcher, boolean needsScores,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws IOException {\n    final SolrQueryRequest req = getRequest();\n    // since the feature store is a linkedhashmap order is preserved\n    for (final Feature f : features) {\n      try{\n        Feature.FeatureWeight fw = f.createWeight(searcher, needsScores, req, originalQuery, efi);\n        featureWeights.add(fw);\n      } catch (final Exception e) {\n        throw new RuntimeException(\"Exception from createWeight for \" + f.toString() + \" \"\n            + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":"  private void createWeights(IndexSearcher searcher, boolean needsScores, float boost,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws IOException {\n    final SolrQueryRequest req = getRequest();\n    // since the feature store is a linkedhashmap order is preserved\n    for (final Feature f : features) {\n      try{\n        Feature.FeatureWeight fw = f.createWeight(searcher, needsScores, req, originalQuery, efi);\n        featureWeights.add(fw);\n      } catch (final Exception e) {\n        throw new RuntimeException(\"Exception from createWeight for \" + f.toString() + \" \"\n            + e.getMessage(), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeights(IndexSearcher,boolean,List[Feature.FeatureWeight],Collection[Feature]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeights(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","sourceNew":"  private void createWeights(IndexSearcher searcher, boolean needsScores,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws IOException {\n    final SolrQueryRequest req = getRequest();\n    // since the feature store is a linkedhashmap order is preserved\n    for (final Feature f : features) {\n      try{\n        Feature.FeatureWeight fw = f.createWeight(searcher, needsScores, req, originalQuery, efi);\n        featureWeights.add(fw);\n      } catch (final Exception e) {\n        throw new RuntimeException(\"Exception from createWeight for \" + f.toString() + \" \"\n            + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":"  private void createWeights(IndexSearcher searcher, boolean needsScores, float boost,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws IOException {\n    final SolrQueryRequest req = getRequest();\n    // since the feature store is a linkedhashmap order is preserved\n    for (final Feature f : features) {\n      try{\n        Feature.FeatureWeight fw = f.createWeight(searcher, needsScores, req, originalQuery, efi);\n        featureWeights.add(fw);\n      } catch (final Exception e) {\n        throw new RuntimeException(\"Exception from createWeight for \" + f.toString() + \" \"\n            + e.getMessage(), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07ef8d46ad3265812d247126beb45b283763afee":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","07ef8d46ad3265812d247126beb45b283763afee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07ef8d46ad3265812d247126beb45b283763afee"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["07ef8d46ad3265812d247126beb45b283763afee","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"07ef8d46ad3265812d247126beb45b283763afee":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}