{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#initOutStream(String,UpdateRequest,String).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#initOutStream(String,UpdateRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  public OutStream initOutStream(String baseUrl,\n                                 UpdateRequest updateRequest,\n                                 String collection) throws IOException {\n    String contentType = requestWriter.getUpdateContentType();\n    final ModifiableSolrParams origParams = new ModifiableSolrParams(updateRequest.getParams());\n\n    // The parser 'wt=' and 'version=' params are used instead of the\n    // original params\n    ModifiableSolrParams requestParams = new ModifiableSolrParams(origParams);\n    requestParams.set(CommonParams.WT, parser.getWriterType());\n    requestParams.set(CommonParams.VERSION, parser.getVersion());\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n    if (!basePath.endsWith(\"/\"))\n      basePath += \"/\";\n\n    OutputStreamContentProvider provider = new OutputStreamContentProvider();\n    Request postRequest = httpClient\n        .newRequest(basePath + \"update\"\n            + requestParams.toQueryString())\n        .method(HttpMethod.POST)\n        .header(\"User-Agent\", HttpSolrClient.AGENT)\n        .header(\"Content-Type\", contentType)\n        .content(provider);\n    setListeners(updateRequest, postRequest);\n    InputStreamResponseListener responseListener = new InputStreamResponseListener();\n    postRequest.send(responseListener);\n\n    boolean isXml = ClientUtils.TEXT_XML.equals(requestWriter.getUpdateContentType());\n    OutStream outStream = new OutStream(collection, origParams, provider, responseListener,\n        isXml);\n    if (isXml) {\n      outStream.write(\"<stream>\".getBytes(StandardCharsets.UTF_8));\n    }\n    return outStream;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbaf96cfda5422c42955ce34344f0e01839894ea","date":1559675051,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#initOutStream(String,UpdateRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#initOutStream(String,UpdateRequest,String).mjava","sourceNew":"  public OutStream initOutStream(String baseUrl,\n                                 UpdateRequest updateRequest,\n                                 String collection) throws IOException {\n    String contentType = requestWriter.getUpdateContentType();\n    final ModifiableSolrParams origParams = new ModifiableSolrParams(updateRequest.getParams());\n\n    // The parser 'wt=' and 'version=' params are used instead of the\n    // original params\n    ModifiableSolrParams requestParams = new ModifiableSolrParams(origParams);\n    requestParams.set(CommonParams.WT, parser.getWriterType());\n    requestParams.set(CommonParams.VERSION, parser.getVersion());\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n    if (!basePath.endsWith(\"/\"))\n      basePath += \"/\";\n\n    OutputStreamContentProvider provider = new OutputStreamContentProvider();\n    Request postRequest = httpClient\n        .newRequest(basePath + \"update\"\n            + requestParams.toQueryString())\n        .method(HttpMethod.POST)\n        .header(HttpHeader.CONTENT_TYPE, contentType)\n        .content(provider);\n    decorateRequest(postRequest, updateRequest);\n    InputStreamResponseListener responseListener = new InputStreamResponseListener();\n    postRequest.send(responseListener);\n\n    boolean isXml = ClientUtils.TEXT_XML.equals(requestWriter.getUpdateContentType());\n    OutStream outStream = new OutStream(collection, origParams, provider, responseListener,\n        isXml);\n    if (isXml) {\n      outStream.write(\"<stream>\".getBytes(StandardCharsets.UTF_8));\n    }\n    return outStream;\n  }\n\n","sourceOld":"  public OutStream initOutStream(String baseUrl,\n                                 UpdateRequest updateRequest,\n                                 String collection) throws IOException {\n    String contentType = requestWriter.getUpdateContentType();\n    final ModifiableSolrParams origParams = new ModifiableSolrParams(updateRequest.getParams());\n\n    // The parser 'wt=' and 'version=' params are used instead of the\n    // original params\n    ModifiableSolrParams requestParams = new ModifiableSolrParams(origParams);\n    requestParams.set(CommonParams.WT, parser.getWriterType());\n    requestParams.set(CommonParams.VERSION, parser.getVersion());\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n    if (!basePath.endsWith(\"/\"))\n      basePath += \"/\";\n\n    OutputStreamContentProvider provider = new OutputStreamContentProvider();\n    Request postRequest = httpClient\n        .newRequest(basePath + \"update\"\n            + requestParams.toQueryString())\n        .method(HttpMethod.POST)\n        .header(\"User-Agent\", HttpSolrClient.AGENT)\n        .header(\"Content-Type\", contentType)\n        .content(provider);\n    setListeners(updateRequest, postRequest);\n    InputStreamResponseListener responseListener = new InputStreamResponseListener();\n    postRequest.send(responseListener);\n\n    boolean isXml = ClientUtils.TEXT_XML.equals(requestWriter.getUpdateContentType());\n    OutStream outStream = new OutStream(collection, origParams, provider, responseListener,\n        isXml);\n    if (isXml) {\n      outStream.write(\"<stream>\".getBytes(StandardCharsets.UTF_8));\n    }\n    return outStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#initOutStream(String,UpdateRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#initOutStream(String,UpdateRequest,String).mjava","sourceNew":"  public OutStream initOutStream(String baseUrl,\n                                 UpdateRequest updateRequest,\n                                 String collection) throws IOException {\n    String contentType = requestWriter.getUpdateContentType();\n    final ModifiableSolrParams origParams = new ModifiableSolrParams(updateRequest.getParams());\n\n    // The parser 'wt=' and 'version=' params are used instead of the\n    // original params\n    ModifiableSolrParams requestParams = new ModifiableSolrParams(origParams);\n    requestParams.set(CommonParams.WT, parser.getWriterType());\n    requestParams.set(CommonParams.VERSION, parser.getVersion());\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n    if (!basePath.endsWith(\"/\"))\n      basePath += \"/\";\n\n    OutputStreamContentProvider provider = new OutputStreamContentProvider();\n    Request postRequest = httpClient\n        .newRequest(basePath + \"update\"\n            + requestParams.toQueryString())\n        .method(HttpMethod.POST)\n        .header(HttpHeader.CONTENT_TYPE, contentType)\n        .content(provider);\n    decorateRequest(postRequest, updateRequest);\n    InputStreamResponseListener responseListener = new InputStreamResponseListener();\n    postRequest.send(responseListener);\n\n    boolean isXml = ClientUtils.TEXT_XML.equals(requestWriter.getUpdateContentType());\n    OutStream outStream = new OutStream(collection, origParams, provider, responseListener,\n        isXml);\n    if (isXml) {\n      outStream.write(\"<stream>\".getBytes(FALLBACK_CHARSET));\n    }\n    return outStream;\n  }\n\n","sourceOld":"  public OutStream initOutStream(String baseUrl,\n                                 UpdateRequest updateRequest,\n                                 String collection) throws IOException {\n    String contentType = requestWriter.getUpdateContentType();\n    final ModifiableSolrParams origParams = new ModifiableSolrParams(updateRequest.getParams());\n\n    // The parser 'wt=' and 'version=' params are used instead of the\n    // original params\n    ModifiableSolrParams requestParams = new ModifiableSolrParams(origParams);\n    requestParams.set(CommonParams.WT, parser.getWriterType());\n    requestParams.set(CommonParams.VERSION, parser.getVersion());\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n    if (!basePath.endsWith(\"/\"))\n      basePath += \"/\";\n\n    OutputStreamContentProvider provider = new OutputStreamContentProvider();\n    Request postRequest = httpClient\n        .newRequest(basePath + \"update\"\n            + requestParams.toQueryString())\n        .method(HttpMethod.POST)\n        .header(HttpHeader.CONTENT_TYPE, contentType)\n        .content(provider);\n    decorateRequest(postRequest, updateRequest);\n    InputStreamResponseListener responseListener = new InputStreamResponseListener();\n    postRequest.send(responseListener);\n\n    boolean isXml = ClientUtils.TEXT_XML.equals(requestWriter.getUpdateContentType());\n    OutStream outStream = new OutStream(collection, origParams, provider, responseListener,\n        isXml);\n    if (isXml) {\n      outStream.write(\"<stream>\".getBytes(StandardCharsets.UTF_8));\n    }\n    return outStream;\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbaf96cfda5422c42955ce34344f0e01839894ea":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cbaf96cfda5422c42955ce34344f0e01839894ea"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"cbaf96cfda5422c42955ce34344f0e01839894ea":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}