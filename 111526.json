{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77f264c55cbf75404f8601ae7290d69157273a56","date":1380484282,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input, SI_CHECKSUM);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input, SI_CHECKSUM);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caf65fa364fcf8ea8ef1032c1247622933af3b04","date":1397057745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input, SI_CHECKSUM);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["4356000e349e38c9fb48034695b7c309abd54557","1494abe5dc85557ec2e2772f87660d48f831c3a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version = Version.parse(readString(SI_VERSION.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3cc329405ce41b8ef462b4cd30611eca1567620","date":1408661910,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version = Version.parse(readString(SI_VERSION.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final String id = readString(SI_ID.length, scratch);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version = Version.parse(readString(SI_VERSION.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072","8521d944f9dfb45692ec28235dbf116d47ef69ba","8521d944f9dfb45692ec28235dbf116d47ef69ba","8521d944f9dfb45692ec28235dbf116d47ef69ba","8521d944f9dfb45692ec28235dbf116d47ef69ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final String id = readString(SI_ID.length, scratch);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version = Version.parse(readString(SI_VERSION.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final String id = readString(SI_ID.length, scratch);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","date":1411708843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final String id = readString(SI_ID.length, scratch);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final String id = readString(SI_ID.length, scratch);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["77f264c55cbf75404f8601ae7290d69157273a56"],"55980207f1977bd1463465de1659b821347e2fa8":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["46ff533a28b45377dffc601931e60e19492e6384"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["46ff533a28b45377dffc601931e60e19492e6384","a5d957b3a23cce91c77a2c9971ecf0c9f99dd503"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"057a1793765d068ea9302f1a29e21734ee58d41e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["057a1793765d068ea9302f1a29e21734ee58d41e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46ff533a28b45377dffc601931e60e19492e6384":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"77f264c55cbf75404f8601ae7290d69157273a56":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","caf65fa364fcf8ea8ef1032c1247622933af3b04"],"55980207f1977bd1463465de1659b821347e2fa8":[],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["55980207f1977bd1463465de1659b821347e2fa8","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["77f264c55cbf75404f8601ae7290d69157273a56"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["057a1793765d068ea9302f1a29e21734ee58d41e"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"057a1793765d068ea9302f1a29e21734ee58d41e":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["46ff533a28b45377dffc601931e60e19492e6384"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"77f264c55cbf75404f8601ae7290d69157273a56":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"46ff533a28b45377dffc601931e60e19492e6384":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}