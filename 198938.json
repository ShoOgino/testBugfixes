{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,AutoScaling.EventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<TestEvent> lst = listenerEvents.get(config.name);\n      if (lst == null) {\n        lst = new ArrayList<>();\n        listenerEvents.put(config.name, lst);\n      }\n      lst.add(new TestEvent(config, stage, actionName, event, message));\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, AutoScaling.EventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<TestEvent> lst = listenerEvents.get(config.name);\n      if (lst == null) {\n        lst = new ArrayList<>();\n        listenerEvents.put(config.name, lst);\n      }\n      lst.add(new TestEvent(config, stage, actionName, event, message));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<TestEvent> lst = listenerEvents.get(config.name);\n      if (lst == null) {\n        lst = new ArrayList<>();\n        listenerEvents.put(config.name, lst);\n      }\n      lst.add(new TestEvent(config, stage, actionName, event, message));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<TestEvent> lst = listenerEvents.get(config.name);\n      if (lst == null) {\n        lst = new ArrayList<>();\n        listenerEvents.put(config.name, lst);\n      }\n      lst.add(new TestEvent(config, stage, actionName, event, message));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<TestEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new TestEvent(config, stage, actionName, event, message));\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<TestEvent> lst = listenerEvents.get(config.name);\n      if (lst == null) {\n        lst = new ArrayList<>();\n        listenerEvents.put(config.name, lst);\n      }\n      lst.add(new TestEvent(config, stage, actionName, event, message));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new CapturedEvent(timeSource.getTime(), context, config, stage, actionName, event, message));\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<TestEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new TestEvent(config, stage, actionName, event, message));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new CapturedEvent(timeSource.getTimeNs(), context, config, stage, actionName, event, message));\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new CapturedEvent(timeSource.getTime(), context, config, stage, actionName, event, message));\n    }\n\n","bugFix":null,"bugIntro":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25d862725cffd5d4d62fd002b5dc320f92c53365","date":1534448650,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      CapturedEvent ev = new CapturedEvent(timeSource.getTimeNs(), context, config, stage, actionName, event, message);\n      lst.add(ev);\n      allListenerEvents.add(ev);\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      lst.add(new CapturedEvent(timeSource.getTimeNs(), context, config, stage, actionName, event, message));\n    }\n\n","bugFix":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc201e01d035a7370848d9d2451e0e27ee77df2e","date":1544724144,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      CapturedEvent ev = new CapturedEvent(timeSource.getTimeNs(), context, config, stage, actionName, event, message);\n                                           \n      lst.add(ev);\n      allListenerEvents.add(ev);\n    }\n\n","sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      CapturedEvent ev = new CapturedEvent(timeSource.getTimeNs(), context, config, stage, actionName, event, message);\n      lst.add(ev);\n      allListenerEvents.add(ev);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName,\n                                     ActionContext context, Throwable error, String message) {\n      List<CapturedEvent> lst = listenerEvents.computeIfAbsent(config.name, s -> new ArrayList<>());\n      CapturedEvent ev = new CapturedEvent(timeSource.getTimeNs(), context, config, stage, actionName, event, message);\n                                           \n      lst.add(ev);\n      allListenerEvents.add(ev);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["3f504512a03d978990cbff30db0522b354e846db"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}