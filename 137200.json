{"path":"solr/core/src/test/org/apache/solr/core/TestDynamicLoadingUrl#runHttpServer(Map[String,Object]).mjava","commits":[{"id":"b142cb61741dce35806488349aa87e09f4c93aa5","date":1563241993,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoadingUrl#runHttpServer(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public static Pair<Server, Integer> runHttpServer(Map<String, Object> jars) throws Exception {\n    int port = 0;\n    int start = 30000 + random().nextInt(10000);//start at somewhere between 30000 - 40000\n    for (int i = start; i < (start+1000); i++) {//check ports one by one\n      try {\n        new ServerSocket(i).close();\n        port = i;\n        break;\n      } catch (IOException e) {\n        continue;\n      }\n    }\n    if (port == 0) {\n      fail(\"No port to be found\");\n    }\n    Server server = null;\n    server = new Server(port);\n    server.setHandler(new AbstractHandler() {\n      @Override\n      public void handle(String s, Request request, HttpServletRequest req, HttpServletResponse rsp)\n          throws IOException {\n        ByteBuffer b = (ByteBuffer) jars.get(s);\n        if (b != null) {\n          rsp.getOutputStream().write(b.array(), 0, b.limit());\n          rsp.setContentType(\"application/octet-stream\");\n          rsp.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      }\n    });\n    server.start();\n    return new Pair<>(server, port);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e61f9dec8f74c7f84ab94e65955a43cebab2663","date":1563312863,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoadingUrl#runHttpServer(Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoadingUrl#runHttpServer(Map[String,Object]).mjava","sourceNew":"  public static Pair<Server, Integer> runHttpServer(Map<String, Object> jars) throws Exception {\n    final Server server = new Server();\n    final ServerConnector connector = new ServerConnector(server);\n    server.setConnectors(new Connector[] { connector });\n    server.setHandler(new AbstractHandler() {\n      @Override\n      public void handle(String s, Request request, HttpServletRequest req, HttpServletResponse rsp)\n        throws IOException {\n        ByteBuffer b = (ByteBuffer) jars.get(s);\n        if (b != null) {\n          rsp.getOutputStream().write(b.array(), 0, b.limit());\n          rsp.setContentType(\"application/octet-stream\");\n          rsp.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      }\n    });\n    server.start();\n    return new Pair<>(server, connector.getLocalPort());\n  }\n\n","sourceOld":"  public static Pair<Server, Integer> runHttpServer(Map<String, Object> jars) throws Exception {\n    int port = 0;\n    int start = 30000 + random().nextInt(10000);//start at somewhere between 30000 - 40000\n    for (int i = start; i < (start+1000); i++) {//check ports one by one\n      try {\n        new ServerSocket(i).close();\n        port = i;\n        break;\n      } catch (IOException e) {\n        continue;\n      }\n    }\n    if (port == 0) {\n      fail(\"No port to be found\");\n    }\n    Server server = null;\n    server = new Server(port);\n    server.setHandler(new AbstractHandler() {\n      @Override\n      public void handle(String s, Request request, HttpServletRequest req, HttpServletResponse rsp)\n          throws IOException {\n        ByteBuffer b = (ByteBuffer) jars.get(s);\n        if (b != null) {\n          rsp.getOutputStream().write(b.array(), 0, b.limit());\n          rsp.setContentType(\"application/octet-stream\");\n          rsp.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      }\n    });\n    server.start();\n    return new Pair<>(server, port);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoadingUrl#runHttpServer(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  public static Pair<Server, Integer> runHttpServer(Map<String, Object> jars) throws Exception {\n    final Server server = new Server();\n    final ServerConnector connector = new ServerConnector(server);\n    server.setConnectors(new Connector[] { connector });\n    server.setHandler(new AbstractHandler() {\n      @Override\n      public void handle(String s, Request request, HttpServletRequest req, HttpServletResponse rsp)\n        throws IOException {\n        ByteBuffer b = (ByteBuffer) jars.get(s);\n        if (b != null) {\n          rsp.getOutputStream().write(b.array(), 0, b.limit());\n          rsp.setContentType(\"application/octet-stream\");\n          rsp.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      }\n    });\n    server.start();\n    return new Pair<>(server, connector.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b142cb61741dce35806488349aa87e09f4c93aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e61f9dec8f74c7f84ab94e65955a43cebab2663":["b142cb61741dce35806488349aa87e09f4c93aa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["2e61f9dec8f74c7f84ab94e65955a43cebab2663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"]},"commit2Childs":{"b142cb61741dce35806488349aa87e09f4c93aa5":["2e61f9dec8f74c7f84ab94e65955a43cebab2663"],"2e61f9dec8f74c7f84ab94e65955a43cebab2663":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b142cb61741dce35806488349aa87e09f4c93aa5"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}