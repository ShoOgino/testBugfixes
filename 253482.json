{"path":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTest#testMapFieldName().mjava","commits":[{"id":"0f45f65b8ca4312a6880cc80396c35205dc21543","date":1317846119,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTest#testMapFieldName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.add(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Prove support for other mapping regex\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}Text\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"title_noText\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_svText\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65","0d6621eda6ffc681632153605ee20ed10dbb76b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a799d5c6eb6dd4c46e099b34640cc369f6db9155","date":1318737330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTest#testMapFieldName().mjava","sourceNew":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.add(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Prove support for other mapping regex\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}Text\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"title_noText\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_svText\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.add(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Prove support for other mapping regex\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}Text\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"title_noText\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_svText\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f45f65b8ca4312a6880cc80396c35205dc21543":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a799d5c6eb6dd4c46e099b34640cc369f6db9155":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a799d5c6eb6dd4c46e099b34640cc369f6db9155"]},"commit2Childs":{"0f45f65b8ca4312a6880cc80396c35205dc21543":["a799d5c6eb6dd4c46e099b34640cc369f6db9155"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"a799d5c6eb6dd4c46e099b34640cc369f6db9155":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}