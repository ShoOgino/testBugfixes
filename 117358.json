{"path":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    Fieldable out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    Fieldable out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    Fieldable out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    Fieldable out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    Fieldable out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    Fieldable out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    IndexableField out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    Fieldable out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    IndexableField out = (Field)f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = (Field)f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    StorableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    StorableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    StorableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    // String\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000L, f.toObject( out ).getTime() );\n    // Date obj\n    out = f.createField(sf, new Date(820454399000L), 1.0f );\n    assertEquals(820454399000L, f.toObject( out ).getTime() );\n    // Date math\n    out = f.createField(sf, \"1995-12-31T23:59:59.99Z+5MINUTES\", 1.0f);\n    assertEquals(820454699990L, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n    \n    out = f.createField(sf, new Date(820454399000l), 1.0f );\n    assertEquals(820454399000l, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    // String\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\" );\n    assertEquals(820454399000L, f.toObject( out ).getTime() );\n    // Date obj\n    out = f.createField(sf, new Date(820454399000L) );\n    assertEquals(820454399000L, f.toObject( out ).getTime() );\n    // Date math\n    out = f.createField(sf, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertEquals(820454699990L, f.toObject( out ).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    // String\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\", 1.0f );\n    assertEquals(820454399000L, f.toObject( out ).getTime() );\n    // Date obj\n    out = f.createField(sf, new Date(820454399000L), 1.0f );\n    assertEquals(820454399000L, f.toObject( out ).getTime() );\n    // Date math\n    out = f.createField(sf, \"1995-12-31T23:59:59.99Z+5MINUTES\", 1.0f);\n    assertEquals(820454699990L, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testCreateField().mjava","sourceNew":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    // String\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\" );\n    assertEquals(820454399000L, ((Date) f.toObject( out )).getTime() );\n    // Date obj\n    out = f.createField(sf, new Date(820454399000L) );\n    assertEquals(820454399000L, ((Date) f.toObject( out )).getTime() );\n    // Date math\n    out = f.createField(sf, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertEquals(820454699990L, ((Date) f.toObject( out )).getTime() );\n  }\n\n","sourceOld":"  public void testCreateField() {\n    int props = FieldProperties.INDEXED ^ FieldProperties.STORED;\n    SchemaField sf = new SchemaField( \"test\", f, props, null );\n    // String\n    IndexableField out = f.createField(sf, \"1995-12-31T23:59:59Z\" );\n    assertEquals(820454399000L, f.toObject( out ).getTime() );\n    // Date obj\n    out = f.createField(sf, new Date(820454399000L) );\n    assertEquals(820454399000L, f.toObject( out ).getTime() );\n    // Date math\n    out = f.createField(sf, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertEquals(820454699990L, f.toObject( out ).getTime() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1d028314cced5858683a1bb4741423d0f934257b":["399d5903979ca52514d2bc7e3a362e1c45885c94","409324b31a1419d7c05a38211168cf317e39be77"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"acd9883560fd89e6448b2b447302fe543040cd4f":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}