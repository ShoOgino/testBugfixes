{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","commits":[{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","pathOld":"/dev/null","sourceNew":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(firstChild);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["282a69d7d427c265f321423b5a3f989aa16dab10","282a69d7d427c265f321423b5a3f989aa16dab10"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"282a69d7d427c265f321423b5a3f989aa16dab10","date":1494313009,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","sourceNew":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(firstChild);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","bugFix":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","sourceNew":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(firstChild);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#removeFirst().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","sourceNew":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#removeFirst().mjava","sourceNew":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#removeFirst().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","sourceNew":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#removeFirst().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#removeFirst().mjava","sourceNew":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private byte[] removeFirst() throws KeeperException, InterruptedException {\n    while (true) {\n      String firstChild = firstChild(true, false);\n      if (firstChild == null) {\n        return null;\n      }\n      try {\n        String path = dir + \"/\" + firstChild;\n        byte[] result = zookeeper.getData(path, null, null, true);\n        zookeeper.delete(path, -1, true);\n        stats.setQueueLength(knownChildren.size());\n        return result;\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and retry.\n        updateLock.lockInterruptibly();\n        try {\n          // Efficient only for single-consumer\n          knownChildren.clear();\n          isDirty = true;\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a282020d6c9a4ea32a359539e283e4771a2fda8","282a69d7d427c265f321423b5a3f989aa16dab10"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"282a69d7d427c265f321423b5a3f989aa16dab10":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["282a69d7d427c265f321423b5a3f989aa16dab10"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"282a69d7d427c265f321423b5a3f989aa16dab10":["e9017cf144952056066919f1ebc7897ff9bd71b1","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["e9017cf144952056066919f1ebc7897ff9bd71b1","282a69d7d427c265f321423b5a3f989aa16dab10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}