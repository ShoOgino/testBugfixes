{"path":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[Object]).mjava","commits":[{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[Object]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList).mjava","sourceNew":"    public void parse(NamedList<Object> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","date":1294448351,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[Object]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<Object> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"755f2f419306d7297c8feee10d1897addf4b2dd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"]},"commit2Childs":{"755f2f419306d7297c8feee10d1897addf4b2dd0":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}