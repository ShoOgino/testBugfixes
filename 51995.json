{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":null,"sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1085ea837da8f1e96697e17cf73e1d08e7329261","date":1281469548,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"bugIntro":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","ae695f21c50b03702b5d0fa2543d5af844bb7cd3","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (SegmentInfo info : infos) {\n\n        final SegmentReader sr = readerMap.get(info);\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","ae695f21c50b03702b5d0fa2543d5af844bb7cd3","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (SegmentInfo info : infos) {\n\n        final SegmentReader sr = readerMap.get(info);\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#commit().mjava","sourceNew":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit(SegmentInfos infos) throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (SegmentInfo info : infos) {\n\n        final SegmentReader sr = readerMap.get(info);\n        if (sr != null && sr.hasChanges) {\n          assert infoIsLive(info);\n          sr.doCommit(null);\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Commit all segment reader in the pool.\n     * @throws IOException\n     */\n    synchronized void commit() throws IOException {\n\n      // We invoke deleter.checkpoint below, so we must be\n      // sync'd on IW:\n      assert Thread.holdsLock(IndexWriter.this);\n\n      for (Map.Entry<SegmentInfo,SegmentReader> ent : readerMap.entrySet()) {\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.doCommit(null);\n\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["1085ea837da8f1e96697e17cf73e1d08e7329261","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","1085ea837da8f1e96697e17cf73e1d08e7329261"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","f1bdbf92da222965b46c0a942c3857ba56e5c638","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1085ea837da8f1e96697e17cf73e1d08e7329261","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}