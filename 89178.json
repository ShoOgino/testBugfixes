{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","commits":[{"id":"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","date":1527778252,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","sourceNew":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input are applied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","sourceOld":"  /**Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","sourceNew":"  /**Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","sourceOld":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input are applied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","sourceNew":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","sourceOld":"  /**Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","sourceNew":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","sourceOld":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input are applied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09a152fdd1e91e2dc8949c867985ea649b2a0c37","date":1571422557,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","sourceNew":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","sourceOld":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","sourceNew":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","sourceOld":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfbc0735f81a71377d6600cec08bcce468958595","date":1598969084,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#mergeJson(Map[String,Object],Map[String,Object]).mjava","sourceNew":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","sourceOld":"  /**\n   * Applies one json over other. The 'input' is applied over the sink\n   * The values in input isapplied over the values in 'sink' . If a value is 'null'\n   * that value is removed from sink\n   *\n   * @param sink  the original json object to start with. Ensure that this Map is mutable\n   * @param input the json with new values\n   * @return whether there was any change made to sink or not.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static boolean mergeJson(Map<String, Object> sink, Map<String, Object> input) {\n    boolean isModified = false;\n    for (Map.Entry<String, Object> e : input.entrySet()) {\n      if (sink.get(e.getKey()) != null) {\n        Object sinkVal = sink.get(e.getKey());\n        if (e.getValue() == null) {\n          sink.remove(e.getKey());\n          isModified = true;\n        } else {\n          if (e.getValue() instanceof Map) {\n            Map<String, Object> mapInputVal = (Map<String, Object>) e.getValue();\n            if (sinkVal instanceof Map) {\n              if (mergeJson((Map<String, Object>) sinkVal, mapInputVal)) isModified = true;\n            } else {\n              sink.put(e.getKey(), mapInputVal);\n              isModified = true;\n            }\n          } else {\n            sink.put(e.getKey(), e.getValue());\n            isModified = true;\n          }\n\n        }\n      } else if (e.getValue() != null) {\n        sink.put(e.getKey(), e.getValue());\n        isModified = true;\n      }\n\n    }\n\n    return isModified;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["09a152fdd1e91e2dc8949c867985ea649b2a0c37"],"09a152fdd1e91e2dc8949c867985ea649b2a0c37":["8476949555f799dff381770c01cfad051a264487"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dfbc0735f81a71377d6600cec08bcce468958595":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfbc0735f81a71377d6600cec08bcce468958595"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["dfbc0735f81a71377d6600cec08bcce468958595"],"09a152fdd1e91e2dc8949c867985ea649b2a0c37":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"dfbc0735f81a71377d6600cec08bcce468958595":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8476949555f799dff381770c01cfad051a264487":["09a152fdd1e91e2dc8949c867985ea649b2a0c37","b0b597c65628ca9e73913a07e81691f8229bae35"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}