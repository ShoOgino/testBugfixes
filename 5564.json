{"path":"backwards/src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"backwards/src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}