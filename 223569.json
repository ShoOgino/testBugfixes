{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","commits":[{"id":"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","date":1498706808,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas'\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    Set<String> coreNodeNames = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName())\n        .collect(Collectors.toSet());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName,coreNodeNames,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    coreNodeNames = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName())\n        .collect(Collectors.toSet());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, coreNodeNames, jetty3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1","date":1498792294,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas'\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas'\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    Set<String> coreNodeNames = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName())\n        .collect(Collectors.toSet());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName,coreNodeNames,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    coreNodeNames = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName())\n        .collect(Collectors.toSet());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, coreNodeNames, jetty3);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas'\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    lostNodeName = lostJetty.getNodeName();\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    operations = getOperations(jetty3, lostNodeName);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    lostNodeName = lostJetty.getNodeName();\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    operations = getOperations(jetty3, lostNodeName);\n    assertNull(operations);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    lostNodeName = lostJetty.getNodeName();\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    operations = getOperations(jetty3, lostNodeName);\n    assertNull(operations);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e16ac84f9e5d560008fe1554462ff8b853b3d3c","date":1520142134,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    lostNodeName = lostJetty.getNodeName();\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    operations = getOperations(jetty3, lostNodeName);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    lostNodeName = lostJetty.getNodeName();\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    operations = getOperations(jetty3, lostNodeName);\n    assertNull(operations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000);\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    lostNodeName = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n\n    operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    lostNodeName = lostJetty.getNodeName();\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    operations = getOperations(jetty3, lostNodeName);\n    assertNull(operations);\n  }\n\n","bugFix":["5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1","47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c4e513fc57585adb75b7818b5fe777dcfd174","date":1544108163,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6486a949a4edfe74256233c1d0d4858cbf35dca5","date":1544524319,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    String collection3 = \"testSimple3\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (6) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(collection3, \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    String collection3 = \"testSimple3\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (6) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(collection3, \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    String collection3 = \"testSimple3\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (6) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(collection3, \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    String collection3 = \"testSimple3\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (6) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(collection3, \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","sourceOld":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    String collection3 = \"testSimple3\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (6) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(collection3, \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#testSimple().mjava","sourceNew":null,"sourceOld":"  @Test\n  //Commented out 11-Dec-2018 @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n\n    String collection1 = \"testSimple1\";\n    String collection2 = \"testSimple2\";\n    String collection3 = \"testSimple3\";\n    CollectionAdminRequest.createCollection(collection1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collection2, \"conf\", 1, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (6) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(collection3, \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    // we remove the implicit created trigger, so the replicas won't be moved\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : '.auto_add_replicas',\" +\n        \"'removeListeners': true\" +\n        \"}\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList response = cluster.getSolrClient().request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);\n    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    \n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores','precision': 0}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    \n    // you can hit a stale connection from pool when restarting jetty\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),\n        Optional.empty())\n            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {\n      response = cloudClient.request(req);\n    }\n\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    lostJetty = random().nextBoolean()? jetty1 : jetty2;\n    String lostNodeName2 = lostJetty.getNodeName();\n    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()\n        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())\n        .collect(Collectors.toList());\n    \n\n    \n    lostJetty.stop();\n   \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));\n\n    try {\n      operations = getOperations(jetty3, lostNodeName2);\n    } catch (SolrException e) {\n      // we might get a stale connection from the pool after jetty restarts\n      operations = getOperations(jetty3, lostNodeName2);\n    }\n    \n    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);\n\n    lostJetty.start();\n    cluster.waitForAllNodes(30);\n    \n    cluster.waitForActiveCollection(collection1, 2, 4);\n    cluster.waitForActiveCollection(collection2, 1, 2);\n    cluster.waitForActiveCollection(collection3, 3, 3);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection1);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    lostJetty = jetty1;\n    String lostNodeName3 = lostJetty.getNodeName();\n    \n    lostJetty.stop();\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));\n    \n    operations = getOperations(jetty3, lostNodeName3);\n    assertNull(operations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"9c6c4e513fc57585adb75b7818b5fe777dcfd174":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["89948af0461fead48f44ba8fb7866f107ce83f22"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6486a949a4edfe74256233c1d0d4858cbf35dca5":["9c6c4e513fc57585adb75b7818b5fe777dcfd174"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["6486a949a4edfe74256233c1d0d4858cbf35dca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"]},"commit2Childs":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9c6c4e513fc57585adb75b7818b5fe777dcfd174"],"9c6c4e513fc57585adb75b7818b5fe777dcfd174":["6486a949a4edfe74256233c1d0d4858cbf35dca5"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","560c18d71dad43d675158783c3840f8c80d6d39c"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1"],"6486a949a4edfe74256233c1d0d4858cbf35dca5":["89948af0461fead48f44ba8fb7866f107ce83f22"],"560c18d71dad43d675158783c3840f8c80d6d39c":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"89948af0461fead48f44ba8fb7866f107ce83f22":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"5ce607fb6b5358969d344ac8e2ce3a79ff5bc6d1":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}