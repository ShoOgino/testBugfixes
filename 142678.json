{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["51f5280f31484820499077f41fcdfe92d527d9dc","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["51f5280f31484820499077f41fcdfe92d527d9dc","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["51f5280f31484820499077f41fcdfe92d527d9dc","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["51f5280f31484820499077f41fcdfe92d527d9dc","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"51f5280f31484820499077f41fcdfe92d527d9dc":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}