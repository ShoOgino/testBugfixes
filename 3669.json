{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) {\n      return Automata.makeEmpty();\n    }\n\n    Automaton b;\n    if (min == 0) {\n      b = Automata.makeEmptyString();\n    } else if (min == 1) {\n      b = new Automaton();\n      b.copy(a);\n    } else {\n      List<Automaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenate(as);\n    }\n\n    Set<Integer> prevAcceptStates = new HashSet<>(b.getAcceptStates());\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates.clear();\n      for(int s : a.getAcceptStates()) {\n        prevAcceptStates.add(numStates+s);\n      }\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a, int min, int max) {\n    if (min > max) {\n      return BasicAutomata.makeEmptyLight();\n    }\n\n    LightAutomaton b;\n    if (min == 0) {\n      b = BasicAutomata.makeEmptyStringLight();\n    } else if (min == 1) {\n      b = new LightAutomaton();\n      b.copy(a);\n    } else {\n      List<LightAutomaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenateLight(as);\n    }\n\n    Set<Integer> prevAcceptStates = new HashSet<>(b.getAcceptStates());\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates.clear();\n      for(int s : a.getAcceptStates()) {\n        prevAcceptStates.add(numStates+s);\n      }\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0","date":1403106109,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) {\n      return Automata.makeEmpty();\n    }\n\n    Automaton b;\n    if (min == 0) {\n      b = Automata.makeEmptyString();\n    } else if (min == 1) {\n      b = new Automaton();\n      b.copy(a);\n    } else {\n      List<Automaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenate(as);\n    }\n\n    Set<Integer> prevAcceptStates = toSet(b, 0);\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates = toSet(a, numStates);\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) {\n      return Automata.makeEmpty();\n    }\n\n    Automaton b;\n    if (min == 0) {\n      b = Automata.makeEmptyString();\n    } else if (min == 1) {\n      b = new Automaton();\n      b.copy(a);\n    } else {\n      List<Automaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenate(as);\n    }\n\n    Set<Integer> prevAcceptStates = new HashSet<>(b.getAcceptStates());\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates.clear();\n      for(int s : a.getAcceptStates()) {\n        prevAcceptStates.add(numStates+s);\n      }\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) {\n      return Automata.makeEmpty();\n    }\n\n    Automaton b;\n    if (min == 0) {\n      b = Automata.makeEmptyString();\n    } else if (min == 1) {\n      b = new Automaton();\n      b.copy(a);\n    } else {\n      List<Automaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenate(as);\n    }\n\n    Set<Integer> prevAcceptStates = toSet(b, 0);\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates = toSet(a, numStates);\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) {\n      return Automata.makeEmpty();\n    }\n\n    Automaton b;\n    if (min == 0) {\n      b = Automata.makeEmptyString();\n    } else if (min == 1) {\n      b = new Automaton();\n      b.copy(a);\n    } else {\n      List<Automaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenate(as);\n    }\n\n    Set<Integer> prevAcceptStates = toSet(b, 0);\n    Automaton.Builder builder = new Automaton.Builder();\n    builder.copy(b);\n    for(int i=min;i<max;i++) {\n      int numStates = builder.getNumStates();\n      builder.copy(a);\n      for(int s : prevAcceptStates) {\n        builder.addEpsilon(s, numStates);\n      }\n      prevAcceptStates = toSet(a, numStates);\n    }\n\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) {\n      return Automata.makeEmpty();\n    }\n\n    Automaton b;\n    if (min == 0) {\n      b = Automata.makeEmptyString();\n    } else if (min == 1) {\n      b = new Automaton();\n      b.copy(a);\n    } else {\n      List<Automaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenate(as);\n    }\n\n    Set<Integer> prevAcceptStates = toSet(b, 0);\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates = toSet(a, numStates);\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}