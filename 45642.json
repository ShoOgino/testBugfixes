{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","sourceNew":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Basfiolsfodralmakaregesäll\")),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Basfiolsfodralmakaregesäll\")),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","sourceNew":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"Basfiolsfodralmakaregesäll\"), MockTokenizer.WHITESPACE, false),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Basfiolsfodralmakaregesäll\")),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","bugFix":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","sourceNew":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"Basfiolsfodralmakaregesäll\"), MockTokenizer.WHITESPACE, false),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Basfiolsfodralmakaregesäll\")),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","sourceNew":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"Basfiolsfodralmakaregesäll\"), MockTokenizer.WHITESPACE, false),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Basfiolsfodralmakaregesäll\")),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906468dad7061882fe0b86de96423c16d5e9bc1e","date":1319542276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","sourceNew":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"Basfiolsfodralmakaregesäll\"), MockTokenizer.WHITESPACE, false),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"Basfiolsfodralmakaregesäll\"), MockTokenizer.WHITESPACE, false),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSELongestMatch().mjava","sourceNew":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"Basfiolsfodralmakaregesäll\"), MockTokenizer.WHITESPACE, false),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSELongestMatch() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiols\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\", \"Fiolsfodral\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer(new StringReader(\"Basfiolsfodralmakaregesäll\"), MockTokenizer.WHITESPACE, false),\n        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, true);\n\n    assertTokenStreamContents(tf, new String[] { \"Basfiolsfodralmakaregesäll\", \"Bas\",\n        \"fiolsfodral\", \"fodral\", \"makare\", \"gesäll\" }, new int[] { 0, 0, 3, 8,\n        14, 20 }, new int[] { 26, 3, 14, 14, 20, 26 }, new int[] { 1, 0, 0, 0,\n        0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["906468dad7061882fe0b86de96423c16d5e9bc1e"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"906468dad7061882fe0b86de96423c16d5e9bc1e":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","906468dad7061882fe0b86de96423c16d5e9bc1e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"906468dad7061882fe0b86de96423c16d5e9bc1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}