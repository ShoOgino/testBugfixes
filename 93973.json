{"path":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int,float).mjava","commits":[{"id":"317dfa9adeff47074f27d16dc7550d7628d1a6ee","date":1132096702,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int,float).mjava","pathOld":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.TestCollector#collect(int,float).mjava","sourceNew":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","pathOld":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int,float).mjava","sourceNew":"    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"317dfa9adeff47074f27d16dc7550d7628d1a6ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["317dfa9adeff47074f27d16dc7550d7628d1a6ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61cbcf396559d597a914594d7e2830c142ecfd91"]},"commit2Childs":{"317dfa9adeff47074f27d16dc7550d7628d1a6ee":["61cbcf396559d597a914594d7e2830c142ecfd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["317dfa9adeff47074f27d16dc7550d7628d1a6ee"],"61cbcf396559d597a914594d7e2830c142ecfd91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}