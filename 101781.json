{"path":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","commits":[{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"/dev/null","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"382fe3a6ca9745891afebda9b9a57cc158305545":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","382fe3a6ca9745891afebda9b9a57cc158305545","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}