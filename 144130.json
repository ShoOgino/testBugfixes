{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#sample1(ScoredDocIDs,int,int[],long[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#sample1(ScoredDocIDs,int,int[],long[]).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#sample1(ScoredDocIDs,int,int[],long[]).mjava","sourceNew":"  /**\n   * Returns <code>sample</code>.length values chosen from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, using the TRAVERSAL algorithm. The sample is\n   * pseudorandom: no subset of the original collection\n   * is in principle more likely to occur than any other, but for a given collection\n   * and sample size, the same sample will always be returned. This algorithm walks the\n   * original collection in a methodical way that is guaranteed not to visit any location\n   * more than once, which makes sampling without replacement faster because removals don't\n   * have to be tracked, and the number of operations is proportional to the sample size,\n   * not the collection size.\n   * Times for performance measurement\n   * are returned in <code>times</code>, which must be an array of at least three longs, containing\n   * nanosecond event times. The first\n   * is set when the algorithm starts; the second, when the step size has been calculated;\n   * and the third when the sample has been taken.\n   * @param collection The set to be sampled.\n   * @param collectionSize The number of values to use (starting from first).\n   * @param sample The array in which to return the sample.\n   * @param times The times of three events, for measuring performance.\n   */\n  private static void sample1(ScoredDocIDs collection, int collectionSize, int[] sample, long[] times) \n  throws IOException {\n    ScoredDocIDsIterator it = collection.iterator();\n    if (returnTimings) {\n      times[0] = System.currentTimeMillis();\n    }\n    int sampleSize = sample.length;\n    int prime = findGoodStepSize(collectionSize, sampleSize);\n    int mod = prime % collectionSize;\n    if (returnTimings) {\n      times[1] = System.currentTimeMillis();\n    }\n    int sampleCount = 0;\n    int index = 0;\n    for (; sampleCount < sampleSize;) {\n      if (index + mod < collectionSize) {\n        for (int i = 0; i < mod; i++, index++) {\n          it.next();\n        }\n      } else {\n        index = index + mod - collectionSize;\n        it = collection.iterator();\n        for (int i = 0; i < index; i++) {\n          it.next();\n        }\n      }\n      sample[sampleCount++] = it.getDocID();\n    }\n    if (returnTimings) {\n      times[2] = System.currentTimeMillis();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>sample</code>.length values chosen from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, using the TRAVERSAL algorithm. The sample is\n   * pseudorandom: no subset of the original collection\n   * is in principle more likely to occur than any other, but for a given collection\n   * and sample size, the same sample will always be returned. This algorithm walks the\n   * original collection in a methodical way that is guaranteed not to visit any location\n   * more than once, which makes sampling without replacement faster because removals don't\n   * have to be tracked, and the number of operations is proportional to the sample size,\n   * not the collection size.\n   * Times for performance measurement\n   * are returned in <code>times</code>, which must be an array of at least three longs, containing\n   * nanosecond event times. The first\n   * is set when the algorithm starts; the second, when the step size has been calculated;\n   * and the third when the sample has been taken.\n   * @param collection The set to be sampled.\n   * @param collectionSize The number of values to use (starting from first).\n   * @param sample The array in which to return the sample.\n   * @param times The times of three events, for measuring performance.\n   */\n  private static void sample1(ScoredDocIDs collection, int collectionSize, int[] sample, long[] times) \n  throws IOException {\n    ScoredDocIDsIterator it = collection.iterator();\n    if (returnTimings) {\n      times[0] = System.currentTimeMillis();\n    }\n    int sampleSize = sample.length;\n    int prime = findGoodStepSize(collectionSize, sampleSize);\n    int mod = prime % collectionSize;\n    if (returnTimings) {\n      times[1] = System.currentTimeMillis();\n    }\n    int sampleCount = 0;\n    int index = 0;\n    for (; sampleCount < sampleSize;) {\n      if (index + mod < collectionSize) {\n        for (int i = 0; i < mod; i++, index++) {\n          it.next();\n        }\n      } else {\n        index = index + mod - collectionSize;\n        it = collection.iterator();\n        for (int i = 0; i < index; i++) {\n          it.next();\n        }\n      }\n      sample[sampleCount++] = it.getDocID();\n    }\n    if (returnTimings) {\n      times[2] = System.currentTimeMillis();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RepeatableSampler#sample1(ScoredDocIDs,int,int[],long[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#sample1(ScoredDocIDs,int,int[],long[]).mjava","sourceNew":"  /**\n   * Returns <code>sample</code>.length values chosen from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, using the TRAVERSAL algorithm. The sample is\n   * pseudorandom: no subset of the original collection\n   * is in principle more likely to occur than any other, but for a given collection\n   * and sample size, the same sample will always be returned. This algorithm walks the\n   * original collection in a methodical way that is guaranteed not to visit any location\n   * more than once, which makes sampling without replacement faster because removals don't\n   * have to be tracked, and the number of operations is proportional to the sample size,\n   * not the collection size.\n   * Times for performance measurement\n   * are returned in <code>times</code>, which must be an array of at least three longs, containing\n   * nanosecond event times. The first\n   * is set when the algorithm starts; the second, when the step size has been calculated;\n   * and the third when the sample has been taken.\n   * @param collection The set to be sampled.\n   * @param collectionSize The number of values to use (starting from first).\n   * @param sample The array in which to return the sample.\n   * @param times The times of three events, for measuring performance.\n   */\n  private static void sample1(ScoredDocIDs collection, int collectionSize, int[] sample, long[] times) \n  throws IOException {\n    ScoredDocIDsIterator it = collection.iterator();\n    if (returnTimings) {\n      times[0] = System.currentTimeMillis();\n    }\n    int sampleSize = sample.length;\n    int prime = findGoodStepSize(collectionSize, sampleSize);\n    int mod = prime % collectionSize;\n    if (returnTimings) {\n      times[1] = System.currentTimeMillis();\n    }\n    int sampleCount = 0;\n    int index = 0;\n    for (; sampleCount < sampleSize;) {\n      if (index + mod < collectionSize) {\n        for (int i = 0; i < mod; i++, index++) {\n          it.next();\n        }\n      } else {\n        index = index + mod - collectionSize;\n        it = collection.iterator();\n        for (int i = 0; i < index; i++) {\n          it.next();\n        }\n      }\n      sample[sampleCount++] = it.getDocID();\n    }\n    if (returnTimings) {\n      times[2] = System.currentTimeMillis();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>sample</code>.length values chosen from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, using the TRAVERSAL algorithm. The sample is\n   * pseudorandom: no subset of the original collection\n   * is in principle more likely to occur than any other, but for a given collection\n   * and sample size, the same sample will always be returned. This algorithm walks the\n   * original collection in a methodical way that is guaranteed not to visit any location\n   * more than once, which makes sampling without replacement faster because removals don't\n   * have to be tracked, and the number of operations is proportional to the sample size,\n   * not the collection size.\n   * Times for performance measurement\n   * are returned in <code>times</code>, which must be an array of at least three longs, containing\n   * nanosecond event times. The first\n   * is set when the algorithm starts; the second, when the step size has been calculated;\n   * and the third when the sample has been taken.\n   * @param collection The set to be sampled.\n   * @param collectionSize The number of values to use (starting from first).\n   * @param sample The array in which to return the sample.\n   * @param times The times of three events, for measuring performance.\n   */\n  private static void sample1(ScoredDocIDs collection, int collectionSize, int[] sample, long[] times) \n  throws IOException {\n    ScoredDocIDsIterator it = collection.iterator();\n    if (returnTimings) {\n      times[0] = System.currentTimeMillis();\n    }\n    int sampleSize = sample.length;\n    int prime = findGoodStepSize(collectionSize, sampleSize);\n    int mod = prime % collectionSize;\n    if (returnTimings) {\n      times[1] = System.currentTimeMillis();\n    }\n    int sampleCount = 0;\n    int index = 0;\n    for (; sampleCount < sampleSize;) {\n      if (index + mod < collectionSize) {\n        for (int i = 0; i < mod; i++, index++) {\n          it.next();\n        }\n      } else {\n        index = index + mod - collectionSize;\n        it = collection.iterator();\n        for (int i = 0; i < index; i++) {\n          it.next();\n        }\n      }\n      sample[sampleCount++] = it.getDocID();\n    }\n    if (returnTimings) {\n      times[2] = System.currentTimeMillis();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}