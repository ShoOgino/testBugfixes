{"path":"src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","commits":[{"id":"de01496176b31b9496ca92b2faebc31e16d91cc0","date":1237569222,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Compresses the specified byte range using the\n   *  specified compressionLevel (constants are defined in\n   *  java.util.zip.Deflater). */\n  public static byte[] compress(byte[] value, int offset, int length, int compressionLevel) {\n\n    /* Create an expandable byte array to hold the compressed data.\n     * You cannot use an array that's the same size as the orginal because\n     * there is no guarantee that the compressed data will be smaller than\n     * the uncompressed data. */\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Deflater compressor = new Deflater();\n\n    try {\n      compressor.setLevel(compressionLevel);\n      compressor.setInput(value, offset, length);\n      compressor.finish();\n\n      // Compress the data\n      final byte[] buf = new byte[1024];\n      while (!compressor.finished()) {\n        int count = compressor.deflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {\n      compressor.end();\n    }\n\n    return bos.toByteArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/CompressionTools#compress(byte[],int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Compresses the specified byte range using the\n   *  specified compressionLevel (constants are defined in\n   *  java.util.zip.Deflater). */\n  public static byte[] compress(byte[] value, int offset, int length, int compressionLevel) {\n\n    /* Create an expandable byte array to hold the compressed data.\n     * You cannot use an array that's the same size as the orginal because\n     * there is no guarantee that the compressed data will be smaller than\n     * the uncompressed data. */\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n    Deflater compressor = new Deflater();\n\n    try {\n      compressor.setLevel(compressionLevel);\n      compressor.setInput(value, offset, length);\n      compressor.finish();\n\n      // Compress the data\n      final byte[] buf = new byte[1024];\n      while (!compressor.finished()) {\n        int count = compressor.deflate(buf);\n        bos.write(buf, 0, count);\n      }\n    } finally {\n      compressor.end();\n    }\n\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de01496176b31b9496ca92b2faebc31e16d91cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["de01496176b31b9496ca92b2faebc31e16d91cc0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de01496176b31b9496ca92b2faebc31e16d91cc0"],"de01496176b31b9496ca92b2faebc31e16d91cc0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}