{"path":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#cloneAsMap(Properties).mjava","commits":[{"id":"44549822b9113925bd45e53c1e0028ab2e1d1d7f","date":1330898600,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#cloneAsMap(Properties).mjava","pathOld":"/dev/null","sourceNew":"  static TreeMap<String,String> cloneAsMap(Properties properties) {\n    TreeMap<String,String> result = new TreeMap<String,String>();\n    for (Entry<Object,Object> e : properties.entrySet()) {\n      // We can be sure it's always strings, can't we?\n      result.put((String) e.getKey(), (String) e.getValue());\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ecd2e77a93478a1b2f17346c230de01e58f3b24","date":1330936014,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#cloneAsMap(Properties).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#cloneAsMap(Properties).mjava","sourceNew":"  static TreeMap<String,String> cloneAsMap(Properties properties) {\n    TreeMap<String,String> result = new TreeMap<String,String>();\n    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) {\n      String key = (String) e.nextElement();\n      result.put(key, (String) properties.get(key));\n    }\n    return result;\n  }\n\n","sourceOld":"  static TreeMap<String,String> cloneAsMap(Properties properties) {\n    TreeMap<String,String> result = new TreeMap<String,String>();\n    for (Entry<Object,Object> e : properties.entrySet()) {\n      // We can be sure it's always strings, can't we?\n      result.put((String) e.getKey(), (String) e.getValue());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"550cf0692d4885d02c5acbefe19aa1075acddbbb","date":1330938544,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#cloneAsMap(Properties).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#cloneAsMap(Properties).mjava","sourceNew":"  static TreeMap<String,String> cloneAsMap(Properties properties) {\n    TreeMap<String,String> result = new TreeMap<String,String>();\n    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) {\n      final Object key = e.nextElement();\n      // Skip non-string properties or values, they're abuse of Properties object.\n      if (key instanceof String) {\n        String value = properties.getProperty((String) key);\n        if (value == null) {\n          Object ovalue = properties.get(key);\n          if (ovalue != null) {\n            // ovalue has to be a non-string object. Skip the property because\n            // System.clearProperty won't be able to cast back the existing value.\n            continue;\n          }\n        }\n        result.put((String) key, value);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  static TreeMap<String,String> cloneAsMap(Properties properties) {\n    TreeMap<String,String> result = new TreeMap<String,String>();\n    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) {\n      String key = (String) e.nextElement();\n      result.put(key, (String) properties.get(key));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#cloneAsMap(Properties).mjava","pathOld":"/dev/null","sourceNew":"  static TreeMap<String,String> cloneAsMap(Properties properties) {\n    TreeMap<String,String> result = new TreeMap<String,String>();\n    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) {\n      final Object key = e.nextElement();\n      // Skip non-string properties or values, they're abuse of Properties object.\n      if (key instanceof String) {\n        String value = properties.getProperty((String) key);\n        if (value == null) {\n          Object ovalue = properties.get(key);\n          if (ovalue != null) {\n            // ovalue has to be a non-string object. Skip the property because\n            // System.clearProperty won't be able to cast back the existing value.\n            continue;\n          }\n        }\n        result.put((String) key, value);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#cloneAsMap(Properties).mjava","sourceNew":null,"sourceOld":"  static TreeMap<String,String> cloneAsMap(Properties properties) {\n    TreeMap<String,String> result = new TreeMap<String,String>();\n    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) {\n      final Object key = e.nextElement();\n      // Skip non-string properties or values, they're abuse of Properties object.\n      if (key instanceof String) {\n        String value = properties.getProperty((String) key);\n        if (value == null) {\n          Object ovalue = properties.get(key);\n          if (ovalue != null) {\n            // ovalue has to be a non-string object. Skip the property because\n            // System.clearProperty won't be able to cast back the existing value.\n            continue;\n          }\n        }\n        result.put((String) key, value);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ecd2e77a93478a1b2f17346c230de01e58f3b24":["44549822b9113925bd45e53c1e0028ab2e1d1d7f"],"550cf0692d4885d02c5acbefe19aa1075acddbbb":["5ecd2e77a93478a1b2f17346c230de01e58f3b24"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","550cf0692d4885d02c5acbefe19aa1075acddbbb"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["550cf0692d4885d02c5acbefe19aa1075acddbbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44549822b9113925bd45e53c1e0028ab2e1d1d7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"5ecd2e77a93478a1b2f17346c230de01e58f3b24":["550cf0692d4885d02c5acbefe19aa1075acddbbb"],"550cf0692d4885d02c5acbefe19aa1075acddbbb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5da0b42730b6b99b31389ef94cb97384e83b9ede"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","44549822b9113925bd45e53c1e0028ab2e1d1d7f"],"44549822b9113925bd45e53c1e0028ab2e1d1d7f":["5ecd2e77a93478a1b2f17346c230de01e58f3b24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}