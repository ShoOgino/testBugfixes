{"path":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a7a379c47cb10a09ea1ff0b2460819a73c5988","date":1394142503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["5cab9a86bd67202d20b6adc463008c8e982b070a","f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988","acf00221f44c5f08ccea014f2492b53af15ecd66"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}