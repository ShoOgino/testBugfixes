{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,MaxFieldLength).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,MaxFieldLength).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, null, mfl.getLimit(), null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, null, mfl.getLimit(), null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,MaxFieldLength).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param mfl Maximum field length in number of terms/tokens: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create, MaxFieldLength mfl)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, null, mfl.getLimit(), null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}