{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","commits":[{"id":"a397491f6601f7c45bc425f45e95c41c3a6d1ca3","date":1380651240,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    AtomicReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", true, true);\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(1, scorer.nextDoc());\n    assertEquals(2, scorer.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", false, false);\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.nextDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","sourceNew":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", true, true);\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(1, scorer.nextDoc());\n    assertEquals(2, scorer.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", false, false);\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.nextDoc());\n  }\n\n","sourceOld":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    AtomicReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", true, true);\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(1, scorer.nextDoc());\n    assertEquals(2, scorer.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", false, false);\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","sourceNew":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","sourceOld":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", true, true);\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(1, scorer.nextDoc());\n    assertEquals(2, scorer.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", false, false);\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":3,"author":"yonik","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","sourceNew":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","sourceOld":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf.reader(), \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","bugFix":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","sourceNew":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    values = vs.getValues(new HashMap<String,Object>(), leaf);\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","sourceOld":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","sourceNew":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    values = vs.getValues(new HashMap<String,Object>(), leaf);\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","sourceOld":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","sourceNew":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    values = vs.getValues(new HashMap<String,Object>(), leaf);\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","sourceOld":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","sourceNew":null,"sourceOld":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    values = vs.getValues(new HashMap<String,Object>(), leaf);\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testRangeScorer().mjava","sourceNew":null,"sourceOld":"  public void testRangeScorer() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"2*popularity\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG));\n    ValueSource vs = expr.getValueSource(bindings);\n    \n    assertEquals(1, reader.leaves().size());\n    LeafReaderContext leaf = reader.leaves().get(0);\n    FunctionValues values = vs.getValues(new HashMap<String,Object>(), leaf);\n    \n    // everything\n    ValueSourceScorer scorer = values.getRangeScorer(leaf, \"4\", \"40\", true, true);\n    DocIdSetIterator iter = scorer.iterator();\n    assertEquals(-1, iter.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(1, iter.nextDoc());\n    assertEquals(2, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n\n    // just the first doc\n    values = vs.getValues(new HashMap<String,Object>(), leaf);\n    scorer = values.getRangeScorer(leaf, \"4\", \"40\", false, false);\n    iter = scorer.iterator();\n    assertEquals(-1, scorer.docID());\n    assertEquals(0, iter.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iter.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["57cfa96e1cacc0f1f98d8732aa54935875187781","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["57cfa96e1cacc0f1f98d8732aa54935875187781","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}