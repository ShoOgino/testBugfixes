{"path":"lucene/monitor/src/test/org/apache/lucene/monitor/TestHighlightingMatcher#testUnorderedNearWithinOrderedNear().mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestHighlightingMatcher#testUnorderedNearWithinOrderedNear().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnorderedNearWithinOrderedNear() throws Exception {\n\n    final SpanQuery spanPhrase = SpanNearQuery.newOrderedNearQuery(FIELD)\n        .addClause(new SpanTermQuery(new Term(FIELD, \"time\")))\n        .addClause(new SpanTermQuery(new Term(FIELD, \"men\")))\n        .setSlop(1)\n        .build();\n\n    final SpanQuery unorderedNear = SpanNearQuery.newUnorderedNearQuery(FIELD)\n        .addClause(spanPhrase)\n        .addClause(new SpanTermQuery(new Term(FIELD, \"all\")))\n        .setSlop(5)\n        .build();\n\n    final SpanQuery orderedNear = SpanNearQuery.newOrderedNearQuery(FIELD)\n        .addClause(new SpanTermQuery(new Term(FIELD, \"the\")))\n        .addClause(unorderedNear)\n        .setSlop(10)\n        .build();\n\n    final Query innerConjunct = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"is\")), BooleanClause.Occur.MUST)\n        .add(orderedNear, BooleanClause.Occur.MUST)\n        .build();\n\n    final Query disjunct = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD, \"now\")), BooleanClause.Occur.SHOULD)\n        .add(innerConjunct, BooleanClause.Occur.SHOULD)\n        .build();\n\n    final Query outerConjunct = new BooleanQuery.Builder()\n        .add(disjunct, BooleanClause.Occur.MUST)\n        .add(new TermQuery(new Term(FIELD, \"good\")), BooleanClause.Occur.MUST)\n        .build();\n\n\n    try (Monitor monitor = newMonitor()) {\n      monitor.register(new MonitorQuery(\"1\", outerConjunct));\n      Document doc = buildDoc(\"now is the time for all good men\");\n      MatchingQueries<HighlightsMatch> matches = monitor.match(doc, HighlightsMatch.MATCHER);\n      HighlightsMatch m = matches.matches(\"1\");\n      assertEquals(2, m.getHitCount());\n      assertTrue(m.getFields().contains(FIELD));\n      assertTrue(m.getHits(FIELD).contains(new HighlightsMatch.Hit(0, 0, 0, 3)));\n      assertTrue(m.getHits(FIELD).contains(new HighlightsMatch.Hit(6, 24, 6, 28)));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c529b189e09de25455d82ebd7260748cf11ee14"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}