{"path":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","commits":[{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void doWait() {\n    try {\n      // NOTE: the callers of this method should in theory\n      // be able to do simply wait(), but, as a defense\n      // against thread timing hazards where notifyAll()\n      // falls to be called, we wait for at most 1 second\n      // and then return so caller can check if wait\n      // conditions are satisified:\n      wait(1000);\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","sourceNew":"  private synchronized void doWait() {\n    // NOTE: the callers of this method should in theory\n    // be able to do simply wait(), but, as a defense\n    // against thread timing hazards where notifyAll()\n    // falls to be called, we wait for at most 1 second\n    // and then return so caller can check if wait\n    // conditions are satisified:\n    try {\n      wait(1000);\n    } catch (InterruptedException ie) {\n      // In 3.0 we will change this to throw\n      // InterruptedException instead\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(ie);\n    }\n  }\n\n","sourceOld":"  private synchronized void doWait() {\n    try {\n      // NOTE: the callers of this method should in theory\n      // be able to do simply wait(), but, as a defense\n      // against thread timing hazards where notifyAll()\n      // falls to be called, we wait for at most 1 second\n      // and then return so caller can check if wait\n      // conditions are satisified:\n      wait(1000);\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","sourceNew":"  private synchronized void doWait() {\n    // NOTE: the callers of this method should in theory\n    // be able to do simply wait(), but, as a defense\n    // against thread timing hazards where notifyAll()\n    // falls to be called, we wait for at most 1 second\n    // and then return so caller can check if wait\n    // conditions are satisfied:\n    try {\n      wait(1000);\n    } catch (InterruptedException ie) {\n      // In 3.0 we will change this to throw\n      // InterruptedException instead\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(ie);\n    }\n  }\n\n","sourceOld":"  private synchronized void doWait() {\n    // NOTE: the callers of this method should in theory\n    // be able to do simply wait(), but, as a defense\n    // against thread timing hazards where notifyAll()\n    // falls to be called, we wait for at most 1 second\n    // and then return so caller can check if wait\n    // conditions are satisified:\n    try {\n      wait(1000);\n    } catch (InterruptedException ie) {\n      // In 3.0 we will change this to throw\n      // InterruptedException instead\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(ie);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","sourceNew":"  private synchronized void doWait() {\n    // NOTE: the callers of this method should in theory\n    // be able to do simply wait(), but, as a defense\n    // against thread timing hazards where notifyAll()\n    // falls to be called, we wait for at most 1 second\n    // and then return so caller can check if wait\n    // conditions are satisfied:\n    try {\n      wait(1000);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n  }\n\n","sourceOld":"  private synchronized void doWait() {\n    // NOTE: the callers of this method should in theory\n    // be able to do simply wait(), but, as a defense\n    // against thread timing hazards where notifyAll()\n    // falls to be called, we wait for at most 1 second\n    // and then return so caller can check if wait\n    // conditions are satisfied:\n    try {\n      wait(1000);\n    } catch (InterruptedException ie) {\n      // In 3.0 we will change this to throw\n      // InterruptedException instead\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(ie);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doWait().mjava","sourceNew":"  private synchronized void doWait() {\n    // NOTE: the callers of this method should in theory\n    // be able to do simply wait(), but, as a defense\n    // against thread timing hazards where notifyAll()\n    // falls to be called, we wait for at most 1 second\n    // and then return so caller can check if wait\n    // conditions are satisfied:\n    try {\n      wait(1000);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n  }\n\n","sourceOld":"  private synchronized void doWait() {\n    // NOTE: the callers of this method should in theory\n    // be able to do simply wait(), but, as a defense\n    // against thread timing hazards where notifyAll()\n    // falls to be called, we wait for at most 1 second\n    // and then return so caller can check if wait\n    // conditions are satisfied:\n    try {\n      wait(1000);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa4b66eb16ead894fa7130904af6ecf34331f050":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aa4b66eb16ead894fa7130904af6ecf34331f050"]},"commit2Childs":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2586f96f60332eb97ecd2934b0763791462568b2"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2586f96f60332eb97ecd2934b0763791462568b2":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}