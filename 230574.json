{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","19498030e0adab22f604f935cae3c03dcf0952a6"],"19498030e0adab22f604f935cae3c03dcf0952a6":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["af2638813028b254a88b418ebeafb541afb49653","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"af2638813028b254a88b418ebeafb541afb49653":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}