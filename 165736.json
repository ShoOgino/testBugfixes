{"path":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    try {\n      Hits hits = searcher.search(query);\n      assertEquals(100, hits.length());\n      \n      for (int i = 0; i < hits.length(); i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(i));\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        //assertTrue();\n      }\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(50));\n      //System.out.println(\"Explain: \" + searcher.explain(query, hits.id(50)));\n      //System.out.println(\"Vector: \" + vector[0].toString());\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":"  public void testTermVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    try {\n      Hits hits = searcher.search(query);\n      assertEquals(100, hits.length());\n      \n      for (int i = 0; i < hits.length(); i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(i));\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testTermVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    try {\n      Hits hits = searcher.search(query);\n      assertEquals(100, hits.length());\n      \n      for (int i = 0; i < hits.length(); i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(i));\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        //assertTrue();\n      }\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(50));\n      //System.out.println(\"Explain: \" + searcher.explain(query, hits.id(50)));\n      //System.out.println(\"Vector: \" + vector[0].toString());\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":"  public void testTermVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(100, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testTermVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    try {\n      Hits hits = searcher.search(query);\n      assertEquals(100, hits.length());\n      \n      for (int i = 0; i < hits.length(); i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits.id(i));\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":"  public void testTermVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(100, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testTermVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(100, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}