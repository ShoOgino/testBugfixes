{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    try {\n      zkStateReader.waitForState(collectionName, timeoutms, TimeUnit.MILLISECONDS, (n, c) -> {\n          if (c == null)\n            return true;\n          Slice slice = c.getSlice(shard);\n          if(slice == null || slice.getReplica(replicaName) == null) {\n            return true;\n          }\n          return false;\n        });\n    } catch (TimeoutException e) {\n      return false;\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","bugFix":["de84935d1fc860da45274e111051890ba7504337","06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    try {\n      zkStateReader.waitForState(collectionName, timeoutms, TimeUnit.MILLISECONDS, (c) -> {\n          if (c == null)\n            return true;\n          Slice slice = c.getSlice(shard);\n          if(slice == null || slice.getReplica(replicaName) == null) {\n            return true;\n          }\n          return false;\n        });\n    } catch (TimeoutException e) {\n      return false;\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    try {\n      zkStateReader.waitForState(collectionName, timeoutms, TimeUnit.MILLISECONDS, (n, c) -> {\n          if (c == null)\n            return true;\n          Slice slice = c.getSlice(shard);\n          if(slice == null || slice.getReplica(replicaName) == null) {\n            return true;\n          }\n          return false;\n        });\n    } catch (TimeoutException e) {\n      return false;\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    try {\n      zkStateReader.waitForState(collectionName, timeoutms, TimeUnit.MILLISECONDS, (c) -> {\n          if (c == null)\n            return true;\n          Slice slice = c.getSlice(shard);\n          if(slice == null || slice.getReplica(replicaName) == null) {\n            return true;\n          }\n          return false;\n        });\n    } catch (TimeoutException e) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    try {\n      zkStateReader.waitForState(collectionName, timeoutms, TimeUnit.MILLISECONDS, (c) -> {\n          if (c == null)\n            return true;\n          Slice slice = c.getSlice(shard);\n          if(slice == null || slice.getReplica(replicaName) == null) {\n            return true;\n          }\n          return false;\n        });\n    } catch (TimeoutException e) {\n      return false;\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b366e7dd3172289251a86be96031af4002cd19c":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}