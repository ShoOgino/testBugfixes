{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#isExpressionClause(String).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#isExpressionClause(String).mjava","pathOld":"/dev/null","sourceNew":"  /* Returns true if the clause is a valid expression clause. This is defined to\n   * mean it begins with ( and ends with )\n   * Expects that the passed in clause has already been trimmed of leading and\n   * trailing spaces*/\n  private static boolean isExpressionClause(String clause){\n    // operator(.....something.....)\n    \n    // must be balanced\n    if(!isBalanced(clause)){ return false; }\n    \n    // find first (, then check from start to that location and only accept alphanumeric\n    int firstOpenParen = findNextClear(clause, 0, '(');\n    if(firstOpenParen <= 0 || firstOpenParen == clause.length() - 1){ return false; }\n    String functionName = clause.substring(0, firstOpenParen).trim();\n    if(!wordToken(functionName)){ return false; }\n    \n    // Must end with )\n    return clause.endsWith(\")\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#isExpressionClause(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#isExpressionClause(String).mjava","sourceNew":"  /* Returns true if the clause is a valid expression clause. This is defined to\n   * mean it begins with ( and ends with )\n   * Expects that the passed in clause has already been trimmed of leading and\n   * trailing spaces*/\n  private static boolean isExpressionClause(String clause){\n    // operator(.....something.....)\n\n    // must be balanced\n    if(!isBalanced(clause)){ return false; }\n\n    // find first (, then check from start to that location and only accept alphanumeric\n    int firstOpenParen = findNextClear(clause, 0, '(');\n    if(firstOpenParen <= 0 || firstOpenParen == clause.length() - 1){ return false; }\n    String functionName = clause.substring(0, firstOpenParen).trim();\n    if(!wordToken(functionName)){ return false; }\n\n    // Must end with )\n    return clause.endsWith(\")\");\n  }\n\n","sourceOld":"  /* Returns true if the clause is a valid expression clause. This is defined to\n   * mean it begins with ( and ends with )\n   * Expects that the passed in clause has already been trimmed of leading and\n   * trailing spaces*/\n  private static boolean isExpressionClause(String clause){\n    // operator(.....something.....)\n    \n    // must be balanced\n    if(!isBalanced(clause)){ return false; }\n    \n    // find first (, then check from start to that location and only accept alphanumeric\n    int firstOpenParen = findNextClear(clause, 0, '(');\n    if(firstOpenParen <= 0 || firstOpenParen == clause.length() - 1){ return false; }\n    String functionName = clause.substring(0, firstOpenParen).trim();\n    if(!wordToken(functionName)){ return false; }\n    \n    // Must end with )\n    return clause.endsWith(\")\");\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0370d6fb5289875090a50a9d0887ee584fed440":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0370d6fb5289875090a50a9d0887ee584fed440"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0370d6fb5289875090a50a9d0887ee584fed440"],"a0370d6fb5289875090a50a9d0887ee584fed440":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}