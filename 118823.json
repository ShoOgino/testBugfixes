{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","sourceNew":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","sourceNew":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      Terms terms = MultiFields.getTerms(reader, \"uid\");\n      if (terms != null) {\n        uidIter = terms.iterator();\n\n        indexDocs(file);\n\n        if (deleting) {\t\t\t\t  // delete rest of stale docs\n          BytesRef text;\n          while ((text=uidIter.next()) != null) {\n            String termText = text.utf8ToString();\n            System.out.println(\"deleting \" +\n                               HTMLDocument.uid2url(termText));\n            reader.deleteDocuments(new Term(\"uid\", termText));\n          }\n          deleting = false;\n        }\n      }\n\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","sourceNew":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      Terms terms = MultiFields.getTerms(reader, \"uid\");\n      if (terms != null) {\n        uidIter = terms.iterator();\n\n        indexDocs(file);\n\n        if (deleting) {\t\t\t\t  // delete rest of stale docs\n          BytesRef text;\n          while ((text=uidIter.next()) != null) {\n            String termText = text.utf8ToString();\n            System.out.println(\"deleting \" +\n                               HTMLDocument.uid2url(termText));\n            reader.deleteDocuments(new Term(\"uid\", termText));\n          }\n          deleting = false;\n        }\n      }\n\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ea17596392ebd5d12741eb9e3b2516258b9413","date":1298090976,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","sourceNew":null,"sourceOld":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      Terms terms = MultiFields.getTerms(reader, \"uid\");\n      if (terms != null) {\n        uidIter = terms.iterator();\n\n        indexDocs(file);\n\n        if (deleting) {\t\t\t\t  // delete rest of stale docs\n          BytesRef text;\n          while ((text=uidIter.next()) != null) {\n            String termText = text.utf8ToString();\n            System.out.println(\"deleting \" +\n                               HTMLDocument.uid2url(termText));\n            reader.deleteDocuments(new Term(\"uid\", termText));\n          }\n          deleting = false;\n        }\n      }\n\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","sourceNew":null,"sourceOld":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      Terms terms = MultiFields.getTerms(reader, \"uid\");\n      if (terms != null) {\n        uidIter = terms.iterator();\n\n        indexDocs(file);\n\n        if (deleting) {\t\t\t\t  // delete rest of stale docs\n          BytesRef text;\n          while ((text=uidIter.next()) != null) {\n            String termText = text.utf8ToString();\n            System.out.println(\"deleting \" +\n                               HTMLDocument.uid2url(termText));\n            reader.deleteDocuments(new Term(\"uid\", termText));\n          }\n          deleting = false;\n        }\n      }\n\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","sourceNew":null,"sourceOld":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      Terms terms = MultiFields.getTerms(reader, \"uid\");\n      if (terms != null) {\n        uidIter = terms.iterator();\n\n        indexDocs(file);\n\n        if (deleting) {\t\t\t\t  // delete rest of stale docs\n          BytesRef text;\n          while ((text=uidIter.next()) != null) {\n            String termText = text.utf8ToString();\n            System.out.println(\"deleting \" +\n                               HTMLDocument.uid2url(termText));\n            reader.deleteDocuments(new Term(\"uid\", termText));\n          }\n          deleting = false;\n        }\n      }\n\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["28427ef110c4c5bf5b4057731b83110bd1e13724","81ea17596392ebd5d12741eb9e3b2516258b9413"],"81ea17596392ebd5d12741eb9e3b2516258b9413":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"5f4e87790277826a2aea119328600dfb07761f32":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","28427ef110c4c5bf5b4057731b83110bd1e13724"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["5f4e87790277826a2aea119328600dfb07761f32","81ea17596392ebd5d12741eb9e3b2516258b9413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"81ea17596392ebd5d12741eb9e3b2516258b9413":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["f1bdbf92da222965b46c0a942c3857ba56e5c638","81ea17596392ebd5d12741eb9e3b2516258b9413","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}