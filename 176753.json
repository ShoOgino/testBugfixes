{"path":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","commits":[{"id":"cb28d79732042ac28cd68a04bcb1b6584c18d8c9","date":1462314713,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NullSecureRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NullSecureRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NullSecureRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65ea34d65da0207f9a76cb216a42c16f6419ead5","date":1462599970,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NullSecureRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NullSecureRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04effb6bae0254b6d8632d67c1ec9121b33aa56e","date":1463009303,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(keyStore, getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(trustStore, getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(keyStore, getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(trustStore, getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(keyStore, getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(trustStore, getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NullSecureRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(getKeyStore(), getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(getTrustStore(), getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","date":1524429517,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n\n    builder.loadKeyMaterial(buildKeyStore(keyStore, getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(trustStore, getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n    \n    builder.loadKeyMaterial(buildKeyStore(keyStore, getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(trustStore, getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","bugFix":["cb28d79732042ac28cd68a04bcb1b6584c18d8c9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildServerSSLContext().mjava","sourceNew":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLConfig buildServerSSLConfig() {\n    if (!isSSLMode()) {\n      return null;\n    }\n\n    return new SSLConfig(isSSLMode(), isClientAuthMode(), null, null, null, null) {\n      @Override\n      public SslContextFactory createContextFactory() {\n        SslContextFactory factory = new SslContextFactory(false);\n        try {\n          SSLContextBuilder builder = SSLContexts.custom();\n          builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n\n          builder.loadKeyMaterial(buildKeyStore(keyStore, TEST_PASSWORD), TEST_PASSWORD.toCharArray());\n\n          if (isClientAuthMode()) {\n            builder.loadTrustMaterial(buildKeyStore(trustStore, TEST_PASSWORD), new TrustSelfSignedStrategy()).build();\n\n          }\n          factory.setSslContext(builder.build());\n        } catch (Exception e) {\n          throw new RuntimeException(\"ssl context init failure: \" + e.getMessage(), e);\n        }\n        factory.setNeedClientAuth(isClientAuthMode());\n        return factory;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Builds a new SSLContext for jetty servers which have been configured based on the settings of \n   * this object.\n   *\n   * NOTE: Uses a completely insecure {@link SecureRandom} instance to prevent tests from blocking \n   * due to lack of entropy, also explicitly allows the use of self-signed \n   * certificates (since that's what is almost always used during testing).\n   * almost always used during testing). \n   */\n  public SSLContext buildServerSSLContext() throws KeyManagementException, \n    UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n\n    assert isSSLMode();\n    \n    SSLContextBuilder builder = SSLContexts.custom();\n    builder.setSecureRandom(NotSecurePsuedoRandom.INSTANCE);\n\n    builder.loadKeyMaterial(buildKeyStore(keyStore, getKeyStorePassword()), getKeyStorePassword().toCharArray());\n\n    if (isClientAuthMode()) {\n      builder.loadTrustMaterial(buildKeyStore(trustStore, getTrustStorePassword()), new TrustSelfSignedStrategy()).build();\n      \n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":["ea0f43f20834b3c8930e074b144aba27a935fee8"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb28d79732042ac28cd68a04bcb1b6584c18d8c9"],"04effb6bae0254b6d8632d67c1ec9121b33aa56e":["65ea34d65da0207f9a76cb216a42c16f6419ead5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["cb28d79732042ac28cd68a04bcb1b6584c18d8c9","65ea34d65da0207f9a76cb216a42c16f6419ead5"],"65ea34d65da0207f9a76cb216a42c16f6419ead5":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cb28d79732042ac28cd68a04bcb1b6584c18d8c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["65ea34d65da0207f9a76cb216a42c16f6419ead5","04effb6bae0254b6d8632d67c1ec9121b33aa56e"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb28d79732042ac28cd68a04bcb1b6584c18d8c9"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"73450c0955930295d34703e7ddbfc6973b7a121a":["65ea34d65da0207f9a76cb216a42c16f6419ead5"],"04effb6bae0254b6d8632d67c1ec9121b33aa56e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73450c0955930295d34703e7ddbfc6973b7a121a","cb28d79732042ac28cd68a04bcb1b6584c18d8c9","55b50463286869f584cf849d1587a0fcd54d1dfa"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"65ea34d65da0207f9a76cb216a42c16f6419ead5":["04effb6bae0254b6d8632d67c1ec9121b33aa56e","e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cb28d79732042ac28cd68a04bcb1b6584c18d8c9":["73450c0955930295d34703e7ddbfc6973b7a121a","e66a459d38c1c4a2f97128433dab546f683a9fed","55b50463286869f584cf849d1587a0fcd54d1dfa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}