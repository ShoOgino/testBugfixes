{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PointRangeQueryNodeBuilder#build(QueryNode).mjava","commits":[{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PointRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query build(QueryNode queryNode) throws QueryNodeException {\n    PointRangeQueryNode numericRangeNode = (PointRangeQueryNode) queryNode;\n    \n    PointQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    PointQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    PointsConfig pointsConfig = numericRangeNode.getPointsConfig();\n    Class<? extends Number> numberType = pointsConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    \n    // TODO: push down cleaning up of crazy nulls and inclusive/exclusive elsewhere\n    if (Integer.class.equals(numberType)) {\n      Integer lower = (Integer) lowerNumber;\n      if (lower == null) {\n        lower = Integer.MIN_VALUE;\n      }\n      if (minInclusive == false) {\n        lower = lower + 1;\n      }\n      \n      Integer upper = (Integer) upperNumber;\n      if (upper == null) {\n        upper = Integer.MAX_VALUE;\n      }\n      if (maxInclusive == false) {\n        upper = upper - 1;\n      }\n      return IntPoint.newRangeQuery(field, lower, upper);\n    } else if (Long.class.equals(numberType)) {\n      Long lower = (Long) lowerNumber;\n      if (lower == null) {\n        lower = Long.MIN_VALUE;\n      }\n      if (minInclusive == false) {\n        lower = lower + 1;\n      }\n      \n      Long upper = (Long) upperNumber;\n      if (upper == null) {\n        upper = Long.MAX_VALUE;\n      }\n      if (maxInclusive == false) {\n        upper = upper - 1;\n      }\n      return LongPoint.newRangeQuery(field, lower, upper);\n    } else if (Float.class.equals(numberType)) {\n      Float lower = (Float) lowerNumber;\n      if (lower == null) {\n        lower = Float.NEGATIVE_INFINITY;\n      }\n      if (minInclusive == false) {\n        lower = Math.nextUp(lower);\n      }\n      \n      Float upper = (Float) upperNumber;\n      if (upper == null) {\n        upper = Float.POSITIVE_INFINITY;\n      }\n      if (maxInclusive == false) {\n        upper = Math.nextDown(upper);\n      }\n      return FloatPoint.newRangeQuery(field, lower, upper);\n    } else if (Double.class.equals(numberType)) {\n      Double lower = (Double) lowerNumber;\n      if (lower == null) {\n        lower = Double.NEGATIVE_INFINITY;\n      }\n      if (minInclusive == false) {\n        lower = Math.nextUp(lower);\n      }\n      \n      Double upper = (Double) upperNumber;\n      if (upper == null) {\n        upper = Double.POSITIVE_INFINITY;\n      }\n      if (maxInclusive == false) {\n        upper = Math.nextDown(upper);\n      }\n      return DoublePoint.newRangeQuery(field, lower, upper);\n    } else {\n      throw new QueryNodeException(new MessageImpl(QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}