{"path":"lucene/src/java/org/apache/lucene/search/TopScoreDocCollector.InOrderPagingScoreDocCollector#collect(int).mjava","commits":[{"id":"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15","date":1316561169,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopScoreDocCollector.InOrderPagingScoreDocCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      float score = scorer.score();\n\n      // This collector cannot handle these scores:\n      assert score != Float.NEGATIVE_INFINITY;\n      assert !Float.isNaN(score);\n\n      totalHits++;\n      \n      if (score > after.score || (score == after.score && doc <= afterDoc)) {\n        // hit was collected on a previous page\n        return;\n      }\n      \n      if (score <= pqTop.score) {\n        // Since docs are returned in-order (i.e., increasing doc Id), a document\n        // with equal score to pqTop.score cannot compete since HitQueue favors\n        // documents with lower doc Ids. Therefore reject those docs too.\n        return;\n      }\n      collectedHits++;\n      pqTop.doc = doc + docBase;\n      pqTop.score = score;\n      pqTop = pq.updateTop();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector.InOrderPagingScoreDocCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopScoreDocCollector.InOrderPagingScoreDocCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      float score = scorer.score();\n\n      // This collector cannot handle these scores:\n      assert score != Float.NEGATIVE_INFINITY;\n      assert !Float.isNaN(score);\n\n      totalHits++;\n      \n      if (score > after.score || (score == after.score && doc <= afterDoc)) {\n        // hit was collected on a previous page\n        return;\n      }\n      \n      if (score <= pqTop.score) {\n        // Since docs are returned in-order (i.e., increasing doc Id), a document\n        // with equal score to pqTop.score cannot compete since HitQueue favors\n        // documents with lower doc Ids. Therefore reject those docs too.\n        return;\n      }\n      collectedHits++;\n      pqTop.doc = doc + docBase;\n      pqTop.score = score;\n      pqTop = pq.updateTop();\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      float score = scorer.score();\n\n      // This collector cannot handle these scores:\n      assert score != Float.NEGATIVE_INFINITY;\n      assert !Float.isNaN(score);\n\n      totalHits++;\n      \n      if (score > after.score || (score == after.score && doc <= afterDoc)) {\n        // hit was collected on a previous page\n        return;\n      }\n      \n      if (score <= pqTop.score) {\n        // Since docs are returned in-order (i.e., increasing doc Id), a document\n        // with equal score to pqTop.score cannot compete since HitQueue favors\n        // documents with lower doc Ids. Therefore reject those docs too.\n        return;\n      }\n      collectedHits++;\n      pqTop.doc = doc + docBase;\n      pqTop.score = score;\n      pqTop = pq.updateTop();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}