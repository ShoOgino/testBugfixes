{"path":"lucene/src/java/org/apache/lucene/search/NRTManager#waitForGeneration(long,boolean,long,TimeUnit).mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NRTManager#waitForGeneration(long,boolean,long,TimeUnit).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#waitForGeneration(long,boolean,long,TimeUnit).mjava","sourceNew":"  /**\n   * Waits for a given {@link SearcherManager} target generation to be available\n   * via {@link #getSearcherManager(boolean)}. If the current generation is less\n   * than the given target generation this method will block until the\n   * correspondent {@link SearcherManager} is reopened by another thread via\n   * {@link #maybeReopen(boolean)}, the given waiting time has elapsed, or until\n   * the {@link NRTManager} is closed.\n   * <p>\n   * NOTE: if the waiting time elapses before the requested target generation is\n   * available the latest {@link SearcherManager} is returned instead.\n   * \n   * @param targetGen\n   *          the generation to wait for\n   * @param requireDeletes\n   *          <code>true</code> iff the generation requires deletes to be\n   *          applied otherwise <code>false</code>\n   * @param time\n   *          the time to wait for the target generation\n   * @param unit\n   *          the waiting time's time unit\n   * @return the {@link SearcherManager} with the given target generation or the\n   *         latest {@link SearcherManager} if the waiting time elapsed before\n   *         the requested generation is available.\n   */\n  public SearcherManager waitForGeneration(long targetGen, boolean requireDeletes, long time, TimeUnit unit) {\n    try {\n      final long curGen = indexingGen.get();\n      if (targetGen > curGen) {\n        throw new IllegalArgumentException(\"targetGen=\" + targetGen + \" was never returned by this NRTManager instance (current gen=\" + curGen + \")\");\n      }\n      reopenLock.lockInterruptibly();\n      try {\n        if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n          for (WaitingListener listener : waitingListeners) {\n            listener.waiting(requireDeletes, targetGen);\n          }\n          while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n            if (!waitOnGenCondition(time, unit)) {\n              return getSearcherManager(requireDeletes);\n            }\n          }\n        }\n\n      } finally {\n        reopenLock.unlock();\n      }\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    return getSearcherManager(requireDeletes);\n  }\n\n","sourceOld":"  /**\n   * Waits for a given {@link SearcherManager} target generation to be available\n   * via {@link #getSearcherManager(boolean)}. If the current generation is less\n   * than the given target generation this method will block until the\n   * correspondent {@link SearcherManager} is reopened by another thread via\n   * {@link #maybeReopen(boolean)}, the given waiting time has elapsed, or until\n   * the {@link NRTManager} is closed.\n   * <p>\n   * NOTE: if the waiting time elapses before the requested target generation is\n   * available the latest {@link SearcherManager} is returned instead.\n   * \n   * @param targetGen\n   *          the generation to wait for\n   * @param requireDeletes\n   *          <code>true</code> iff the generation requires deletes to be\n   *          applied otherwise <code>false</code>\n   * @param time\n   *          the time to wait for the target generation\n   * @param unit\n   *          the waiting time's time unit\n   * @return the {@link SearcherManager} with the given target generation or the\n   *         latest {@link SearcherManager} if the waiting time elapsed before\n   *         the requested generation is available.\n   */\n  public SearcherManager waitForGeneration(long targetGen, boolean requireDeletes, long time, TimeUnit unit) {\n    try {\n      final long curGen = indexingGen.get();\n      if (targetGen > curGen) {\n        throw new IllegalArgumentException(\"targetGen=\" + targetGen + \" was never returned by this NRTManager instance (current gen=\" + curGen + \")\");\n      }\n      reopenLock.lockInterruptibly();\n      try {\n        if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n          for (WaitingListener listener : waitingListeners) {\n            listener.waiting(requireDeletes, targetGen);\n          }\n          while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n            if (!waitOnGenCondition(time, unit)) {\n              return getSearcherManager(requireDeletes);\n            }\n          }\n        }\n\n      } finally {\n        reopenLock.unlock();\n      }\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    return getSearcherManager(requireDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#waitForGeneration(long,boolean,long,TimeUnit).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NRTManager#waitForGeneration(long,boolean,long,TimeUnit).mjava","sourceNew":"  /**\n   * Waits for a given {@link SearcherManager} target generation to be available\n   * via {@link #getSearcherManager(boolean)}. If the current generation is less\n   * than the given target generation this method will block until the\n   * correspondent {@link SearcherManager} is reopened by another thread via\n   * {@link #maybeReopen(boolean)}, the given waiting time has elapsed, or until\n   * the {@link NRTManager} is closed.\n   * <p>\n   * NOTE: if the waiting time elapses before the requested target generation is\n   * available the latest {@link SearcherManager} is returned instead.\n   * \n   * @param targetGen\n   *          the generation to wait for\n   * @param requireDeletes\n   *          <code>true</code> iff the generation requires deletes to be\n   *          applied otherwise <code>false</code>\n   * @param time\n   *          the time to wait for the target generation\n   * @param unit\n   *          the waiting time's time unit\n   * @return the {@link SearcherManager} with the given target generation or the\n   *         latest {@link SearcherManager} if the waiting time elapsed before\n   *         the requested generation is available.\n   */\n  public SearcherManager waitForGeneration(long targetGen, boolean requireDeletes, long time, TimeUnit unit) {\n    try {\n      final long curGen = indexingGen.get();\n      if (targetGen > curGen) {\n        throw new IllegalArgumentException(\"targetGen=\" + targetGen + \" was never returned by this NRTManager instance (current gen=\" + curGen + \")\");\n      }\n      reopenLock.lockInterruptibly();\n      try {\n        if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n          for (WaitingListener listener : waitingListeners) {\n            listener.waiting(requireDeletes, targetGen);\n          }\n          while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n            if (!waitOnGenCondition(time, unit)) {\n              return getSearcherManager(requireDeletes);\n            }\n          }\n        }\n\n      } finally {\n        reopenLock.unlock();\n      }\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    return getSearcherManager(requireDeletes);\n  }\n\n","sourceOld":"  /**\n   * Waits for a given {@link SearcherManager} target generation to be available\n   * via {@link #getSearcherManager(boolean)}. If the current generation is less\n   * than the given target generation this method will block until the\n   * correspondent {@link SearcherManager} is reopened by another thread via\n   * {@link #maybeReopen(boolean)}, the given waiting time has elapsed, or until\n   * the {@link NRTManager} is closed.\n   * <p>\n   * NOTE: if the waiting time elapses before the requested target generation is\n   * available the latest {@link SearcherManager} is returned instead.\n   * \n   * @param targetGen\n   *          the generation to wait for\n   * @param requireDeletes\n   *          <code>true</code> iff the generation requires deletes to be\n   *          applied otherwise <code>false</code>\n   * @param time\n   *          the time to wait for the target generation\n   * @param unit\n   *          the waiting time's time unit\n   * @return the {@link SearcherManager} with the given target generation or the\n   *         latest {@link SearcherManager} if the waiting time elapsed before\n   *         the requested generation is available.\n   */\n  public SearcherManager waitForGeneration(long targetGen, boolean requireDeletes, long time, TimeUnit unit) {\n    try {\n      final long curGen = indexingGen.get();\n      if (targetGen > curGen) {\n        throw new IllegalArgumentException(\"targetGen=\" + targetGen + \" was never returned by this NRTManager instance (current gen=\" + curGen + \")\");\n      }\n      reopenLock.lockInterruptibly();\n      try {\n        if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n          for (WaitingListener listener : waitingListeners) {\n            listener.waiting(requireDeletes, targetGen);\n          }\n          while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n            if (!waitOnGenCondition(time, unit)) {\n              return getSearcherManager(requireDeletes);\n            }\n          }\n        }\n\n      } finally {\n        reopenLock.unlock();\n      }\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    return getSearcherManager(requireDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}