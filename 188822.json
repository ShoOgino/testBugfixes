{"path":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","commits":[{"id":"1fb70d5d797131bf722eac86615eae787b5af9ea","date":1112363464,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (!(o instanceof MultiTermQuery)) return false;\n\n      final MultiTermQuery multiTermQuery = (MultiTermQuery) o;\n\n      if (!term.equals(multiTermQuery.term)) return false;\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","sourceNew":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (!(o instanceof MultiTermQuery)) return false;\n\n      final MultiTermQuery multiTermQuery = (MultiTermQuery) o;\n\n      if (!term.equals(multiTermQuery.term)) return false;\n\n      return getBoost() == multiTermQuery.getBoost();\n    }\n\n","sourceOld":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (!(o instanceof MultiTermQuery)) return false;\n\n      final MultiTermQuery multiTermQuery = (MultiTermQuery) o;\n\n      if (!term.equals(multiTermQuery.term)) return false;\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","sourceNew":"  public boolean equals(Object o) {\n    if (o == null || term == null) {\n      throw new UnsupportedOperationException(\n          \"MultiTermQuerys that do not use a pattern term need to override equals/hashcode\");\n    }\n\n    if (this == o)\n      return true;\n    if (!(o instanceof MultiTermQuery))\n      return false;\n\n    final MultiTermQuery multiTermQuery = (MultiTermQuery) o;\n\n    if (!term.equals(multiTermQuery.term))\n      return false;\n\n    return getBoost() == multiTermQuery.getBoost();\n  }\n\n","sourceOld":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (!(o instanceof MultiTermQuery)) return false;\n\n      final MultiTermQuery multiTermQuery = (MultiTermQuery) o;\n\n      if (!term.equals(multiTermQuery.term)) return false;\n\n      return getBoost() == multiTermQuery.getBoost();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0a32bc578c175fa42d65d95f21290d3473d84","date":1241610125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","sourceNew":"  //@Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    MultiTermQuery other = (MultiTermQuery) obj;\n    if (Float.floatToIntBits(getBoost()) != Float.floatToIntBits(other.getBoost()))\n      return false;\n    if (constantScoreRewrite != other.constantScoreRewrite)\n      return false;\n    return true;\n  }\n\n","sourceOld":"  public boolean equals(Object o) {\n    if (o == null || term == null) {\n      throw new UnsupportedOperationException(\n          \"MultiTermQuerys that do not use a pattern term need to override equals/hashcode\");\n    }\n\n    if (this == o)\n      return true;\n    if (!(o instanceof MultiTermQuery))\n      return false;\n\n    final MultiTermQuery multiTermQuery = (MultiTermQuery) o;\n\n    if (!term.equals(multiTermQuery.term))\n      return false;\n\n    return getBoost() == multiTermQuery.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","sourceNew":"  //@Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    MultiTermQuery other = (MultiTermQuery) obj;\n    if (Float.floatToIntBits(getBoost()) != Float.floatToIntBits(other.getBoost()))\n      return false;\n    if (!rewriteMethod.equals(other.rewriteMethod)) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  //@Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    MultiTermQuery other = (MultiTermQuery) obj;\n    if (Float.floatToIntBits(getBoost()) != Float.floatToIntBits(other.getBoost()))\n      return false;\n    if (constantScoreRewrite != other.constantScoreRewrite)\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    MultiTermQuery other = (MultiTermQuery) obj;\n    if (Float.floatToIntBits(getBoost()) != Float.floatToIntBits(other.getBoost()))\n      return false;\n    if (!rewriteMethod.equals(other.rewriteMethod)) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  //@Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    MultiTermQuery other = (MultiTermQuery) obj;\n    if (Float.floatToIntBits(getBoost()) != Float.floatToIntBits(other.getBoost()))\n      return false;\n    if (!rewriteMethod.equals(other.rewriteMethod)) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    MultiTermQuery other = (MultiTermQuery) obj;\n    if (Float.floatToIntBits(getBoost()) != Float.floatToIntBits(other.getBoost()))\n      return false;\n    if (!rewriteMethod.equals(other.rewriteMethod)) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    MultiTermQuery other = (MultiTermQuery) obj;\n    if (Float.floatToIntBits(getBoost()) != Float.floatToIntBits(other.getBoost()))\n      return false;\n    if (!rewriteMethod.equals(other.rewriteMethod)) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58d0a32bc578c175fa42d65d95f21290d3473d84":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["df8dadf22de84eeb1294e70792e292ecf8ded564"]},"commit2Childs":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"58d0a32bc578c175fa42d65d95f21290d3473d84":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}