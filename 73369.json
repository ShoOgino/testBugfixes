{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushDeletes(int,CommitUpdateCommand,ModifiableSolrParams).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushDeletes(int,CommitUpdateCommand,ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  boolean flushDeletes(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams commitParams) {\n    // check for pending deletes\n \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = deletes.keySet();\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      if (dlist == null || dlist.size() < limit) return false;\n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      addCommit(ureq, ccmd);\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (DeleteRequest dReq : dlist) {\n        DeleteUpdateCommand cmd = dReq.cmd;\n        combinedParams.add(dReq.params);\n        if (cmd.isDeleteById()) {\n          ureq.deleteById(cmd.getId(), cmd.getVersion());\n        } else {\n          ureq.deleteByQuery(cmd.query);\n        }\n        \n        if (commitParams != null) combinedParams.add(commitParams);\n        if (ureq.getParams() == null) ureq\n            .setParams(new ModifiableSolrParams());\n        ureq.getParams().add(combinedParams);\n      }\n      \n      removeNodes.add(node);\n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      deletes.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3e267c3aa59257874cf94e9cd7dca38037639ffe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushDeletes(int,CommitUpdateCommand,ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  boolean flushDeletes(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams commitParams) {\n    // check for pending deletes\n \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = deletes.keySet();\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      if (dlist == null || dlist.size() < limit) return false;\n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      addCommit(ureq, ccmd);\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (DeleteRequest dReq : dlist) {\n        DeleteUpdateCommand cmd = dReq.cmd;\n        combinedParams.add(dReq.params);\n        if (cmd.isDeleteById()) {\n          ureq.deleteById(cmd.getId(), cmd.getVersion());\n        } else {\n          ureq.deleteByQuery(cmd.query);\n        }\n        \n        if (commitParams != null) combinedParams.add(commitParams);\n        if (ureq.getParams() == null) ureq\n            .setParams(new ModifiableSolrParams());\n        ureq.getParams().add(combinedParams);\n      }\n      \n      removeNodes.add(node);\n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      deletes.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushDeletes(int,CommitUpdateCommand,ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  boolean flushDeletes(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams commitParams) {\n    // check for pending deletes\n \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = deletes.keySet();\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      if (dlist == null || dlist.size() < limit) return false;\n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      addCommit(ureq, ccmd);\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (DeleteRequest dReq : dlist) {\n        DeleteUpdateCommand cmd = dReq.cmd;\n        combinedParams.add(dReq.params);\n        if (cmd.isDeleteById()) {\n          ureq.deleteById(cmd.getId(), cmd.getVersion());\n        } else {\n          ureq.deleteByQuery(cmd.query);\n        }\n        \n        if (commitParams != null) combinedParams.add(commitParams);\n        if (ureq.getParams() == null) ureq\n            .setParams(new ModifiableSolrParams());\n        ureq.getParams().add(combinedParams);\n      }\n      \n      removeNodes.add(node);\n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      deletes.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","date":1330786058,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushDeletes(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushDeletes(int,CommitUpdateCommand,ModifiableSolrParams).mjava","sourceNew":"  boolean flushDeletes(int limit) {\n    // check for pending deletes\n \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = deletes.keySet();\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      if (dlist == null || dlist.size() < limit) return false;\n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (DeleteRequest dReq : dlist) {\n        DeleteUpdateCommand cmd = dReq.cmd;\n        combinedParams.add(dReq.params);\n        if (cmd.isDeleteById()) {\n          ureq.deleteById(cmd.getId(), cmd.getVersion());\n        } else {\n          ureq.deleteByQuery(cmd.query);\n        }\n        \n        if (ureq.getParams() == null) ureq\n            .setParams(new ModifiableSolrParams());\n        ureq.getParams().add(combinedParams);\n      }\n      \n      removeNodes.add(node);\n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      deletes.remove(node);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  boolean flushDeletes(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams commitParams) {\n    // check for pending deletes\n \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = deletes.keySet();\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      if (dlist == null || dlist.size() < limit) return false;\n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      addCommit(ureq, ccmd);\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (DeleteRequest dReq : dlist) {\n        DeleteUpdateCommand cmd = dReq.cmd;\n        combinedParams.add(dReq.params);\n        if (cmd.isDeleteById()) {\n          ureq.deleteById(cmd.getId(), cmd.getVersion());\n        } else {\n          ureq.deleteByQuery(cmd.query);\n        }\n        \n        if (commitParams != null) combinedParams.add(commitParams);\n        if (ureq.getParams() == null) ureq\n            .setParams(new ModifiableSolrParams());\n        ureq.getParams().add(combinedParams);\n      }\n      \n      removeNodes.add(node);\n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      deletes.remove(node);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#flushDeletes(int,CommitUpdateCommand,ModifiableSolrParams).mjava","sourceNew":null,"sourceOld":"  boolean flushDeletes(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams commitParams) {\n    // check for pending deletes\n \n    Set<Node> removeNodes = new HashSet<Node>();\n    Set<Node> nodes = deletes.keySet();\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      if (dlist == null || dlist.size() < limit) return false;\n      UpdateRequestExt ureq = new UpdateRequestExt();\n      \n      addCommit(ureq, ccmd);\n      \n      ModifiableSolrParams combinedParams = new ModifiableSolrParams();\n      \n      for (DeleteRequest dReq : dlist) {\n        DeleteUpdateCommand cmd = dReq.cmd;\n        combinedParams.add(dReq.params);\n        if (cmd.isDeleteById()) {\n          ureq.deleteById(cmd.getId(), cmd.getVersion());\n        } else {\n          ureq.deleteByQuery(cmd.query);\n        }\n        \n        if (commitParams != null) combinedParams.add(commitParams);\n        if (ureq.getParams() == null) ureq\n            .setParams(new ModifiableSolrParams());\n        ureq.getParams().add(combinedParams);\n      }\n      \n      removeNodes.add(node);\n      submit(ureq, node);\n    }\n    \n    for (Node node : removeNodes) {\n      deletes.remove(node);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}