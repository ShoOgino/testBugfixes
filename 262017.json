{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy());\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.setMergePolicy(new LogDocMergePolicy());\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}