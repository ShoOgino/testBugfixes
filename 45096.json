{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","commits":[{"id":"77d177b70aefca41f3edc910b0a703c76283d8b6","date":1411650976,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","date":1411708843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      String id;\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_ID) {\n        id = input.readString();\n      } else {\n        id = null;\n      }\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46SegmentInfoFormat.CODEC_NAME,\n                                                      Lucene46SegmentInfoFormat.VERSION_START,\n                                                      Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      if (codecVersion >= Lucene46SegmentInfoFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"55980207f1977bd1463465de1659b821347e2fa8":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["77d177b70aefca41f3edc910b0a703c76283d8b6"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5d957b3a23cce91c77a2c9971ecf0c9f99dd503"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["55980207f1977bd1463465de1659b821347e2fa8","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77d177b70aefca41f3edc910b0a703c76283d8b6","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}