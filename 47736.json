{"path":"src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","commits":[{"id":"e8f450af7a7b034413833ed2a9508f99264ea49a","date":1211042958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"/dev/null","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b = (byte[]) freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b = (byte[]) freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b = (byte[]) freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b = (byte[]) freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["e8f450af7a7b034413833ed2a9508f99264ea49a"],"e8f450af7a7b034413833ed2a9508f99264ea49a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e8f450af7a7b034413833ed2a9508f99264ea49a":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8f450af7a7b034413833ed2a9508f99264ea49a"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}