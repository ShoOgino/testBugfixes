{"path":"backwards/src/java/org/apache/lucene/index/SortedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/SortedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param term The term to map\n   * @param frequency The frequency of the term\n   * @param offsets Offset information, may be null\n   * @param positions Position information, may be null\n   */\n  //We need to combine any previous mentions of the term\n  @Override\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    TermVectorEntry entry =  termToTVE.get(term);\n    if (entry == null) {\n      entry = new TermVectorEntry(ALL, term, frequency, \n              storeOffsets == true ? offsets : null,\n              storePositions == true ? positions : null);\n      termToTVE.put(term, entry);\n      currentSet.add(entry);\n    } else {\n      entry.setFrequency(entry.getFrequency() + frequency);\n      if (storeOffsets)\n      {\n        TermVectorOffsetInfo [] existingOffsets = entry.getOffsets();\n        //A few diff. cases here:  offsets is null, existing offsets is null, both are null, same for positions\n        if (existingOffsets != null && offsets != null && offsets.length > 0)\n        {\n          //copy over the existing offsets\n          TermVectorOffsetInfo [] newOffsets = new TermVectorOffsetInfo[existingOffsets.length + offsets.length];\n          System.arraycopy(existingOffsets, 0, newOffsets, 0, existingOffsets.length);\n          System.arraycopy(offsets, 0, newOffsets, existingOffsets.length, offsets.length);\n          entry.setOffsets(newOffsets);\n        }\n        else if (existingOffsets == null && offsets != null && offsets.length > 0)\n        {\n          entry.setOffsets(offsets);\n        }\n        //else leave it alone\n      }\n      if (storePositions)\n      {\n        int [] existingPositions = entry.getPositions();\n        if (existingPositions != null && positions != null && positions.length > 0)\n        {\n          int [] newPositions = new int[existingPositions.length + positions.length];\n          System.arraycopy(existingPositions, 0, newPositions, 0, existingPositions.length);\n          System.arraycopy(positions, 0, newPositions, existingPositions.length, positions.length);\n          entry.setPositions(newPositions);\n        }\n        else if (existingPositions == null && positions != null && positions.length > 0)\n        {\n          entry.setPositions(positions);\n        }\n      }\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SortedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SortedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"  /**\n   *\n   * @param term The term to map\n   * @param frequency The frequency of the term\n   * @param offsets Offset information, may be null\n   * @param positions Position information, may be null\n   */\n  //We need to combine any previous mentions of the term\n  @Override\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    TermVectorEntry entry =  termToTVE.get(term);\n    if (entry == null) {\n      entry = new TermVectorEntry(ALL, term, frequency, \n              storeOffsets == true ? offsets : null,\n              storePositions == true ? positions : null);\n      termToTVE.put(term, entry);\n      currentSet.add(entry);\n    } else {\n      entry.setFrequency(entry.getFrequency() + frequency);\n      if (storeOffsets)\n      {\n        TermVectorOffsetInfo [] existingOffsets = entry.getOffsets();\n        //A few diff. cases here:  offsets is null, existing offsets is null, both are null, same for positions\n        if (existingOffsets != null && offsets != null && offsets.length > 0)\n        {\n          //copy over the existing offsets\n          TermVectorOffsetInfo [] newOffsets = new TermVectorOffsetInfo[existingOffsets.length + offsets.length];\n          System.arraycopy(existingOffsets, 0, newOffsets, 0, existingOffsets.length);\n          System.arraycopy(offsets, 0, newOffsets, existingOffsets.length, offsets.length);\n          entry.setOffsets(newOffsets);\n        }\n        else if (existingOffsets == null && offsets != null && offsets.length > 0)\n        {\n          entry.setOffsets(offsets);\n        }\n        //else leave it alone\n      }\n      if (storePositions)\n      {\n        int [] existingPositions = entry.getPositions();\n        if (existingPositions != null && positions != null && positions.length > 0)\n        {\n          int [] newPositions = new int[existingPositions.length + positions.length];\n          System.arraycopy(existingPositions, 0, newPositions, 0, existingPositions.length);\n          System.arraycopy(positions, 0, newPositions, existingPositions.length, positions.length);\n          entry.setPositions(newPositions);\n        }\n        else if (existingPositions == null && positions != null && positions.length > 0)\n        {\n          entry.setPositions(positions);\n        }\n      }\n    }\n\n\n  }\n\n","sourceOld":"  /**\n   *\n   * @param term The term to map\n   * @param frequency The frequency of the term\n   * @param offsets Offset information, may be null\n   * @param positions Position information, may be null\n   */\n  //We need to combine any previous mentions of the term\n  @Override\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    TermVectorEntry entry =  termToTVE.get(term);\n    if (entry == null) {\n      entry = new TermVectorEntry(ALL, term, frequency, \n              storeOffsets == true ? offsets : null,\n              storePositions == true ? positions : null);\n      termToTVE.put(term, entry);\n      currentSet.add(entry);\n    } else {\n      entry.setFrequency(entry.getFrequency() + frequency);\n      if (storeOffsets)\n      {\n        TermVectorOffsetInfo [] existingOffsets = entry.getOffsets();\n        //A few diff. cases here:  offsets is null, existing offsets is null, both are null, same for positions\n        if (existingOffsets != null && offsets != null && offsets.length > 0)\n        {\n          //copy over the existing offsets\n          TermVectorOffsetInfo [] newOffsets = new TermVectorOffsetInfo[existingOffsets.length + offsets.length];\n          System.arraycopy(existingOffsets, 0, newOffsets, 0, existingOffsets.length);\n          System.arraycopy(offsets, 0, newOffsets, existingOffsets.length, offsets.length);\n          entry.setOffsets(newOffsets);\n        }\n        else if (existingOffsets == null && offsets != null && offsets.length > 0)\n        {\n          entry.setOffsets(offsets);\n        }\n        //else leave it alone\n      }\n      if (storePositions)\n      {\n        int [] existingPositions = entry.getPositions();\n        if (existingPositions != null && positions != null && positions.length > 0)\n        {\n          int [] newPositions = new int[existingPositions.length + positions.length];\n          System.arraycopy(existingPositions, 0, newPositions, 0, existingPositions.length);\n          System.arraycopy(positions, 0, newPositions, existingPositions.length, positions.length);\n          entry.setPositions(newPositions);\n        }\n        else if (existingPositions == null && positions != null && positions.length > 0)\n        {\n          entry.setPositions(positions);\n        }\n      }\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}