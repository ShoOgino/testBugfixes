{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery#testRange(int).mjava","commits":[{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery#testRange(int).mjava","pathOld":"/dev/null","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    IntTrieRangeQuery q = new IntTrieRangeQuery(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n    IntTrieRangeFilter f = new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score)\";\n          q.setConstantScoreRewrite(true);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (boolean query)\";\n          q.setConstantScoreRewrite(false);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery#testRange(int).mjava","sourceNew":null,"sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    IntTrieRangeQuery q = new IntTrieRangeQuery(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n    IntTrieRangeFilter f = new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score)\";\n          q.setConstantScoreRewrite(true);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (boolean query)\";\n          q.setConstantScoreRewrite(false);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}