{"path":"solr/solrj/src/java/org/apache/solr/recipe/Clause#Clause(Map[String,Object]).mjava","commits":[{"id":"226b3bf77af5749a90c81edd3d4168fd6e276a24","date":1490013063,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Clause#Clause(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    collection = new Condition(COLLECTION, m.containsKey(COLLECTION) ? (String) m.get(COLLECTION) : ANY, EQUAL);\n    shard = new Condition(SHARD, m.containsKey(SHARD) ? (String) m.get(SHARD) : ANY, EQUAL);\n    String replica = m.containsKey(REPLICA) ? String.valueOf(m.get(REPLICA)) : ANY;\n    this.replica = parse(REPLICA, replica);\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    m.forEach(this::parseCondition);\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a834430db908aba7bd03ef98a893e56e820672c5","date":1490096578,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    collection = parse(COLLECTION, m);\n    shard = parse(SHARD, m);\n    this.replica = parse(REPLICA, m);\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    m.forEach((s, o) -> parseCondition(s, o));\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    collection = new Condition(COLLECTION, m.containsKey(COLLECTION) ? (String) m.get(COLLECTION) : ANY, EQUAL);\n    shard = new Condition(SHARD, m.containsKey(SHARD) ? (String) m.get(SHARD) : ANY, EQUAL);\n    String replica = m.containsKey(REPLICA) ? String.valueOf(m.get(REPLICA)) : ANY;\n    this.replica = parse(REPLICA, replica);\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    m.forEach(this::parseCondition);\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    collection = parse(COLLECTION, m);\n    shard = parse(SHARD, m);\n    this.replica = parse(REPLICA, m);\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    m.forEach((s, o) -> parseCondition(s, o));\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    collection = parse(COLLECTION, m);\n    shard = parse(SHARD, m);\n    this.replica = parse(REPLICA, m);\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    m.forEach((s, o) -> parseCondition(s, o));\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226b3bf77af5749a90c81edd3d4168fd6e276a24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a834430db908aba7bd03ef98a893e56e820672c5"],"a834430db908aba7bd03ef98a893e56e820672c5":["226b3bf77af5749a90c81edd3d4168fd6e276a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"226b3bf77af5749a90c81edd3d4168fd6e276a24":["a834430db908aba7bd03ef98a893e56e820672c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226b3bf77af5749a90c81edd3d4168fd6e276a24","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"a834430db908aba7bd03ef98a893e56e820672c5":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}