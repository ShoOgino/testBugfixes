{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testSplitShard().mjava","commits":[{"id":"cd01cddc46c498fba02505e77f225300f83242db","date":1419298241,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testSplitShard().mjava","pathOld":"/dev/null","sourceNew":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(collectionName);\n    splitShardRequest.setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(collectionName);\n    splitShardRequest.setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testSplitShard().mjava","sourceNew":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","sourceOld":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(collectionName);\n    splitShardRequest.setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(collectionName);\n    splitShardRequest.setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":5,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testSplitShard().mjava","sourceNew":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","sourceOld":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testSplitShard().mjava","sourceNew":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","sourceOld":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd01cddc46c498fba02505e77f225300f83242db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"922ddd897402a6df25c766ea8300443be5e82b3d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["cd01cddc46c498fba02505e77f225300f83242db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["922ddd897402a6df25c766ea8300443be5e82b3d"]},"commit2Childs":{"cd01cddc46c498fba02505e77f225300f83242db":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"922ddd897402a6df25c766ea8300443be5e82b3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd01cddc46c498fba02505e77f225300f83242db"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}