{"path":"src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","commits":[{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"/dev/null","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int [] ints;\n    String [] strings;\n    byte [] bytes;\n\n    ints = cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    strings = cache.getStrings(readerX, \"theInt\");\n\n    // this one is ok\n    bytes = cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    cache.getStrings(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int [] ints;\n    String [] strings;\n    byte [] bytes;\n\n    ints = cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    strings = cache.getStrings(readerX, \"theInt\");\n\n    // this one is ok\n    bytes = cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    cache.getStrings(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    cache.getStrings(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e69f59b863731d864bf3047235e718f0f88f8841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e69f59b863731d864bf3047235e718f0f88f8841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e69f59b863731d864bf3047235e718f0f88f8841":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69f59b863731d864bf3047235e718f0f88f8841"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}