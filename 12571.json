{"path":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","commits":[{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    IndexReader open = new SlowMultiReaderWrapper(IndexReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","d4d69c535930b5cce125cff868d40f6373dc27d4","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    IndexReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    IndexReader open = new SlowMultiReaderWrapper(IndexReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicIndexReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    IndexReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicIndexReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    IndexReader open = new SlowMultiReaderWrapper(IndexReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider();\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["868186558eb3a854ce7e720a52bb445795d54910"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","da6d5ac19a80d65b1e864251f155d30960353b7e"],"868186558eb3a854ce7e720a52bb445795d54910":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["386d1b0dcb065f1bfc494b1407cb41c536b95485","5cab9a86bd67202d20b6adc463008c8e982b070a"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["868186558eb3a854ce7e720a52bb445795d54910"],"868186558eb3a854ce7e720a52bb445795d54910":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}