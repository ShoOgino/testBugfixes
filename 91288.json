{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyNotFacetsData(DirectoryReader,IndexSearcher).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyNotFacetsData(DirectoryReader,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyNotFacetsData(DirectoryReader indexReader, IndexSearcher searcher) throws IOException {\n    // verify that non facets data was not damaged\n    TotalHitCountCollector total = new TotalHitCountCollector();\n    searcher.search(new PrefixQuery(new Term(\"foo\", \"content\")), total);\n    assertEquals(\"invalid number of results for content query\", total.getTotalHits(), indexReader.maxDoc());\n    \n    int numDocIDs = 0;\n    for (AtomicReaderContext context : indexReader.leaves()) {\n      Terms docIDs = context.reader().terms(\"docid\");\n      assertNotNull(docIDs);\n      TermsEnum te = docIDs.iterator(null);\n      while (te.next() != null) {\n        ++numDocIDs;\n      }\n    }\n    assertEquals(\"invalid number of docid terms\", indexReader.maxDoc(), numDocIDs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyNotFacetsData(DirectoryReader,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyNotFacetsData(DirectoryReader indexReader, IndexSearcher searcher) throws IOException {\n    // verify that non facets data was not damaged\n    TotalHitCountCollector total = new TotalHitCountCollector();\n    searcher.search(new PrefixQuery(new Term(\"foo\", \"content\")), total);\n    assertEquals(\"invalid number of results for content query\", total.getTotalHits(), indexReader.maxDoc());\n    \n    int numDocIDs = 0;\n    for (AtomicReaderContext context : indexReader.leaves()) {\n      Terms docIDs = context.reader().terms(\"docid\");\n      assertNotNull(docIDs);\n      TermsEnum te = docIDs.iterator(null);\n      while (te.next() != null) {\n        ++numDocIDs;\n      }\n    }\n    assertEquals(\"invalid number of docid terms\", indexReader.maxDoc(), numDocIDs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyNotFacetsData(DirectoryReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyNotFacetsData(DirectoryReader,IndexSearcher).mjava","sourceNew":"  private void verifyNotFacetsData(DirectoryReader indexReader, IndexSearcher searcher) throws IOException {\n    // verify that non facets data was not damaged\n    TotalHitCountCollector total = new TotalHitCountCollector();\n    searcher.search(new PrefixQuery(new Term(\"foo\", \"content\")), total);\n    assertEquals(\"invalid number of results for content query\", total.getTotalHits(), indexReader.maxDoc());\n    \n    int numDocIDs = 0;\n    for (AtomicReaderContext context : indexReader.leaves()) {\n      Terms docIDs = context.reader().terms(\"docid\");\n      assertNotNull(docIDs);\n      TermsEnum te = docIDs.iterator(null);\n      while (te.next() != null) {\n        ++numDocIDs;\n      }\n    }\n    assertEquals(\"invalid number of docid terms\", indexReader.maxDoc(), numDocIDs);\n  }\n\n","sourceOld":"  private void verifyNotFacetsData(DirectoryReader indexReader, IndexSearcher searcher) throws IOException {\n    // verify that non facets data was not damaged\n    TotalHitCountCollector total = new TotalHitCountCollector();\n    searcher.search(new PrefixQuery(new Term(\"foo\", \"content\")), total);\n    assertEquals(\"invalid number of results for content query\", total.getTotalHits(), indexReader.maxDoc());\n    \n    int numDocIDs = 0;\n    for (AtomicReaderContext context : indexReader.leaves()) {\n      Terms docIDs = context.reader().terms(\"docid\");\n      assertNotNull(docIDs);\n      TermsEnum te = docIDs.iterator(null);\n      while (te.next() != null) {\n        ++numDocIDs;\n      }\n    }\n    assertEquals(\"invalid number of docid terms\", indexReader.maxDoc(), numDocIDs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}