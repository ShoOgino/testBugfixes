{"path":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.Merger#merge(Object,Context).mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.Merger#merge(Object,Context).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void merge(Object facetResult, Context mcontext) {\n      NamedList<Object> shardData = (NamedList<Object>)facetResult;\n      mergedData.incSizes((Long)shardData.remove(FG_SIZE), (Long)shardData.remove(BG_SIZE));\n      mergedData.incCounts((Long)shardData.remove(FG_COUNT), (Long)shardData.remove(BG_COUNT));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["22d2c45da6e47ff0ada29a8f98566b76f0b278de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.Merger#merge(Object,Context).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.Merger#merge(Object,Context).mjava","sourceNew":"    @Override\n    public void merge(Object facetResult, Context mcontext) {\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> shardData = (NamedList<Object>)facetResult;\n      mergedData.incSizes((Long)shardData.remove(FG_SIZE), (Long)shardData.remove(BG_SIZE));\n      mergedData.incCounts((Long)shardData.remove(FG_COUNT), (Long)shardData.remove(BG_COUNT));\n    }\n\n","sourceOld":"    @Override\n    public void merge(Object facetResult, Context mcontext) {\n      NamedList<Object> shardData = (NamedList<Object>)facetResult;\n      mergedData.incSizes((Long)shardData.remove(FG_SIZE), (Long)shardData.remove(BG_SIZE));\n      mergedData.incCounts((Long)shardData.remove(FG_COUNT), (Long)shardData.remove(BG_COUNT));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22d2c45da6e47ff0ada29a8f98566b76f0b278de","date":1591372739,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.Merger#merge(Object,Context).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.Merger#merge(Object,Context).mjava","sourceNew":"    @Override\n    public void merge(Object facetResult, Context mcontext) {\n      @SuppressWarnings({\"unchecked\"})\n      final NamedList<Object> shardData = (NamedList<Object>)facetResult;\n      \n      final boolean shardImplied = Optional.ofNullable((Boolean)shardData.remove(IMPLIED_KEY)).orElse(false);\n      \n      // regardless of wether this shard is implied, we want to know it's size info...\n      mergedData.incSizes((Long)shardData.remove(FG_SIZE), (Long)shardData.remove(BG_SIZE));\n\n      if (! shardImplied) {\n        // only merge in counts from non-implied shard buckets...\n        mergedData.incCounts((Long)shardData.remove(FG_COUNT), (Long)shardData.remove(BG_COUNT));\n      } else {\n        // if this shard is implied, we shouldn't have even gotten counts...\n        assert shardImplied;\n        assert null == shardData.remove(FG_COUNT);\n        assert null == shardData.remove(BG_COUNT);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(Object facetResult, Context mcontext) {\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> shardData = (NamedList<Object>)facetResult;\n      mergedData.incSizes((Long)shardData.remove(FG_SIZE), (Long)shardData.remove(BG_SIZE));\n      mergedData.incCounts((Long)shardData.remove(FG_COUNT), (Long)shardData.remove(BG_COUNT));\n    }\n\n","bugFix":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58dba38d0c9777f300cca9dd3c150fe2d244742","date":1599661188,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.Merger#merge(Object,Context).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg.Merger#merge(Object,Context).mjava","sourceNew":"    @Override\n    public void merge(Object facetResult, Context mcontext) {\n      @SuppressWarnings({\"unchecked\"})\n      final NamedList<Object> shardData = (NamedList<Object>)facetResult;\n\n      final boolean shardImplied = Objects.requireNonNullElse((Boolean)shardData.remove(IMPLIED_KEY), false);\n      \n      // regardless of whether this shard is implied, we want to know its size info...\n      mergedData.incSizes((Long)shardData.remove(FG_SIZE), (Long)shardData.remove(BG_SIZE));\n\n      if (! shardImplied) {\n        // only merge in counts from non-implied shard buckets...\n        mergedData.incCounts((Long)shardData.remove(FG_COUNT), (Long)shardData.remove(BG_COUNT));\n      } else {\n        // if this shard is implied, we shouldn't have even gotten counts...\n        assert shardImplied;\n        assert null == shardData.remove(FG_COUNT);\n        assert null == shardData.remove(BG_COUNT);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(Object facetResult, Context mcontext) {\n      @SuppressWarnings({\"unchecked\"})\n      final NamedList<Object> shardData = (NamedList<Object>)facetResult;\n      \n      final boolean shardImplied = Optional.ofNullable((Boolean)shardData.remove(IMPLIED_KEY)).orElse(false);\n      \n      // regardless of wether this shard is implied, we want to know it's size info...\n      mergedData.incSizes((Long)shardData.remove(FG_SIZE), (Long)shardData.remove(BG_SIZE));\n\n      if (! shardImplied) {\n        // only merge in counts from non-implied shard buckets...\n        mergedData.incCounts((Long)shardData.remove(FG_COUNT), (Long)shardData.remove(BG_COUNT));\n      } else {\n        // if this shard is implied, we shouldn't have even gotten counts...\n        assert shardImplied;\n        assert null == shardData.remove(FG_COUNT);\n        assert null == shardData.remove(BG_COUNT);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22d2c45da6e47ff0ada29a8f98566b76f0b278de":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["22d2c45da6e47ff0ada29a8f98566b76f0b278de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58dba38d0c9777f300cca9dd3c150fe2d244742"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"22d2c45da6e47ff0ada29a8f98566b76f0b278de":["d58dba38d0c9777f300cca9dd3c150fe2d244742"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["22d2c45da6e47ff0ada29a8f98566b76f0b278de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}