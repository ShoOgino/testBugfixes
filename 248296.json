{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestVariableResolverEndToEnd#test().mjava","commits":[{"id":"d30d20145e9c54b7890711c3307fade007068e9f","date":1354032746,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestVariableResolverEndToEnd#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    h.query(\"/dataimport\", generateRequest());\n    SolrQueryRequest req = null;\n    try {\n      req = req(\"q\", \"*:*\", \"wt\", \"json\", \"indent\", \"true\");\n      String response = h.query(req);\n      log.debug(response);\n      response = response.replaceAll(\"\\\\s\",\"\");\n      Assert.assertTrue(response.contains(\"\\\"numFound\\\":1\"));\n      Pattern p = Pattern.compile(\"[\\\"]second1_s[\\\"][:][\\\"](.*?)[\\\"]\");\n      Matcher m = p.matcher(response);\n      Assert.assertTrue(m.find());\n      String yearStr = m.group(1);\n      Assert.assertTrue(response.contains(\"\\\"second1_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"second2_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"second3_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"PORK_s\\\":\\\"GRILL\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"FISH_s\\\":\\\"FRY\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"BEEF_CUTS_mult_s\\\":[\\\"ROUND\\\",\\\"SIRLOIN\\\"]\"));\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      req.close();\n    }\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestVariableResolverEndToEnd#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    h.query(\"/dataimport\", generateRequest());\n    SolrQueryRequest req = null;\n    try {\n      req = req(\"q\", \"*:*\", \"wt\", \"json\", \"indent\", \"true\");\n      String response = h.query(req);\n      log.debug(response);\n      response = response.replaceAll(\"\\\\s\",\"\");\n      Assert.assertTrue(response.contains(\"\\\"numFound\\\":1\"));\n      Pattern p = Pattern.compile(\"[\\\"]second1_s[\\\"][:][\\\"](.*?)[\\\"]\");\n      Matcher m = p.matcher(response);\n      Assert.assertTrue(m.find());\n      String yearStr = m.group(1);\n      Assert.assertTrue(response.contains(\"\\\"second1_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"second2_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"second3_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"PORK_s\\\":\\\"GRILL\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"FISH_s\\\":\\\"FRY\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"BEEF_CUTS_mult_s\\\":[\\\"ROUND\\\",\\\"SIRLOIN\\\"]\"));\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      req.close();\n    }\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestVariableResolverEndToEnd#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test() throws Exception {\n    h.query(\"/dataimport\", generateRequest());\n    SolrQueryRequest req = null;\n    try {\n      req = req(\"q\", \"*:*\", \"wt\", \"json\", \"indent\", \"true\");\n      String response = h.query(req);\n      log.debug(response);\n      response = response.replaceAll(\"\\\\s\",\"\");\n      Assert.assertTrue(response.contains(\"\\\"numFound\\\":1\"));\n      Pattern p = Pattern.compile(\"[\\\"]second1_s[\\\"][:][\\\"](.*?)[\\\"]\");\n      Matcher m = p.matcher(response);\n      Assert.assertTrue(m.find());\n      String yearStr = m.group(1);\n      Assert.assertTrue(response.contains(\"\\\"second1_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"second2_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"second3_s\\\":\\\"\" + yearStr + \"\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"PORK_s\\\":\\\"GRILL\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"FISH_s\\\":\\\"FRY\\\"\"));\n      Assert.assertTrue(response.contains(\"\\\"BEEF_CUTS_mult_s\\\":[\\\"ROUND\\\",\\\"SIRLOIN\\\"]\"));\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      req.close();\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["d30d20145e9c54b7890711c3307fade007068e9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d30d20145e9c54b7890711c3307fade007068e9f"],"d30d20145e9c54b7890711c3307fade007068e9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","d30d20145e9c54b7890711c3307fade007068e9f"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d30d20145e9c54b7890711c3307fade007068e9f":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}