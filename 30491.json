{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpURLConnectionTimeout#openConnectionCheckRedirects(URLConnection).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpURLConnectionTimeout#openConnectionCheckRedirects(URLConnection).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *  opens a stream allowing redirects only to the same host.\n     *\n     *@param  c                Description of Parameter\n     *@return                  Description of the Returned Value\n     *@exception  IOException  Description of Exception\n     */\n    public static InputStream openConnectionCheckRedirects(URLConnection c)\n             throws IOException {\n        boolean redir;\n        int redirects = 0;\n        InputStream in = null;\n\n        do {\n            if (c instanceof HttpURLConnectionTimeout) {\n                ((HttpURLConnectionTimeout) c).setInstanceFollowRedirects(false);\n            }\n\n            // We want to open the input stream before\n            // getting headers, because getHeaderField()\n            // et al swallow IOExceptions.\n            in = c.getInputStream();\n            redir = false;\n\n            if (c instanceof HttpURLConnectionTimeout) {\n                HttpURLConnectionTimeout http = (HttpURLConnectionTimeout) c;\n                int stat = http.getResponseCode();\n                if (stat >= 300 && stat <= 305 &&\n                        stat != HttpURLConnection.HTTP_NOT_MODIFIED) {\n                    URL base = http.getURL();\n                    String loc = http.getHeaderField(\"Location\");\n                    URL target = null;\n                    if (loc != null) {\n                        target = new URL(base, loc);\n                    }\n                    http.disconnect();\n                    if (target == null\n                             || !base.getProtocol().equals(target.getProtocol())\n                             || base.getPort() != target.getPort()\n                             || !HostsEquals(base, target)\n                             || redirects >= 5) {\n                        throw new SecurityException(\"illegal URL redirect\");\n                    }\n                    redir = true;\n                    c = target.openConnection();\n                    redirects++;\n                }\n            }\n        } while (redir);\n        return in;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpURLConnectionTimeout#openConnectionCheckRedirects(URLConnection).mjava","sourceNew":null,"sourceOld":"    /**\n     *  opens a stream allowing redirects only to the same host.\n     *\n     *@param  c                Description of Parameter\n     *@return                  Description of the Returned Value\n     *@exception  IOException  Description of Exception\n     */\n    public static InputStream openConnectionCheckRedirects(URLConnection c)\n             throws IOException {\n        boolean redir;\n        int redirects = 0;\n        InputStream in = null;\n\n        do {\n            if (c instanceof HttpURLConnectionTimeout) {\n                ((HttpURLConnectionTimeout) c).setInstanceFollowRedirects(false);\n            }\n\n            // We want to open the input stream before\n            // getting headers, because getHeaderField()\n            // et al swallow IOExceptions.\n            in = c.getInputStream();\n            redir = false;\n\n            if (c instanceof HttpURLConnectionTimeout) {\n                HttpURLConnectionTimeout http = (HttpURLConnectionTimeout) c;\n                int stat = http.getResponseCode();\n                if (stat >= 300 && stat <= 305 &&\n                        stat != HttpURLConnection.HTTP_NOT_MODIFIED) {\n                    URL base = http.getURL();\n                    String loc = http.getHeaderField(\"Location\");\n                    URL target = null;\n                    if (loc != null) {\n                        target = new URL(base, loc);\n                    }\n                    http.disconnect();\n                    if (target == null\n                             || !base.getProtocol().equals(target.getProtocol())\n                             || base.getPort() != target.getPort()\n                             || !HostsEquals(base, target)\n                             || redirects >= 5) {\n                        throw new SecurityException(\"illegal URL redirect\");\n                    }\n                    redir = true;\n                    c = target.openConnection();\n                    redirects++;\n                }\n            }\n        } while (redir);\n        return in;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}