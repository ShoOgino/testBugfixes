{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceHandler#getDistance(int,double,double,double,double).mjava","commits":[{"id":"04a4a94db1eb59c8583adb166acfe686a031bedc","date":1230622637,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceHandler#getDistance(int,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  public double getDistance(int docid, double centerLat, double centerLng, double lat, double lng){\n  \n    // check to see if we have distances\n    // if not calculate the distance\n    if(distances == null){\n      return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n    }\n    \n    // check to see if the doc id has a cached distance\n    Double docd = distances.get( docid );\n    if (docd != null){\n      return docd.doubleValue();\n    }\n    \n    //check to see if we have a precision code\n    // and if another lat/long has been calculated at\n    // that rounded location\n    if (precise != null) {\n      double xLat = getPrecision(lat, precise);\n      double xLng = getPrecision(lng, precise);\n      \n      String k = new Double(xLat).toString() +\",\"+ new Double(xLng).toString();\n    \n      Double d = (distances.get(k));\n      if (d != null){\n        return d.doubleValue();\n      }\n    }\n    \n    //all else fails calculate the distances    \n    return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["22a37fe467fde71ff3c72a02547128cb17a2dc45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22a37fe467fde71ff3c72a02547128cb17a2dc45","date":1252551347,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceHandler#getDistance(int,double,double,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceHandler#getDistance(int,double,double,double,double).mjava","sourceNew":"  public double getDistance(int docid, double centerLat, double centerLng, double lat, double lng){\n  \n    // check to see if we have distances\n    // if not calculate the distance\n    if(distances == null){\n      return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n    }\n    \n    // check to see if the doc id has a cached distance\n    Double docd = distances.get( docid );\n    if (docd != null){\n      return docd.doubleValue();\n    }\n    \n    //check to see if we have a precision code\n    // and if another lat/long has been calculated at\n    // that rounded location\n    if (precise != null) {\n      double xLat = getPrecision(lat, precise);\n      double xLng = getPrecision(lng, precise);\n      \n      String k = new Double(xLat).toString() +\",\"+ new Double(xLng).toString();\n    \n      Double d = (distanceLookupCache.get(k));\n      if (d != null){\n        return d.doubleValue();\n      }\n    }\n    \n    //all else fails calculate the distances    \n    return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n  }\n\n","sourceOld":"  public double getDistance(int docid, double centerLat, double centerLng, double lat, double lng){\n  \n    // check to see if we have distances\n    // if not calculate the distance\n    if(distances == null){\n      return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n    }\n    \n    // check to see if the doc id has a cached distance\n    Double docd = distances.get( docid );\n    if (docd != null){\n      return docd.doubleValue();\n    }\n    \n    //check to see if we have a precision code\n    // and if another lat/long has been calculated at\n    // that rounded location\n    if (precise != null) {\n      double xLat = getPrecision(lat, precise);\n      double xLng = getPrecision(lng, precise);\n      \n      String k = new Double(xLat).toString() +\",\"+ new Double(xLng).toString();\n    \n      Double d = (distances.get(k));\n      if (d != null){\n        return d.doubleValue();\n      }\n    }\n    \n    //all else fails calculate the distances    \n    return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n  }\n\n","bugFix":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceHandler#getDistance(int,double,double,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceHandler#getDistance(int,double,double,double,double).mjava","sourceNew":"  public double getDistance(int docid, double centerLat, double centerLng, double lat, double lng){\n  \n    // check to see if we have distances\n    // if not calculate the distance\n    if(distances == null){\n      return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n    }\n    \n    // check to see if the doc id has a cached distance\n    Double docd = distances.get( docid );\n    if (docd != null){\n      return docd.doubleValue();\n    }\n    \n    //check to see if we have a precision code\n    // and if another lat/long has been calculated at\n    // that rounded location\n    if (precise != null) {\n      double xLat = getPrecision(lat, precise);\n      double xLng = getPrecision(lng, precise);\n      \n      String k = Double.valueOf(xLat).toString() +\",\"+ Double.valueOf(xLng).toString();\n    \n      Double d = (distanceLookupCache.get(k));\n      if (d != null){\n        return d.doubleValue();\n      }\n    }\n    \n    //all else fails calculate the distances    \n    return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n  }\n\n","sourceOld":"  public double getDistance(int docid, double centerLat, double centerLng, double lat, double lng){\n  \n    // check to see if we have distances\n    // if not calculate the distance\n    if(distances == null){\n      return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n    }\n    \n    // check to see if the doc id has a cached distance\n    Double docd = distances.get( docid );\n    if (docd != null){\n      return docd.doubleValue();\n    }\n    \n    //check to see if we have a precision code\n    // and if another lat/long has been calculated at\n    // that rounded location\n    if (precise != null) {\n      double xLat = getPrecision(lat, precise);\n      double xLng = getPrecision(lng, precise);\n      \n      String k = new Double(xLat).toString() +\",\"+ new Double(xLng).toString();\n    \n      Double d = (distanceLookupCache.get(k));\n      if (d != null){\n        return d.doubleValue();\n      }\n    }\n    \n    //all else fails calculate the distances    \n    return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceHandler#getDistance(int,double,double,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceHandler#getDistance(int,double,double,double,double).mjava","sourceNew":"  public double getDistance(int docid, double centerLat, double centerLng, double lat, double lng){\n  \n    // check to see if we have distances\n    // if not calculate the distance\n    if(distances == null){\n      return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n    }\n    \n    // check to see if the doc id has a cached distance\n    Double docd = distances.get( docid );\n    if (docd != null){\n      return docd.doubleValue();\n    }\n    \n    //check to see if we have a precision code\n    // and if another lat/long has been calculated at\n    // that rounded location\n    if (precise != null) {\n      double xLat = getPrecision(lat, precise);\n      double xLng = getPrecision(lng, precise);\n      \n      String k = Double.valueOf(xLat).toString() +\",\"+ Double.valueOf(xLng).toString();\n    \n      Double d = (distanceLookupCache.get(k));\n      if (d != null){\n        return d.doubleValue();\n      }\n    }\n    \n    //all else fails calculate the distances    \n    return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n  }\n\n","sourceOld":"  public double getDistance(int docid, double centerLat, double centerLng, double lat, double lng){\n  \n    // check to see if we have distances\n    // if not calculate the distance\n    if(distances == null){\n      return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n    }\n    \n    // check to see if the doc id has a cached distance\n    Double docd = distances.get( docid );\n    if (docd != null){\n      return docd.doubleValue();\n    }\n    \n    //check to see if we have a precision code\n    // and if another lat/long has been calculated at\n    // that rounded location\n    if (precise != null) {\n      double xLat = getPrecision(lat, precise);\n      double xLng = getPrecision(lng, precise);\n      \n      String k = Double.valueOf(xLat).toString() +\",\"+ Double.valueOf(xLng).toString();\n    \n      Double d = (distanceLookupCache.get(k));\n      if (d != null){\n        return d.doubleValue();\n      }\n    }\n    \n    //all else fails calculate the distances    \n    return DistanceUtils.getInstance().getDistanceMi(centerLat, centerLng, lat, lng);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22a37fe467fde71ff3c72a02547128cb17a2dc45":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"6bcde5e3f23911110baa101ed062b544162825b5":["22a37fe467fde71ff3c72a02547128cb17a2dc45"],"04a4a94db1eb59c8583adb166acfe686a031bedc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6bcde5e3f23911110baa101ed062b544162825b5"]},"commit2Childs":{"22a37fe467fde71ff3c72a02547128cb17a2dc45":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"04a4a94db1eb59c8583adb166acfe686a031bedc":["22a37fe467fde71ff3c72a02547128cb17a2dc45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}