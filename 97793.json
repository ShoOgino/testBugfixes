{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","commits":[{"id":"0b5f2c825882b5378afd6f911e0d1cd0274b7410","date":1378970050,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion().mjava","sourceNew":"  protected void confirmShardDeletion(String shard) throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", shard) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","sourceOld":"  protected void confirmShardDeletion() throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = null;\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", SHARD1) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","sourceNew":"  protected void confirmShardDeletion(String shard) throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState();\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", shard) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","sourceOld":"  protected void confirmShardDeletion(String shard) throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", shard) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","sourceNew":"  protected void confirmShardDeletion(String shard) throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    int counter = 10;\n    while (counter-- > 0) {\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", shard) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","sourceOld":"  protected void confirmShardDeletion(String shard) throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState();\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", shard) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","sourceNew":null,"sourceOld":"  protected void confirmShardDeletion(String shard) throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    int counter = 10;\n    while (counter-- > 0) {\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", shard) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","sourceNew":null,"sourceOld":"  protected void confirmShardDeletion(String shard) throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    int counter = 10;\n    while (counter-- > 0) {\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", shard) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}