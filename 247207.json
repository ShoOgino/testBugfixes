{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","commits":[{"id":"f69a077aa0edfe2a493dbd264bccf9b44af3d17c","date":1356330270,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90213788e5007cc5e2b3d88200a8265de9d4e6d4","date":1359060940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir, FacetIndexingParams fip) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir, FacetIndexingParams fip) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["811cdb4a80352766eb0c762e48972707a924e5cd"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["f69a077aa0edfe2a493dbd264bccf9b44af3d17c"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"f69a077aa0edfe2a493dbd264bccf9b44af3d17c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["07155cdd910937cdf6877e48884d5782845c8b8b","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"811cdb4a80352766eb0c762e48972707a924e5cd":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["90213788e5007cc5e2b3d88200a8265de9d4e6d4","07155cdd910937cdf6877e48884d5782845c8b8b"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f69a077aa0edfe2a493dbd264bccf9b44af3d17c":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f69a077aa0edfe2a493dbd264bccf9b44af3d17c"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"811cdb4a80352766eb0c762e48972707a924e5cd":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}