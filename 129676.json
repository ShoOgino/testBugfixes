{"path":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    CloudState cloudState = new CloudState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(cloudState);\n    \n    CloudState loadedCloudState = CloudState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedCloudState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedCloudState = CloudState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n\n    loadedCloudState = CloudState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    CloudState cloudState = new CloudState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(cloudState);\n    \n    CloudState loadedCloudState = CloudState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedCloudState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedCloudState = CloudState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n\n    loadedCloudState = CloudState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b456de5d7facbce08ccaf1f4fac0b71a5bf39add","date":1348087324,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes,null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes,null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes,null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c543b4f6989a86c0d59dfe26e92c767b5045603a","date":1386588149,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates,zkStateReaderMock);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes,zkStateReaderMock);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes, getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes,getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes,null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes,null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes,null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates,zkStateReaderMock);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes,zkStateReaderMock);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes, getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes,getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(null, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(null, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates,zkStateReaderMock);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes,zkStateReaderMock);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes, getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes,getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,Replica> sliceToProps = new HashMap<String,Replica>();\n    Map<String,Object> props = new HashMap<String,Object>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates,zkStateReaderMock);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes,zkStateReaderMock);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes, getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes,getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates,zkStateReaderMock);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes,zkStateReaderMock);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes, getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes,getMockZkStateReader(Collections.<String>emptySet()));\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates,zkStateReaderMock);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes,zkStateReaderMock,null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes, getMockZkStateReader(Collections.<String>emptySet()),null );\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes,getMockZkStateReader(Collections.<String>emptySet()),null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates,zkStateReaderMock);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes,zkStateReaderMock,null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes, getMockZkStateReader(Collections.<String>emptySet()),null );\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes,getMockZkStateReader(Collections.<String>emptySet()),null);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n    ZkStateReader zkStateReaderMock = getMockZkStateReader(collectionStates.keySet());\n    \n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","bugFix":["e9974f61802aea1d15849a1053f88f5e89fc32b4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"node_name\", \"node1:10000_solr\");\n    props.put(\"core\", \"core1\");\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"node_name\", \"node1:10000_solr\");\n    props.put(\"core\", \"core1\");\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.createFromJson(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.createFromJson(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.createFromJson(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<>();\n    Map<String,Replica> sliceToProps = new HashMap<>();\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"node_name\", \"node1:10000_solr\");\n    props.put(\"core\", \"core1\");\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps, null, \"collection1\");\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n    collectionStates.put(\"collection2\", new DocCollection(\"collection2\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    // System.out.println(\"#################### \" + new String(bytes));\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollectionsMap().size());\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop1\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop1\"));\n    assertEquals(\"Properties not copied properly\", replica.getStr(\"prop2\"), loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getReplicasMap().get(\"node1\").getStr(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(-1, new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n\n    loadedClusterState = ClusterState.load(-1, (byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollectionsMap().size());\n  }\n\n","bugFix":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["344b0840364d990b29b97467bfcc766ff8325d11","6681d02f2302c363be938426e68f8dfd090cc1bf"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["c5a558d54519c651068ddb202f03befefb1514a7"],"344b0840364d990b29b97467bfcc766ff8325d11":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["344b0840364d990b29b97467bfcc766ff8325d11"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["b693a83132c9e45afcd564fd65a25b60ed80388b","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c543b4f6989a86c0d59dfe26e92c767b5045603a":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["73450c0955930295d34703e7ddbfc6973b7a121a"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"b456de5d7facbce08ccaf1f4fac0b71a5bf39add":["fa64435b5902ce266c23755a4a00691a3285dab8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c543b4f6989a86c0d59dfe26e92c767b5045603a"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"73450c0955930295d34703e7ddbfc6973b7a121a":["b693a83132c9e45afcd564fd65a25b60ed80388b","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["b693a83132c9e45afcd564fd65a25b60ed80388b","73450c0955930295d34703e7ddbfc6973b7a121a"],"fa64435b5902ce266c23755a4a00691a3285dab8":["da94fd5fcff99442877e118f00fb42094b59f497"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b456de5d7facbce08ccaf1f4fac0b71a5bf39add","c5a558d54519c651068ddb202f03befefb1514a7"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","344b0840364d990b29b97467bfcc766ff8325d11"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"c5a558d54519c651068ddb202f03befefb1514a7":["b456de5d7facbce08ccaf1f4fac0b71a5bf39add"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c5a558d54519c651068ddb202f03befefb1514a7","c543b4f6989a86c0d59dfe26e92c767b5045603a"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"da94fd5fcff99442877e118f00fb42094b59f497":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["c543b4f6989a86c0d59dfe26e92c767b5045603a"],"344b0840364d990b29b97467bfcc766ff8325d11":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c543b4f6989a86c0d59dfe26e92c767b5045603a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"b456de5d7facbce08ccaf1f4fac0b71a5bf39add":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","7dc08f02757dd10637b16a5c65eaaef839a91a9a"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["b456de5d7facbce08ccaf1f4fac0b71a5bf39add"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"c5a558d54519c651068ddb202f03befefb1514a7":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","407687e67faf6e1f02a211ca078d8e3eed631027","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"da94fd5fcff99442877e118f00fb42094b59f497":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","c7869f64c874ebf7f317d22c00baf2b6857797a6","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","7dc08f02757dd10637b16a5c65eaaef839a91a9a","407687e67faf6e1f02a211ca078d8e3eed631027","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}