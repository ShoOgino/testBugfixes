{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.MergeReader#next().mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.MergeReader#next().mjava","pathOld":"/dev/null","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.MergeReader#next().mjava","pathOld":"/dev/null","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.MergeReader#next().mjava","sourceNew":null,"sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0e7448656541edc407546460641f47950451b16"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["c0e7448656541edc407546460641f47950451b16","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}