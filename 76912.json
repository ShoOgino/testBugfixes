{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","commits":[{"id":"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","date":1445865000,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      LeafCollector singleClauseCollector, Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, singleClauseCollector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c82b0d4b7bf499a159eeff92add20bac6599cc1","date":1465223716,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","sourceNew":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      LeafCollector singleClauseCollector, Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, collector, singleClauseCollector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","sourceOld":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      LeafCollector singleClauseCollector, Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, singleClauseCollector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","bugFix":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","sourceNew":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      LeafCollector singleClauseCollector, Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, collector, singleClauseCollector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","sourceOld":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      LeafCollector singleClauseCollector, Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, singleClauseCollector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","sourceNew":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, collector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","sourceOld":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      LeafCollector singleClauseCollector, Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, collector, singleClauseCollector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","sourceNew":null,"sourceOld":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      LeafCollector singleClauseCollector, Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, singleClauseCollector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["7c82b0d4b7bf499a159eeff92add20bac6599cc1","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"191128ac5b85671b1671e2c857437694283b6ebf":["c8a0e442f7b61f811680273b25da95994a724466"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}