{"path":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getSourceType(String).mjava","sourceNew":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","sourceOld":"  /**\n   * Determines what type of value source the expression represents.\n   * \n   * @param expression The expression representing the desired ValueSource\n   * @return NUMBER_TYPE, DATE_TYPE, STRING_TYPE or -1\n   */\n  private static int getSourceType(String expression) {\n    int paren = expression.indexOf('(');\n    if (paren<0) {\n      return FIELD_TYPE;\n    }\n    String operation = expression.substring(0,paren).trim();\n\n    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)) {\n      return NUMBER_TYPE;\n    } else if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)) {\n      return DATE_TYPE;\n    } else if (AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return STRING_TYPE;\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return FILTER_TYPE;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" in [\"+expression+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["ff403346522eaa9de75403763e297e83a3ea585c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}