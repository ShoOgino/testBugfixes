{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new StringReader(likeText), fieldName);\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new StringReader(likeText), fieldName);\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4c215b0bf13f9a31643569e356468a5f1aee809","date":1401781915,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new StringReader(likeText), fieldName);\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanQuery.Builder newBq = new BooleanQuery.Builder();\n    newBq.setDisableCoord(bq.isCoordDisabled());\n    for (BooleanClause clause : bq) {\n      newBq.add(clause);\n    }\n    //make at least half the terms match\n    newBq.setMinimumNumberShouldMatch((int) (bq.clauses().size() * percentTermsToMatch));\n    Query rewritten = newBq.build();\n    rewritten.setBoost(bq.getBoost());\n    return rewritten;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanQuery.Builder newBq = new BooleanQuery.Builder();\n    newBq.setDisableCoord(bq.isCoordDisabled());\n    for (BooleanClause clause : bq) {\n      newBq.add(clause);\n    }\n    //make at least half the terms match\n    newBq.setMinimumNumberShouldMatch((int) (bq.clauses().size() * percentTermsToMatch));\n    return newBq.build();\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanQuery.Builder newBq = new BooleanQuery.Builder();\n    newBq.setDisableCoord(bq.isCoordDisabled());\n    for (BooleanClause clause : bq) {\n      newBq.add(clause);\n    }\n    //make at least half the terms match\n    newBq.setMinimumNumberShouldMatch((int) (bq.clauses().size() * percentTermsToMatch));\n    Query rewritten = newBq.build();\n    rewritten.setBoost(bq.getBoost());\n    return rewritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanQuery.Builder newBq = new BooleanQuery.Builder();\n    for (BooleanClause clause : bq) {\n      newBq.add(clause);\n    }\n    //make at least half the terms match\n    newBq.setMinimumNumberShouldMatch((int) (bq.clauses().size() * percentTermsToMatch));\n    return newBq.build();\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanQuery.Builder newBq = new BooleanQuery.Builder();\n    newBq.setDisableCoord(bq.isCoordDisabled());\n    for (BooleanClause clause : bq) {\n      newBq.add(clause);\n    }\n    //make at least half the terms match\n    newBq.setMinimumNumberShouldMatch((int) (bq.clauses().size() * percentTermsToMatch));\n    return newBq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanQuery.Builder newBq = new BooleanQuery.Builder();\n    for (BooleanClause clause : bq) {\n      newBq.add(clause);\n    }\n    //make at least half the terms match\n    newBq.setMinimumNumberShouldMatch((int) (bq.clauses().size() * percentTermsToMatch));\n    return newBq.build();\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(fieldName, new StringReader(likeText));\n    BooleanQuery.Builder newBq = new BooleanQuery.Builder();\n    newBq.setDisableCoord(bq.isCoordDisabled());\n    for (BooleanClause clause : bq) {\n      newBq.add(clause);\n    }\n    //make at least half the terms match\n    newBq.setMinimumNumberShouldMatch((int) (bq.clauses().size() * percentTermsToMatch));\n    return newBq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c8a0e442f7b61f811680273b25da95994a724466":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}