{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Node).mjava","sourceNew":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     */\n    protected abstract void visitScanned(Cell cell) throws IOException;\n\n","sourceOld":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     */\n    protected abstract void visitScanned(Node cell) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55594c8c43c6898b2092b0f1a1310df52521a44a","date":1421338017,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","sourceNew":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visit(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      if (queryShape.relate(cell.getShape()).intersects()) {\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visit(cell);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     */\n    protected abstract void visitScanned(Cell cell) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","sourceNew":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visit(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      if (queryShape.relate(cell.getShape()).intersects()) {\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visit(cell);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","sourceNew":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visit(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      if (queryShape.relate(cell.getShape()).intersects()) {\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visit(cell);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#visitScanned(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#visitScanned(Cell).mjava","sourceNew":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The cell is either indexed as a leaf or is the last level of detail. It\n     * might not even intersect the query shape, so be sure to check for that.\n     * The default implementation will check that and if passes then call\n     * {@link #visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)} or\n     * {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void visitScanned(Cell cell) throws IOException {\n      final SpatialRelation relate = cell.getShape().relate(queryShape);\n      if (relate.intersects()) {\n        cell.setShapeRel(relate);//just being pedantic\n        if (cell.isLeaf()) {\n          visitLeaf(cell);\n        } else {\n          visitPrefix(cell);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["55594c8c43c6898b2092b0f1a1310df52521a44a","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["55594c8c43c6898b2092b0f1a1310df52521a44a"],"55594c8c43c6898b2092b0f1a1310df52521a44a":["8259c159da2de2e8528524fb76b244b46cbded59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","672b198fc3dce868916c727917cae58c2906763d"],"55594c8c43c6898b2092b0f1a1310df52521a44a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"8259c159da2de2e8528524fb76b244b46cbded59":["55594c8c43c6898b2092b0f1a1310df52521a44a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}