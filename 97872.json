{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader#Lucene60DimensionalReader(SegmentReadState).mjava","commits":[{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader#Lucene60DimensionalReader(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor */\n  public Lucene60DimensionalReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60DimensionalFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60DimensionalFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60DimensionalFormat.CODEC_NAME,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        readers.put(fieldNumber, new BKDReader(dataIn));\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader#Lucene60DimensionalReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader#Lucene60DimensionalReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene60DimensionalReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60DimensionalFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60DimensionalFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60DimensionalFormat.CODEC_NAME,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n        //reader.verify(readState.segmentInfo.maxDoc());\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene60DimensionalReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60DimensionalFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60DimensionalFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60DimensionalFormat.CODEC_NAME,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        readers.put(fieldNumber, new BKDReader(dataIn));\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader#Lucene60DimensionalReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60PointFormat.CODEC_NAME,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n        //reader.verify(readState.segmentInfo.maxDoc());\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene60DimensionalReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60DimensionalFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60DimensionalFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60DimensionalFormat.CODEC_NAME,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n        //reader.verify(readState.segmentInfo.maxDoc());\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}