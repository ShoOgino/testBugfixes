{"path":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"/dev/null","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    Query query1 = makeQuery(queryText);\n    BooleanQuery.setUseScorer14(true);\n    Hits hits1 = searcher.search(query1);\n\n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    BooleanQuery.setUseScorer14(false);\n    Hits hits2 = searcher.search(query2);\n\n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs, this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56b47d7ef702892600c875ce48ffbdd5701bb3f3","date":1115407780,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    Query query1 = makeQuery(queryText);\n    BooleanQuery.setUseScorer14(true);\n    Hits hits1 = searcher.search(query1);\n\n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    BooleanQuery.setUseScorer14(false);\n    Hits hits2 = searcher.search(query2);\n\n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    Query query1 = makeQuery(queryText);\n    BooleanQuery.setUseScorer14(true);\n    Hits hits1 = searcher.search(query1);\n\n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    BooleanQuery.setUseScorer14(false);\n    Hits hits2 = searcher.search(query2);\n\n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ea6fc03e82fd6d988bc20c201471202ceca0f0e","date":1131291148,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    try {\n      Query query1 = makeQuery(queryText);\n      BooleanQuery.setUseScorer14(true);\n      Hits hits1 = searcher.search(query1);\n\n      Query query2 = makeQuery(queryText); // there should be no need to parse again...\n      BooleanQuery.setUseScorer14(false);\n      Hits hits2 = searcher.search(query2);\n\n      CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n    } finally { // even when a test fails.\n      BooleanQuery.setUseScorer14(false);\n    }\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    Query query1 = makeQuery(queryText);\n    BooleanQuery.setUseScorer14(true);\n    Hits hits1 = searcher.search(query1);\n\n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    BooleanQuery.setUseScorer14(false);\n    Hits hits2 = searcher.search(query2);\n\n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6212677fdd165340d4284ad2530970c664042d6e","date":1180380790,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    try {\n      Query query1 = makeQuery(queryText);\n      BooleanQuery.setAllowDocsOutOfOrder(true);\n      Hits hits1 = searcher.search(query1);\n\n      Query query2 = makeQuery(queryText); // there should be no need to parse again...\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n      Hits hits2 = searcher.search(query2);\n\n      CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    try {\n      Query query1 = makeQuery(queryText);\n      BooleanQuery.setUseScorer14(true);\n      Hits hits1 = searcher.search(query1);\n\n      Query query2 = makeQuery(queryText); // there should be no need to parse again...\n      BooleanQuery.setUseScorer14(false);\n      Hits hits2 = searcher.search(query2);\n\n      CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n    } finally { // even when a test fails.\n      BooleanQuery.setUseScorer14(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    try {\n      Query query1 = makeQuery(queryText);\n      BooleanQuery.setAllowDocsOutOfOrder(true);\n      ScoreDoc[] hits1 = searcher.search(query1, null, 1000).scoreDocs;\n\n      Query query2 = makeQuery(queryText); // there should be no need to parse again...\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n      ScoreDoc[] hits2 = searcher.search(query2, null, 1000).scoreDocs;\n\n      CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    try {\n      Query query1 = makeQuery(queryText);\n      BooleanQuery.setAllowDocsOutOfOrder(true);\n      Hits hits1 = searcher.search(query1);\n\n      Query query2 = makeQuery(queryText); // there should be no need to parse again...\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n      Hits hits2 = searcher.search(query2);\n\n      CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"131a9e895609b4da33662dc087e0bc6303e1e29c","date":1255458397,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n    try {\n      Query query1 = makeQuery(queryText);\n      BooleanQuery.setAllowDocsOutOfOrder(true);\n      ScoreDoc[] hits1 = searcher.search(query1, null, 1000).scoreDocs;\n\n      Query query2 = makeQuery(queryText); // there should be no need to parse again...\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n      ScoreDoc[] hits2 = searcher.search(query2, null, 1000).scoreDocs;\n\n      CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n    } finally { // even when a test fails.\n      BooleanQuery.setAllowDocsOutOfOrder(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97358022f8fb21ca48fc5f2eb205c98a484e2174","date":1255525101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query1, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#queriesTest(String,int[]).mjava","sourceNew":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query1, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","sourceOld":"  public void queriesTest(String queryText, int[] expDocNrs) throws Exception {\n//System.out.println();\n//System.out.println(\"Query: \" + queryText);\n\n    Query query1 = makeQuery(queryText);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, false);\n    searcher.search(query1, null, collector);\n    ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n    \n    Query query2 = makeQuery(queryText); // there should be no need to parse again...\n    collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query2, null, collector);\n    ScoreDoc[] hits2 = collector.topDocs().scoreDocs; \n\n    assertEquals(mulFactor * collector.totalHits,\n                 bigSearcher.search(query1, 1).totalHits);\n      \n    CheckHits.checkHitsQuery(query2, hits1, hits2, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97358022f8fb21ca48fc5f2eb205c98a484e2174":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"56b47d7ef702892600c875ce48ffbdd5701bb3f3":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"5ea6fc03e82fd6d988bc20c201471202ceca0f0e":["56b47d7ef702892600c875ce48ffbdd5701bb3f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["6212677fdd165340d4284ad2530970c664042d6e"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"6212677fdd165340d4284ad2530970c664042d6e":["5ea6fc03e82fd6d988bc20c201471202ceca0f0e"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["97358022f8fb21ca48fc5f2eb205c98a484e2174"]},"commit2Childs":{"97358022f8fb21ca48fc5f2eb205c98a484e2174":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"56b47d7ef702892600c875ce48ffbdd5701bb3f3":["5ea6fc03e82fd6d988bc20c201471202ceca0f0e"],"5ea6fc03e82fd6d988bc20c201471202ceca0f0e":["6212677fdd165340d4284ad2530970c664042d6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["97358022f8fb21ca48fc5f2eb205c98a484e2174"],"6212677fdd165340d4284ad2530970c664042d6e":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["56b47d7ef702892600c875ce48ffbdd5701bb3f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}