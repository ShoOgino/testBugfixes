{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b538dc75c275415cfba029900b48590b36b3b68","date":1339713606,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11","date":1367321736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      if (nextChildDoc == prevParentDoc) {\n        throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n      }\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a16b40feb4e6e0d55c1716733bde48296bedd20","date":1400540388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      // System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      // System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      } else {\n        // System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      if (nextChildDoc == prevParentDoc) {\n        throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n      }\n\n      final int nd = nextDoc();\n      // System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      if (nextChildDoc == prevParentDoc) {\n        throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n      }\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d580256eea4ca9a38636dd2ab5ed1c51f2dfea0","date":1400749734,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      if (nextChildDoc == prevParentDoc) {\n        throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n      }\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      // System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      // System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      } else {\n        // System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      if (nextChildDoc == prevParentDoc) {\n        throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n      }\n\n      final int nd = nextDoc();\n      // System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      if (nextChildDoc == prevParentDoc) {\n        throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n      }\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a16b40feb4e6e0d55c1716733bde48296bedd20":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["6b538dc75c275415cfba029900b48590b36b3b68"],"6b538dc75c275415cfba029900b48590b36b3b68":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"7d580256eea4ca9a38636dd2ab5ed1c51f2dfea0":["0a16b40feb4e6e0d55c1716733bde48296bedd20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"0a16b40feb4e6e0d55c1716733bde48296bedd20":["7d580256eea4ca9a38636dd2ab5ed1c51f2dfea0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6b538dc75c275415cfba029900b48590b36b3b68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["0a16b40feb4e6e0d55c1716733bde48296bedd20","7dd748bb245633a8195281556bb0e68a6ea97d18"],"6b538dc75c275415cfba029900b48590b36b3b68":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d580256eea4ca9a38636dd2ab5ed1c51f2dfea0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7d580256eea4ca9a38636dd2ab5ed1c51f2dfea0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}