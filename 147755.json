{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastEndOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastEndOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastEndOffset = endOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaBuffer, payOut);\n        writeBlock(offsetLengthBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaBuffer, payOut);\n        writeBlock(offsetLengthBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastEndOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastEndOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastEndOffset = endOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaBuffer, payOut);\n        writeBlock(offsetLengthBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaBuffer, payOut);\n        writeBlock(offsetLengthBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (DEBUG) {\n      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaBuffer, payOut);\n        writeBlock(offsetLengthBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaBuffer, payOut);\n        writeBlock(offsetLengthBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == blockSize) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaBuffer, payOut);\n        writeBlock(offsetLengthBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      writeBlock(posDeltaBuffer, posOut);\n\n      if (fieldHasPayloads) {\n        writeBlock(payloadLengthBuffer, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        writeBlock(offsetStartDeltaBuffer, payOut);\n        writeBlock(offsetLengthBuffer, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc6cbc7e8693270112e8d40ca98226199c0288e","date":1345039720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n//    if (DEBUG) {\n//      System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n//    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      if (DEBUG) {\n        System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.addPosition pos=\" + position + \" posBufferUpto=\" + posBufferUpto + (fieldHasPayloads ? \" payloadByteUpto=\" + payloadByteUpto: \"\"));\n    // }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (fieldHasPayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (fieldHasOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      // if (DEBUG) {\n      //   System.out.println(\"  write pos bulk block @ fp=\" + posOut.getFilePointer());\n      // }\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (fieldHasPayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (fieldHasOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc6cbc7e8693270112e8d40ca98226199c0288e"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["8081d5018e8846bf4080f2809432c759996e749f"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8081d5018e8846bf4080f2809432c759996e749f":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"8081d5018e8846bf4080f2809432c759996e749f":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["8081d5018e8846bf4080f2809432c759996e749f"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}