{"path":"src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","commits":[{"id":"643874bf353956224e8a9402dd956ccf9c20815a","date":1150480129,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(getSchemaFile());\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile());\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","sourceOld":"  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(getSchemaFile());\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","sourceOld":"  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile());\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testTermVectorFields().mjava","sourceNew":"  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","sourceOld":"  public void testTermVectorFields() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_basictv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector());\n    assertTrue(luf.isTermVectorStored());\n\n    f = ischema.getField(\"test_notv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(!f.storeTermVector());\n    assertTrue(!luf.isTermVectorStored());    \n\n    f = ischema.getField(\"test_postv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions());\n    assertTrue(luf.isStorePositionWithTermVector());\n\n    f = ischema.getField(\"test_offtv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector());\n\n    f = ischema.getField(\"test_posofftv\");\n    luf = f.createField(\"test\", 0f);\n    assertTrue(f.storeTermVector() && f.storeTermPositions() && f.storeTermOffsets());\n    assertTrue(luf.isStoreOffsetWithTermVector() && luf.isStorePositionWithTermVector());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["6d6338c87060be5f66757a94945975f3bbd377a9"],"6d6338c87060be5f66757a94945975f3bbd377a9":["643874bf353956224e8a9402dd956ccf9c20815a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"643874bf353956224e8a9402dd956ccf9c20815a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ad94625fb8d088209f46650c8097196fec67f00c"],"6d6338c87060be5f66757a94945975f3bbd377a9":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["643874bf353956224e8a9402dd956ccf9c20815a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"643874bf353956224e8a9402dd956ccf9c20815a":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}