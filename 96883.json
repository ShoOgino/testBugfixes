{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","commits":[{"id":"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","date":1272391185,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuffer,String,boolean,boolean,String).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuffer buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}