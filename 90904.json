{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5145e7af5e55022ec6ba083c0aef480e49e0d3b","date":1319475599,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"c5145e7af5e55022ec6ba083c0aef480e49e0d3b":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c5145e7af5e55022ec6ba083c0aef480e49e0d3b","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"c5145e7af5e55022ec6ba083c0aef480e49e0d3b":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}