{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","sourceOld":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":null,"sourceOld":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}