{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3de2e9a536c4115b4f53f14b6ab496ba3af1840c","date":1400252137,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":["9faa42f41b6adb98daf009cf99a4ee239189e469","7d89d7e4e5101347833eea558851bf4209218619"],"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private DocIdSetIterator getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*i);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":["9faa42f41b6adb98daf009cf99a4ee239189e469","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private DocIdSetIterator getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*i);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*index);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private DocValuesIterator getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new DocValuesIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*i);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*target);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH);\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        // skip past bytes\n        byte bytes[] = new byte[len];\n        in.readBytes(bytes, 0, len);\n        SimpleTextUtil.readLine(in, scratch); // newline\n        SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n        return scratch.byteAt(0) == (byte) 'T';\n      }\n    };\n  }\n\n","sourceOld":"  private DocIdSetIterator getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*i);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private DocValuesIterator getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new DocValuesIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*i);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*target);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH);\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        // skip past bytes\n        byte bytes[] = new byte[len];\n        in.readBytes(bytes, 0, len);\n        SimpleTextUtil.readLine(in, scratch); // newline\n        SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n        return scratch.byteAt(0) == (byte) 'T';\n      }\n    };\n  }\n\n","sourceOld":"  private DocIdSetIterator getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*i);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getBinaryDocsWithField(FieldInfo).mjava","sourceNew":"  private DocValuesIterator getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new DocValuesIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*i);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*target);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH);\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        // skip past bytes\n        byte bytes[] = new byte[len];\n        in.readBytes(bytes, 0, len);\n        SimpleTextUtil.readLine(in, scratch); // newline\n        SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n        return scratch.byteAt(0) == (byte) 'T';\n      }\n    };\n  }\n\n","sourceOld":"  private DocIdSetIterator getBinaryDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*i);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          // skip past bytes\n          byte bytes[] = new byte[len];\n          in.readBytes(bytes, 0, len);\n          SimpleTextUtil.readLine(in, scratch); // newline\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","7d89d7e4e5101347833eea558851bf4209218619"],"f7558b5077dd4abd457be151475f13b541f4f13e":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9faa42f41b6adb98daf009cf99a4ee239189e469"],"7d89d7e4e5101347833eea558851bf4209218619":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"56572ec06f1407c066d6b7399413178b33176cd8":["7d89d7e4e5101347833eea558851bf4209218619","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","f7558b5077dd4abd457be151475f13b541f4f13e"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["7d89d7e4e5101347833eea558851bf4209218619","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["7d89d7e4e5101347833eea558851bf4209218619"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f7558b5077dd4abd457be151475f13b541f4f13e","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","7d89d7e4e5101347833eea558851bf4209218619"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}