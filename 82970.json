{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c73727a366b38b14bf1b49189864fae45802471d","date":1346162539,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection&lt;Query&gt; of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3cb51ae28f21816e0275d2239d45bc0b272d8e2","date":1346170598,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a {@code Collection<Query>} of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection&lt;Query&gt; of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a {@code Collection<Query>} of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685c242a4f1bc78f1fa61c131bd557355edad6c7","date":1429208182,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a {@code Collection<Query>} of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    Objects.requireNonNull(disjuncts, \"Collection of Querys must not be null\");\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a {@code Collection<Query>} of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a {@code Collection<Query>} of all the disjuncts to add\n   * @param tieBreakerMultiplier  the score of each non-maximum disjunct for a document is multiplied by this weight\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    Objects.requireNonNull(disjuncts, \"Collection of Querys must not be null\");\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    this.disjuncts = disjuncts.toArray(new Query[disjuncts.size()]);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a {@code Collection<Query>} of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    Objects.requireNonNull(disjuncts, \"Collection of Querys must not be null\");\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4874ce841615411ddc4f5998fc9db9a533827976","date":1514294366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a {@code Collection<Query>} of all the disjuncts to add\n   * @param tieBreakerMultiplier  the score of each non-maximum disjunct for a document is multiplied by this weight\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    Objects.requireNonNull(disjuncts, \"Collection of Querys must not be null\");\n    if (tieBreakerMultiplier < 0 || tieBreakerMultiplier > 1) {\n      throw new IllegalArgumentException(\"tieBreakerMultiplier must be in [0, 1]\");\n    }\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    this.disjuncts = disjuncts.toArray(new Query[disjuncts.size()]);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a {@code Collection<Query>} of all the disjuncts to add\n   * @param tieBreakerMultiplier  the score of each non-maximum disjunct for a document is multiplied by this weight\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    Objects.requireNonNull(disjuncts, \"Collection of Querys must not be null\");\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    this.disjuncts = disjuncts.toArray(new Query[disjuncts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4874ce841615411ddc4f5998fc9db9a533827976":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"c73727a366b38b14bf1b49189864fae45802471d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["f3cb51ae28f21816e0275d2239d45bc0b272d8e2"],"f3cb51ae28f21816e0275d2239d45bc0b272d8e2":["c73727a366b38b14bf1b49189864fae45802471d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f3cb51ae28f21816e0275d2239d45bc0b272d8e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4874ce841615411ddc4f5998fc9db9a533827976"]},"commit2Childs":{"4874ce841615411ddc4f5998fc9db9a533827976":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c73727a366b38b14bf1b49189864fae45802471d":["f3cb51ae28f21816e0275d2239d45bc0b272d8e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c73727a366b38b14bf1b49189864fae45802471d","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["4874ce841615411ddc4f5998fc9db9a533827976"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"f3cb51ae28f21816e0275d2239d45bc0b272d8e2":["685c242a4f1bc78f1fa61c131bd557355edad6c7","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}