{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#add(String,String...).mjava","sourceNew":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension again, it's OR'd with the previous\n   *  constraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  // nocommit can we remove FacetLabel here?\n  public void add(String dim, String... path) {\n\n    if (drillDownDims.containsKey(dim)) {\n      merge(dim, path);\n      return;\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = new BooleanQuery(true); // disable coord\n    // nocommit too anal?\n    /*\n    if (path.length == 0) {\n      throw new IllegalArgumentException(\"must have at least one facet label under dim\");\n    }\n    */\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n\n    add(dim, bq);\n  }\n\n","sourceOld":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension again, it's OR'd with the previous\n   *  constraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  // nocommit can we remove FacetLabel here?\n  public void add(String dim, String... path) {\n\n    if (drillDownDims.containsKey(dim)) {\n      merge(dim, path);\n      return;\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = new BooleanQuery(true); // disable coord\n    // nocommit too anal?\n    /*\n    if (path.length == 0) {\n      throw new IllegalArgumentException(\"must have at least one facet label under dim\");\n    }\n    */\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n\n    add(dim, bq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e499df4729e7162d5b39a70b0142e3186a029f","date":1385554050,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","sourceNew":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension more than once it is OR'd with the previous\n   *  cofnstraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  public void add(String dim, String... path) {\n\n    if (drillDownDims.containsKey(dim)) {\n      merge(dim, path);\n      return;\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = new BooleanQuery(true); // disable coord\n    // nocommit too anal?\n    /*\n    if (path.length == 0) {\n      throw new IllegalArgumentException(\"must have at least one facet label under dim\");\n    }\n    */\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n\n    add(dim, bq);\n  }\n\n","sourceOld":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension again, it's OR'd with the previous\n   *  constraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  // nocommit can we remove FacetLabel here?\n  public void add(String dim, String... path) {\n\n    if (drillDownDims.containsKey(dim)) {\n      merge(dim, path);\n      return;\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = new BooleanQuery(true); // disable coord\n    // nocommit too anal?\n    /*\n    if (path.length == 0) {\n      throw new IllegalArgumentException(\"must have at least one facet label under dim\");\n    }\n    */\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n\n    add(dim, bq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","sourceNew":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension more than once it is OR'd with the previous\n   *  cofnstraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  public void add(String dim, String... path) {\n\n    if (drillDownDims.containsKey(dim)) {\n      merge(dim, path);\n      return;\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = new BooleanQuery(true); // disable coord\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n\n    add(dim, bq);\n  }\n\n","sourceOld":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension more than once it is OR'd with the previous\n   *  cofnstraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  public void add(String dim, String... path) {\n\n    if (drillDownDims.containsKey(dim)) {\n      merge(dim, path);\n      return;\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = new BooleanQuery(true); // disable coord\n    // nocommit too anal?\n    /*\n    if (path.length == 0) {\n      throw new IllegalArgumentException(\"must have at least one facet label under dim\");\n    }\n    */\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n\n    add(dim, bq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension more than once it is OR'd with the previous\n   *  cofnstraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  public void add(String dim, String... path) {\n\n    if (drillDownDims.containsKey(dim)) {\n      merge(dim, path);\n      return;\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = new BooleanQuery(true); // disable coord\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n\n    add(dim, bq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","sourceNew":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension more than once it is OR'd with the previous\n   *  cofnstraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  public void add(String dim, String... path) {\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n    add(dim, new TermQuery(term(indexedField, dim, path)));\n  }\n\n","sourceOld":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension more than once it is OR'd with the previous\n   *  cofnstraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  public void add(String dim, String... path) {\n\n    if (drillDownDims.containsKey(dim)) {\n      merge(dim, path);\n      return;\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = new BooleanQuery(true); // disable coord\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n\n    add(dim, bq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#add(String,String...).mjava","sourceNew":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension more than once it is OR'd with the previous\n   *  constraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  public void add(String dim, String... path) {\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n    add(dim, new TermQuery(term(indexedField, dim, path)));\n  }\n\n","sourceOld":"  /** Adds one dimension of drill downs; if you pass the same\n   *  dimension more than once it is OR'd with the previous\n   *  cofnstraints on that dimension, and all dimensions are\n   *  AND'd against each other and the base query. */\n  public void add(String dim, String... path) {\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n    add(dim, new TermQuery(term(indexedField, dim, path)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"b6e499df4729e7162d5b39a70b0142e3186a029f":["21d36d0db865f7b84026b447bec653469a6e66df"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["b6e499df4729e7162d5b39a70b0142e3186a029f"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"b6e499df4729e7162d5b39a70b0142e3186a029f":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["b6e499df4729e7162d5b39a70b0142e3186a029f"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}