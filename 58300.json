{"path":"solr/core/src/java/org/apache/solr/rest/BaseSchemaResource.SolrOutputRepresentation#write(OutputStream).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSchemaResource.SolrOutputRepresentation#write(OutputStream).mjava","pathOld":"/dev/null","sourceNew":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null || charset.equalsIgnoreCase(\"UTF-8\"))\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9272dcea19192a5fb261980a4737677abfcabab3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/BaseSchemaResource.SolrOutputRepresentation#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSchemaResource.SolrOutputRepresentation#write(OutputStream).mjava","sourceNew":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null || charset.equalsIgnoreCase(\"UTF-8\"))\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","sourceOld":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null || charset.equalsIgnoreCase(\"UTF-8\"))\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"]},"commit2Childs":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}