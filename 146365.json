{"path":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testMultivaluedEnumSort().mjava","commits":[{"id":"54ad8c9e9210e008dc7b8ad5a037ff20879150ea","date":1501889566,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testMultivaluedEnumSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultivaluedEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of sorting over multivalued EnumField - see SOLR-11193\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", MV_FIELD_NAME, \"Not Available\"));                // Single value\n    assertU(adoc(\"id\", \"1\", MV_FIELD_NAME, \"Not Available\", MV_FIELD_NAME, \"Critical\"));\n    assertU(adoc(\"id\", \"2\", MV_FIELD_NAME, \"Not Available\", MV_FIELD_NAME, \"Critical\"));\n    assertU(adoc(\"id\", \"3\"));                                                // No values\n    assertU(adoc(\"id\", \"4\"));                                                // No values\n    assertU(adoc(\"id\", \"5\", MV_FIELD_NAME, \"Low\", MV_FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"6\", MV_FIELD_NAME, \"Low\", MV_FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"7\", MV_FIELD_NAME, \"Low\", MV_FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"8\", MV_FIELD_NAME, \"Low\", MV_FIELD_NAME, \"Critical\"));\n    assertU(adoc(\"id\", \"9\", MV_FIELD_NAME, \"Medium\"));                       // Single value\n    assertU(adoc(\"id\", \"10\", MV_FIELD_NAME, \"Medium\", MV_FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"11\", MV_FIELD_NAME, \"Medium\", MV_FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"12\", MV_FIELD_NAME, \"High\", MV_FIELD_NAME, \"Critical\"));\n    assertU(adoc(\"id\", \"13\", MV_FIELD_NAME, \"High\", MV_FIELD_NAME, \"High\")); // Two of same value\n    assertU(adoc(\"id\", \"14\", MV_FIELD_NAME, \"Critical\", MV_FIELD_NAME, \"Medium\", MV_FIELD_NAME, \"Not Available\"));\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + MV_FIELD_NAME, \"q\", \"*:*\", \"sort\", \"field(\" + MV_FIELD_NAME + \",min) desc\", \"indent\",\"on\"),\n        \"//doc[1]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Critical'\",\n        \"//doc[2]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='High'\",\n        \"//doc[3]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Medium'\",\n        \"//doc[6]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Low'\",\n        \"//doc[10]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + MV_FIELD_NAME, \"q\", \"*:*\", \"sort\", \"field(\" + MV_FIELD_NAME + \",min) asc\", \"indent\", \"on\"),\n        \"//doc[3]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + MV_FIELD_NAME, \n        \"q\", MV_FIELD_NAME + \":[* TO *]\" , \"sort\", \"field(\" + MV_FIELD_NAME + \",'min') asc\", \n        \"rows\",\"15\", \"indent\",\"on\"),\n        \"//doc[1]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Not Available'\",\n        \"//doc[5]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Low'\",\n        \"//doc[9]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Medium'\",\n        \"//doc[10]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='High'\",\n        \"//doc[12]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Critical'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testMultivaluedEnumSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultivaluedEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of sorting over multivalued EnumField - see SOLR-11193\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", MV_FIELD_NAME, \"Not Available\"));                // Single value\n    assertU(adoc(\"id\", \"1\", MV_FIELD_NAME, \"Not Available\", MV_FIELD_NAME, \"Critical\"));\n    assertU(adoc(\"id\", \"2\", MV_FIELD_NAME, \"Not Available\", MV_FIELD_NAME, \"Critical\"));\n    assertU(adoc(\"id\", \"3\"));                                                // No values\n    assertU(adoc(\"id\", \"4\"));                                                // No values\n    assertU(adoc(\"id\", \"5\", MV_FIELD_NAME, \"Low\", MV_FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"6\", MV_FIELD_NAME, \"Low\", MV_FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"7\", MV_FIELD_NAME, \"Low\", MV_FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"8\", MV_FIELD_NAME, \"Low\", MV_FIELD_NAME, \"Critical\"));\n    assertU(adoc(\"id\", \"9\", MV_FIELD_NAME, \"Medium\"));                       // Single value\n    assertU(adoc(\"id\", \"10\", MV_FIELD_NAME, \"Medium\", MV_FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"11\", MV_FIELD_NAME, \"Medium\", MV_FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"12\", MV_FIELD_NAME, \"High\", MV_FIELD_NAME, \"Critical\"));\n    assertU(adoc(\"id\", \"13\", MV_FIELD_NAME, \"High\", MV_FIELD_NAME, \"High\")); // Two of same value\n    assertU(adoc(\"id\", \"14\", MV_FIELD_NAME, \"Critical\", MV_FIELD_NAME, \"Medium\", MV_FIELD_NAME, \"Not Available\"));\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + MV_FIELD_NAME, \"q\", \"*:*\", \"sort\", \"field(\" + MV_FIELD_NAME + \",min) desc\", \"indent\",\"on\"),\n        \"//doc[1]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Critical'\",\n        \"//doc[2]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='High'\",\n        \"//doc[3]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Medium'\",\n        \"//doc[6]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Low'\",\n        \"//doc[10]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + MV_FIELD_NAME, \"q\", \"*:*\", \"sort\", \"field(\" + MV_FIELD_NAME + \",min) asc\", \"indent\", \"on\"),\n        \"//doc[3]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + MV_FIELD_NAME, \n        \"q\", MV_FIELD_NAME + \":[* TO *]\" , \"sort\", \"field(\" + MV_FIELD_NAME + \",'min') asc\", \n        \"rows\",\"15\", \"indent\",\"on\"),\n        \"//doc[1]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Not Available'\",\n        \"//doc[5]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Low'\",\n        \"//doc[9]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Medium'\",\n        \"//doc[10]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='High'\",\n        \"//doc[12]/arr[@name='\" + MV_FIELD_NAME + \"']/str/text()='Critical'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}