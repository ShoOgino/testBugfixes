{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}