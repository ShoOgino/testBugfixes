{"path":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","commits":[{"id":"c451686dba22c9c0e2b950b3d4dc9c1cde081887","date":1199826919,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,docs.getNumFound());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeInt(null,docs.getStart());\n\n    if (includeScore) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    for (SolrDocument doc : docs) {\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();      \n      writeSolrDocument(null, doc, fields, otherFields);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17a4a2e432254ad9a50a564dc8ac204f6a50fffb","date":1199891649,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    for (SolrDocument doc : docs) {\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();      \n      writeSolrDocument(null, doc, fields, otherFields);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,docs.getNumFound());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeInt(null,docs.getStart());\n\n    if (includeScore) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    for (SolrDocument doc : docs) {\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();      \n      writeSolrDocument(null, doc, fields, otherFields);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc036b9a71fd0bea4fa51158c11f7104e679902f","date":1215909507,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    for (SolrDocument doc : docs) {\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();      \n      writeSolrDocument(null, doc, fields, otherFields);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    for (SolrDocument doc : docs) {\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();      \n      writeSolrDocument(null, doc, fields, otherFields);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    for (SolrDocument doc : docs) {\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();      \n      writeSolrDocument(null, doc, fields, otherFields);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    for (SolrDocument doc : docs) {\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();      \n      writeSolrDocument(null, doc, fields, otherFields);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["bc036b9a71fd0bea4fa51158c11f7104e679902f"],"bc036b9a71fd0bea4fa51158c11f7104e679902f":["17a4a2e432254ad9a50a564dc8ac204f6a50fffb"],"17a4a2e432254ad9a50a564dc8ac204f6a50fffb":["c451686dba22c9c0e2b950b3d4dc9c1cde081887"],"c451686dba22c9c0e2b950b3d4dc9c1cde081887":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c451686dba22c9c0e2b950b3d4dc9c1cde081887"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"bc036b9a71fd0bea4fa51158c11f7104e679902f":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"17a4a2e432254ad9a50a564dc8ac204f6a50fffb":["bc036b9a71fd0bea4fa51158c11f7104e679902f"],"c451686dba22c9c0e2b950b3d4dc9c1cde081887":["17a4a2e432254ad9a50a564dc8ac204f6a50fffb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}