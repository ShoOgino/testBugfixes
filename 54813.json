{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#fullyDeleteContents(File,boolean).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#fullyDeleteContents(File,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete the contents of a directory, not the directory itself.  If\n   * we return false, the directory may be partially-deleted.\n   * If dir is a symlink to a directory, all the contents of the actual\n   * directory pointed to by dir will be deleted.\n   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this\n   * and all the underlying directories before trying to delete their contents.\n   */\n  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n    if (tryGrantPermissions) {\n      // to be able to list the dir and delete files from it\n      // we must grant the dir rwx permissions:\n      grantPermissions(dir);\n    }\n    boolean deletionSucceeded = true;\n    final File[] contents = dir.listFiles();\n    if (contents != null) {\n      for (int i = 0; i < contents.length; i++) {\n        if (contents[i].isFile()) {\n          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n            deletionSucceeded = false;\n            continue; // continue deletion of other files/dirs under dir\n          }\n        } else {\n          // Either directory or symlink to another directory.\n          // Try deleting the directory as this might be a symlink\n          boolean b = false;\n          b = deleteImpl(contents[i], false);\n          if (b){\n            //this was indeed a symlink or an empty directory\n            continue;\n          }\n          // if not an empty directory or symlink let\n          // fullydelete handle it.\n          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n            deletionSucceeded = false;\n            // continue deletion of other files/dirs under dir\n          }\n        }\n      }\n    }\n    return deletionSucceeded;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#fullyDeleteContents(File,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete the contents of a directory, not the directory itself.  If\n   * we return false, the directory may be partially-deleted.\n   * If dir is a symlink to a directory, all the contents of the actual\n   * directory pointed to by dir will be deleted.\n   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this\n   * and all the underlying directories before trying to delete their contents.\n   */\n  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n    if (tryGrantPermissions) {\n      // to be able to list the dir and delete files from it\n      // we must grant the dir rwx permissions:\n      grantPermissions(dir);\n    }\n    boolean deletionSucceeded = true;\n    final File[] contents = dir.listFiles();\n    if (contents != null) {\n      for (int i = 0; i < contents.length; i++) {\n        if (contents[i].isFile()) {\n          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n            deletionSucceeded = false;\n            continue; // continue deletion of other files/dirs under dir\n          }\n        } else {\n          // Either directory or symlink to another directory.\n          // Try deleting the directory as this might be a symlink\n          boolean b = false;\n          b = deleteImpl(contents[i], false);\n          if (b){\n            //this was indeed a symlink or an empty directory\n            continue;\n          }\n          // if not an empty directory or symlink let\n          // fullydelete handle it.\n          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n            deletionSucceeded = false;\n            // continue deletion of other files/dirs under dir\n          }\n        }\n      }\n    }\n    return deletionSucceeded;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}