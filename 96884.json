{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","commits":[{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> state = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      state = Utils.getDeepCopy(state, 10, false, true);;\n      setState(state);\n      lastState = state;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> state = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      state = Utils.getDeepCopy(state, 10, false, true);;\n      setState(state);\n      lastState = state;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> state = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      state = Utils.getDeepCopy(state, 10, false, true);;\n      setState(state);\n      lastState = state;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> state = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      state = Utils.getDeepCopy(state, 10, false, true);;\n      setState(state);\n      lastState = state;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (clusterDataProvider.hasData(path)) {\n        ClusterDataProvider.VersionedData versionedDat = clusterDataProvider.getData(path);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (clusterDataProvider.hasData(path)) {\n        ClusterDataProvider.VersionedData versionedDat = clusterDataProvider.getData(path);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        data = zkClient.getData(path, null, new Stat(), true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (Exception e) {\n      log.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (AlreadyClosedException e) {\n     \n    } catch (Exception e) {\n      log.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (Exception e) {\n      log.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (AlreadyClosedException e) {\n     \n    } catch (Exception e) {\n      log.warn(\"Exception getting trigger state '{}'\", path, e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (AlreadyClosedException e) {\n     \n    } catch (Exception e) {\n      log.warn(\"Exception getting trigger state '\" + path + \"'\", e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (AlreadyClosedException e) {\n     \n    } catch (Exception e) {\n      log.warn(\"Exception getting trigger state '{}'\", path, e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (AlreadyClosedException e) {\n     \n    } catch (Exception e) {\n      log.warn(\"Exception getting trigger state '{}'\", path, e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#restoreState().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void restoreState() {\n    byte[] data = null;\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        VersionedData versionedData = stateManager.getData(path);\n        data = versionedData.getData();\n      }\n    } catch (AlreadyClosedException e) {\n     \n    } catch (Exception e) {\n      log.warn(\"Exception getting trigger state '{}'\", path, e);\n    }\n    if (data != null) {\n      Map<String, Object> restoredState = (Map<String, Object>)Utils.fromJSON(data);\n      // make sure lastState is sorted\n      restoredState = Utils.getDeepCopy(restoredState, 10, false, true);\n      setState(restoredState);\n      lastState = restoredState;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["664ff2b928393480d9655010aa700656b0fcade0"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","464244264804e3f981bf1fb4b732516d8d62dbc2"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e35f2dde06b35aa9904949a3a93fabd090371077":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"664ff2b928393480d9655010aa700656b0fcade0":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e35f2dde06b35aa9904949a3a93fabd090371077"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c32a8448145a74a8902798f2e63e322827757ff2","664ff2b928393480d9655010aa700656b0fcade0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"e35f2dde06b35aa9904949a3a93fabd090371077":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"664ff2b928393480d9655010aa700656b0fcade0":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}