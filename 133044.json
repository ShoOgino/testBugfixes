{"path":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","commits":[{"id":"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","date":1373484264,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntersection() throws IOException {\n    final int numBits = _TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = _TestUtil.nextInt(random(), 1, 4);\n    final List<FixedBitSet> fixedSets = new ArrayList<FixedBitSet>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<WAH8DocIdSet>(numDocIdSets);\n    for (FixedBitSet set : fixedSets) {\n      compressedSets.add(WAH8DocIdSet.copyOf(set.iterator()));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final FixedBitSet expected = new FixedBitSet(numBits);\n    expected.set(0, expected.length());\n    for (DocIdSet set : fixedSets) {\n      final DocIdSetIterator it = set.iterator();\n      int lastDoc = -1;\n      for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n        expected.clear(lastDoc + 1, doc);\n        lastDoc = doc;\n      }\n      if (lastDoc + 1 < expected.length()) {\n        expected.clear(lastDoc + 1, expected.length());\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7581da3051efe8071ae92ac7eca27a270bc4611e","date":1373613227,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","sourceNew":"  public void testIntersection() throws IOException {\n    final int numBits = _TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = _TestUtil.nextInt(random(), 1, 4);\n    final List<BitSet> fixedSets = new ArrayList<BitSet>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<WAH8DocIdSet>(numDocIdSets);\n    for (BitSet set : fixedSets) {\n      compressedSets.add(copyOf(set, numBits));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final BitSet expected = new BitSet(numBits);\n    expected.set(0, expected.size());\n    for (BitSet set : fixedSets) {\n      for (int previousDoc = -1, doc = set.nextSetBit(0); ; previousDoc = doc, doc = set.nextSetBit(doc + 1)) {\n        if (doc == -1) {\n          expected.clear(previousDoc + 1, set.size());\n          break;\n        } else {\n          expected.clear(previousDoc + 1, doc);\n        }\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","sourceOld":"  public void testIntersection() throws IOException {\n    final int numBits = _TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = _TestUtil.nextInt(random(), 1, 4);\n    final List<FixedBitSet> fixedSets = new ArrayList<FixedBitSet>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<WAH8DocIdSet>(numDocIdSets);\n    for (FixedBitSet set : fixedSets) {\n      compressedSets.add(WAH8DocIdSet.copyOf(set.iterator()));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final FixedBitSet expected = new FixedBitSet(numBits);\n    expected.set(0, expected.length());\n    for (DocIdSet set : fixedSets) {\n      final DocIdSetIterator it = set.iterator();\n      int lastDoc = -1;\n      for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n        expected.clear(lastDoc + 1, doc);\n        lastDoc = doc;\n      }\n      if (lastDoc + 1 < expected.length()) {\n        expected.clear(lastDoc + 1, expected.length());\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntersection() throws IOException {\n    final int numBits = _TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = _TestUtil.nextInt(random(), 1, 4);\n    final List<BitSet> fixedSets = new ArrayList<BitSet>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<WAH8DocIdSet>(numDocIdSets);\n    for (BitSet set : fixedSets) {\n      compressedSets.add(copyOf(set, numBits));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final BitSet expected = new BitSet(numBits);\n    expected.set(0, expected.size());\n    for (BitSet set : fixedSets) {\n      for (int previousDoc = -1, doc = set.nextSetBit(0); ; previousDoc = doc, doc = set.nextSetBit(doc + 1)) {\n        if (doc == -1) {\n          expected.clear(previousDoc + 1, set.size());\n          break;\n        } else {\n          expected.clear(previousDoc + 1, doc);\n        }\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","sourceNew":"  public void testIntersection() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = TestUtil.nextInt(random(), 1, 4);\n    final List<BitSet> fixedSets = new ArrayList<BitSet>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<WAH8DocIdSet>(numDocIdSets);\n    for (BitSet set : fixedSets) {\n      compressedSets.add(copyOf(set, numBits));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final BitSet expected = new BitSet(numBits);\n    expected.set(0, expected.size());\n    for (BitSet set : fixedSets) {\n      for (int previousDoc = -1, doc = set.nextSetBit(0); ; previousDoc = doc, doc = set.nextSetBit(doc + 1)) {\n        if (doc == -1) {\n          expected.clear(previousDoc + 1, set.size());\n          break;\n        } else {\n          expected.clear(previousDoc + 1, doc);\n        }\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","sourceOld":"  public void testIntersection() throws IOException {\n    final int numBits = _TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = _TestUtil.nextInt(random(), 1, 4);\n    final List<BitSet> fixedSets = new ArrayList<BitSet>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<WAH8DocIdSet>(numDocIdSets);\n    for (BitSet set : fixedSets) {\n      compressedSets.add(copyOf(set, numBits));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final BitSet expected = new BitSet(numBits);\n    expected.set(0, expected.size());\n    for (BitSet set : fixedSets) {\n      for (int previousDoc = -1, doc = set.nextSetBit(0); ; previousDoc = doc, doc = set.nextSetBit(doc + 1)) {\n        if (doc == -1) {\n          expected.clear(previousDoc + 1, set.size());\n          break;\n        } else {\n          expected.clear(previousDoc + 1, doc);\n        }\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","sourceNew":"  public void testIntersection() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = TestUtil.nextInt(random(), 1, 4);\n    final List<BitSet> fixedSets = new ArrayList<>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<>(numDocIdSets);\n    for (BitSet set : fixedSets) {\n      compressedSets.add(copyOf(set, numBits));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final BitSet expected = new BitSet(numBits);\n    expected.set(0, expected.size());\n    for (BitSet set : fixedSets) {\n      for (int previousDoc = -1, doc = set.nextSetBit(0); ; previousDoc = doc, doc = set.nextSetBit(doc + 1)) {\n        if (doc == -1) {\n          expected.clear(previousDoc + 1, set.size());\n          break;\n        } else {\n          expected.clear(previousDoc + 1, doc);\n        }\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","sourceOld":"  public void testIntersection() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = TestUtil.nextInt(random(), 1, 4);\n    final List<BitSet> fixedSets = new ArrayList<BitSet>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<WAH8DocIdSet>(numDocIdSets);\n    for (BitSet set : fixedSets) {\n      compressedSets.add(copyOf(set, numBits));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final BitSet expected = new BitSet(numBits);\n    expected.set(0, expected.size());\n    for (BitSet set : fixedSets) {\n      for (int previousDoc = -1, doc = set.nextSetBit(0); ; previousDoc = doc, doc = set.nextSetBit(doc + 1)) {\n        if (doc == -1) {\n          expected.clear(previousDoc + 1, set.size());\n          break;\n        } else {\n          expected.clear(previousDoc + 1, doc);\n        }\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","sourceNew":null,"sourceOld":"  public void testIntersection() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = TestUtil.nextInt(random(), 1, 4);\n    final List<BitSet> fixedSets = new ArrayList<>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<>(numDocIdSets);\n    for (BitSet set : fixedSets) {\n      compressedSets.add(copyOf(set, numBits));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final BitSet expected = new BitSet(numBits);\n    expected.set(0, expected.size());\n    for (BitSet set : fixedSets) {\n      for (int previousDoc = -1, doc = set.nextSetBit(0); ; previousDoc = doc, doc = set.nextSetBit(doc + 1)) {\n        if (doc == -1) {\n          expected.clear(previousDoc + 1, set.size());\n          break;\n        } else {\n          expected.clear(previousDoc + 1, doc);\n        }\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#testIntersection().mjava","sourceNew":null,"sourceOld":"  public void testIntersection() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    final int numDocIdSets = TestUtil.nextInt(random(), 1, 4);\n    final List<BitSet> fixedSets = new ArrayList<>(numDocIdSets);\n    for (int i = 0; i < numDocIdSets; ++i) {\n      fixedSets.add(randomSet(numBits, random().nextFloat()));\n    }\n    final List<WAH8DocIdSet> compressedSets = new ArrayList<>(numDocIdSets);\n    for (BitSet set : fixedSets) {\n      compressedSets.add(copyOf(set, numBits));\n    }\n\n    final WAH8DocIdSet union = WAH8DocIdSet.intersect(compressedSets);\n    final BitSet expected = new BitSet(numBits);\n    expected.set(0, expected.size());\n    for (BitSet set : fixedSets) {\n      for (int previousDoc = -1, doc = set.nextSetBit(0); ; previousDoc = doc, doc = set.nextSetBit(doc + 1)) {\n        if (doc == -1) {\n          expected.clear(previousDoc + 1, set.size());\n          break;\n        } else {\n          expected.clear(previousDoc + 1, doc);\n        }\n      }\n    }\n    assertEquals(numBits, expected, union);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"55980207f1977bd1463465de1659b821347e2fa8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7581da3051efe8071ae92ac7eca27a270bc4611e"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6613659748fe4411a7dcf85266e55db1f95f7315":["7581da3051efe8071ae92ac7eca27a270bc4611e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7581da3051efe8071ae92ac7eca27a270bc4611e":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"]},"commit2Childs":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["7581da3051efe8071ae92ac7eca27a270bc4611e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["55980207f1977bd1463465de1659b821347e2fa8","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"55980207f1977bd1463465de1659b821347e2fa8":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}