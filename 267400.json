{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n    fillBuffer(str, input);\n    matcher = pattern.matcher(str);\n    index = 0;\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n    fillBuffer(str, input);\n    matcher = pattern.matcher(str);\n    index = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a92b21feea3b1b4d7ad5a06439333c4f757318f","date":1333977928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n    fillBuffer(str, input);\n    matcher = pattern.matcher(str);\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    index = 0;\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n    fillBuffer(str, input);\n    matcher = pattern.matcher(str);\n    index = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa80f9e702afc991a8bf3849ab7ad5cde710ed86","date":1333990076,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    fillBuffer(str, input);\n    matcher.reset(str);\n    index = 0;\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n    fillBuffer(str, input);\n    matcher = pattern.matcher(str);\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    index = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    fillBuffer(str, input);\n    matcher.reset(str);\n    index = 0;\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n    fillBuffer(str, input);\n    matcher = pattern.matcher(str);\n    index = 0;\n  }\n\n","bugFix":["28e349236232860728fc91596fa4a1ec2c64bde6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#PatternTokenizer(Reader,Pattern,int).mjava","sourceNew":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    fillBuffer(str, input);\n    matcher.reset(str);\n    index = 0;\n  }\n\n","sourceOld":"  /** creates a new PatternTokenizer returning tokens from group (-1 for split functionality) */\n  public PatternTokenizer(Reader input, Pattern pattern, int group) throws IOException {\n    super(input);\n    this.pattern = pattern;\n    this.group = group;\n\n    // Use \"\" instead of str so don't consume chars\n    // (fillBuffer) from the input on throwing IAE below:\n    matcher = pattern.matcher(\"\");\n\n    // confusingly group count depends ENTIRELY on the pattern but is only accessible via matcher\n    if (group >= 0 && group > matcher.groupCount()) {\n      throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n    }\n    fillBuffer(str, input);\n    matcher.reset(str);\n    index = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aa80f9e702afc991a8bf3849ab7ad5cde710ed86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa80f9e702afc991a8bf3849ab7ad5cde710ed86":["5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"aa80f9e702afc991a8bf3849ab7ad5cde710ed86":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["aa80f9e702afc991a8bf3849ab7ad5cde710ed86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}