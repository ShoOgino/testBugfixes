{"path":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testPullOneTermsEnum().mjava","commits":[{"id":"830a7b9be2f498e249b346796921c94cdd39d98f","date":1484639518,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testPullOneTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testPullOneTermsEnumPerField().mjava","sourceNew":"  public void testPullOneTermsEnum() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<BytesRef> terms = new ArrayList<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermInSetQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      terms.add(term);\n    }\n\n    assertEquals(0, new IndexSearcher(wrapped).count(new TermInSetQuery(\"bar\", terms)));\n    assertEquals(0, counter.get()); // missing field\n    new IndexSearcher(wrapped).count(new TermInSetQuery(\"foo\", terms));\n    assertEquals(1, counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPullOneTermsEnumPerField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    doc.add(new StringField(\"bar\", \"2\", Store.NO));\n    doc.add(new StringField(\"baz\", \"3\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<Term> terms = new ArrayList<>();\n    final Set<String> fields = new HashSet<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermInSetQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final String field = RandomPicks.randomFrom(random(), new String[] {\"foo\", \"bar\", \"baz\"});\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      fields.add(field);\n      terms.add(new Term(field, term));\n    }\n\n    new IndexSearcher(wrapped).count(new TermInSetQuery(terms));\n    assertEquals(fields.size(), counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testPullOneTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testPullOneTermsEnumPerField().mjava","sourceNew":"  public void testPullOneTermsEnum() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<BytesRef> terms = new ArrayList<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermInSetQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      terms.add(term);\n    }\n\n    assertEquals(0, new IndexSearcher(wrapped).count(new TermInSetQuery(\"bar\", terms)));\n    assertEquals(0, counter.get()); // missing field\n    new IndexSearcher(wrapped).count(new TermInSetQuery(\"foo\", terms));\n    assertEquals(1, counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPullOneTermsEnumPerField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    doc.add(new StringField(\"bar\", \"2\", Store.NO));\n    doc.add(new StringField(\"baz\", \"3\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<Term> terms = new ArrayList<>();\n    final Set<String> fields = new HashSet<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermInSetQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final String field = RandomPicks.randomFrom(random(), new String[] {\"foo\", \"bar\", \"baz\"});\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      fields.add(field);\n      terms.add(new Term(field, term));\n    }\n\n    new IndexSearcher(wrapped).count(new TermInSetQuery(terms));\n    assertEquals(fields.size(), counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"830a7b9be2f498e249b346796921c94cdd39d98f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["830a7b9be2f498e249b346796921c94cdd39d98f"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","830a7b9be2f498e249b346796921c94cdd39d98f"]},"commit2Childs":{"830a7b9be2f498e249b346796921c94cdd39d98f":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["830a7b9be2f498e249b346796921c94cdd39d98f","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}