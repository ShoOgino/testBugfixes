{"path":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"325bbca4044b6777f17a523df80a19260a80d67e","date":1341423988,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"724efd21e6b657f902571a8fbe9d7a60711bb2c0","date":1341482116,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":["0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ff6d29b386d9d2fe7848cf6a9175ba42276a00b","date":1343584789,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":["724efd21e6b657f902571a8fbe9d7a60711bb2c0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfoPerCommit si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfoPerCommit si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfoPerCommit siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfoPerCommit siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfoPerCommit siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.shutdown();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.shutdown();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.shutdown();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.shutdown();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.shutdown();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.shutdown();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.shutdown();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.shutdown();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n        // this test itself deletes files (has no retry mechanism)\n        ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n        // this test itself deletes files (has no retry mechanism)\n        ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n        // this test itself deletes files (has no retry mechanism)\n        ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n        // this test itself deletes files (has no retry mechanism)\n        ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n        // this test itself deletes files (has no retry mechanism)\n        ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n        // this test itself deletes files (has no retry mechanism)\n        ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n        // this test itself deletes files (has no retry mechanism)\n        ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n\n      if (directory instanceof MockDirectoryWrapper) {\n        // We create unreferenced files (we don't even write\n        // a segments file):\n        ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n        // this test itself deletes files (has no retry mechanism)\n        ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n      }\n\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"_merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test executes a number of merges and compares the contents of\n   *  the segments created when using compound file or not using one.\n   *\n   *  TODO: the original test used to print the segment contents to System.out\n   *        for visual validation. To have the same effect, a new method\n   *        checkSegment(String name, ...) should be created that would\n   *        assert various things about the segment.\n   */\n  public void testIndexAndMerge() throws Exception {\n    StringWriter sw = new StringWriter();\n    PrintWriter out = new PrintWriter(sw, true);\n      \n    Directory directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    IndexWriter writer = new IndexWriter(\n                                         directory,\n                                         newIndexWriterConfig(new MockAnalyzer(random())).\n                                         setOpenMode(OpenMode.CREATE).\n                                         setMaxBufferedDocs(-1).\n                                         setMergePolicy(newLogMergePolicy(10))\n                                         );\n\n    SegmentCommitInfo si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    SegmentCommitInfo si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    SegmentCommitInfo siMerge = merge(directory, si1, si2, \"_merge\", false);\n    printSegment(out, siMerge);\n\n    SegmentCommitInfo siMerge2 = merge(directory, si1, si2, \"_merge2\", false);\n    printSegment(out, siMerge2);\n\n    SegmentCommitInfo siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", false);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n\n    String multiFileOutput = sw.toString();\n    //System.out.println(multiFileOutput);\n\n    sw = new StringWriter();\n    out = new PrintWriter(sw, true);\n\n    directory = newFSDirectory(indexDir);\n\n    if (directory instanceof MockDirectoryWrapper) {\n      // We create unreferenced files (we don't even write\n      // a segments file):\n      ((MockDirectoryWrapper) directory).setAssertNoUnrefencedFilesOnClose(false);\n      // this test itself deletes files (has no retry mechanism)\n      ((MockDirectoryWrapper) directory).setEnableVirusScanner(false);\n    }\n\n    writer = new IndexWriter(\n                             directory,\n                             newIndexWriterConfig(new MockAnalyzer(random())).\n                             setOpenMode(OpenMode.CREATE).\n                             setMaxBufferedDocs(-1).\n                             setMergePolicy(newLogMergePolicy(10))\n                             );\n\n    si1 = indexDoc(writer, \"test.txt\");\n    printSegment(out, si1);\n\n    si2 = indexDoc(writer, \"test2.txt\");\n    printSegment(out, si2);\n    writer.close();\n\n    siMerge = merge(directory, si1, si2, \"_merge\", true);\n    printSegment(out, siMerge);\n\n    siMerge2 = merge(directory, si1, si2, \"_merge2\", true);\n    printSegment(out, siMerge2);\n\n    siMerge3 = merge(directory, siMerge, siMerge2, \"_merge3\", true);\n    printSegment(out, siMerge3);\n      \n    directory.close();\n    out.close();\n    sw.close();\n    String singleFileOutput = sw.toString();\n\n    assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"724efd21e6b657f902571a8fbe9d7a60711bb2c0":["325bbca4044b6777f17a523df80a19260a80d67e"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["9eae2a56dc810a17cf807d831f720dec931a03de"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9eae2a56dc810a17cf807d831f720dec931a03de":["0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["5faf65b6692f15cca0f87bf8666c87899afc619f","b470f36a9372c97283360b1304eacbde22df6c0d"],"285cdc737de75b7cc7c284a156b20214deb67bca":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["5faf65b6692f15cca0f87bf8666c87899afc619f","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"d06343967a29132f5d782f74e8d0988400278a02":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"0ff6d29b386d9d2fe7848cf6a9175ba42276a00b":["724efd21e6b657f902571a8fbe9d7a60711bb2c0"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5faf65b6692f15cca0f87bf8666c87899afc619f","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"325bbca4044b6777f17a523df80a19260a80d67e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["724efd21e6b657f902571a8fbe9d7a60711bb2c0","0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["285cdc737de75b7cc7c284a156b20214deb67bca"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d06343967a29132f5d782f74e8d0988400278a02"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"724efd21e6b657f902571a8fbe9d7a60711bb2c0":["0ff6d29b386d9d2fe7848cf6a9175ba42276a00b","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["d06343967a29132f5d782f74e8d0988400278a02"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9eae2a56dc810a17cf807d831f720dec931a03de":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285cdc737de75b7cc7c284a156b20214deb67bca":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["285cdc737de75b7cc7c284a156b20214deb67bca"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","325bbca4044b6777f17a523df80a19260a80d67e"],"0ff6d29b386d9d2fe7848cf6a9175ba42276a00b":["9eae2a56dc810a17cf807d831f720dec931a03de","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d06343967a29132f5d782f74e8d0988400278a02":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"325bbca4044b6777f17a523df80a19260a80d67e":["724efd21e6b657f902571a8fbe9d7a60711bb2c0"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["9d153abcf92dc5329d98571a8c3035df9bd80648","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}