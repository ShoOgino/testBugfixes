{"path":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","commits":[{"id":"b08da0118b8113cffc8f260d0a6c137013c65568","date":1494064335,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Number)\n      return new NumericMerger();\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Number)\n      return new NumericMerger();\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"730fe41fb3af5691ad519dc6da96240c41ef187f","date":1504632797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","sourceNew":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Double)\n      return new NumericMerger(); // still use NumericMerger to handle NaN?\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","sourceOld":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Number)\n      return new NumericMerger();\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","sourceNew":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Double)\n      return new NumericMerger(); // still use NumericMerger to handle NaN?\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","sourceOld":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Number)\n      return new NumericMerger();\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","sourceNew":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Double)\n      return new NumericMerger(); // still use NumericMerger to handle NaN?\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","sourceOld":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Number)\n      return new NumericMerger();\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createFacetMerger(Object).mjava","sourceNew":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Double)\n      return new NumericMerger(); // still use NumericMerger to handle NaN?\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","sourceOld":"  @Override\n  public FacetMerger createFacetMerger(Object prototype) {\n    if (prototype instanceof Number)\n      return new NumericMerger();\n    else if (prototype instanceof Comparable) {\n      return new ComparableMerger();\n    } else {\n      throw new UnsupportedOperationException(\"min/max merge of \" + prototype);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["b08da0118b8113cffc8f260d0a6c137013c65568","730fe41fb3af5691ad519dc6da96240c41ef187f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b08da0118b8113cffc8f260d0a6c137013c65568"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["e9017cf144952056066919f1ebc7897ff9bd71b1","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["b08da0118b8113cffc8f260d0a6c137013c65568","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"730fe41fb3af5691ad519dc6da96240c41ef187f":["b08da0118b8113cffc8f260d0a6c137013c65568"],"b08da0118b8113cffc8f260d0a6c137013c65568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"730fe41fb3af5691ad519dc6da96240c41ef187f":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"b08da0118b8113cffc8f260d0a6c137013c65568":["b21283ed01203901a7257aa4b7f0a0899c86e56e","e9017cf144952056066919f1ebc7897ff9bd71b1","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","730fe41fb3af5691ad519dc6da96240c41ef187f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","b08da0118b8113cffc8f260d0a6c137013c65568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}