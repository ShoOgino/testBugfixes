{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSetters().mjava","commits":[{"id":"c7211b1fba79597955a78855e9f646de9248ca57","date":1345763711,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSetters().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetters() {\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    \n    tmp.setMaxMergedSegmentMB(0.5);\n    assertEquals(0.5, tmp.getMaxMergedSegmentMB(), EPSILON);\n    \n    tmp.setMaxMergedSegmentMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxMergedSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setMaxMergedSegmentMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxMergedSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setMaxMergedSegmentMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    tmp.setFloorSegmentMB(2.0);\n    assertEquals(2.0, tmp.getFloorSegmentMB(), EPSILON);\n    \n    tmp.setFloorSegmentMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getFloorSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setFloorSegmentMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getFloorSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setFloorSegmentMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    tmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, tmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    tmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSetters().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetters() {\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    \n    tmp.setMaxMergedSegmentMB(0.5);\n    assertEquals(0.5, tmp.getMaxMergedSegmentMB(), EPSILON);\n    \n    tmp.setMaxMergedSegmentMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxMergedSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setMaxMergedSegmentMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxMergedSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setMaxMergedSegmentMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    tmp.setFloorSegmentMB(2.0);\n    assertEquals(2.0, tmp.getFloorSegmentMB(), EPSILON);\n    \n    tmp.setFloorSegmentMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getFloorSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setFloorSegmentMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getFloorSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setFloorSegmentMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    tmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, tmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    tmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSetters().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSetters().mjava","sourceNew":"  public void testSetters() {\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    \n    tmp.setMaxMergedSegmentMB(0.5);\n    assertEquals(0.5, tmp.getMaxMergedSegmentMB(), EPSILON);\n    \n    tmp.setMaxMergedSegmentMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxMergedSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setMaxMergedSegmentMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxMergedSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      tmp.setMaxMergedSegmentMB(-2.0);\n    });\n    \n    tmp.setFloorSegmentMB(2.0);\n    assertEquals(2.0, tmp.getFloorSegmentMB(), EPSILON);\n    \n    tmp.setFloorSegmentMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getFloorSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setFloorSegmentMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getFloorSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      tmp.setFloorSegmentMB(-2.0);\n    });\n    \n    tmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, tmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    tmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      tmp.setMaxCFSSegmentSizeMB(-2.0);\n    });\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","sourceOld":"  public void testSetters() {\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    \n    tmp.setMaxMergedSegmentMB(0.5);\n    assertEquals(0.5, tmp.getMaxMergedSegmentMB(), EPSILON);\n    \n    tmp.setMaxMergedSegmentMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxMergedSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setMaxMergedSegmentMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxMergedSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setMaxMergedSegmentMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    tmp.setFloorSegmentMB(2.0);\n    assertEquals(2.0, tmp.getFloorSegmentMB(), EPSILON);\n    \n    tmp.setFloorSegmentMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getFloorSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setFloorSegmentMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getFloorSegmentMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setFloorSegmentMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    tmp.setMaxCFSSegmentSizeMB(2.0);\n    assertEquals(2.0, tmp.getMaxCFSSegmentSizeMB(), EPSILON);\n    \n    tmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    tmp.setMaxCFSSegmentSizeMB(Long.MAX_VALUE/1024/1024.);\n    assertEquals(Long.MAX_VALUE/1024/1024., tmp.getMaxCFSSegmentSizeMB(), EPSILON*Long.MAX_VALUE);\n    \n    try {\n      tmp.setMaxCFSSegmentSizeMB(-2.0);\n      fail(\"Didn't throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    // TODO: Add more checks for other non-double setters!\n  }\n\n","bugFix":["c7211b1fba79597955a78855e9f646de9248ca57"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7211b1fba79597955a78855e9f646de9248ca57"],"c7211b1fba79597955a78855e9f646de9248ca57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["c7211b1fba79597955a78855e9f646de9248ca57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","c7211b1fba79597955a78855e9f646de9248ca57"],"c7211b1fba79597955a78855e9f646de9248ca57":["001b25b42373b22a52f399dbf072f1224632e8e6","05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}