{"path":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName, flushState.numDocs, directory);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  oldRAMSize=\" + numBytesUsed +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName, flushState.numDocs, directory);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  oldRAMSize=\" + numBytesUsed +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":null,"sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName, flushState.numDocs, directory);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  oldRAMSize=\" + numBytesUsed +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}