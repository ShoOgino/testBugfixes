{"path":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#testBKDBasic().mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#testBKDBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBKDBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n\n    BKD3DTreeWriter w = new BKD3DTreeWriter();\n\n    w.add(0, 0, 0, 0);\n    w.add(1, 1, 1, 1);\n    w.add(-1, -1, -1, 2);\n\n    long indexFP = w.finish(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n    in.seek(indexFP);\n    BKD3DTreeReader r = new BKD3DTreeReader(in, 3);\n\n    DocIdSet hits = r.intersect(Integer.MIN_VALUE, Integer.MAX_VALUE,\n                                Integer.MIN_VALUE, Integer.MAX_VALUE,\n                                Integer.MIN_VALUE, Integer.MAX_VALUE,\n\n                                new BKD3DTreeReader.ValueFilter() {\n\n                                  @Override\n                                  public boolean accept(int docID) {\n                                    return true;\n                                  }\n\n                                  @Override\n                                  public BKD3DTreeReader.Relation compare(int xMin, int xMax,\n                                                          int yMin, int yMax,\n                                                          int zMin, int zMax) {\n                                    return BKD3DTreeReader.Relation.SHAPE_INSIDE_CELL;\n                                  }\n\n                                });\n    DocIdSetIterator disi = hits.iterator();\n    assertEquals(0, disi.nextDoc());\n    assertEquals(1, disi.nextDoc());\n    assertEquals(2, disi.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#testBKDBasic().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#testBKDBasic().mjava","sourceNew":"  public void testBKDBasic() throws Exception {\n    Directory dir = getDirectory();\n    IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n\n    BKD3DTreeWriter w = new BKD3DTreeWriter(dir, \"bkd3d\");\n\n    w.add(0, 0, 0, 0);\n    w.add(1, 1, 1, 1);\n    w.add(-1, -1, -1, 2);\n\n    long indexFP = w.finish(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n    in.seek(indexFP);\n    BKD3DTreeReader r = new BKD3DTreeReader(in, 3);\n\n    DocIdSet hits = r.intersect(Integer.MIN_VALUE, Integer.MAX_VALUE,\n                                Integer.MIN_VALUE, Integer.MAX_VALUE,\n                                Integer.MIN_VALUE, Integer.MAX_VALUE,\n\n                                new BKD3DTreeReader.ValueFilter() {\n\n                                  @Override\n                                  public boolean accept(int docID) {\n                                    return true;\n                                  }\n\n                                  @Override\n                                  public BKD3DTreeReader.Relation compare(int xMin, int xMax,\n                                                          int yMin, int yMax,\n                                                          int zMin, int zMax) {\n                                    return BKD3DTreeReader.Relation.SHAPE_INSIDE_CELL;\n                                  }\n\n                                });\n    DocIdSetIterator disi = hits.iterator();\n    assertEquals(0, disi.nextDoc());\n    assertEquals(1, disi.nextDoc());\n    assertEquals(2, disi.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBKDBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n\n    BKD3DTreeWriter w = new BKD3DTreeWriter();\n\n    w.add(0, 0, 0, 0);\n    w.add(1, 1, 1, 1);\n    w.add(-1, -1, -1, 2);\n\n    long indexFP = w.finish(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n    in.seek(indexFP);\n    BKD3DTreeReader r = new BKD3DTreeReader(in, 3);\n\n    DocIdSet hits = r.intersect(Integer.MIN_VALUE, Integer.MAX_VALUE,\n                                Integer.MIN_VALUE, Integer.MAX_VALUE,\n                                Integer.MIN_VALUE, Integer.MAX_VALUE,\n\n                                new BKD3DTreeReader.ValueFilter() {\n\n                                  @Override\n                                  public boolean accept(int docID) {\n                                    return true;\n                                  }\n\n                                  @Override\n                                  public BKD3DTreeReader.Relation compare(int xMin, int xMax,\n                                                          int yMin, int yMax,\n                                                          int zMin, int zMax) {\n                                    return BKD3DTreeReader.Relation.SHAPE_INSIDE_CELL;\n                                  }\n\n                                });\n    DocIdSetIterator disi = hits.iterator();\n    assertEquals(0, disi.nextDoc());\n    assertEquals(1, disi.nextDoc());\n    assertEquals(2, disi.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#testBKDBasic().mjava","sourceNew":null,"sourceOld":"  public void testBKDBasic() throws Exception {\n    Directory dir = getDirectory();\n    IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n\n    BKD3DTreeWriter w = new BKD3DTreeWriter(dir, \"bkd3d\");\n\n    w.add(0, 0, 0, 0);\n    w.add(1, 1, 1, 1);\n    w.add(-1, -1, -1, 2);\n\n    long indexFP = w.finish(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n    in.seek(indexFP);\n    BKD3DTreeReader r = new BKD3DTreeReader(in, 3);\n\n    DocIdSet hits = r.intersect(Integer.MIN_VALUE, Integer.MAX_VALUE,\n                                Integer.MIN_VALUE, Integer.MAX_VALUE,\n                                Integer.MIN_VALUE, Integer.MAX_VALUE,\n\n                                new BKD3DTreeReader.ValueFilter() {\n\n                                  @Override\n                                  public boolean accept(int docID) {\n                                    return true;\n                                  }\n\n                                  @Override\n                                  public BKD3DTreeReader.Relation compare(int xMin, int xMax,\n                                                          int yMin, int yMax,\n                                                          int zMin, int zMax) {\n                                    return BKD3DTreeReader.Relation.SHAPE_INSIDE_CELL;\n                                  }\n\n                                });\n    DocIdSetIterator disi = hits.iterator();\n    assertEquals(0, disi.nextDoc());\n    assertEquals(1, disi.nextDoc());\n    assertEquals(2, disi.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}