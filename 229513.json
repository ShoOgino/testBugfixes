{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialStrategy).mjava","commits":[{"id":"1068799b5537c6408504cf7e15cb90ba57491440","date":1392577122,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialStrategy).mjava","pathOld":"/dev/null","sourceNew":"  private void testEqualsHashcode(final SpatialStrategy strategy) {\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeQuery(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeFilter(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeDistanceValueSource(args.getShape().getCenter());\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialStrategy).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialStrategy).mjava","sourceNew":"  private void testEqualsHashcode(final SpatialStrategy strategy) {\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeQuery(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeDistanceValueSource(args.getShape().getCenter());\n      }\n    });\n  }\n\n","sourceOld":"  private void testEqualsHashcode(final SpatialStrategy strategy) {\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeQuery(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeFilter(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeDistanceValueSource(args.getShape().getCenter());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialStrategy).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialStrategy).mjava","sourceNew":"  private void testEqualsHashcode(final SpatialStrategy strategy) {\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeQuery(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeDistanceValueSource(args.getShape().getCenter());\n      }\n    });\n  }\n\n","sourceOld":"  private void testEqualsHashcode(final SpatialStrategy strategy) {\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeQuery(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeDistanceValueSource(args.getShape().getCenter());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialStrategy).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialStrategy).mjava","sourceNew":"  private void testEqualsHashcode(final SpatialStrategy strategy) {\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeQuery(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeDistanceValueSource(args.getShape().getCenter());\n      }\n    });\n  }\n\n","sourceOld":"  private void testEqualsHashcode(final SpatialStrategy strategy) {\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeQuery(args);\n      }\n    });\n    testEqualsHashcode(args1, args2, new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return strategy.makeDistanceValueSource(args.getShape().getCenter());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1068799b5537c6408504cf7e15cb90ba57491440":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"672b198fc3dce868916c727917cae58c2906763d":["1068799b5537c6408504cf7e15cb90ba57491440"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"1068799b5537c6408504cf7e15cb90ba57491440":["672b198fc3dce868916c727917cae58c2906763d"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1068799b5537c6408504cf7e15cb90ba57491440"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}