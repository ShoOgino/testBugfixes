{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","commits":[{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d6f92dfa9251d9da6d80ec5963a9cbecc90180","date":1530559969,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","sourceNew":"  @Test\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"true\");\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","bugFix":["28ba172425e443e0f08a49de6d73586c418d7251","05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaFromClusterState().mjava","sourceNew":"  @Test\n  public void deleteReplicaFromClusterState() throws Exception {\n    final String collectionName = \"deleteFromClusterStateCollection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 3);\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.waitForActiveCollection(collectionName, 1, 3);\n\n    Slice shard = getCollectionState(collectionName).getSlice(\"shard1\");\n\n    // don't choose the leader to shutdown, it just complicates things unnecessarily\n    Replica replica = getRandomReplica(shard, (r) ->\n                                       ( r.getState() == Replica.State.ACTIVE &&\n                                         ! r.equals(shard.getLeader())));\n    \n    JettySolrRunner replicaJetty = cluster.getReplicaJetty(replica);\n    ZkStateReaderAccessor accessor = new ZkStateReaderAccessor(replicaJetty.getCoreContainer().getZkController().getZkStateReader());\n\n    final long preDeleteWatcherCount = countUnloadCoreOnDeletedWatchers\n      (accessor.getStateWatchers(collectionName));\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n        ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n        ZkStateReader.NODE_NAME_PROP, replica.getNodeName(),\n        ZkStateReader.COLLECTION_PROP, collectionName,\n        ZkStateReader.CORE_NODE_NAME_PROP, replica.getName(),\n        ZkStateReader.BASE_URL_PROP, replica.getBaseUrl());\n\n    cluster.getOpenOverseer().getStateUpdateQueue().offer(Utils.toJSON(m));\n\n    waitForState(\"Timeout waiting for replica get deleted\", collectionName,\n        (liveNodes, collectionState) -> collectionState.getSlice(\"shard1\").getReplicas().size() == 2);\n\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Waiting for replica get unloaded\", () ->\n        replicaJetty.getCoreContainer().getCoreDescriptor(replica.getCoreName()) == null\n    );\n    \n    // the core should no longer have a watch collection state since it was removed\n    timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Waiting for core's watcher to be removed\", () -> {\n        final long postDeleteWatcherCount = countUnloadCoreOnDeletedWatchers\n          (accessor.getStateWatchers(collectionName));\n        log.info(\"preDeleteWatcherCount={} vs postDeleteWatcherCount={}\",\n                 preDeleteWatcherCount, postDeleteWatcherCount);\n        return (preDeleteWatcherCount - 1L == postDeleteWatcherCount);\n      });\n    \n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaFromClusterState() throws Exception {\n    deleteReplicaFromClusterState(\"false\");\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n  }\n\n","bugFix":["28ba172425e443e0f08a49de6d73586c418d7251"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["28ba172425e443e0f08a49de6d73586c418d7251"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28ba172425e443e0f08a49de6d73586c418d7251","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28ba172425e443e0f08a49de6d73586c418d7251":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28ba172425e443e0f08a49de6d73586c418d7251","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28ba172425e443e0f08a49de6d73586c418d7251"],"28ba172425e443e0f08a49de6d73586c418d7251":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}