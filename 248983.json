{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","commits":[{"id":"6357841f074d7585644052e27ac5ed03704759d5","date":1281050546,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"/dev/null","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.fragInfos );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"/dev/null","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.fragInfos );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfd4f46d3dc08bd6050ea2d0e583743c0177ece7","date":1306553978,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.fragInfos );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.fragInfos );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.fragInfos );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder).mjava","sourceNew":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","sourceOld":"  public String[] createFragments( IndexReader reader, int docId,\n      String fieldName, FieldFragList fieldFragList, int maxNumFragments,\n      String[] preTags, String[] postTags, Encoder encoder ) throws IOException {\n    if( maxNumFragments < 0 )\n      throw new IllegalArgumentException( \"maxNumFragments(\" + maxNumFragments + \") must be positive number.\" );\n\n    List<WeightedFragInfo> fragInfos = getWeightedFragInfoList( fieldFragList.getFragInfos() );\n    \n    List<String> fragments = new ArrayList<String>( maxNumFragments );\n    Field[] values = getFields( reader, docId, fieldName );\n    if( values.length == 0 ) return null;\n    StringBuilder buffer = new StringBuilder();\n    int[] nextValueIndex = { 0 };\n    for( int n = 0; n < maxNumFragments && n < fragInfos.size(); n++ ){\n      WeightedFragInfo fragInfo = fragInfos.get( n );\n      fragments.add( makeFragment( buffer, nextValueIndex, values, fragInfo, preTags, postTags, encoder ) );\n    }\n    return fragments.toArray( new String[fragments.size()] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bfd4f46d3dc08bd6050ea2d0e583743c0177ece7"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["6357841f074d7585644052e27ac5ed03704759d5","bfd4f46d3dc08bd6050ea2d0e583743c0177ece7"],"bfd4f46d3dc08bd6050ea2d0e583743c0177ece7":["6357841f074d7585644052e27ac5ed03704759d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6357841f074d7585644052e27ac5ed03704759d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6357841f074d7585644052e27ac5ed03704759d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["6357841f074d7585644052e27ac5ed03704759d5","bfd4f46d3dc08bd6050ea2d0e583743c0177ece7"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"bfd4f46d3dc08bd6050ea2d0e583743c0177ece7":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6357841f074d7585644052e27ac5ed03704759d5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"6357841f074d7585644052e27ac5ed03704759d5":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bfd4f46d3dc08bd6050ea2d0e583743c0177ece7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}