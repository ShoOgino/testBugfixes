{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates();\n    try {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    } finally {\n      recentUpdates.close();  // cache this somehow?\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates();\n    try {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    } finally {\n      recentUpdates.close();  // cache this somehow?\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates();\n    try {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    } finally {\n      recentUpdates.close();  // cache this somehow?\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","date":1449051812,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates();\n    try {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    } finally {\n      recentUpdates.close();  // cache this somehow?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"979e22aa7c63c9dc651adf861610c7e444d45832","date":1454615713,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","date":1471849333,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    //get all available versions by default\n    long maxVersion = Long.MAX_VALUE;\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n      // if fingerprint is calculated, it makes sense to get only those versions\n      // which were used in computing the the fingerprint\n      maxVersion = fingerprint.getMaxVersionEncountered();\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions, maxVersion);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n  }\n\n","bugFix":null,"bugIntro":["121a736a4bfc20e3267077fba6aef03536bb653e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"121a736a4bfc20e3267077fba6aef03536bb653e","date":1471973427,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    //get all available versions by default\n    long maxVersion = Long.MAX_VALUE;\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n      // if fingerprint is calculated, it makes sense to get only those versions\n      // which were used in computing the the fingerprint\n      maxVersion = fingerprint.getMaxVersionEncountered();\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions, maxVersion);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","bugFix":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      rb.rsp.add(\"versions\", recentUpdates.getVersions(nVersions));\n    }\n\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint.toObject());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n    String syncWithLeader = params.get(\"syncWithLeader\");\n    if (syncWithLeader != null) {\n      List<Long> versions;\n      try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n        versions = recentUpdates.getVersions(nVersions);\n      }\n      processSyncWithLeader(rb, nVersions, syncWithLeader, versions);\n      return;\n    }\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n    String syncWithLeader = params.get(\"syncWithLeader\");\n    if (syncWithLeader != null) {\n      List<Long> versions;\n      try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n        versions = recentUpdates.getVersions(nVersions);\n      }\n      processSyncWithLeader(rb, nVersions, syncWithLeader, versions);\n      return;\n    }\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetVersions(ResponseBuilder).mjava","sourceNew":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n    String syncWithLeader = params.get(\"syncWithLeader\");\n    if (syncWithLeader != null) {\n      List<Long> versions;\n      try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n        versions = recentUpdates.getVersions(nVersions);\n      }\n      processSyncWithLeader(rb, nVersions, syncWithLeader, versions);\n      return;\n    }\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","sourceOld":"  public void processGetVersions(ResponseBuilder rb) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    int nVersions = params.getInt(\"getVersions\", -1);\n    if (nVersions == -1) return;\n\n    boolean doFingerprint = params.getBool(\"fingerprint\", false);\n\n    String sync = params.get(\"sync\");\n    if (sync != null) {\n      processSync(rb, nVersions, sync);\n      return;\n    }\n\n    UpdateLog ulog = req.getCore().getUpdateHandler().getUpdateLog();\n    if (ulog == null) return;\n\n    // get fingerprint first as it will cause a soft commit\n    // and would avoid mismatch if documents are being actively index especially during PeerSync\n    if (doFingerprint) {\n      IndexFingerprint fingerprint = IndexFingerprint.getFingerprint(req.getCore(), Long.MAX_VALUE);\n      rb.rsp.add(\"fingerprint\", fingerprint);\n    }\n\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(nVersions);\n      rb.rsp.add(\"versions\", versions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f1f31880696765d6aec499d3b01fa501129af45":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","979e22aa7c63c9dc651adf861610c7e444d45832"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["979e22aa7c63c9dc651adf861610c7e444d45832","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["979e22aa7c63c9dc651adf861610c7e444d45832"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","1f1f31880696765d6aec499d3b01fa501129af45"],"979e22aa7c63c9dc651adf861610c7e444d45832":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1704c078ec59838c9d95d5bf5738b393b537494":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","979e22aa7c63c9dc651adf861610c7e444d45832"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["979e22aa7c63c9dc651adf861610c7e444d45832","121a736a4bfc20e3267077fba6aef03536bb653e"],"121a736a4bfc20e3267077fba6aef03536bb653e":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","979e22aa7c63c9dc651adf861610c7e444d45832","b1704c078ec59838c9d95d5bf5738b393b537494"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["121a736a4bfc20e3267077fba6aef03536bb653e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"979e22aa7c63c9dc651adf861610c7e444d45832":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","b1704c078ec59838c9d95d5bf5738b393b537494","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["1f1f31880696765d6aec499d3b01fa501129af45","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"121a736a4bfc20e3267077fba6aef03536bb653e":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0d22ac6a4146774c1bc8400160fc0b6150294e92","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}