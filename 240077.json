{"path":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength,IndexingChain).mjava","commits":[{"id":"96609ea54585d552d1498d27226f664b5e88d337","date":1223921531,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength,IndexingChain).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy} and {@link IndexingChain}, \n   * for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param indexingChain the {@link DocConsumer} chain to be used to \n   *  process documents\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexingChain indexingChain)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, deletionPolicy, false, mfl.getLimit(), indexingChain);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength,IndexingChain,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength,IndexingChain).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy} and {@link IndexingChain}, \n   * for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths\n   * @param indexingChain the {@link DocConsumer} chain to be used to \n   *  process documents\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexingChain indexingChain, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, deletionPolicy, false, mfl.getLimit(), indexingChain, commit);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy} and {@link IndexingChain}, \n   * for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If\n   * <code>create</code> is true, then a new, empty index\n   * will be created in <code>d</code>, replacing the index\n   * already there, if any.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param indexingChain the {@link DocConsumer} chain to be used to \n   *  process documents\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  IndexWriter(Directory d, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexingChain indexingChain)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, deletionPolicy, false, mfl.getLimit(), indexingChain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96609ea54585d552d1498d27226f664b5e88d337":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["96609ea54585d552d1498d27226f664b5e88d337"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96609ea54585d552d1498d27226f664b5e88d337"],"96609ea54585d552d1498d27226f664b5e88d337":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}