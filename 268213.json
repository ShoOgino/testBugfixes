{"path":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","commits":[{"id":"f8f7907798e0c730e9ab37681c6e8dfbde0e4173","date":1330361299,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"/dev/null","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        // look to see if local core state changed\n        CoreState coreState = zkController.getCoreState(core.getName());\n        if (coreState != info.coreState) {\n          sb.append(\" \" + info.shortId + \"_STATE=\" + coreState);\n          info.coreState = coreState;\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    } else if (zkController != null) {\n      // if we don't have info about the core, then at least try to do core container\n      sb.append(\" P\").append(zkController.getHostPort());\n    }\n\n    sb.append(' ').append(shortClassName);\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caab9a24cde56bead0787370f9f58bee12b4856c","date":1330474364,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        // look to see if local core state changed\n        CoreState coreState = zkController.getCoreState(core.getName());\n        if (coreState != info.coreState) {\n          sb.append(\" \" + info.shortId + \"_STATE=\" + coreState);\n          info.coreState = coreState;\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());\n    }\n\n    sb.append(' ').append(shortClassName);\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        // look to see if local core state changed\n        CoreState coreState = zkController.getCoreState(core.getName());\n        if (coreState != info.coreState) {\n          sb.append(\" \" + info.shortId + \"_STATE=\" + coreState);\n          info.coreState = coreState;\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    } else if (zkController != null) {\n      // if we don't have info about the core, then at least try to do core container\n      sb.append(\" P\").append(zkController.getHostPort());\n    }\n\n    sb.append(' ').append(shortClassName);\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58ecafc00c643b390421a6e26dedc8556e75456","date":1330488755,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        // look to see if local core state changed\n        CoreState coreState = zkController.getCoreState(core.getName());\n        if (coreState != info.coreState) {\n          sb.append(\" \" + info.shortId + \"_STATE=\" + coreState);\n          info.coreState = coreState;\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        // look to see if local core state changed\n        CoreState coreState = zkController.getCoreState(core.getName());\n        if (coreState != info.coreState) {\n          sb.append(\" \" + info.shortId + \"_STATE=\" + coreState);\n          info.coreState = coreState;\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());\n    }\n\n    sb.append(' ').append(shortClassName);\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"/dev/null","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        // look to see if local core state changed\n        CoreState coreState = zkController.getCoreState(core.getName());\n        if (coreState != info.coreState) {\n          sb.append(\" \" + info.shortId + \"_STATE=\" + coreState);\n          info.coreState = coreState;\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, String> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        // look to see if local core state changed\n        CoreState coreState = zkController.getCoreState(core.getName());\n        if (coreState != info.coreState) {\n          sb.append(\" \" + info.shortId + \"_STATE=\" + coreState);\n          info.coreState = coreState;\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, String> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, String> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, String> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, String> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, String> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, String> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      CloudState cloudState = zkController.getCloudState();\n      if (info.cloudState != cloudState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new CloudState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, Object> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, String> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"513a0d1afdd0a58de1fc3a87654e66fb6694d02a","date":1355808434,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        Map<String, Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, Object> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        Map<String, Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        if(info.coreProps == null) {\n          info.coreProps = getCoreProps(zkController, core);\n        }\n\n        Map<String, Object> coreProps = getCoreProps(zkController, core);\n        if(!coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#_format(LogRecord).mjava","sourceNew":null,"sourceOld":"  public String _format(LogRecord record) {\n    String message = record.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = record.getMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());\n\n/***\n    sb.append(timeFromStart).append(' ').append(timeSinceLast);\n    sb.append(' ');\n    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());\n    sb.append(' ');\n    sb.append(record.getLevel());\n***/\n\n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\"+Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n\n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \"+info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\"+info.url + \" node=\"+zkController.getNodeName());\n        }\n\n        Map<String, Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + \" core:\" + core.getName() + \" props:\" + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n\n\n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n//     sb.append(\"\\nL\").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.\n   appendThread(sb, record);\n\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId);                     // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (record.getLevel() != Level.INFO) {\n      sb.append(' ').append(record.getLevel());\n    }\n\n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = record.getThrown();\n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n\n    sb.append('\\n');\n\n    /*** Isn't core specific... prob better logged from zkController\n    if (info != null) {\n      ClusterState clusterState = zkController.getClusterState();\n      if (info.clusterState != clusterState) {\n        // something has changed in the matrix...\n        sb.append(zkController.getBaseUrl() + \" sees new ClusterState:\");\n      }\n    }\n    ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["fa64435b5902ce266c23755a4a00691a3285dab8","513a0d1afdd0a58de1fc3a87654e66fb6694d02a"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d58ecafc00c643b390421a6e26dedc8556e75456"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"d58ecafc00c643b390421a6e26dedc8556e75456":["caab9a24cde56bead0787370f9f58bee12b4856c"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"513a0d1afdd0a58de1fc3a87654e66fb6694d02a":["fa64435b5902ce266c23755a4a00691a3285dab8"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["513a0d1afdd0a58de1fc3a87654e66fb6694d02a"],"caab9a24cde56bead0787370f9f58bee12b4856c":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["d58ecafc00c643b390421a6e26dedc8556e75456"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439c63ae5d22132fca810a0029a854e97d2c1a3e"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["caab9a24cde56bead0787370f9f58bee12b4856c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","513a0d1afdd0a58de1fc3a87654e66fb6694d02a"],"d58ecafc00c643b390421a6e26dedc8556e75456":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"513a0d1afdd0a58de1fc3a87654e66fb6694d02a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","439c63ae5d22132fca810a0029a854e97d2c1a3e"],"caab9a24cde56bead0787370f9f58bee12b4856c":["d58ecafc00c643b390421a6e26dedc8556e75456"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a5093a9e893633cc091cf2f729d7863671c2b715":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}