{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123","date":1352485754,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,int,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n\n      int maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n          break;\n        default:\n          break;\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, int maxDoc, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(PATTERN);\n          field.decoder = new DecimalFormat(stripPrefix(PATTERN), new DecimalFormatSymbols(Locale.ROOT));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = field.decoder.parse(stripPrefix(MAXLENGTH), new ParsePosition(0)).intValue();\n          data.seek(data.getFilePointer() + field.maxLength * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.decoder = new DecimalFormat(stripPrefix(PATTERN), new DecimalFormatSymbols(Locale.ROOT));\n          data.seek(data.getFilePointer() + field.maxLength * maxDoc);\n          break;\n        default:\n          break;\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cd6a58664a1aa37c0503cc80579f1b5f826dbc","date":1352486345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n\n      int maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FLOAT_64:\n        case FLOAT_32:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n          break;\n        default:\n          throw new AssertionError();\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n\n      int maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n          break;\n        default:\n          break;\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782e2ccafc915d902cf8783903e81871f49d08b3","date":1352487519,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FLOAT_64:\n        case FLOAT_32:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n          break;\n        default:\n          throw new AssertionError();\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n\n      int maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FLOAT_64:\n        case FLOAT_32:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n          break;\n        default:\n          throw new AssertionError();\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a739a0e263ee8fbb9f15a2ace678e14cc7c614ec","date":1352568536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n        case FLOAT_64:\n        case FLOAT_32:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n          break;\n        default:\n          throw new AssertionError();\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7a8f6a0f831abdaf62496526336f43bbf7c5bbe","date":1352951976,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          // nocommit: we need to seek past the data section!!!!\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a47efa78e788c0e07f09493b2dc8e027f8dc6e67","date":1352956175,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          // nocommit: we need to seek past the data section!!!!\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          // nocommit: we need to seek past the data section!!!!\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4eaed6f1c6b9414b862b32281f53ef421918dcf","date":1353000825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          // nocommit: we need to seek past the data section!!!!\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd329bd749496f6c58b586a6c0dd0dc8201206f","date":1353092226,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      super(si.getDocCount());\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6295f14d43685811599f8a8f02a63d75ec6bd8fe","date":1353248103,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      super(si.getDocCount());\n      System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      super(si.getDocCount());\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else if (DocValues.isFloat(dvType)) {\n          // nocommit\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9649abab8a92fef9cf51e9ae9475c0a9b704f127","date":1353259848,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      super(si.getDocCount());\n      System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e05b279040cd7b938223b77c3772786678160cf6","date":1353297629,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee","date":1353299109,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6837aa82c41dc48163e43628d0c3d29d47915b0","date":1353334604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n          // nocommit: we need to seek past the data section!!!!\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06abfb156bd728a6e70948c4583bef937c47bc79","date":1354311317,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(SegmentReadState state) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, \"dat\"), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee":["e05b279040cd7b938223b77c3772786678160cf6"],"e05b279040cd7b938223b77c3772786678160cf6":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"782e2ccafc915d902cf8783903e81871f49d08b3":["15cd6a58664a1aa37c0503cc80579f1b5f826dbc"],"06abfb156bd728a6e70948c4583bef937c47bc79":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["b6837aa82c41dc48163e43628d0c3d29d47915b0"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["9649abab8a92fef9cf51e9ae9475c0a9b704f127"],"a47efa78e788c0e07f09493b2dc8e027f8dc6e67":["c7a8f6a0f831abdaf62496526336f43bbf7c5bbe"],"c7a8f6a0f831abdaf62496526336f43bbf7c5bbe":["a739a0e263ee8fbb9f15a2ace678e14cc7c614ec"],"9649abab8a92fef9cf51e9ae9475c0a9b704f127":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"b6837aa82c41dc48163e43628d0c3d29d47915b0":["767bfba15cdbe84dd2e3b841e0429a1b4ef8feee"],"e4eaed6f1c6b9414b862b32281f53ef421918dcf":["a47efa78e788c0e07f09493b2dc8e027f8dc6e67"],"a739a0e263ee8fbb9f15a2ace678e14cc7c614ec":["782e2ccafc915d902cf8783903e81871f49d08b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["e4eaed6f1c6b9414b862b32281f53ef421918dcf"],"3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15cd6a58664a1aa37c0503cc80579f1b5f826dbc":["3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee":["b6837aa82c41dc48163e43628d0c3d29d47915b0"],"e05b279040cd7b938223b77c3772786678160cf6":["767bfba15cdbe84dd2e3b841e0429a1b4ef8feee"],"782e2ccafc915d902cf8783903e81871f49d08b3":["a739a0e263ee8fbb9f15a2ace678e14cc7c614ec"],"06abfb156bd728a6e70948c4583bef937c47bc79":[],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["9649abab8a92fef9cf51e9ae9475c0a9b704f127"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["e05b279040cd7b938223b77c3772786678160cf6"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["06abfb156bd728a6e70948c4583bef937c47bc79"],"a47efa78e788c0e07f09493b2dc8e027f8dc6e67":["e4eaed6f1c6b9414b862b32281f53ef421918dcf"],"c7a8f6a0f831abdaf62496526336f43bbf7c5bbe":["a47efa78e788c0e07f09493b2dc8e027f8dc6e67"],"9649abab8a92fef9cf51e9ae9475c0a9b704f127":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"b6837aa82c41dc48163e43628d0c3d29d47915b0":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"e4eaed6f1c6b9414b862b32281f53ef421918dcf":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"a739a0e263ee8fbb9f15a2ace678e14cc7c614ec":["c7a8f6a0f831abdaf62496526336f43bbf7c5bbe"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123":["15cd6a58664a1aa37c0503cc80579f1b5f826dbc"],"15cd6a58664a1aa37c0503cc80579f1b5f826dbc":["782e2ccafc915d902cf8783903e81871f49d08b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["06abfb156bd728a6e70948c4583bef937c47bc79","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}