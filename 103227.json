{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#afterTest().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#afterTest().mjava","pathOld":"/dev/null","sourceNew":"  @After\n  public void afterTest() throws Exception {\n    metricManager.closeReporters(coreMetricManager.getRegistryName());\n    Set<ObjectInstance> objects =\n        mBeanServer.queryMBeans(ObjectName.getInstance(domain + \":*\"), null);\n    assertTrue(objects.isEmpty());\n\n    coreMetricManager.close();\n    deleteCore();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#afterTest().mjava","pathOld":"/dev/null","sourceNew":"  @After\n  public void afterTest() throws Exception {\n    metricManager.closeReporters(coreMetricManager.getRegistryName());\n    Set<ObjectInstance> objects =\n        mBeanServer.queryMBeans(ObjectName.getInstance(domain + \":*\"), null);\n    assertTrue(objects.isEmpty());\n\n    coreMetricManager.close();\n    deleteCore();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1edfe287b5d8d16a9effaad9cf334bedae0c8857","date":1561656486,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#afterTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#afterTest().mjava","sourceNew":"  @After\n  public void afterTest() throws Exception {\n    if (null == metricManager) {\n      return; // test failed to init, nothing to cleanup\n    }\n    metricManager.closeReporters(coreMetricManager.getRegistryName());\n    Set<ObjectInstance> objects =\n        mBeanServer.queryMBeans(ObjectName.getInstance(domain + \":*\"), null);\n    assertTrue(objects.isEmpty());\n\n    coreMetricManager.close();\n    deleteCore();\n  }\n\n","sourceOld":"  @After\n  public void afterTest() throws Exception {\n    metricManager.closeReporters(coreMetricManager.getRegistryName());\n    Set<ObjectInstance> objects =\n        mBeanServer.queryMBeans(ObjectName.getInstance(domain + \":*\"), null);\n    assertTrue(objects.isEmpty());\n\n    coreMetricManager.close();\n    deleteCore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9bfbea0278c393fb53c503162381e1c3b66929c","date":1573576925,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#afterTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#afterTest().mjava","sourceNew":"  @After\n  public void afterTest() throws Exception {\n    if (null == metricManager) {\n      return; // test failed to init, nothing to cleanup\n    }\n    \n    metricManager.closeReporters(coreMetricManager.getRegistryName());\n\n    // sanity check there are no longer any registered beans in our domain....\n    assertEquals(Collections.emptySet(), \n                 TEST_MBEAN_SERVER.queryMBeans(ObjectName.getInstance(domain + \":*\"), null));\n\n    coreMetricManager.close();\n    deleteCore();\n    \n  }\n\n","sourceOld":"  @After\n  public void afterTest() throws Exception {\n    if (null == metricManager) {\n      return; // test failed to init, nothing to cleanup\n    }\n    metricManager.closeReporters(coreMetricManager.getRegistryName());\n    Set<ObjectInstance> objects =\n        mBeanServer.queryMBeans(ObjectName.getInstance(domain + \":*\"), null);\n    assertTrue(objects.isEmpty());\n\n    coreMetricManager.close();\n    deleteCore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1edfe287b5d8d16a9effaad9cf334bedae0c8857":["0265144286422ad99682a00904cc2536b79c8535"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["1edfe287b5d8d16a9effaad9cf334bedae0c8857"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9bfbea0278c393fb53c503162381e1c3b66929c"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","1edfe287b5d8d16a9effaad9cf334bedae0c8857"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"1edfe287b5d8d16a9effaad9cf334bedae0c8857":["a9bfbea0278c393fb53c503162381e1c3b66929c"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}