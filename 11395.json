{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDirFromZk(String,String,Set[String]).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDirFromZk(String,String,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void copyConfigDirFromZk(String fromZkPath, String toZkPath, Set<String> copiedToZkPaths) throws IOException {\n    try {\n      List<String> files = zkClient.getChildren(fromZkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(fromZkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          final String toZkFilePath = toZkPath + \"/\" + file;\n          logger.info(\"Copying zk node {} to {}\",\n              fromZkPath + \"/\" + file, toZkFilePath);\n          byte[] data = zkClient.getData(fromZkPath + \"/\" + file, null, null, true);\n          zkClient.makePath(toZkFilePath, data, true);\n          if (copiedToZkPaths != null) copiedToZkPaths.add(toZkFilePath);\n        } else {\n          copyConfigDirFromZk(fromZkPath + \"/\" + file, toZkPath + \"/\" + file, copiedToZkPaths);\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error copying nodes from zookeeper path \" + fromZkPath + \" to \" + toZkPath,\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDirFromZk(String,String,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDirFromZk(String,String,Set[String]).mjava","sourceNew":"  private void copyConfigDirFromZk(String fromZkPath, String toZkPath, Set<String> copiedToZkPaths) throws IOException {\n    try {\n      List<String> files = zkClient.getChildren(fromZkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(fromZkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          final String toZkFilePath = toZkPath + \"/\" + file;\n          log.info(\"Copying zk node {} to {}\",\n              fromZkPath + \"/\" + file, toZkFilePath);\n          byte[] data = zkClient.getData(fromZkPath + \"/\" + file, null, null, true);\n          zkClient.makePath(toZkFilePath, data, true);\n          if (copiedToZkPaths != null) copiedToZkPaths.add(toZkFilePath);\n        } else {\n          copyConfigDirFromZk(fromZkPath + \"/\" + file, toZkPath + \"/\" + file, copiedToZkPaths);\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error copying nodes from zookeeper path \" + fromZkPath + \" to \" + toZkPath,\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void copyConfigDirFromZk(String fromZkPath, String toZkPath, Set<String> copiedToZkPaths) throws IOException {\n    try {\n      List<String> files = zkClient.getChildren(fromZkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(fromZkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          final String toZkFilePath = toZkPath + \"/\" + file;\n          logger.info(\"Copying zk node {} to {}\",\n              fromZkPath + \"/\" + file, toZkFilePath);\n          byte[] data = zkClient.getData(fromZkPath + \"/\" + file, null, null, true);\n          zkClient.makePath(toZkFilePath, data, true);\n          if (copiedToZkPaths != null) copiedToZkPaths.add(toZkFilePath);\n        } else {\n          copyConfigDirFromZk(fromZkPath + \"/\" + file, toZkPath + \"/\" + file, copiedToZkPaths);\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error copying nodes from zookeeper path \" + fromZkPath + \" to \" + toZkPath,\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDirFromZk(String,String,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDirFromZk(String,String,Set[String]).mjava","sourceNew":"  private void copyConfigDirFromZk(String fromZkPath, String toZkPath, Set<String> copiedToZkPaths) throws IOException {\n    try {\n      List<String> files = zkClient.getChildren(fromZkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(fromZkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          final String toZkFilePath = toZkPath + \"/\" + file;\n          log.info(\"Copying zk node {}/{} to {}\", fromZkPath, file, toZkFilePath);\n          byte[] data = zkClient.getData(fromZkPath + \"/\" + file, null, null, true);\n          zkClient.makePath(toZkFilePath, data, true);\n          if (copiedToZkPaths != null) copiedToZkPaths.add(toZkFilePath);\n        } else {\n          copyConfigDirFromZk(fromZkPath + \"/\" + file, toZkPath + \"/\" + file, copiedToZkPaths);\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error copying nodes from zookeeper path \" + fromZkPath + \" to \" + toZkPath,\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void copyConfigDirFromZk(String fromZkPath, String toZkPath, Set<String> copiedToZkPaths) throws IOException {\n    try {\n      List<String> files = zkClient.getChildren(fromZkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(fromZkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          final String toZkFilePath = toZkPath + \"/\" + file;\n          log.info(\"Copying zk node {} to {}\",\n              fromZkPath + \"/\" + file, toZkFilePath);\n          byte[] data = zkClient.getData(fromZkPath + \"/\" + file, null, null, true);\n          zkClient.makePath(toZkFilePath, data, true);\n          if (copiedToZkPaths != null) copiedToZkPaths.add(toZkFilePath);\n        } else {\n          copyConfigDirFromZk(fromZkPath + \"/\" + file, toZkPath + \"/\" + file, copiedToZkPaths);\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error copying nodes from zookeeper path \" + fromZkPath + \" to \" + toZkPath,\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01ee5edcdd3cffaab03842feda0c26516290698","date":1601586820,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDirFromZk(String,String,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDirFromZk(String,String,Set[String]).mjava","sourceNew":"  private void copyConfigDirFromZk(String fromZkPath, String toZkPath, Set<String> copiedToZkPaths) throws IOException {\n    try {\n      List<String> files = zkClient.getChildren(fromZkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(fromZkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          copyData(copiedToZkPaths, fromZkPath + \"/\" + file, toZkPath + \"/\" + file);\n        } else {\n          copyConfigDirFromZk(fromZkPath + \"/\" + file, toZkPath + \"/\" + file, copiedToZkPaths);\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error copying nodes from zookeeper path \" + fromZkPath + \" to \" + toZkPath,\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void copyConfigDirFromZk(String fromZkPath, String toZkPath, Set<String> copiedToZkPaths) throws IOException {\n    try {\n      List<String> files = zkClient.getChildren(fromZkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(fromZkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          final String toZkFilePath = toZkPath + \"/\" + file;\n          log.info(\"Copying zk node {}/{} to {}\", fromZkPath, file, toZkFilePath);\n          byte[] data = zkClient.getData(fromZkPath + \"/\" + file, null, null, true);\n          zkClient.makePath(toZkFilePath, data, true);\n          if (copiedToZkPaths != null) copiedToZkPaths.add(toZkFilePath);\n        } else {\n          copyConfigDirFromZk(fromZkPath + \"/\" + file, toZkPath + \"/\" + file, copiedToZkPaths);\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error copying nodes from zookeeper path \" + fromZkPath + \" to \" + toZkPath,\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c01ee5edcdd3cffaab03842feda0c26516290698":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01ee5edcdd3cffaab03842feda0c26516290698"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["c01ee5edcdd3cffaab03842feda0c26516290698"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"c01ee5edcdd3cffaab03842feda0c26516290698":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}