{"path":"src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","commits":[{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long,HttpClient).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version, HttpClient client) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(client, post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cdac6591b64f43f87663e70518d79dd137454b4","date":1254069460,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7cdac6591b64f43f87663e70518d79dd137454b4"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7cdac6591b64f43f87663e70518d79dd137454b4":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["7cdac6591b64f43f87663e70518d79dd137454b4"],"7cdac6591b64f43f87663e70518d79dd137454b4":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}