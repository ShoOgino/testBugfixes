{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stem(\n                    (String) words.get(i),\n                    RussianCharsets.UnicodeRussian);\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stem(\n                    (String) words.get(i),\n                    RussianCharsets.UnicodeRussian);\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db07cbc50e33371ac44b6829104a06d485c5fe70","date":1254424809,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    (String) words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stem(\n                    (String) words.get(i),\n                    RussianCharsets.UnicodeRussian);\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    (String) words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem#testStem().mjava","sourceNew":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","sourceOld":"    public void testStem()\n    {\n        for (int i = 0; i < words.size(); i++)\n        {\n            //if ( (i % 100) == 0 ) System.err.println(i);\n            String realStem =\n                RussianStemmer.stemWord(\n                    words.get(i));\n            assertEquals(\"unicode\", stems.get(i), realStem);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["db07cbc50e33371ac44b6829104a06d485c5fe70"],"db07cbc50e33371ac44b6829104a06d485c5fe70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["db07cbc50e33371ac44b6829104a06d485c5fe70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"db07cbc50e33371ac44b6829104a06d485c5fe70":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}