{"path":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","commits":[{"id":"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","date":1438089844,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","pathOld":"/dev/null","sourceNew":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","sourceNew":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","sourceNew":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","sourceNew":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","sourceNew":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , null, req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54dc69c8c21d9664fe311e6f3667a7cda0d8afb0","date":1492900223,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","sourceNew":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n            ScoreJoinQParserPlugin.class.getPackage().getName(), \n            rewrittenQuery.getClass().getPackage().getName());\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#testJoinQueryType().mjava","sourceNew":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n            ScoreJoinQParserPlugin.class.getPackage().getName(), \n            rewrittenQuery.getClass().getPackage().getName());\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  public void testJoinQueryType() throws SyntaxError, IOException{\n    SolrQueryRequest req = null;\n    try{\n      final String score = whateverScore();\n      \n      req = req(\"{!join from=dept_id_s to=dept_ss\"+score+\"}text_t:develop\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      {\n        final Query query = QParser.getParser(req.getParams().get(\"q\"), req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertTrue(\n            rewrittenQuery+\" should be Lucene's\",\n            rewrittenQuery.getClass().getPackage().getName()\n            .startsWith(\"org.apache.lucene\"));\n      }\n      {\n        final Query query = QParser.getParser(\n            \"{!join from=dept_id_s to=dept_ss}text_t:develop\"\n            , req).getQuery();\n        final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());\n        assertEquals(rewrittenQuery+\" is expected to be from Solr\",\n              JoinQParserPlugin.class.getPackage().getName(), \n              rewrittenQuery.getClass().getPackage().getName());\n      }\n    }finally{\n      if(req!=null){\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","54dc69c8c21d9664fe311e6f3667a7cda0d8afb0"],"54dc69c8c21d9664fe311e6f3667a7cda0d8afb0":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54dc69c8c21d9664fe311e6f3667a7cda0d8afb0"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["e9017cf144952056066919f1ebc7897ff9bd71b1","54dc69c8c21d9664fe311e6f3667a7cda0d8afb0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"54dc69c8c21d9664fe311e6f3667a7cda0d8afb0":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}