{"path":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","pathOld":"contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","sourceNew":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        WhitespaceAnalyzer(), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","sourceOld":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        WhitespaceAnalyzer(), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","pathOld":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","sourceNew":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","sourceOld":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        WhitespaceAnalyzer(), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","pathOld":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","sourceNew":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(random), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","sourceOld":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","pathOld":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","sourceNew":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(random), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","sourceOld":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","pathOld":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","sourceNew":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(random), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","sourceOld":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","pathOld":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","sourceNew":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(random), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","sourceOld":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestWordnet#assertExpandsTo(String,String[]).mjava","sourceNew":null,"sourceOld":"  private void assertExpandsTo(String term, String expected[]) throws IOException {\n    Query expandedQuery = SynExpand.expand(term, searcher, new \n        MockAnalyzer(random), \"field\", 1F);\n    BooleanQuery expectedQuery = new BooleanQuery();\n    for (String t : expected)\n      expectedQuery.add(new TermQuery(new Term(\"field\", t)), \n          BooleanClause.Occur.SHOULD);\n    assertEquals(expectedQuery, expandedQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}