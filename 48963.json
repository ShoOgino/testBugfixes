{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc) {\n    // TODO : perhaps mark the core down in zk?\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc) {\n    // TODO : perhaps mark the core down in zk?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc) {\n    // TODO : perhaps mark the core down in zk?\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc) {\n    // TODO : perhaps mark the core down in zk?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc) {\n    // TODO : perhaps mark the core down in zk?\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc) {\n    // TODO : perhaps mark the core down in zk?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    synchronized (coreStates) {\n      coreStates.remove(zkNodeName);\n    }\n    publishState();\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc) {\n    // TODO : perhaps mark the core down in zk?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcc2d78a3da72b8259df3f88453b4d81638b416b","date":1330135232,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    synchronized (coreStates) {\n      coreStates.remove(coreName);\n    }\n    publishState();\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    synchronized (coreStates) {\n      coreStates.remove(zkNodeName);\n    }\n    publishState();\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    synchronized (coreStates) {\n      coreStates.remove(coreName);\n    }\n    publishState();\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc) {\n    // TODO : perhaps mark the core down in zk?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerStatusQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    synchronized (coreStates) {\n      coreStates.remove(coreName);\n    }\n    publishState();\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerStatusQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerStatusQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  /**\n   * @param coreName\n   * @param cloudDesc\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor().getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getCoreNodeName(cd);\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"bcc2d78a3da72b8259df3f88453b4d81638b416b":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a5093a9e893633cc091cf2f729d7863671c2b715"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","bcc2d78a3da72b8259df3f88453b4d81638b416b"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["bcc2d78a3da72b8259df3f88453b4d81638b416b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"bcc2d78a3da72b8259df3f88453b4d81638b416b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["bcc2d78a3da72b8259df3f88453b4d81638b416b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a5093a9e893633cc091cf2f729d7863671c2b715":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}