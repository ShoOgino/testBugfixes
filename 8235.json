{"path":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","sourceNew":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<Query>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","sourceOld":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<Query>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","sourceNew":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","sourceOld":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<Query>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","sourceNew":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery(\"contents\", \"a\", \"b\");\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery(\"contents\", \"a\", \"b\", \"c\");\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery(\"contents\", \"a\", \"c\");\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery(\"contents\", \"a\", \"c\", \"e\");\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","sourceOld":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","sourceNew":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<>();\n\n    BooleanQuery.Builder booleanAB = new BooleanQuery.Builder();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB.build());\n\n    PhraseQuery phraseAB = new PhraseQuery(\"contents\", \"a\", \"b\");\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery(\"contents\", \"a\", \"b\", \"c\");\n    queries.add(phraseABC);\n\n    BooleanQuery.Builder booleanAC = new BooleanQuery.Builder();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC.build());\n\n    PhraseQuery phraseAC = new PhraseQuery(\"contents\", \"a\", \"c\");\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery(\"contents\", \"a\", \"c\", \"e\");\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","sourceOld":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery(\"contents\", \"a\", \"b\");\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery(\"contents\", \"a\", \"b\", \"c\");\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery(\"contents\", \"a\", \"c\");\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery(\"contents\", \"a\", \"c\", \"e\");\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e9e1499c5d26c936238506df90a3c02c76707722":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}