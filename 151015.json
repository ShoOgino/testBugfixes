{"path":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","commits":[{"id":"5222a966794b33e0bc95cdeb0fe615e0328f3457","date":1177539820,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa   bbb   ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b  :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], t.termText() );\n        }\n      }\n    } \n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa   bbb   ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b  :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init(solrConfig, args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], t.termText() );\n        }\n      }\n    } \n\t}\n\n","sourceOld":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa   bbb   ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b  :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], t.termText() );\n        }\n      }\n    } \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa   bbb   ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b  :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], t.termText() );\n        }\n      }\n    } \n\t}\n\n","sourceOld":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa   bbb   ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b  :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init(solrConfig, args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], t.termText() );\n        }\n      }\n    } \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa   bbb   ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b  :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }\n    } \n\t}\n\n","sourceOld":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa   bbb   ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b  :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], t.termText() );\n        }\n      }\n    } \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28e349236232860728fc91596fa4a1ec2c64bde6","date":1253259442,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","sourceOld":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa   bbb   ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b  :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }\n    } \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","sourceOld":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = TestHyphenatedWordsFilter.tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","sourceOld":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = tsToString( stream );\n      System.out.println( test[2] + \" ==> \" + out );\n      \n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28e349236232860728fc91596fa4a1ec2c64bde6":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"6d6338c87060be5f66757a94945975f3bbd377a9":["5222a966794b33e0bc95cdeb0fe615e0328f3457"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5222a966794b33e0bc95cdeb0fe615e0328f3457":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["28e349236232860728fc91596fa4a1ec2c64bde6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"28e349236232860728fc91596fa4a1ec2c64bde6":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["28e349236232860728fc91596fa4a1ec2c64bde6"],"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"5222a966794b33e0bc95cdeb0fe615e0328f3457":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5222a966794b33e0bc95cdeb0fe615e0328f3457"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}