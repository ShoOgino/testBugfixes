{"path":"solr/core/src/java/org/apache/solr/handler/CatStream#setStreamContext(StreamContext).mjava","commits":[{"id":"fa57c615885d274eb8087f89b6a9e1f84e655a74","date":1565267901,"type":1,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CatStream#setStreamContext(StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FilesStream#setStreamContext(StreamContext).mjava","sourceNew":"  @Override\n  public void setStreamContext(StreamContext context) {\n    this.context = context;\n    Object solrCoreObj = context.get(\"solr-core\");\n    if (solrCoreObj == null || !(solrCoreObj instanceof SolrCore) ) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"StreamContext must have SolrCore in solr-core key\");\n    }\n    final SolrCore core = (SolrCore) context.get(\"solr-core\");\n\n    this.chroot = Paths.get(core.getCoreContainer().getSolrHome(), SolrResourceLoader.USER_FILES_DIRECTORY).toString();\n    if (! new File(this.chroot).exists()) {\n      throw new IllegalStateException(SolrResourceLoader.USER_FILES_DIRECTORY + \" directory used to load files must exist but could not be found!\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setStreamContext(StreamContext context) {\n    this.context = context;\n    Object solrCoreObj = context.get(\"solr-core\");\n    if (solrCoreObj == null || !(solrCoreObj instanceof SolrCore) ) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"StreamContext must have SolrCore in solr-core key\");\n    }\n    final SolrCore core = (SolrCore) context.get(\"solr-core\");\n\n    this.chroot = Paths.get(core.getCoreContainer().getSolrHome(), SolrResourceLoader.USER_FILES_DIRECTORY).toString();\n    if (! new File(this.chroot).exists()) {\n      throw new IllegalStateException(SolrResourceLoader.USER_FILES_DIRECTORY + \" directory used to load files must exist but could not be found!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CatStream#setStreamContext(StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CatStream#setStreamContext(StreamContext).mjava","sourceNew":"  @Override\n  public void setStreamContext(StreamContext context) {\n    this.context = context;\n    Object solrCoreObj = context.get(\"solr-core\");\n    if (solrCoreObj == null || !(solrCoreObj instanceof SolrCore) ) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"StreamContext must have SolrCore in solr-core key\");\n    }\n    final SolrCore core = (SolrCore) context.get(\"solr-core\");\n\n    this.chroot = Paths.get(core.getCoreContainer().getSolrHome(), SolrPaths.USER_FILES_DIRECTORY).toString();\n    if (! new File(this.chroot).exists()) {\n      throw new IllegalStateException(SolrPaths.USER_FILES_DIRECTORY + \" directory used to load files must exist but could not be found!\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setStreamContext(StreamContext context) {\n    this.context = context;\n    Object solrCoreObj = context.get(\"solr-core\");\n    if (solrCoreObj == null || !(solrCoreObj instanceof SolrCore) ) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"StreamContext must have SolrCore in solr-core key\");\n    }\n    final SolrCore core = (SolrCore) context.get(\"solr-core\");\n\n    this.chroot = Paths.get(core.getCoreContainer().getSolrHome(), SolrResourceLoader.USER_FILES_DIRECTORY).toString();\n    if (! new File(this.chroot).exists()) {\n      throw new IllegalStateException(SolrResourceLoader.USER_FILES_DIRECTORY + \" directory used to load files must exist but could not be found!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8c36bc16f489634a3fcf14294704824192273df","date":1593058738,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CatStream#setStreamContext(StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CatStream#setStreamContext(StreamContext).mjava","sourceNew":"  @Override\n  public void setStreamContext(StreamContext context) {\n    this.context = context;\n    Object solrCoreObj = context.get(\"solr-core\");\n    if (solrCoreObj == null || !(solrCoreObj instanceof SolrCore) ) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"StreamContext must have SolrCore in solr-core key\");\n    }\n    final SolrCore core = (SolrCore) context.get(\"solr-core\");\n\n    this.chroot = core.getCoreContainer().getUserFilesPath();\n    if (! Files.exists(chroot)) {\n      throw new IllegalStateException(chroot + \" directory used to load files must exist but could not be found!\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setStreamContext(StreamContext context) {\n    this.context = context;\n    Object solrCoreObj = context.get(\"solr-core\");\n    if (solrCoreObj == null || !(solrCoreObj instanceof SolrCore) ) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"StreamContext must have SolrCore in solr-core key\");\n    }\n    final SolrCore core = (SolrCore) context.get(\"solr-core\");\n\n    this.chroot = Paths.get(core.getCoreContainer().getSolrHome(), SolrPaths.USER_FILES_DIRECTORY).toString();\n    if (! new File(this.chroot).exists()) {\n      throw new IllegalStateException(SolrPaths.USER_FILES_DIRECTORY + \" directory used to load files must exist but could not be found!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["fa57c615885d274eb8087f89b6a9e1f84e655a74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8c36bc16f489634a3fcf14294704824192273df":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"fa57c615885d274eb8087f89b6a9e1f84e655a74":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8c36bc16f489634a3fcf14294704824192273df"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["e8c36bc16f489634a3fcf14294704824192273df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa57c615885d274eb8087f89b6a9e1f84e655a74"],"e8c36bc16f489634a3fcf14294704824192273df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa57c615885d274eb8087f89b6a9e1f84e655a74":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}