{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs), getUseCompoundFile()));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs), getUseCompoundFile()));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs), getUseCompoundFile()));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs), getUseCompoundFile()));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs)));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs), getUseCompoundFile()));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs), getUseCompoundFile()));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs)));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs), getUseCompoundFile()));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs), getUseCompoundFile()));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs)));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs), getUseCompoundFile()));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs), getUseCompoundFile()));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs)));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs)));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.range(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.range(startSeg, numSegs)));\n      return spec;\n    } else {\n      // apply the log merge policy to small segments.\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["38a62612cfa4e104080d89d7751a8f1a258ac335","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","38a62612cfa4e104080d89d7751a8f1a258ac335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38a62612cfa4e104080d89d7751a8f1a258ac335","4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}