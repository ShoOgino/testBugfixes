{"path":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","commits":[{"id":"ee1513e4ee2237693ff50a460d78dff5246c3d34","date":1311330418,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"/dev/null","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.freq - o2.freq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.freq - o2.freq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.freq - o2.freq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["ee1513e4ee2237693ff50a460d78dff5246c3d34","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ee1513e4ee2237693ff50a460d78dff5246c3d34"],"ee1513e4ee2237693ff50a460d78dff5246c3d34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee1513e4ee2237693ff50a460d78dff5246c3d34"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ee1513e4ee2237693ff50a460d78dff5246c3d34":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}