{"path":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","commits":[{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d8bcf272566fe633e473b1f630820391495c75b","date":1381468181,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = bits.clone();\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = bits.clone();\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = bits.clone();\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["1d8bcf272566fe633e473b1f630820391495c75b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["1d8bcf272566fe633e473b1f630820391495c75b","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"1d8bcf272566fe633e473b1f630820391495c75b":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["1d8bcf272566fe633e473b1f630820391495c75b"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d8bcf272566fe633e473b1f630820391495c75b":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}