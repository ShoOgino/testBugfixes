{"path":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d62214e818b74b9fa407c0c51956e44878a46a","date":1438266500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());\n      SolrCore.log.error(\"prev == info : {}\", prev.req == info.req);\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());  \n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());\n      log.error(\"prev == info : {}\", prev.req == info.req);\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      SolrCore.log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());\n      SolrCore.log.error(\"prev == info : {}\", prev.req == info.req);\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());\n      log.error(\"prev == info : {}\", prev.req == info.req, new RuntimeException());\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());\n      log.error(\"prev == info : {}\", prev.req == info.req);\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      log.error(\"Previous SolrRequestInfo was not closed!  req={}\", prev.req.getOriginalParams().toString());\n      log.error(\"prev == info : {}\", prev.req == info.req, new RuntimeException());\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      log.error(\"Previous SolrRequestInfo was not closed!  req=\" + prev.req.getOriginalParams().toString());\n      log.error(\"prev == info : {}\", prev.req == info.req, new RuntimeException());\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      log.error(\"Previous SolrRequestInfo was not closed!  req={}\", prev.req.getOriginalParams());\n      log.error(\"prev == info : {}\", prev.req == info.req, new RuntimeException());\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      log.error(\"Previous SolrRequestInfo was not closed!  req={}\", prev.req.getOriginalParams().toString());\n      log.error(\"prev == info : {}\", prev.req == info.req, new RuntimeException());\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4","date":1592286410,"type":3,"author":"Nazerke Seidan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrRequestInfo#setRequestInfo(SolrRequestInfo).mjava","sourceNew":"  /**\n   * Adds the SolrRequestInfo onto a stack held in a {@link ThreadLocal}.\n   * Remember to call {@link #clearRequestInfo()}!\n   */\n  public static void setRequestInfo(SolrRequestInfo info) {\n    Deque<SolrRequestInfo> stack = threadLocal.get();\n    if (info == null) {\n      throw new IllegalArgumentException(\"SolrRequestInfo is null\");\n    } else if (stack.size() <= MAX_STACK_SIZE) {\n      stack.push(info);\n    } else {\n      assert false : \"SolrRequestInfo Stack is full\";\n      log.error(\"SolrRequestInfo Stack is full\");\n    }\n  }\n\n","sourceOld":"  public static void setRequestInfo(SolrRequestInfo info) {\n    // TODO: temporary sanity check... this can be changed to just an assert in the future\n    SolrRequestInfo prev = threadLocal.get();\n    if (prev != null) {\n      log.error(\"Previous SolrRequestInfo was not closed!  req={}\", prev.req.getOriginalParams());\n      log.error(\"prev == info : {}\", prev.req == info.req, new RuntimeException());\n    }\n    assert prev == null;\n\n    threadLocal.set(info);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["575e66bd4b2349209027f6801184da7fc3cba13f"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d6d62214e818b74b9fa407c0c51956e44878a46a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d6d62214e818b74b9fa407c0c51956e44878a46a"],"575e66bd4b2349209027f6801184da7fc3cba13f":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"d6d62214e818b74b9fa407c0c51956e44878a46a":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}