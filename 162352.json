{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      FacetLabel me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      FacetLabel parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      FacetLabel me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      FacetLabel parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      FacetLabel me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      FacetLabel parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    expectThrows(ArrayIndexOutOfBoundsException.class, () -> {\n      tw.getParent(-1);\n    });\n    expectThrows(ArrayIndexOutOfBoundsException.class, () -> {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n    });\n    expectThrows(ArrayIndexOutOfBoundsException.class, () -> {\n      tw.getParent(tr.getSize());\n    });\n  }\n\n","sourceOld":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      FacetLabel me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      FacetLabel parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      FacetLabel me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      FacetLabel parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    expectThrows(IndexOutOfBoundsException.class, () -> {\n      tw.getParent(-1);\n    });\n    expectThrows(IndexOutOfBoundsException.class, () -> {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n    });\n    expectThrows(IndexOutOfBoundsException.class, () -> {\n      tw.getParent(tr.getSize());\n    });\n  }\n\n","sourceOld":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      FacetLabel me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      FacetLabel parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!me.subpath(me.length - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    expectThrows(ArrayIndexOutOfBoundsException.class, () -> {\n      tw.getParent(-1);\n    });\n    expectThrows(ArrayIndexOutOfBoundsException.class, () -> {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n    });\n    expectThrows(ArrayIndexOutOfBoundsException.class, () -> {\n      tw.getParent(tr.getSize());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"456d7e7092cb043c740b4674301660ee8abc26fe":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["456d7e7092cb043c740b4674301660ee8abc26fe"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"456d7e7092cb043c740b4674301660ee8abc26fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05fe562aa248790944d43cdd478f512572835ba0":["456d7e7092cb043c740b4674301660ee8abc26fe"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["05fe562aa248790944d43cdd478f512572835ba0"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}