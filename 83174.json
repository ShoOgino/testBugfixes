{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(AtomicReader,String,boolean).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Uninvert#uninvert(AtomicReader,String,boolean).mjava","sourceNew":"    public void uninvert(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void uninvert(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Uninvert#uninvert(AtomicReader,String,boolean).mjava","sourceNew":"    public void uninvert(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void uninvert(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Uninvert#uninvert(AtomicReader,String,boolean).mjava","sourceNew":"    public void uninvert(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void uninvert(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(AtomicReader,String,boolean).mjava","sourceNew":null,"sourceOld":"    public void uninvert(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}