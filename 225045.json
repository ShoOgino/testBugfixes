{"path":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final Fields fields = getFields(r);\n    if (fields == null) {\n      return null;\n    } else {\n      return fields.terms(field);\n    }\n  }\n\n","sourceOld":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final Fields fields = getFields(r);\n    if (fields == null) {\n      return null;\n    } else {\n      return fields.terms(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final InvertedFields fields = getFields(r);\n    if (fields == null) {\n      return null;\n    } else {\n      return fields.terms(field);\n    }\n  }\n\n","sourceOld":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final Fields fields = getFields(r);\n    if (fields == null) {\n      return null;\n    } else {\n      return fields.terms(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final Fields fields = getFields(r);\n    if (fields == null) {\n      return null;\n    } else {\n      return fields.terms(field);\n    }\n  }\n\n","sourceOld":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final InvertedFields fields = getFields(r);\n    if (fields == null) {\n      return null;\n    } else {\n      return fields.terms(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    return getFields(r).terms(field);\n  }\n\n","sourceOld":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final Fields fields = getFields(r);\n    if (fields == null) {\n      return null;\n    } else {\n      return fields.terms(field);\n    }\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6f36bb733c575dd04fdfa785127ebf82b0033f","date":1497502741,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx - 1));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(Terms.EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","sourceOld":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    return getFields(r).terms(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx - 1));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(Terms.EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","sourceOld":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    return getFields(r).terms(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx - 1));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(Terms.EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","sourceOld":"  /**  This method may return null if the field does not exist.*/\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    return getFields(r).terms(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(Terms.EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","sourceOld":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx - 1));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(Terms.EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","sourceOld":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(Terms.EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8028ab7a24273833d53d35eb160dba5b57283cf5":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["28288370235ed02234a64753cdbf0c6ec096304a"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"28288370235ed02234a64753cdbf0c6ec096304a":["8028ab7a24273833d53d35eb160dba5b57283cf5","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["8028ab7a24273833d53d35eb160dba5b57283cf5","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"8028ab7a24273833d53d35eb160dba5b57283cf5":["2b6f36bb733c575dd04fdfa785127ebf82b0033f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"28288370235ed02234a64753cdbf0c6ec096304a":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}