{"path":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestForUtil#tryDistribution(int,double,int,int).mjava","commits":[{"id":"2c16b44289b3660573e653fe771c1528f4e2774f","date":1340208824,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestForUtil#tryDistribution(int,double,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void tryDistribution(int sz, double alpha, int masknorm, int maskexc) throws Exception {\n    Integer[] buff= new Integer[sz];\n    int[] data = new int[sz];\n    byte[] res = new byte[4+sz*8];      // loosely upperbound\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int i=0;\n    for (; i<sz*alpha; ++i)\n      buff[i]=gen.nextInt() & masknorm;\n    for (; i<sz; ++i)\n      buff[i]=gen.nextInt() & maskexc;\n    Collections.shuffle(Arrays.asList(buff),new Random(seed));\n    for (i=0; i<sz; ++i)\n      data[i] = buff[i];\n\n    int ensz = ForUtil.compress(data,sz,resBuffer);\n    \n    if (ensz > sz*8+4) {\n      println(\"Excceed? \"+ensz+\">\"+(sz*8+4));\n      ensz=sz*8+4;\n    }\n    int[] copy = new int[sz];\n\n    ForUtil.decompress(resBuffer,copy);\n\n//    println(getHex(data,sz)+\"\\n\");\n//    println(getHex(res,ensz)+\"\\n\");\n//    println(getHex(copy,sz)+\"\\n\");\n\n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"824ab25acd22f2eca198755bafab3cb8b7878493","date":1341276186,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#tryDistribution(int,double,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestForUtil#tryDistribution(int,double,int,int).mjava","sourceNew":"  public void tryDistribution(int sz, double alpha, int masknorm, int maskexc) throws Exception {\n    Integer[] buff= new Integer[sz];\n    int[] data = new int[sz];\n    byte[] res = new byte[4+sz*8];      // loosely upperbound\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int i=0;\n    for (; i<sz*alpha; ++i)\n      buff[i]=gen.nextInt() & masknorm;\n    for (; i<sz; ++i)\n      buff[i]=gen.nextInt() & maskexc;\n    Collections.shuffle(Arrays.asList(buff),new Random(seed));\n    for (i=0; i<sz; ++i)\n      data[i] = buff[i];\n\n    int ensz = PForUtil.compress(data,sz,resBuffer);\n    \n    if (ensz > sz*8+4) {\n      println(\"Excceed? \"+ensz+\">\"+(sz*8+4));\n      ensz=sz*8+4;\n    }\n    int[] copy = new int[sz];\n    PForUtil.decompress(resBuffer,copy);\n\n//    println(getHex(data,sz)+\"\\n\");\n//    println(getHex(res,ensz)+\"\\n\");\n//    println(getHex(copy,sz)+\"\\n\");\n\n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","sourceOld":"  public void tryDistribution(int sz, double alpha, int masknorm, int maskexc) throws Exception {\n    Integer[] buff= new Integer[sz];\n    int[] data = new int[sz];\n    byte[] res = new byte[4+sz*8];      // loosely upperbound\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int i=0;\n    for (; i<sz*alpha; ++i)\n      buff[i]=gen.nextInt() & masknorm;\n    for (; i<sz; ++i)\n      buff[i]=gen.nextInt() & maskexc;\n    Collections.shuffle(Arrays.asList(buff),new Random(seed));\n    for (i=0; i<sz; ++i)\n      data[i] = buff[i];\n\n    int ensz = ForUtil.compress(data,sz,resBuffer);\n    \n    if (ensz > sz*8+4) {\n      println(\"Excceed? \"+ensz+\">\"+(sz*8+4));\n      ensz=sz*8+4;\n    }\n    int[] copy = new int[sz];\n\n    ForUtil.decompress(resBuffer,copy);\n\n//    println(getHex(data,sz)+\"\\n\");\n//    println(getHex(res,ensz)+\"\\n\");\n//    println(getHex(copy,sz)+\"\\n\");\n\n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c16b44289b3660573e653fe771c1528f4e2774f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"824ab25acd22f2eca198755bafab3cb8b7878493":["2c16b44289b3660573e653fe771c1528f4e2774f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2c16b44289b3660573e653fe771c1528f4e2774f":["824ab25acd22f2eca198755bafab3cb8b7878493"],"824ab25acd22f2eca198755bafab3cb8b7878493":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c16b44289b3660573e653fe771c1528f4e2774f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["824ab25acd22f2eca198755bafab3cb8b7878493","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}