{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesFromInitial(LightAutomaton).mjava","commits":[{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesFromInitial(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns bitset marking states reachable from the initial node. */\n  private static BitSet getLiveStatesFromInitial(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet live = new BitSet(numStates);\n    LinkedList<Integer> workList = new LinkedList<>();\n    live.set(0);\n    workList.add(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesFromInitial(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesFromInitial(LightAutomaton).mjava","sourceNew":"  /** Returns bitset marking states reachable from the initial state. */\n  private static BitSet getLiveStatesFromInitial(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet live = new BitSet(numStates);\n    if (numStates == 0) {\n      return live;\n    }\n    LinkedList<Integer> workList = new LinkedList<>();\n    live.set(0);\n    workList.add(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states reachable from the initial node. */\n  private static BitSet getLiveStatesFromInitial(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet live = new BitSet(numStates);\n    LinkedList<Integer> workList = new LinkedList<>();\n    live.set(0);\n    workList.add(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesFromInitial(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesFromInitial(LightAutomaton).mjava","sourceNew":"  /** Returns bitset marking states reachable from the initial state. */\n  private static BitSet getLiveStatesFromInitial(Automaton a) {\n    int numStates = a.getNumStates();\n    BitSet live = new BitSet(numStates);\n    if (numStates == 0) {\n      return live;\n    }\n    LinkedList<Integer> workList = new LinkedList<>();\n    live.set(0);\n    workList.add(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states reachable from the initial state. */\n  private static BitSet getLiveStatesFromInitial(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet live = new BitSet(numStates);\n    if (numStates == 0) {\n      return live;\n    }\n    LinkedList<Integer> workList = new LinkedList<>();\n    live.set(0);\n    workList.add(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a67285d1a68175d877eb9fd1624fccad3db028ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}