{"path":"solr/core/src/test/org/apache/solr/HelloWorldSolrCloudTestCase#setupCluster().mjava","commits":[{"id":"41e9ffdc3f242136cc125271c604efdfcc47eb47","date":1476539077,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/HelloWorldSolrCloudTestCase#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    // create and configure cluster\n    configureCluster(nodeCount)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    // create an empty collection\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, numReplicas)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    // add a document\n    final SolrInputDocument doc1 = sdoc(id, \"1\",\n        \"title_s\", \"Here comes the sun\",\n        \"artist_s\", \"The Beatles\",\n        \"popularity_i\", \"123\");\n    new UpdateRequest()\n        .add(doc1)\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    // add further document(s) here\n    // TODO\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/HelloWorldSolrCloudTestCase#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    // create and configure cluster\n    configureCluster(nodeCount)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    // create an empty collection\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, numReplicas)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    // add a document\n    final SolrInputDocument doc1 = sdoc(id, \"1\",\n        \"title_s\", \"Here comes the sun\",\n        \"artist_s\", \"The Beatles\",\n        \"popularity_i\", \"123\");\n    new UpdateRequest()\n        .add(doc1)\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    // add further document(s) here\n    // TODO\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/HelloWorldSolrCloudTestCase#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/HelloWorldSolrCloudTestCase#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    // create and configure cluster\n    configureCluster(nodeCount)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    // create an empty collection\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, numReplicas)\n        .process(cluster.getSolrClient());\n\n    // add a document\n    final SolrInputDocument doc1 = sdoc(id, \"1\",\n        \"title_s\", \"Here comes the sun\",\n        \"artist_s\", \"The Beatles\",\n        \"popularity_i\", \"123\");\n    new UpdateRequest()\n        .add(doc1)\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    // add further document(s) here\n    // TODO\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    // create and configure cluster\n    configureCluster(nodeCount)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    // create an empty collection\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, numReplicas)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    // add a document\n    final SolrInputDocument doc1 = sdoc(id, \"1\",\n        \"title_s\", \"Here comes the sun\",\n        \"artist_s\", \"The Beatles\",\n        \"popularity_i\", \"123\");\n    new UpdateRequest()\n        .add(doc1)\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    // add further document(s) here\n    // TODO\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["41e9ffdc3f242136cc125271c604efdfcc47eb47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41e9ffdc3f242136cc125271c604efdfcc47eb47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"41e9ffdc3f242136cc125271c604efdfcc47eb47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","41e9ffdc3f242136cc125271c604efdfcc47eb47"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"41e9ffdc3f242136cc125271c604efdfcc47eb47":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}