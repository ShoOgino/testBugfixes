{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#EncodedRectangle(double,double,double,double).mjava","commits":[{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#EncodedRectangle(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    EncodedRectangle(double minLat, double maxLat, double minLon, double maxLon) {\n      this.bbox = new byte[4 * BYTES];\n      int minXenc = encodeLongitudeCeil(minLon);\n      int maxXenc = encodeLongitude(maxLon);\n      int minYenc = encodeLatitudeCeil(minLat);\n      int maxYenc = encodeLatitude(maxLat);\n      if (minYenc > maxYenc) {\n        minYenc = maxYenc;\n      }\n      this.minY = minYenc;\n      this.maxY = maxYenc;\n\n      if (minLon > maxLon == true) {\n        // crossing dateline is split into east/west boxes\n        this.west = new byte[4 * BYTES];\n        this.minX = minXenc;\n        this.maxX = maxXenc;\n        encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n        encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n      } else {\n        // encodeLongitudeCeil may cause minX to be > maxX iff\n        // the delta between the longitude < the encoding resolution\n        if (minXenc > maxXenc) {\n          minXenc = maxXenc;\n        }\n        this.west = null;\n        this.minX = minXenc;\n        this.maxX = maxXenc;\n        encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#EncodedRectangle(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#EncodedRectangle(double,double,double,double).mjava","sourceNew":"    EncodedRectangle(double minLat, double maxLat, double minLon, double maxLon) {\n      this.bbox = new byte[4 * BYTES];\n      int minXenc = encodeLongitudeCeil(minLon);\n      int maxXenc = encodeLongitude(maxLon);\n      int minYenc = encodeLatitudeCeil(minLat);\n      int maxYenc = encodeLatitude(maxLat);\n      if (minYenc > maxYenc) {\n        minYenc = maxYenc;\n      }\n      this.minY = minYenc;\n      this.maxY = maxYenc;\n\n      if (minLon > maxLon == true) {\n        this.crossesDateline = true;\n        // crossing dateline is split into east/west boxes\n        this.west = new byte[4 * BYTES];\n        this.minX = minXenc;\n        this.maxX = maxXenc;\n        encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n        encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n      } else {\n        this.crossesDateline = false;\n        // encodeLongitudeCeil may cause minX to be > maxX iff\n        // the delta between the longitude < the encoding resolution\n        if (minXenc > maxXenc) {\n          minXenc = maxXenc;\n        }\n        this.west = null;\n        this.minX = minXenc;\n        this.maxX = maxXenc;\n        encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n      }\n\n    }\n\n","sourceOld":"    EncodedRectangle(double minLat, double maxLat, double minLon, double maxLon) {\n      this.bbox = new byte[4 * BYTES];\n      int minXenc = encodeLongitudeCeil(minLon);\n      int maxXenc = encodeLongitude(maxLon);\n      int minYenc = encodeLatitudeCeil(minLat);\n      int maxYenc = encodeLatitude(maxLat);\n      if (minYenc > maxYenc) {\n        minYenc = maxYenc;\n      }\n      this.minY = minYenc;\n      this.maxY = maxYenc;\n\n      if (minLon > maxLon == true) {\n        // crossing dateline is split into east/west boxes\n        this.west = new byte[4 * BYTES];\n        this.minX = minXenc;\n        this.maxX = maxXenc;\n        encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n        encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n      } else {\n        // encodeLongitudeCeil may cause minX to be > maxX iff\n        // the delta between the longitude < the encoding resolution\n        if (minXenc > maxXenc) {\n          minXenc = maxXenc;\n        }\n        this.west = null;\n        this.minX = minXenc;\n        this.maxX = maxXenc;\n        encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["c568a1e2a5125c2245150eebb030a81baa158b31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}