{"path":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations#testSubExplanations().mjava","commits":[{"id":"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f","date":1461156732,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations#testSubExplanations().mjava","pathOld":"/dev/null","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionQuery(new ConstValueSource(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(1f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(1f, expl.getDetails()[2].getValue(), 0f);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(1f, expl.getDetails()[2].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(0.5f, expl.getDetails()[2].getValue(), 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations#testSubExplanations().mjava","pathOld":"/dev/null","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionQuery(new ConstValueSource(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(1f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(1f, expl.getDetails()[2].getValue(), 0f);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(1f, expl.getDetails()[2].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(0.5f, expl.getDetails()[2].getValue(), 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations#testSubExplanations().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations#testSubExplanations().mjava","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionQuery(new ConstValueSource(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(1f, expl.getDetails()[1].getValue(), 0f);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n  }\n\n","sourceOld":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionQuery(new ConstValueSource(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(1f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(1f, expl.getDetails()[2].getValue(), 0f);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(1f, expl.getDetails()[2].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(0.5f, expl.getDetails()[2].getValue(), 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations#testSubExplanations().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations#testSubExplanations().mjava","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionQuery(new ConstValueSource(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(1f, expl.getDetails()[1].getValue(), 0f);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n  }\n\n","sourceOld":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionQuery(new ConstValueSource(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(1f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(1f, expl.getDetails()[2].getValue(), 0f);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(1f, expl.getDetails()[2].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n    // norm\n    assertEquals(\"queryNorm\", expl.getDetails()[2].getDescription());\n    assertEquals(0.5f, expl.getDetails()[2].getValue(), 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations#testSubExplanations().mjava","sourceNew":null,"sourceOld":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionQuery(new ConstValueSource(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(1f, expl.getDetails()[1].getValue(), 0f);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[0].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[1].getDescription());\n    assertEquals(2f, expl.getDetails()[1].getValue(), 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f"],"a82662cae660e76ded4de1e9b451633e523d83e1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9b701e0fcef214f86bab1daf107adce0b0131212"],"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9b701e0fcef214f86bab1daf107adce0b0131212","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b701e0fcef214f86bab1daf107adce0b0131212","4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a82662cae660e76ded4de1e9b451633e523d83e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}