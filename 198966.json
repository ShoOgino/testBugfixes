{"path":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollectionTermination().mjava","commits":[{"id":"063dae9421f2da2fe272aee10b891f49d21538bd","date":1592500789,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollectionTermination().mjava","pathOld":"/dev/null","sourceNew":"  public void testCollectionTermination() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    DummyCollector c1 = new TerminatingDummyCollector(1, ScoreMode.COMPLETE);\n    DummyCollector c2 = new TerminatingDummyCollector(2, ScoreMode.COMPLETE);\n\n    Collector mc = MultiCollector.wrap(c1, c2);\n    LeafCollector lc = mc.getLeafCollector(ctx);\n    lc.setScorer(new ScoreAndDoc());\n    lc.collect(0); // OK\n    assertTrue(\"c1's collect should be called\", c1.collectCalled);\n    assertTrue(\"c2's collect should be called\", c2.collectCalled);\n    c1.collectCalled = false;\n    c2.collectCalled = false;\n    lc.collect(1); // OK, but c1 should terminate\n    assertFalse(\"c1 should be removed already\", c1.collectCalled);\n    assertTrue(\"c2's collect should be called\", c2.collectCalled);\n    c2.collectCalled = false;\n    \n    expectThrows(CollectionTerminatedException.class, () -> {\n      lc.collect(2);\n    });\n    assertFalse(\"c1 should be removed already\", c1.collectCalled);\n    assertFalse(\"c2 should be removed already\", c2.collectCalled);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testCollectionTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollectionTermination().mjava","sourceNew":"  public void testCollectionTermination() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    DummyCollector c1 = new TerminatingDummyCollector(1, ScoreMode.COMPLETE);\n    DummyCollector c2 = new TerminatingDummyCollector(2, ScoreMode.COMPLETE);\n\n    Collector mc = MultiCollector.wrap(c1, c2);\n    LeafCollector lc = mc.getLeafCollector(ctx);\n    lc.setScorer(new ScoreAndDoc());\n    lc.collect(0); // OK\n    assertTrue(\"c1's collect should be called\", c1.collectCalled);\n    assertTrue(\"c2's collect should be called\", c2.collectCalled);\n    c1.collectCalled = false;\n    c2.collectCalled = false;\n    lc.collect(1); // OK, but c1 should terminate\n    assertFalse(\"c1 should be removed already\", c1.collectCalled);\n    assertTrue(\"c2's collect should be called\", c2.collectCalled);\n    c2.collectCalled = false;\n    \n    expectThrows(CollectionTerminatedException.class, () -> {\n      lc.collect(2);\n    });\n    assertFalse(\"c1 should be removed already\", c1.collectCalled);\n    assertFalse(\"c2 should be removed already\", c2.collectCalled);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCollectionTermination() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    DummyCollector c1 = new TerminatingDummyCollector(1, ScoreMode.COMPLETE);\n    DummyCollector c2 = new TerminatingDummyCollector(2, ScoreMode.COMPLETE);\n\n    Collector mc = MultiCollector.wrap(c1, c2);\n    LeafCollector lc = mc.getLeafCollector(ctx);\n    lc.setScorer(new ScoreAndDoc());\n    lc.collect(0); // OK\n    assertTrue(\"c1's collect should be called\", c1.collectCalled);\n    assertTrue(\"c2's collect should be called\", c2.collectCalled);\n    c1.collectCalled = false;\n    c2.collectCalled = false;\n    lc.collect(1); // OK, but c1 should terminate\n    assertFalse(\"c1 should be removed already\", c1.collectCalled);\n    assertTrue(\"c2's collect should be called\", c2.collectCalled);\n    c2.collectCalled = false;\n    \n    expectThrows(CollectionTerminatedException.class, () -> {\n      lc.collect(2);\n    });\n    assertFalse(\"c1 should be removed already\", c1.collectCalled);\n    assertFalse(\"c2 should be removed already\", c2.collectCalled);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"063dae9421f2da2fe272aee10b891f49d21538bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["063dae9421f2da2fe272aee10b891f49d21538bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"]},"commit2Childs":{"063dae9421f2da2fe272aee10b891f49d21538bd":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["063dae9421f2da2fe272aee10b891f49d21538bd"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}