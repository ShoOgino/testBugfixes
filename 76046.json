{"path":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene41\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene40\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene41\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene40\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene41\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene40\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene42Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene41\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","date":1359743129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene42Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene41\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene45Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene42Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene45Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene42Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene45Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene42Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene45Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.shutdown();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.shutdown();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.shutdown();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":["8435160e9702b19398118ddf76b61c846612b6a4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.shutdown();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.shutdown();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.shutdown();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene410Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene49Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else we might remove .cfe but not the corresponding .cfs, causing false exc when trying to verify headers:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene410Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene410Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"941b7027a51547b0a38d711bc08ec354f9e2e4a7","date":1411394279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else we might remove .cfe but not the corresponding .cfs, causing false exc when trying to verify headers:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else we might remove .cfe but not the corresponding .cfs, causing false exc when trying to verify headers:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(new Lucene410Codec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023","date":1411397287,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else we might remove .cfe but not the corresponding .cfs, causing false exc when trying to verify headers:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.YES);\n    FieldType vectorsType = new FieldType(TextField.TYPE_STORED);\n    vectorsType.setStoreTermVectors(true);\n    vectorsType.setStoreTermVectorPositions(true);\n    Field vectorsField = new Field(\"vectors\", \"\", vectorsType);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(vectorsField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      dvField.setLongValue(random().nextInt(5));\n      vectorsField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else we might remove .cfe but not the corresponding .cfs, causing false exc when trying to verify headers:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.YES);\n    FieldType vectorsType = new FieldType(TextField.TYPE_STORED);\n    vectorsType.setStoreTermVectors(true);\n    vectorsType.setStoreTermVectorPositions(true);\n    Field vectorsField = new Field(\"vectors\", \"\", vectorsType);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(vectorsField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      dvField.setLongValue(random().nextInt(5));\n      vectorsField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"id\"), \"dv\", Long.valueOf(i));\n      }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else we might remove .cfe but not the corresponding .cfs, causing false exc when trying to verify headers:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.YES);\n    FieldType vectorsType = new FieldType(TextField.TYPE_STORED);\n    vectorsType.setStoreTermVectors(true);\n    vectorsType.setStoreTermVectorPositions(true);\n    Field vectorsField = new Field(\"vectors\", \"\", vectorsType);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(vectorsField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      dvField.setLongValue(random().nextInt(5));\n      vectorsField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.YES);\n    FieldType vectorsType = new FieldType(TextField.TYPE_STORED);\n    vectorsType.setStoreTermVectors(true);\n    vectorsType.setStoreTermVectorPositions(true);\n    Field vectorsField = new Field(\"vectors\", \"\", vectorsType);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(vectorsField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      dvField.setLongValue(random().nextInt(5));\n      vectorsField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"id\"), \"dv\", Long.valueOf(i));\n      }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else we might remove .cfe but not the corresponding .cfs, causing false exc when trying to verify headers:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.YES);\n    FieldType vectorsType = new FieldType(TextField.TYPE_STORED);\n    vectorsType.setStoreTermVectors(true);\n    vectorsType.setStoreTermVectorPositions(true);\n    Field vectorsField = new Field(\"vectors\", \"\", vectorsType);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(vectorsField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      dvField.setLongValue(random().nextInt(5));\n      vectorsField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      // TODO: we should make a new format with a clean header...\n      // if (random().nextInt(20) == 0) {\n      //  riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      // }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","date":1453975275,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.YES);\n    FieldType vectorsType = new FieldType(TextField.TYPE_STORED);\n    vectorsType.setStoreTermVectors(true);\n    vectorsType.setStoreTermVectorPositions(true);\n    Field vectorsField = new Field(\"vectors\", \"\", vectorsType);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(vectorsField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      dvField.setLongValue(random().nextInt(5));\n      vectorsField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"id\"), \"dv\", Long.valueOf(i));\n      }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","bugFix":["3384e6013a93e4d11b7d75388693f8d0388602bf","dd5dd283c3d9f22e186699bf823c9d1e67f49152","1f3b037cd083286b2af89f96e768f85dcd8072d6","768b0ba0c1bb98f5074a2c3f978ed3c7c3555023","6613659748fe4411a7dcf85266e55db1f95f7315"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.YES);\n    FieldType vectorsType = new FieldType(TextField.TYPE_STORED);\n    vectorsType.setStoreTermVectors(true);\n    vectorsType.setStoreTermVectorPositions(true);\n    Field vectorsField = new Field(\"vectors\", \"\", vectorsType);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(vectorsField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      dvField.setLongValue(random().nextInt(5));\n      vectorsField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"id\"), \"dv\", Long.valueOf(i));\n      }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.YES);\n    FieldType vectorsType = new FieldType(TextField.TYPE_STORED);\n    vectorsType.setStoreTermVectors(true);\n    vectorsType.setStoreTermVectorPositions(true);\n    Field vectorsField = new Field(\"vectors\", \"\", vectorsType);\n    Field dvField = new NumericDocValuesField(\"dv\", 5);\n    doc.add(idField);\n    doc.add(bodyField);\n    doc.add(vectorsField);\n    doc.add(dvField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      dvField.setLongValue(random().nextInt(5));\n      vectorsField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"id\"), \"dv\", Long.valueOf(i));\n      }\n    }\n    riw.close();\n    checkHeaders(dir, new HashMap<String,String>());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["6613659748fe4411a7dcf85266e55db1f95f7315"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"11a746437bc5c0a0b3df0337ed249c387c812871":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"6613659748fe4411a7dcf85266e55db1f95f7315":["8435160e9702b19398118ddf76b61c846612b6a4"],"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8435160e9702b19398118ddf76b61c846612b6a4":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["768b0ba0c1bb98f5074a2c3f978ed3c7c3555023"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","11a746437bc5c0a0b3df0337ed249c387c812871"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["768b0ba0c1bb98f5074a2c3f978ed3c7c3555023","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d15e34266d75e4e8b95da046cd0afc812367b38"]},"commit2Childs":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","5eb2511ababf862ea11e10761c70ee560cd84510"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"768b0ba0c1bb98f5074a2c3f978ed3c7c3555023":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["768b0ba0c1bb98f5074a2c3f978ed3c7c3555023"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["1f3b037cd083286b2af89f96e768f85dcd8072d6","5eb2511ababf862ea11e10761c70ee560cd84510"],"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8435160e9702b19398118ddf76b61c846612b6a4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8435160e9702b19398118ddf76b61c846612b6a4"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["8d15e34266d75e4e8b95da046cd0afc812367b38","b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","1e6acbaae7af722f17204ceccf0f7db5753eccf3","db4fdbf3d262768eabc027cd8321edca0cd11fa8","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}