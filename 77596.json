{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758b67c292d546f06d958a30c05b76e3987a11de","date":1375382531,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"758b67c292d546f06d958a30c05b76e3987a11de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["758b67c292d546f06d958a30c05b76e3987a11de"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"758b67c292d546f06d958a30c05b76e3987a11de":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["758b67c292d546f06d958a30c05b76e3987a11de","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}