{"path":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot(String).mjava","commits":[{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Snapshots the last commit. Once a commit is 'snapshotted,' it is protected\n   * from deletion (as long as this {@link IndexDeletionPolicy} is used). The\n   * commit can be removed by calling {@link #release(String)} using the same ID\n   * parameter followed by a call to {@link IndexWriter#deleteUnusedFiles()}.\n   * <p>\n   * <b>NOTE:</b> ID must be unique in the system. If the same ID is used twice,\n   * an {@link IllegalStateException} is thrown.\n   * <p>\n   * <b>NOTE:</b> while the snapshot is held, the files it references will not\n   * be deleted, which will consume additional disk space in your index. If you\n   * take a snapshot at a particularly bad time (say just before you call\n   * optimize()) then in the worst case this could consume an extra 1X of your\n   * total index size, until you release the snapshot.\n   * \n   * @param id\n   *          a unique identifier of the commit that is being snapshotted.\n   * @throws IllegalStateException\n   *           if either there is no 'last commit' to snapshot, or if the\n   *           parameter 'ID' refers to an already snapshotted commit.\n   * @return the {@link IndexCommit} that was snapshotted.\n   */\n  public synchronized IndexCommit snapshot(String id) throws IOException {\n    if (lastCommit == null) {\n      // no commit exists. Really shouldn't happen, but might be if SDP is\n      // accessed before onInit or onCommit were called.\n      throw new IllegalStateException(\"No index commit to snapshot\");\n    }\n\n    // Can't use the same snapshot ID twice...\n    checkSnapshotted(id);\n\n    registerSnapshotInfo(id, lastCommit.getSegmentsFileName(), lastCommit);\n    return lastCommit;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot(String).mjava","sourceNew":"  /**\n   * Snapshots the last commit. Once a commit is 'snapshotted,' it is protected\n   * from deletion (as long as this {@link IndexDeletionPolicy} is used). The\n   * commit can be removed by calling {@link #release(String)} using the same ID\n   * parameter followed by a call to {@link IndexWriter#deleteUnusedFiles()}.\n   * <p>\n   * <b>NOTE:</b> ID must be unique in the system. If the same ID is used twice,\n   * an {@link IllegalStateException} is thrown.\n   * <p>\n   * <b>NOTE:</b> while the snapshot is held, the files it references will not\n   * be deleted, which will consume additional disk space in your index. If you\n   * take a snapshot at a particularly bad time (say just before you call\n   * forceMerge) then in the worst case this could consume an extra 1X of your\n   * total index size, until you release the snapshot.\n   * \n   * @param id\n   *          a unique identifier of the commit that is being snapshotted.\n   * @throws IllegalStateException\n   *           if either there is no 'last commit' to snapshot, or if the\n   *           parameter 'ID' refers to an already snapshotted commit.\n   * @return the {@link IndexCommit} that was snapshotted.\n   */\n  public synchronized IndexCommit snapshot(String id) throws IOException {\n    if (lastCommit == null) {\n      // no commit exists. Really shouldn't happen, but might be if SDP is\n      // accessed before onInit or onCommit were called.\n      throw new IllegalStateException(\"No index commit to snapshot\");\n    }\n\n    // Can't use the same snapshot ID twice...\n    checkSnapshotted(id);\n\n    registerSnapshotInfo(id, lastCommit.getSegmentsFileName(), lastCommit);\n    return lastCommit;\n  }\n\n","sourceOld":"  /**\n   * Snapshots the last commit. Once a commit is 'snapshotted,' it is protected\n   * from deletion (as long as this {@link IndexDeletionPolicy} is used). The\n   * commit can be removed by calling {@link #release(String)} using the same ID\n   * parameter followed by a call to {@link IndexWriter#deleteUnusedFiles()}.\n   * <p>\n   * <b>NOTE:</b> ID must be unique in the system. If the same ID is used twice,\n   * an {@link IllegalStateException} is thrown.\n   * <p>\n   * <b>NOTE:</b> while the snapshot is held, the files it references will not\n   * be deleted, which will consume additional disk space in your index. If you\n   * take a snapshot at a particularly bad time (say just before you call\n   * optimize()) then in the worst case this could consume an extra 1X of your\n   * total index size, until you release the snapshot.\n   * \n   * @param id\n   *          a unique identifier of the commit that is being snapshotted.\n   * @throws IllegalStateException\n   *           if either there is no 'last commit' to snapshot, or if the\n   *           parameter 'ID' refers to an already snapshotted commit.\n   * @return the {@link IndexCommit} that was snapshotted.\n   */\n  public synchronized IndexCommit snapshot(String id) throws IOException {\n    if (lastCommit == null) {\n      // no commit exists. Really shouldn't happen, but might be if SDP is\n      // accessed before onInit or onCommit were called.\n      throw new IllegalStateException(\"No index commit to snapshot\");\n    }\n\n    // Can't use the same snapshot ID twice...\n    checkSnapshotted(id);\n\n    registerSnapshotInfo(id, lastCommit.getSegmentsFileName(), lastCommit);\n    return lastCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot(String).mjava","sourceNew":"  /**\n   * Snapshots the last commit. Once a commit is 'snapshotted,' it is protected\n   * from deletion (as long as this {@link IndexDeletionPolicy} is used). The\n   * commit can be removed by calling {@link #release(String)} using the same ID\n   * parameter followed by a call to {@link IndexWriter#deleteUnusedFiles()}.\n   * <p>\n   * <b>NOTE:</b> ID must be unique in the system. If the same ID is used twice,\n   * an {@link IllegalStateException} is thrown.\n   * <p>\n   * <b>NOTE:</b> while the snapshot is held, the files it references will not\n   * be deleted, which will consume additional disk space in your index. If you\n   * take a snapshot at a particularly bad time (say just before you call\n   * forceMerge) then in the worst case this could consume an extra 1X of your\n   * total index size, until you release the snapshot.\n   * \n   * @param id\n   *          a unique identifier of the commit that is being snapshotted.\n   * @throws IllegalStateException\n   *           if either there is no 'last commit' to snapshot, or if the\n   *           parameter 'ID' refers to an already snapshotted commit.\n   * @return the {@link IndexCommit} that was snapshotted.\n   */\n  public synchronized IndexCommit snapshot(String id) throws IOException {\n    if (lastCommit == null) {\n      // no commit exists. Really shouldn't happen, but might be if SDP is\n      // accessed before onInit or onCommit were called.\n      throw new IllegalStateException(\"No index commit to snapshot\");\n    }\n\n    // Can't use the same snapshot ID twice...\n    checkSnapshotted(id);\n\n    registerSnapshotInfo(id, lastCommit.getSegmentsFileName(), lastCommit);\n    return lastCommit;\n  }\n\n","sourceOld":"  /**\n   * Snapshots the last commit. Once a commit is 'snapshotted,' it is protected\n   * from deletion (as long as this {@link IndexDeletionPolicy} is used). The\n   * commit can be removed by calling {@link #release(String)} using the same ID\n   * parameter followed by a call to {@link IndexWriter#deleteUnusedFiles()}.\n   * <p>\n   * <b>NOTE:</b> ID must be unique in the system. If the same ID is used twice,\n   * an {@link IllegalStateException} is thrown.\n   * <p>\n   * <b>NOTE:</b> while the snapshot is held, the files it references will not\n   * be deleted, which will consume additional disk space in your index. If you\n   * take a snapshot at a particularly bad time (say just before you call\n   * forceMerge) then in the worst case this could consume an extra 1X of your\n   * total index size, until you release the snapshot.\n   * \n   * @param id\n   *          a unique identifier of the commit that is being snapshotted.\n   * @throws IllegalStateException\n   *           if either there is no 'last commit' to snapshot, or if the\n   *           parameter 'ID' refers to an already snapshotted commit.\n   * @return the {@link IndexCommit} that was snapshotted.\n   */\n  public synchronized IndexCommit snapshot(String id) throws IOException {\n    if (lastCommit == null) {\n      // no commit exists. Really shouldn't happen, but might be if SDP is\n      // accessed before onInit or onCommit were called.\n      throw new IllegalStateException(\"No index commit to snapshot\");\n    }\n\n    // Can't use the same snapshot ID twice...\n    checkSnapshotted(id);\n\n    registerSnapshotInfo(id, lastCommit.getSegmentsFileName(), lastCommit);\n    return lastCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}