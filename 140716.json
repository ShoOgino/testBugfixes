{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","commits":[{"id":"b4a811009dda62552371fb4b6c76035677d3e3ee","date":1360899022,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","sourceNew":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","sourceNew":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testDouble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","sourceNew":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", 30.1, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.DOUBLE));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testDouble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","sourceNew":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", 30.1, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.DOUBLE));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testDouble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testDouble().mjava","sourceNew":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", 30.1, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -1.3, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", 4.2333333333333, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", 4.2333333333332, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.DOUBLE));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double */\n  public void testDouble() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 30.1));\n    doc.add(newStringField(\"value\", \"30.1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -1.3));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333333));\n    doc.add(newStringField(\"value\", \"4.2333333333333\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", 4.2333333333332));\n    doc.add(newStringField(\"value\", \"4.2333333333332\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // numeric order\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2333333333332\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"4.2333333333333\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertEquals(\"30.1\", searcher.doc(td.scoreDocs[3].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4a811009dda62552371fb4b6c76035677d3e3ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4a811009dda62552371fb4b6c76035677d3e3ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["b4a811009dda62552371fb4b6c76035677d3e3ee"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"b4a811009dda62552371fb4b6c76035677d3e3ee":["3b41f996b22bd5518650f897d050088ff808ec03","3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4a811009dda62552371fb4b6c76035677d3e3ee","3b41f996b22bd5518650f897d050088ff808ec03"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}