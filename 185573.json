{"path":"src/java/org/apache/lucene/index/DocumentsWriterFieldMergeState#nextTerm().mjava","commits":[{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriterFieldMergeState#nextTerm().mjava","pathOld":"/dev/null","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == field.numPostings)\n      return false;\n\n    p = postings[postingUpto];\n    docID = 0;\n\n    text = field.threadState.charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    if (p.freqUpto > p.freqStart)\n      freq.init(field.threadState.postingsPool, p.freqStart, p.freqUpto);\n    else\n      freq.bufferOffset = freq.upto = freq.endIndex = 0;\n\n    prox.init(field.threadState.postingsPool, p.proxStart, p.proxUpto);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == field.numPostings)\n      return false;\n\n    p = postings[postingUpto];\n    docID = 0;\n\n    text = field.threadState.charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    if (p.freqUpto > p.freqStart)\n      freq.init(field.threadState.postingsPool, p.freqStart, p.freqUpto);\n    else\n      freq.bufferOffset = freq.upto = freq.endIndex = 0;\n\n    prox.init(field.threadState.postingsPool, p.proxStart, p.proxUpto);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5350389bf83287111f7760b9e3db3af8e3648474":["5a0af3a442be522899177e5e11384a45a6784a3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a0af3a442be522899177e5e11384a45a6784a3f"],"5a0af3a442be522899177e5e11384a45a6784a3f":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}