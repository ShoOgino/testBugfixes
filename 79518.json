{"path":"solr/core/src/java/org/apache/solr/internal/csv/CSVPrinter#printlnComment(String).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/CSVPrinter#printlnComment(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Put a comment among the comma separated values.\n   * Comments will always begin on a new line and occupy a\n   * least one full line. The character specified to star\n   * comments and a space will be inserted at the beginning of\n   * each new line in the comment.\n   *\n   * @param comment the comment to output\n   */\n  public void printlnComment(String comment) throws IOException {\n    if(this.strategy.isCommentingDisabled()) {\n        return;\n    }\n    if (!newLine) {\n      println();\n    }\n    out.write(this.strategy.getCommentStart());\n    out.write(' ');\n    for (int i = 0; i < comment.length(); i++) {\n      char c = comment.charAt(i);\n      switch (c) {\n        case '\\r' :\n          if (i + 1 < comment.length() && comment.charAt(i + 1) == '\\n') {\n            i++;\n          }\n          // break intentionally excluded.\n        case '\\n' :\n          println();\n          out.write(this.strategy.getCommentStart());\n          out.write(' ');\n          break;\n        default :\n          out.write(c);\n          break;\n      }\n    }\n    println();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/CSVPrinter#printlnComment(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/CSVPrinter#printlnComment(String).mjava","sourceNew":"  /**\n   * Put a comment among the comma separated values.\n   * Comments will always begin on a new line and occupy a\n   * least one full line. The character specified to star\n   * comments and a space will be inserted at the beginning of\n   * each new line in the comment.\n   *\n   * @param comment the comment to output\n   */\n  @SuppressWarnings({\"fallthrough\"})\n  public void printlnComment(String comment) throws IOException {\n    if(this.strategy.isCommentingDisabled()) {\n        return;\n    }\n    if (!newLine) {\n      println();\n    }\n    out.write(this.strategy.getCommentStart());\n    out.write(' ');\n    for (int i = 0; i < comment.length(); i++) {\n      char c = comment.charAt(i);\n      switch (c) {\n        case '\\r' :\n          if (i + 1 < comment.length() && comment.charAt(i + 1) == '\\n') {\n            i++;\n          }\n          // break intentionally excluded.\n        case '\\n' :\n          println();\n          out.write(this.strategy.getCommentStart());\n          out.write(' ');\n          break;\n        default :\n          out.write(c);\n          break;\n      }\n    }\n    println();\n  }\n\n","sourceOld":"  /**\n   * Put a comment among the comma separated values.\n   * Comments will always begin on a new line and occupy a\n   * least one full line. The character specified to star\n   * comments and a space will be inserted at the beginning of\n   * each new line in the comment.\n   *\n   * @param comment the comment to output\n   */\n  public void printlnComment(String comment) throws IOException {\n    if(this.strategy.isCommentingDisabled()) {\n        return;\n    }\n    if (!newLine) {\n      println();\n    }\n    out.write(this.strategy.getCommentStart());\n    out.write(' ');\n    for (int i = 0; i < comment.length(); i++) {\n      char c = comment.charAt(i);\n      switch (c) {\n        case '\\r' :\n          if (i + 1 < comment.length() && comment.charAt(i + 1) == '\\n') {\n            i++;\n          }\n          // break intentionally excluded.\n        case '\\n' :\n          println();\n          out.write(this.strategy.getCommentStart());\n          out.write(' ');\n          break;\n        default :\n          out.write(c);\n          break;\n      }\n    }\n    println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}