{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequest(SolrParams,BiConsumer[String,Object]).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequest(SolrParams,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequest(SolrParams params, BiConsumer<String, Object> consumer) throws Exception {\n    boolean compact = params.getBool(COMPACT_PARAM, true);\n    String[] keys = params.getParams(KEY_PARAM);\n    if (keys != null && keys.length > 0) {\n      handleKeyRequest(keys, consumer);\n      return;\n    }\n    MetricFilter mustMatchFilter = parseMustMatchFilter(params);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(params);\n    List<MetricType> metricTypes = parseMetricTypes(params);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(params);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    consumer.accept(\"metrics\", response);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequest(SolrParams,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequest(SolrParams,BiConsumer[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void handleRequest(SolrParams params, BiConsumer<String, Object> consumer) throws Exception {\n    boolean compact = params.getBool(COMPACT_PARAM, true);\n    String[] keys = params.getParams(KEY_PARAM);\n    if (keys != null && keys.length > 0) {\n      handleKeyRequest(keys, consumer);\n      return;\n    }\n    MetricFilter mustMatchFilter = parseMustMatchFilter(params);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(params);\n    List<MetricType> metricTypes = parseMetricTypes(params);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(params);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      @SuppressWarnings({\"rawtypes\"})\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    consumer.accept(\"metrics\", response);\n  }\n\n","sourceOld":"  public void handleRequest(SolrParams params, BiConsumer<String, Object> consumer) throws Exception {\n    boolean compact = params.getBool(COMPACT_PARAM, true);\n    String[] keys = params.getParams(KEY_PARAM);\n    if (keys != null && keys.length > 0) {\n      handleKeyRequest(keys, consumer);\n      return;\n    }\n    MetricFilter mustMatchFilter = parseMustMatchFilter(params);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(params);\n    List<MetricType> metricTypes = parseMetricTypes(params);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(params);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    consumer.accept(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequest(SolrParams,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequest(SolrParams,BiConsumer[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void handleRequest(SolrParams params, BiConsumer<String, Object> consumer) throws Exception {\n    boolean compact = params.getBool(COMPACT_PARAM, true);\n    String[] keys = params.getParams(KEY_PARAM);\n    if (keys != null && keys.length > 0) {\n      handleKeyRequest(keys, consumer);\n      return;\n    }\n    MetricFilter mustMatchFilter = parseMustMatchFilter(params);\n    Predicate<CharSequence> propertyFilter = parsePropertyFilter(params);\n    List<MetricType> metricTypes = parseMetricTypes(params);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(params);\n\n    NamedList<Object> response = new SimpleOrderedMap<>();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap<Object> result = new SimpleOrderedMap<>();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    consumer.accept(\"metrics\", response);\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void handleRequest(SolrParams params, BiConsumer<String, Object> consumer) throws Exception {\n    boolean compact = params.getBool(COMPACT_PARAM, true);\n    String[] keys = params.getParams(KEY_PARAM);\n    if (keys != null && keys.length > 0) {\n      handleKeyRequest(keys, consumer);\n      return;\n    }\n    MetricFilter mustMatchFilter = parseMustMatchFilter(params);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(params);\n    List<MetricType> metricTypes = parseMetricTypes(params);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(params);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      @SuppressWarnings({\"rawtypes\"})\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    consumer.accept(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba055e19afc289adcb5bedaf68513793a7254012":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["ba055e19afc289adcb5bedaf68513793a7254012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba055e19afc289adcb5bedaf68513793a7254012":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}