{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","commits":[{"id":"6d3eedff9ce5a77e403f9d084a3f5a7a9d9eeaed","date":1400194410,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) MultiFields.getTerms(r, \"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82ae1be1dc68d59626e4bb94d2029d309b20878","date":1400195857,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) MultiFields.getTerms(r, \"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d615ef411046679022f6728bb2b876273d13ae","date":1400253450,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(makeIDField(\"id0\", 100));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(makeIDField(\"id1\", 110));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IDVersionSegmentTermsEnum termsEnum = (IDVersionSegmentTermsEnum) r.leaves().get(0).reader().fields().terms(\"id\").iterator(null);\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id0\"), 100));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id0\"), 101));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 50));\n    assertTrue(termsEnum.seekExact(new BytesRef(\"id1\"), 110));\n    assertFalse(termsEnum.seekExact(new BytesRef(\"id1\"), 111));\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["b7d615ef411046679022f6728bb2b876273d13ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d3eedff9ce5a77e403f9d084a3f5a7a9d9eeaed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7d615ef411046679022f6728bb2b876273d13ae":["e82ae1be1dc68d59626e4bb94d2029d309b20878"],"e82ae1be1dc68d59626e4bb94d2029d309b20878":["6d3eedff9ce5a77e403f9d084a3f5a7a9d9eeaed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d3eedff9ce5a77e403f9d084a3f5a7a9d9eeaed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d3eedff9ce5a77e403f9d084a3f5a7a9d9eeaed":["e82ae1be1dc68d59626e4bb94d2029d309b20878"],"b7d615ef411046679022f6728bb2b876273d13ae":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"e82ae1be1dc68d59626e4bb94d2029d309b20878":["b7d615ef411046679022f6728bb2b876273d13ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}