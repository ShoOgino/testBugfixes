{"path":"src/java/org/apache/lucene/index/SegmentReader#openDocStores().mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#openDocStores().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void openDocStores() throws IOException {\n    if (fieldsReaderOrig == null) {\n      final Directory storeDir;\n      if (si.getDocStoreOffset() != -1) {\n        if (si.getDocStoreIsCompoundFile()) {\n          storeCFSReader = new CompoundFileReader(directory(),\n                                                  si.getDocStoreSegment() + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION,\n                                                  readBufferSize);\n          storeDir = storeCFSReader;\n          assert storeDir != null;\n        } else {\n          storeDir = directory();\n          assert storeDir != null;\n        }\n      } else if (si.getUseCompoundFile()) {\n        // In some cases, we were originally opened when CFS\n        // was not used, but then we are asked to open doc\n        // stores after the segment has switched to CFS\n        if (cfsReader == null) {\n          cfsReader = new CompoundFileReader(directory(), segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION, readBufferSize);\n        }\n        storeDir = cfsReader;\n        assert storeDir != null;\n      } else {\n        storeDir = directory();\n        assert storeDir != null;\n      }\n\n      final String storesSegment;\n      if (si.getDocStoreOffset() != -1) {\n        storesSegment = si.getDocStoreSegment();\n      } else {\n        storesSegment = segment;\n      }\n\n      fieldsReaderOrig = new FieldsReader(storeDir, storesSegment, fieldInfos, readBufferSize,\n                                          si.getDocStoreOffset(), si.docCount);\n\n      // Verify two sources of \"maxDoc\" agree:\n      if (si.getDocStoreOffset() == -1 && fieldsReaderOrig.size() != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + si.name + \": fieldsReader shows \" + fieldsReaderOrig.size() + \" but segmentInfo shows \" + si.docCount);\n      }\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = new TermVectorsReader(storeDir, storesSegment, fieldInfos, readBufferSize, si.getDocStoreOffset(), si.docCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#openDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#openDocStores().mjava","sourceNew":"  void openDocStores() throws IOException {\n    core.openDocStores(si);\n  }\n\n","sourceOld":"  synchronized void openDocStores() throws IOException {\n    if (fieldsReaderOrig == null) {\n      final Directory storeDir;\n      if (si.getDocStoreOffset() != -1) {\n        if (si.getDocStoreIsCompoundFile()) {\n          storeCFSReader = new CompoundFileReader(directory(),\n                                                  si.getDocStoreSegment() + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION,\n                                                  readBufferSize);\n          storeDir = storeCFSReader;\n          assert storeDir != null;\n        } else {\n          storeDir = directory();\n          assert storeDir != null;\n        }\n      } else if (si.getUseCompoundFile()) {\n        // In some cases, we were originally opened when CFS\n        // was not used, but then we are asked to open doc\n        // stores after the segment has switched to CFS\n        if (cfsReader == null) {\n          cfsReader = new CompoundFileReader(directory(), segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION, readBufferSize);\n        }\n        storeDir = cfsReader;\n        assert storeDir != null;\n      } else {\n        storeDir = directory();\n        assert storeDir != null;\n      }\n\n      final String storesSegment;\n      if (si.getDocStoreOffset() != -1) {\n        storesSegment = si.getDocStoreSegment();\n      } else {\n        storesSegment = segment;\n      }\n\n      fieldsReaderOrig = new FieldsReader(storeDir, storesSegment, fieldInfos, readBufferSize,\n                                          si.getDocStoreOffset(), si.docCount);\n\n      // Verify two sources of \"maxDoc\" agree:\n      if (si.getDocStoreOffset() == -1 && fieldsReaderOrig.size() != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + si.name + \": fieldsReader shows \" + fieldsReaderOrig.size() + \" but segmentInfo shows \" + si.docCount);\n      }\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = new TermVectorsReader(storeDir, storesSegment, fieldInfos, readBufferSize, si.getDocStoreOffset(), si.docCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#openDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#openDocStores().mjava","sourceNew":"  void openDocStores() throws IOException {\n    core.openDocStores(si);\n  }\n\n","sourceOld":"  void openDocStores() throws IOException {\n    core.openDocStores(si);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["c4ff8864209d2e972cb4393600c26082f9a6533d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}