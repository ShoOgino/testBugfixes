{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","commits":[{"id":"29baaefef1b62d76a3370ff72a0fe5f9bd84e365","date":1348949582,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = _TestUtil.getTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36","date":1349174553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = _TestUtil.getTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = _TestUtil.getTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = TestUtil.getTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = _TestUtil.getTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = TestUtil.createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = TestUtil.getTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = TestUtil.createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = TestUtil.createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = TestUtil.createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = TestUtil.getTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    TestUtil.rm(path);\n  }\n\n","bugFix":["5eb2511ababf862ea11e10761c70ee560cd84510"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    Path path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    File path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    Path path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    Path path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d0d579490a72f2e6297eaa648940611234c57cf1","6613659748fe4411a7dcf85266e55db1f95f7315"],"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["5eb2511ababf862ea11e10761c70ee560cd84510"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["f4abec28b874149a7223e32cc7a01704c27790de","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"d0d579490a72f2e6297eaa648940611234c57cf1":["5eb2511ababf862ea11e10761c70ee560cd84510"],"f4abec28b874149a7223e32cc7a01704c27790de":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}