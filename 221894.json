{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    op = new CommandOperation(op.name, Utils.getDeepCopy((Map)op.getCommandData(), 10));\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(EVENT);\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, op.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    return currentConfig;\n  }\n\n","sourceOld":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(EVENT);\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    op = new CommandOperation(op.name, Utils.getDeepCopy((Map)op.getCommandData(), 10));\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(EVENT);\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, op.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    op = new CommandOperation(op.name, Utils.getDeepCopy((Map)op.getCommandData(), 10));\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(EVENT);\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, op.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    op = new CommandOperation(op.name, Utils.getDeepCopy((Map)op.getCommandData(), 10));\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(EVENT);\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, op.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e06fd44bfbf38eccad0c92896a2c40629cf96650","date":1505847137,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        loader.findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        loader.findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    // validate trigger config\n    AutoScaling.Trigger t = null;\n    try {\n      t = triggerFactory.create(trigger.event, trigger.name, trigger.properties);\n    } catch (Exception e) {\n      op.addError(\"Error validating trigger config \" + trigger.name + \": \" + e.toString());\n      return currentConfig;\n    } finally {\n      if (t != null) {\n        IOUtils.closeQuietly(t);\n      }\n    }\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        loader.findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        loader.findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    // validate trigger config\n    AutoScaling.Trigger t = null;\n    try {\n      t = triggerFactory.create(trigger.event, trigger.name, trigger.properties);\n    } catch (Exception e) {\n      op.addError(\"Error validating trigger config \" + trigger.name + \": \" + e.toString());\n      return currentConfig;\n    } finally {\n      if (t != null) {\n        IOUtils.closeQuietly(t);\n      }\n    }\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        loader.findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    // validate trigger config\n    AutoScaling.Trigger t = null;\n    try {\n      t = triggerFactory.create(trigger.event, trigger.name, trigger.properties);\n    } catch (Exception e) {\n      op.addError(\"Error validating trigger config \" + trigger.name + \": \" + e.toString());\n      return currentConfig;\n    } finally {\n      if (t != null) {\n        IOUtils.closeQuietly(t);\n      }\n    }\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    String triggerName = op.getStr(NAME);\n    String eventTypeStr = op.getStr(EVENT);\n\n    if (op.hasError()) return currentConfig;\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n\n    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));\n\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        op.addError(\"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n        return currentConfig;\n      }\n      opCopy.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      opCopy.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo allow creation from blobstore\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        op.addError(\"No 'name' or 'class' specified for action: \" + action);\n        return currentConfig;\n      }\n      String klass = action.get(CLASS);\n      try {\n        loader.findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        log.warn(\"Could not load class : \", e);\n        op.addError(\"Action not found: \" + klass + \" \" + e.getMessage());\n        return currentConfig;\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding(\"name\"));\n    // validate trigger config\n    AutoScaling.Trigger t = null;\n    try {\n      t = triggerFactory.create(trigger.event, trigger.name, trigger.properties);\n    } catch (Exception e) {\n      op.addError(\"Error validating trigger config \" + trigger.name + \": \" + e.toString());\n      return currentConfig;\n    } finally {\n      if (t != null) {\n        IOUtils.closeQuietly(t);\n      }\n    }\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    // check that there's a default SystemLogListener, unless user specified another one\n    return withSystemLogListener(currentConfig, triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e06fd44bfbf38eccad0c92896a2c40629cf96650"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e06fd44bfbf38eccad0c92896a2c40629cf96650":["e3590d254d013266ac3849fae45974e747f7f576"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3590d254d013266ac3849fae45974e747f7f576":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["e3590d254d013266ac3849fae45974e747f7f576"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"e06fd44bfbf38eccad0c92896a2c40629cf96650":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"e3590d254d013266ac3849fae45974e747f7f576":["e06fd44bfbf38eccad0c92896a2c40629cf96650"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}