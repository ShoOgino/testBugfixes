{"path":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","commits":[{"id":"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f","date":1282318824,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"/dev/null","sourceNew":"  boolean match() {\r\n    if (expected == null && val == null) {\r\n      return true;\r\n    }\r\n    if (expected instanceof List) {\r\n      return matchList();\r\n    }\r\n    if (expected instanceof Map) {\r\n      return matchMap();\r\n    }\r\n\r\n    // generic fallback\r\n    if (!expected.equals(val)) {\r\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\r\n      return false;\r\n    }\r\n\r\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\r\n    return true;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == null && val == null) {\n      return true;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\r\n    if (expected == null && val == null) {\r\n      return true;\r\n    }\r\n    if (expected instanceof List) {\r\n      return matchList();\r\n    }\r\n    if (expected instanceof Map) {\r\n      return matchMap();\r\n    }\r\n\r\n    // generic fallback\r\n    if (!expected.equals(val)) {\r\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\r\n      return false;\r\n    }\r\n\r\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2","date":1289765998,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if (expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        // OK\n      } else if (expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float\n          && ((Number)expected).doubleValue() == ((Number)val).doubleValue())\n      {\n        // OK\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == null && val == null) {\n      return true;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if (expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        // OK\n      } else if (expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float\n          && ((Number)expected).doubleValue() == ((Number)val).doubleValue())\n      {\n        // OK\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == null && val == null) {\n      return true;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"/dev/null","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if (expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        // OK\n      } else if (expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float\n          && ((Number)expected).doubleValue() == ((Number)val).doubleValue())\n      {\n        // OK\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d72b2a4aa20f4009c42af30cf7ccfbe89835209","date":1296749647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if (expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        // OK\n      } else if (expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float\n          && ((Number)expected).doubleValue() == ((Number)val).doubleValue())\n      {\n        // OK\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if (expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        // OK\n      } else if (expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float\n          && ((Number)expected).doubleValue() == ((Number)val).doubleValue())\n      {\n        // OK\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if (expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        // OK\n      } else if (expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float\n          && ((Number)expected).doubleValue() == ((Number)val).doubleValue())\n      {\n        // OK\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < 1e-5) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2"],"5d72b2a4aa20f4009c42af30cf7ccfbe89835209":["0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b09c7419b92e982a901698cb401ce22ac35e4b04"],"d20d5e40789b1c42f4f926e3174b271256c43657":["5d72b2a4aa20f4009c42af30cf7ccfbe89835209"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["7d5f59e6aef470c175c845a8c96ea65f20ae4c1f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","5d72b2a4aa20f4009c42af30cf7ccfbe89835209"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b09c7419b92e982a901698cb401ce22ac35e4b04":["5d72b2a4aa20f4009c42af30cf7ccfbe89835209"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","b09c7419b92e982a901698cb401ce22ac35e4b04"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d72b2a4aa20f4009c42af30cf7ccfbe89835209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","5d72b2a4aa20f4009c42af30cf7ccfbe89835209","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"5d72b2a4aa20f4009c42af30cf7ccfbe89835209":["d20d5e40789b1c42f4f926e3174b271256c43657","29ef99d61cda9641b6250bf9567329a6e65f901d","b09c7419b92e982a901698cb401ce22ac35e4b04","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d20d5e40789b1c42f4f926e3174b271256c43657":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d5f59e6aef470c175c845a8c96ea65f20ae4c1f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45669a651c970812a680841b97a77cce06af559f":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}