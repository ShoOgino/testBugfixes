{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731ce99d6c47159d45adbeb814875c92b193134","date":1496694366,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","0731ce99d6c47159d45adbeb814875c92b193134"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0731ce99d6c47159d45adbeb814875c92b193134":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","0731ce99d6c47159d45adbeb814875c92b193134"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e9017cf144952056066919f1ebc7897ff9bd71b1","0731ce99d6c47159d45adbeb814875c92b193134","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0731ce99d6c47159d45adbeb814875c92b193134":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}