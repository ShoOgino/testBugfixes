{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#makeURLList(String).mjava","commits":[{"id":"241163c8f5d129a8327eb3950d20bb4f065b8a14","date":1363612901,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#makeURLList(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a randomized list of urls for the given shard.\n   *\n   * @param shard the urls for the shard (minus \"http://\"), separated by '|'\n   * @return A list of valid urls (including protocol) that are replicas for the shard\n   */\n  public List<String> makeURLList(String shard) {\n    List<String> urls = StrUtils.splitSmart(shard, \"|\", true);\n\n    // convert shard to URL\n    for (int i=0; i<urls.size(); i++) {\n      urls.set(i, scheme + urls.get(i));\n    }\n\n    //\n    // Shuffle the list instead of use round-robin by default.\n    // This prevents accidental synchronization where multiple shards could get in sync\n    // and query the same replica at the same time.\n    //\n    if (urls.size() > 1)\n      Collections.shuffle(urls, r);\n\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#makeURLList(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#makeURLList(String).mjava","sourceNew":"  /**\n   * Creates a randomized list of urls for the given shard.\n   *\n   * @param shard the urls for the shard, separated by '|'\n   * @return A list of valid urls (including protocol) that are replicas for the shard\n   */\n  public List<String> makeURLList(String shard) {\n    List<String> urls = StrUtils.splitSmart(shard, \"|\", true);\n\n    // convert shard to URL\n    for (int i=0; i<urls.size(); i++) {\n      urls.set(i, buildUrl(urls.get(i)));\n    }\n\n    //\n    // Shuffle the list instead of use round-robin by default.\n    // This prevents accidental synchronization where multiple shards could get in sync\n    // and query the same replica at the same time.\n    //\n    if (urls.size() > 1)\n      Collections.shuffle(urls, r);\n\n    return urls;\n  }\n\n","sourceOld":"  /**\n   * Creates a randomized list of urls for the given shard.\n   *\n   * @param shard the urls for the shard (minus \"http://\"), separated by '|'\n   * @return A list of valid urls (including protocol) that are replicas for the shard\n   */\n  public List<String> makeURLList(String shard) {\n    List<String> urls = StrUtils.splitSmart(shard, \"|\", true);\n\n    // convert shard to URL\n    for (int i=0; i<urls.size(); i++) {\n      urls.set(i, scheme + urls.get(i));\n    }\n\n    //\n    // Shuffle the list instead of use round-robin by default.\n    // This prevents accidental synchronization where multiple shards could get in sync\n    // and query the same replica at the same time.\n    //\n    if (urls.size() > 1)\n      Collections.shuffle(urls, r);\n\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a","date":1478684774,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#buildURLList(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#makeURLList(String).mjava","sourceNew":"  /**\n   * Creates a list of urls for the given shard.\n   *\n   * @param shard the urls for the shard, separated by '|'\n   * @return A list of valid urls (including protocol) that are replicas for the shard\n   */\n  public List<String> buildURLList(String shard) {\n    List<String> urls = StrUtils.splitSmart(shard, \"|\", true);\n\n    // convert shard to URL\n    for (int i=0; i<urls.size(); i++) {\n      urls.set(i, buildUrl(urls.get(i)));\n    }\n\n    return urls;\n  }\n\n","sourceOld":"  /**\n   * Creates a randomized list of urls for the given shard.\n   *\n   * @param shard the urls for the shard, separated by '|'\n   * @return A list of valid urls (including protocol) that are replicas for the shard\n   */\n  public List<String> makeURLList(String shard) {\n    List<String> urls = StrUtils.splitSmart(shard, \"|\", true);\n\n    // convert shard to URL\n    for (int i=0; i<urls.size(); i++) {\n      urls.set(i, buildUrl(urls.get(i)));\n    }\n\n    //\n    // Shuffle the list instead of use round-robin by default.\n    // This prevents accidental synchronization where multiple shards could get in sync\n    // and query the same replica at the same time.\n    //\n    if (urls.size() > 1)\n      Collections.shuffle(urls, r);\n\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#buildURLList(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#makeURLList(String).mjava","sourceNew":"  /**\n   * Creates a list of urls for the given shard.\n   *\n   * @param shard the urls for the shard, separated by '|'\n   * @return A list of valid urls (including protocol) that are replicas for the shard\n   */\n  public List<String> buildURLList(String shard) {\n    List<String> urls = StrUtils.splitSmart(shard, \"|\", true);\n\n    // convert shard to URL\n    for (int i=0; i<urls.size(); i++) {\n      urls.set(i, buildUrl(urls.get(i)));\n    }\n\n    return urls;\n  }\n\n","sourceOld":"  /**\n   * Creates a randomized list of urls for the given shard.\n   *\n   * @param shard the urls for the shard, separated by '|'\n   * @return A list of valid urls (including protocol) that are replicas for the shard\n   */\n  public List<String> makeURLList(String shard) {\n    List<String> urls = StrUtils.splitSmart(shard, \"|\", true);\n\n    // convert shard to URL\n    for (int i=0; i<urls.size(); i++) {\n      urls.set(i, buildUrl(urls.get(i)));\n    }\n\n    //\n    // Shuffle the list instead of use round-robin by default.\n    // This prevents accidental synchronization where multiple shards could get in sync\n    // and query the same replica at the same time.\n    //\n    if (urls.size() > 1)\n      Collections.shuffle(urls, r);\n\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["241163c8f5d129a8327eb3950d20bb4f065b8a14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"241163c8f5d129a8327eb3950d20bb4f065b8a14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"]},"commit2Childs":{"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["241163c8f5d129a8327eb3950d20bb4f065b8a14"],"241163c8f5d129a8327eb3950d20bb4f065b8a14":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"f82cd77bc27bbdd30a6dd22e5adb2cf8def2c34a":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}