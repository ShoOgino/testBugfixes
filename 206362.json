{"path":"backwards/src/test/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,Searcher,int[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,Searcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates no match\n   * (ie: Explanation value of 0.0f)\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              Searcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set ignore = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertEquals(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                            \" doesn't indicate non-match: \" + exp.toString(),\n                            0.0f, exp.getValue(), 0.0f);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,Searcher,int[]).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates no match\n   * (ie: Explanation value of 0.0f)\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              Searcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set ignore = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertEquals(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                            \" doesn't indicate non-match: \" + exp.toString(),\n                            0.0f, exp.getValue(), 0.0f);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates no match\n   * (ie: Explanation value of 0.0f)\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              Searcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set ignore = new TreeSet();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertEquals(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                            \" doesn't indicate non-match: \" + exp.toString(),\n                            0.0f, exp.getValue(), 0.0f);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}