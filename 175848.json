{"path":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testLeaderAndMixedReplicas(boolean).mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testLeaderAndMixedReplicas(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void testLeaderAndMixedReplicas(boolean leaderInOldMode) throws Exception {\n    // in case of new leader and mixed old replica and new replica, new leader can still put all of them into recovery\n    // step1 : setup collection\n    String collection = \"testMixedReplicas-\"+leaderInOldMode;\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    if (leaderInOldMode) {\n      CollectionAdminRequest\n          .addReplicaToShard(collection, \"shard1\")\n          .setProperties(oldLir)\n          .setNode(cluster.getJettySolrRunner(0).getNodeName())\n          .process(cluster.getSolrClient());\n    } else {\n      CollectionAdminRequest\n          .addReplicaToShard(collection, \"shard1\")\n          .setNode(cluster.getJettySolrRunner(0).getNodeName())\n          .process(cluster.getSolrClient());\n    }\n\n    waitForState(\"Timeout waiting for shard1 become active\", collection, clusterShape(1, 1));\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    Replica replicaInOldMode = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    Replica replicaInNewMode = shard1.getReplicas(x -> x != shard1.getLeader()).get(1);\n    Replica leader = shard1.getLeader();\n\n    assertEquals(leaderInOldMode, runInOldLIRMode(collection, \"shard1\", leader));\n    if (!runInOldLIRMode(collection, \"shard1\", replicaInOldMode)) {\n      Replica temp = replicaInOldMode;\n      replicaInOldMode = replicaInNewMode;\n      replicaInNewMode = temp;\n    }\n    assertTrue(runInOldLIRMode(collection, \"shard1\", replicaInOldMode));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", replicaInNewMode));\n\n    addDocs(collection, 2, 0);\n\n    // step2 : introduce network partition then add doc, replicas should be put into recovery\n    getProxyForReplica(replicaInOldMode).close();\n    getProxyForReplica(replicaInNewMode).close();\n    getProxyForReplica(leader).close();\n\n    JettySolrRunner leaderJetty = getJettyForReplica(leader);\n    addDoc(collection, 2, leaderJetty);\n\n    Replica finalReplicaInOldMode = replicaInOldMode;\n    waitForState(\"Replica \" + replicaInOldMode.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(finalReplicaInOldMode.getName()).getState() == Replica.State.DOWN);\n\n    // wait a little bit\n    Thread.sleep(500);\n    getProxyForReplica(replicaInOldMode).reopen();\n    getProxyForReplica(replicaInNewMode).reopen();\n    getProxyForReplica(leader).reopen();\n\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(replicaInNewMode, replicaInOldMode), collection, 0, 2);\n\n    addDocs(collection, 3, 3);\n\n    // ensure that, leader should not register other replica's term\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      assertFalse(zkShardTerms.getTerms().containsKey(replicaInOldMode.getName()));\n    }\n\n    // step3 : upgrade the replica running in old mode to the new mode\n    getProxyForReplica(leader).close();\n    getProxyForReplica(replicaInOldMode).close();\n    addDoc(collection, 6, leaderJetty);\n    JettySolrRunner oldJetty = getJettyForReplica(replicaInOldMode);\n    oldJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState)\n        -> liveNodes.size() == 2);\n    upgrade(oldJetty);\n\n    oldJetty.start();\n    getProxyForReplica(leader).reopen();\n    getProxyForReplica(replicaInOldMode).reopen();\n\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(replicaInNewMode, replicaInOldMode), collection, 0, 6);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755a288a255ef805898652744dc5b055f44cb6bc","date":1520851176,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testLeaderAndMixedReplicas(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testLeaderAndMixedReplicas(boolean).mjava","sourceNew":"  public void testLeaderAndMixedReplicas(boolean leaderInOldMode) throws Exception {\n    // in case of new leader and mixed old replica and new replica, new leader can still put all of them into recovery\n    // step1 : setup collection\n    String collection = \"testMixedReplicas-\"+leaderInOldMode;\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    if (leaderInOldMode) {\n      CollectionAdminRequest\n          .addReplicaToShard(collection, \"shard1\")\n          .setProperties(oldLir)\n          .setNode(cluster.getJettySolrRunner(0).getNodeName())\n          .process(cluster.getSolrClient());\n    } else {\n      CollectionAdminRequest\n          .addReplicaToShard(collection, \"shard1\")\n          .setNode(cluster.getJettySolrRunner(0).getNodeName())\n          .process(cluster.getSolrClient());\n    }\n\n    waitForState(\"Timeout waiting for shard1 become active\", collection, clusterShape(1, 1));\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard1 become active\", collection, clusterShape(1, 3));\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    Replica replicaInOldMode = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    Replica replicaInNewMode = shard1.getReplicas(x -> x != shard1.getLeader()).get(1);\n    Replica leader = shard1.getLeader();\n\n    assertEquals(leaderInOldMode, runInOldLIRMode(collection, \"shard1\", leader));\n    if (!runInOldLIRMode(collection, \"shard1\", replicaInOldMode)) {\n      Replica temp = replicaInOldMode;\n      replicaInOldMode = replicaInNewMode;\n      replicaInNewMode = temp;\n    }\n    assertTrue(runInOldLIRMode(collection, \"shard1\", replicaInOldMode));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", replicaInNewMode));\n\n    addDocs(collection, 2, 0);\n\n    // step2 : introduce network partition then add doc, replicas should be put into recovery\n    getProxyForReplica(replicaInOldMode).close();\n    getProxyForReplica(replicaInNewMode).close();\n    getProxyForReplica(leader).close();\n\n    JettySolrRunner leaderJetty = getJettyForReplica(leader);\n    addDoc(collection, 2, leaderJetty);\n\n    Replica finalReplicaInOldMode = replicaInOldMode;\n    waitForState(\"Replica \" + replicaInOldMode.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(finalReplicaInOldMode.getName()).getState() == Replica.State.DOWN);\n    Replica finalReplicaInNewMode = replicaInNewMode;\n    waitForState(\"Replica \" + finalReplicaInNewMode.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(finalReplicaInNewMode.getName()).getState() == Replica.State.DOWN);\n\n    // wait a little bit\n    Thread.sleep(500);\n    getProxyForReplica(replicaInOldMode).reopen();\n    getProxyForReplica(replicaInNewMode).reopen();\n    getProxyForReplica(leader).reopen();\n\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(replicaInNewMode, replicaInOldMode), collection, 0, 2);\n\n    addDocs(collection, 3, 3);\n\n    // ensure that, leader should not register other replica's term\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      assertFalse(zkShardTerms.getTerms().containsKey(replicaInOldMode.getName()));\n    }\n\n    // step3 : upgrade the replica running in old mode to the new mode\n    getProxyForReplica(leader).close();\n    getProxyForReplica(replicaInOldMode).close();\n    addDoc(collection, 6, leaderJetty);\n    JettySolrRunner oldJetty = getJettyForReplica(replicaInOldMode);\n    oldJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState)\n        -> liveNodes.size() == 2);\n    upgrade(oldJetty);\n\n    oldJetty.start();\n    getProxyForReplica(leader).reopen();\n    getProxyForReplica(replicaInOldMode).reopen();\n\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(replicaInNewMode, replicaInOldMode), collection, 0, 6);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testLeaderAndMixedReplicas(boolean leaderInOldMode) throws Exception {\n    // in case of new leader and mixed old replica and new replica, new leader can still put all of them into recovery\n    // step1 : setup collection\n    String collection = \"testMixedReplicas-\"+leaderInOldMode;\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    if (leaderInOldMode) {\n      CollectionAdminRequest\n          .addReplicaToShard(collection, \"shard1\")\n          .setProperties(oldLir)\n          .setNode(cluster.getJettySolrRunner(0).getNodeName())\n          .process(cluster.getSolrClient());\n    } else {\n      CollectionAdminRequest\n          .addReplicaToShard(collection, \"shard1\")\n          .setNode(cluster.getJettySolrRunner(0).getNodeName())\n          .process(cluster.getSolrClient());\n    }\n\n    waitForState(\"Timeout waiting for shard1 become active\", collection, clusterShape(1, 1));\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    Replica replicaInOldMode = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    Replica replicaInNewMode = shard1.getReplicas(x -> x != shard1.getLeader()).get(1);\n    Replica leader = shard1.getLeader();\n\n    assertEquals(leaderInOldMode, runInOldLIRMode(collection, \"shard1\", leader));\n    if (!runInOldLIRMode(collection, \"shard1\", replicaInOldMode)) {\n      Replica temp = replicaInOldMode;\n      replicaInOldMode = replicaInNewMode;\n      replicaInNewMode = temp;\n    }\n    assertTrue(runInOldLIRMode(collection, \"shard1\", replicaInOldMode));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", replicaInNewMode));\n\n    addDocs(collection, 2, 0);\n\n    // step2 : introduce network partition then add doc, replicas should be put into recovery\n    getProxyForReplica(replicaInOldMode).close();\n    getProxyForReplica(replicaInNewMode).close();\n    getProxyForReplica(leader).close();\n\n    JettySolrRunner leaderJetty = getJettyForReplica(leader);\n    addDoc(collection, 2, leaderJetty);\n\n    Replica finalReplicaInOldMode = replicaInOldMode;\n    waitForState(\"Replica \" + replicaInOldMode.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(finalReplicaInOldMode.getName()).getState() == Replica.State.DOWN);\n\n    // wait a little bit\n    Thread.sleep(500);\n    getProxyForReplica(replicaInOldMode).reopen();\n    getProxyForReplica(replicaInNewMode).reopen();\n    getProxyForReplica(leader).reopen();\n\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(replicaInNewMode, replicaInOldMode), collection, 0, 2);\n\n    addDocs(collection, 3, 3);\n\n    // ensure that, leader should not register other replica's term\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      assertFalse(zkShardTerms.getTerms().containsKey(replicaInOldMode.getName()));\n    }\n\n    // step3 : upgrade the replica running in old mode to the new mode\n    getProxyForReplica(leader).close();\n    getProxyForReplica(replicaInOldMode).close();\n    addDoc(collection, 6, leaderJetty);\n    JettySolrRunner oldJetty = getJettyForReplica(replicaInOldMode);\n    oldJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState)\n        -> liveNodes.size() == 2);\n    upgrade(oldJetty);\n\n    oldJetty.start();\n    getProxyForReplica(leader).reopen();\n    getProxyForReplica(replicaInOldMode).reopen();\n\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(replicaInNewMode, replicaInOldMode), collection, 0, 6);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testLeaderAndMixedReplicas(boolean).mjava","sourceNew":null,"sourceOld":"  public void testLeaderAndMixedReplicas(boolean leaderInOldMode) throws Exception {\n    // in case of new leader and mixed old replica and new replica, new leader can still put all of them into recovery\n    // step1 : setup collection\n    String collection = \"testMixedReplicas-\"+leaderInOldMode;\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    if (leaderInOldMode) {\n      CollectionAdminRequest\n          .addReplicaToShard(collection, \"shard1\")\n          .setProperties(oldLir)\n          .setNode(cluster.getJettySolrRunner(0).getNodeName())\n          .process(cluster.getSolrClient());\n    } else {\n      CollectionAdminRequest\n          .addReplicaToShard(collection, \"shard1\")\n          .setNode(cluster.getJettySolrRunner(0).getNodeName())\n          .process(cluster.getSolrClient());\n    }\n\n    waitForState(\"Timeout waiting for shard1 become active\", collection, clusterShape(1, 1));\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard1 become active\", collection, clusterShape(1, 3));\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    Replica replicaInOldMode = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    Replica replicaInNewMode = shard1.getReplicas(x -> x != shard1.getLeader()).get(1);\n    Replica leader = shard1.getLeader();\n\n    assertEquals(leaderInOldMode, runInOldLIRMode(collection, \"shard1\", leader));\n    if (!runInOldLIRMode(collection, \"shard1\", replicaInOldMode)) {\n      Replica temp = replicaInOldMode;\n      replicaInOldMode = replicaInNewMode;\n      replicaInNewMode = temp;\n    }\n    assertTrue(runInOldLIRMode(collection, \"shard1\", replicaInOldMode));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", replicaInNewMode));\n\n    addDocs(collection, 2, 0);\n\n    // step2 : introduce network partition then add doc, replicas should be put into recovery\n    getProxyForReplica(replicaInOldMode).close();\n    getProxyForReplica(replicaInNewMode).close();\n    getProxyForReplica(leader).close();\n\n    JettySolrRunner leaderJetty = getJettyForReplica(leader);\n    addDoc(collection, 2, leaderJetty);\n\n    Replica finalReplicaInOldMode = replicaInOldMode;\n    waitForState(\"Replica \" + replicaInOldMode.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(finalReplicaInOldMode.getName()).getState() == Replica.State.DOWN);\n    Replica finalReplicaInNewMode = replicaInNewMode;\n    waitForState(\"Replica \" + finalReplicaInNewMode.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(finalReplicaInNewMode.getName()).getState() == Replica.State.DOWN);\n\n    // wait a little bit\n    Thread.sleep(500);\n    getProxyForReplica(replicaInOldMode).reopen();\n    getProxyForReplica(replicaInNewMode).reopen();\n    getProxyForReplica(leader).reopen();\n\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(replicaInNewMode, replicaInOldMode), collection, 0, 2);\n\n    addDocs(collection, 3, 3);\n\n    // ensure that, leader should not register other replica's term\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      assertFalse(zkShardTerms.getTerms().containsKey(replicaInOldMode.getName()));\n    }\n\n    // step3 : upgrade the replica running in old mode to the new mode\n    getProxyForReplica(leader).close();\n    getProxyForReplica(replicaInOldMode).close();\n    addDoc(collection, 6, leaderJetty);\n    JettySolrRunner oldJetty = getJettyForReplica(replicaInOldMode);\n    oldJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState)\n        -> liveNodes.size() == 2);\n    upgrade(oldJetty);\n\n    oldJetty.start();\n    getProxyForReplica(leader).reopen();\n    getProxyForReplica(replicaInOldMode).reopen();\n\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(replicaInNewMode, replicaInOldMode), collection, 0, 6);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"755a288a255ef805898652744dc5b055f44cb6bc":["84f20f331d8001864545c7021812d8c6509c7593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["755a288a255ef805898652744dc5b055f44cb6bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"]},"commit2Childs":{"755a288a255ef805898652744dc5b055f44cb6bc":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["755a288a255ef805898652744dc5b055f44cb6bc"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}