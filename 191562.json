{"path":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#fullNestedDocTemplate(int).mjava","commits":[{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#fullNestedDocTemplate(int).mjava","pathOld":"/dev/null","sourceNew":"  private static String fullNestedDocTemplate(int id) {\n    final int docNum = (id - firstTestedDocId) / sumOfDocsPerNestedDocument; // the index of docs sent to solr in the AddUpdateCommand. e.g. first doc is 0\n    boolean doubleIngredient = docNum % 2 == 0;\n    String currIngredient = doubleIngredient ? ingredients[1]: ingredientsCycler.next();\n    return\n        \"SolrDocument{id=\" + id + \", type_s=\" + types[docNum % types.length] + \", name_s=\" + names[docNum % names.length] + \", \" +\n          \"lonely=SolrDocument{id=\" + (id + 1) + \", test_s=testing, \" +\n            \"lonelyGrandChild=SolrDocument{id=\" + (id + 2) + \", test2_s=secondTest}}, \" +\n          \"toppings=[\" +\n            \"SolrDocument{id=\" + (id + 3) + \", type_s=Regular, \" +\n              \"ingredients=[SolrDocument{id=\" + (id + 4) + \", name_s=\" + currIngredient + \"}]}, \" +\n            \"SolrDocument{id=\" + (id + 5) + \", type_s=Chocolate, \" +\n              \"ingredients=[SolrDocument{id=\" + (id + 6) + \", name_s=cocoa}, SolrDocument{id=\" + (id + 7) + \", name_s=cocoa}]}]}\";\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357","date":1535564142,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#fullNestedDocTemplate(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#fullNestedDocTemplate(int).mjava","sourceNew":"  private static String fullNestedDocTemplate(int id) {\n    final int docNum = id / sumOfDocsPerNestedDocument; // the index of docs sent to solr in the AddUpdateCommand. e.g. first doc is 0\n    boolean doubleIngredient = docNum % 2 == 0;\n    String currIngredient = doubleIngredient ? ingredients[1]: ingredientsCycler.next();\n    return\n        \"SolrDocument{id=\" + id + \", type_s=\" + types[docNum % types.length] + \", name_s=\" + names[docNum % names.length] + \", \" +\n          \"lonely=SolrDocument{id=\" + (id + 1) + \", test_s=testing, \" +\n            \"lonelyGrandChild=SolrDocument{id=\" + (id + 2) + \", test2_s=secondTest}}, \" +\n          \"toppings=[\" +\n            \"SolrDocument{id=\" + (id + 3) + \", type_s=Regular, \" +\n              \"ingredients=[SolrDocument{id=\" + (id + 4) + \", name_s=\" + currIngredient + \"}]}, \" +\n            \"SolrDocument{id=\" + (id + 5) + \", type_s=Chocolate, \" +\n              \"ingredients=[SolrDocument{id=\" + (id + 6) + \", name_s=cocoa}, SolrDocument{id=\" + (id + 7) + \", name_s=cocoa}]}]}\";\n  }\n\n","sourceOld":"  private static String fullNestedDocTemplate(int id) {\n    final int docNum = (id - firstTestedDocId) / sumOfDocsPerNestedDocument; // the index of docs sent to solr in the AddUpdateCommand. e.g. first doc is 0\n    boolean doubleIngredient = docNum % 2 == 0;\n    String currIngredient = doubleIngredient ? ingredients[1]: ingredientsCycler.next();\n    return\n        \"SolrDocument{id=\" + id + \", type_s=\" + types[docNum % types.length] + \", name_s=\" + names[docNum % names.length] + \", \" +\n          \"lonely=SolrDocument{id=\" + (id + 1) + \", test_s=testing, \" +\n            \"lonelyGrandChild=SolrDocument{id=\" + (id + 2) + \", test2_s=secondTest}}, \" +\n          \"toppings=[\" +\n            \"SolrDocument{id=\" + (id + 3) + \", type_s=Regular, \" +\n              \"ingredients=[SolrDocument{id=\" + (id + 4) + \", name_s=\" + currIngredient + \"}]}, \" +\n            \"SolrDocument{id=\" + (id + 5) + \", type_s=Chocolate, \" +\n              \"ingredients=[SolrDocument{id=\" + (id + 6) + \", name_s=cocoa}, SolrDocument{id=\" + (id + 7) + \", name_s=cocoa}]}]}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}