{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ir.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    ir.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ir.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    ir.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ir.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    ir.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    ir.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    ir.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", TextField.TYPE_UNSTORED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexReader ir = IndexReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    ir.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}