{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqIterator).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    if (tfit.getComparator() != null) {\n      // make sure it's unsorted\n      // WTF - this could result in yet another sorted iteration....\n      tfit = new UnsortedTermFreqIteratorWrapper(tfit);\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    if (tfit.getComparator() != null) {\n      // make sure it's unsorted\n      // WTF - this could result in yet another sorted iteration....\n      tfit = new UnsortedTermFreqIteratorWrapper(tfit);\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a48377c9931ddb38c784846217ff68d7dcd0b44","date":1363202036,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    if (tfit instanceof TermFreqPayloadIterator) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (tfit.getComparator() != null) {\n      // make sure it's unsorted\n      // WTF - this could result in yet another sorted iteration....\n      tfit = new UnsortedTermFreqIteratorWrapper(tfit);\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    if (tfit.getComparator() != null) {\n      // make sure it's unsorted\n      // WTF - this could result in yet another sorted iteration....\n      tfit = new UnsortedTermFreqIteratorWrapper(tfit);\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    if (tfit instanceof TermFreqPayloadIterator) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    if (tfit instanceof TermFreqPayloadIterator) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (tfit.getComparator() != null) {\n      // make sure it's unsorted\n      // WTF - this could result in yet another sorted iteration....\n      tfit = new UnsortedTermFreqIteratorWrapper(tfit);\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqPayloadIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqPayloadIterator tfit) throws IOException {\n    if (tfit.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    if (tfit instanceof TermFreqPayloadIterator) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a48377c9931ddb38c784846217ff68d7dcd0b44":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"5a48377c9931ddb38c784846217ff68d7dcd0b44":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}