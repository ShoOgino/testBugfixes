{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","pathOld":"/dev/null","sourceNew":"    /* \n     * Test method for \n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)' \n     */ \n    public void testUpdateEntry() throws IOException, InterruptedException, FeedNotFoundException, ParseException, StorageException { \n        testInsertEntry(); \n        for(int i = 1; i < this.count; i++){ \n            Entry e = new Entry(); \n            e.setId(\"\"+i); \n            String insertString = \"Hello world\"+i; \n            e.setTitle(new PlainTextConstruct(insertString)); \n            StorageEntryWrapper wrapper = new StorageEntryWrapper(e,feedId,StorageOperation.UPDATE,this.profile); \n            this.modifier.updateEntry(wrapper); \n            ReferenceCounter<StorageQuery> innerQuery = StorageCoreController.getStorageCoreController().getStorageQuery(); \n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\"+i,feedId,this.profile); \n            assertEquals(\"updated Title:\",insertString,fetchedEntry.getTitle().getPlainText());             \n        } \n        // double updates \n        for(int i = 1; i < this.count; i++){ \n            Entry e = new Entry(); \n            e.setId(\"\"+i); \n            String insertString = \"Hello world\"+i; \n            e.setTitle(new PlainTextConstruct(insertString)); \n            StorageEntryWrapper wrapper = new StorageEntryWrapper(e,feedId,StorageOperation.UPDATE,this.profile); \n            this.modifier.updateEntry(wrapper); \n             \n            e = new Entry(); \n            e.setId(\"\"+i); \n            insertString = \"Foo Bar\"+i; \n            e.setTitle(new PlainTextConstruct(insertString)); \n            wrapper = new StorageEntryWrapper(e,feedId,StorageOperation.UPDATE,this.profile); \n            this.modifier.updateEntry(wrapper); \n             \n            ReferenceCounter<StorageQuery> innerQuery = StorageCoreController.getStorageCoreController().getStorageQuery(); \n             \n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\"+i,feedId,this.profile); \n            assertEquals(\"updated Title:\",insertString,fetchedEntry.getTitle().getPlainText());             \n        } \n \n         \n         \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'\n     */\n    public void testUpdateEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        // double updates\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            e = new Entry();\n            e.setId(\"\" + i);\n            insertString = \"Foo Bar\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            en = getServerEntry(e);\n            wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n\n    }\n\n","sourceOld":"    /* \n     * Test method for \n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)' \n     */ \n    public void testUpdateEntry() throws IOException, InterruptedException, FeedNotFoundException, ParseException, StorageException { \n        testInsertEntry(); \n        for(int i = 1; i < this.count; i++){ \n            Entry e = new Entry(); \n            e.setId(\"\"+i); \n            String insertString = \"Hello world\"+i; \n            e.setTitle(new PlainTextConstruct(insertString)); \n            StorageEntryWrapper wrapper = new StorageEntryWrapper(e,feedId,StorageOperation.UPDATE,this.profile); \n            this.modifier.updateEntry(wrapper); \n            ReferenceCounter<StorageQuery> innerQuery = StorageCoreController.getStorageCoreController().getStorageQuery(); \n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\"+i,feedId,this.profile); \n            assertEquals(\"updated Title:\",insertString,fetchedEntry.getTitle().getPlainText());             \n        } \n        // double updates \n        for(int i = 1; i < this.count; i++){ \n            Entry e = new Entry(); \n            e.setId(\"\"+i); \n            String insertString = \"Hello world\"+i; \n            e.setTitle(new PlainTextConstruct(insertString)); \n            StorageEntryWrapper wrapper = new StorageEntryWrapper(e,feedId,StorageOperation.UPDATE,this.profile); \n            this.modifier.updateEntry(wrapper); \n             \n            e = new Entry(); \n            e.setId(\"\"+i); \n            insertString = \"Foo Bar\"+i; \n            e.setTitle(new PlainTextConstruct(insertString)); \n            wrapper = new StorageEntryWrapper(e,feedId,StorageOperation.UPDATE,this.profile); \n            this.modifier.updateEntry(wrapper); \n             \n            ReferenceCounter<StorageQuery> innerQuery = StorageCoreController.getStorageCoreController().getStorageQuery(); \n             \n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\"+i,feedId,this.profile); \n            assertEquals(\"updated Title:\",insertString,fetchedEntry.getTitle().getPlainText());             \n        } \n \n         \n         \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'\n     */\n    public void testUpdateEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        // double updates\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            e = new Entry();\n            e.setId(\"\" + i);\n            insertString = \"Foo Bar\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            en = getServerEntry(e);\n            wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        \n       \n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'\n     */\n    public void testUpdateEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        // double updates\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            e = new Entry();\n            e.setId(\"\" + i);\n            insertString = \"Foo Bar\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            en = getServerEntry(e);\n            wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'\n     */\n    public void testUpdateEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        // double updates\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            e = new Entry();\n            e.setId(\"\" + i);\n            insertString = \"Foo Bar\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            en = getServerEntry(e);\n            wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        \n       \n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'\n     */\n    public void testUpdateEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        // double updates\n        for (int i = 1; i < this.count; i++) {\n            Entry e = new Entry();\n            e.setId(\"\" + i);\n            String insertString = \"Hello world\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            ServerBaseEntry en = getServerEntry(e);\n            StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            e = new Entry();\n            e.setId(\"\" + i);\n            insertString = \"Foo Bar\" + i;\n            e.setTitle(new PlainTextConstruct(insertString));\n            en = getServerEntry(e);\n            wrapper = new StorageEntryWrapper(en,\n                    StorageOperation.UPDATE);\n            this.modifier.updateEntry(wrapper);\n\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n\n            BaseEntry fetchedEntry = innerQuery.get().singleEntryQuery(\"\" + i,\n                    feedId, this.configurator);\n            assertEquals(\"updated Title:\", insertString, fetchedEntry\n                    .getTitle().getPlainText());\n        }\n        \n       \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}