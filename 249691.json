{"path":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (subReaders.length > 0) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (subReaders.length > 0) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final List<? extends IndexReader> subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (!subReaders.isEmpty()) {\n      buffer.append(subReaders.get(0));\n      for (int i = 1, c = subReaders.size(); i < c; ++i) {\n        buffer.append(\" \").append(subReaders.get(i));\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (subReaders.length > 0) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48180ea0d6210cab36e06798b916a39e0607713b","date":1367051483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    // walk up through class hierarchy to get a non-empty simple name (anonymous classes have no name):\n    for (Class<?> clazz = getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n      if (!clazz.isAnonymousClass()) {\n        buffer.append(clazz.getSimpleName());\n        break;\n      }\n    }\n    buffer.append('(');\n    final List<? extends IndexReader> subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (!subReaders.isEmpty()) {\n      buffer.append(subReaders.get(0));\n      for (int i = 1, c = subReaders.size(); i < c; ++i) {\n        buffer.append(\" \").append(subReaders.get(i));\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final List<? extends IndexReader> subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (!subReaders.isEmpty()) {\n      buffer.append(subReaders.get(0));\n      for (int i = 1, c = subReaders.size(); i < c; ++i) {\n        buffer.append(\" \").append(subReaders.get(i));\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":["75269f4dedadda2b3bd49e0e009adf4c158f7a42"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48180ea0d6210cab36e06798b916a39e0607713b":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48180ea0d6210cab36e06798b916a39e0607713b"]},"commit2Childs":{"48180ea0d6210cab36e06798b916a39e0607713b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["48180ea0d6210cab36e06798b916a39e0607713b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}