{"path":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n\n      public Query parse() throws ParseException {\n        String b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        ValueSource vs;\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(q, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71bbe672a26ef56876a0ce949b0a4de41f602057","date":1194896341,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(q, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n\n      public Query parse() throws ParseException {\n        String b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        ValueSource vs;\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(q, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c6c33d543fd64df85d12296dd5772818e8d27d0","date":1204652564,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(q, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d9871701755df956b8bb5e417776dacc7dc1f2","date":1237846124,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.parse();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).parse();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"3c6c33d543fd64df85d12296dd5772818e8d27d0":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["3c6c33d543fd64df85d12296dd5772818e8d27d0"]},"commit2Childs":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["3c6c33d543fd64df85d12296dd5772818e8d27d0"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"3c6c33d543fd64df85d12296dd5772818e8d27d0":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}