{"path":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","commits":[{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      boolean needsScores, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      boolean needsScores, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      boolean needsScores, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      boolean needsScores, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,ScoreMode,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      ScoreMode scoreMode, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new WANDScorer(weight, optionalScorers);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, scoreMode.needsScores());\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      boolean needsScores, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,ScoreMode,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      ScoreMode scoreMode, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new WANDScorer(weight, optionalScorers);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, scoreMode.needsScores());\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      boolean needsScores, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}