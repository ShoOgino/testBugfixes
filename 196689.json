{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testInfoStream().mjava","sourceNew":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) NumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","sourceOld":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getDoubles(reader, \"theDouble\", false);\n      cache.getFloats(reader, \"theDouble\", new FieldCache.FloatParser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n        }\n        @Override\n        public float parseFloat(BytesRef term) {\n          return NumericUtils.sortableIntToFloat((int) NumericUtils.prefixCodedToLong(term));\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testInfoStream().mjava","sourceNew":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) NumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","sourceOld":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getDoubles(reader, \"theDouble\", false);\n      cache.getFloats(reader, \"theDouble\", new FieldCache.FloatParser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n        }\n        @Override\n        public float parseFloat(BytesRef term) {\n          return NumericUtils.sortableIntToFloat((int) NumericUtils.prefixCodedToLong(term));\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testInfoStream().mjava","sourceNew":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) NumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","sourceOld":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getDoubles(reader, \"theDouble\", false);\n      cache.getFloats(reader, \"theDouble\", new FieldCache.FloatParser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n        }\n        @Override\n        public float parseFloat(BytesRef term) {\n          return NumericUtils.sortableIntToFloat((int) NumericUtils.prefixCodedToLong(term));\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","sourceNew":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator());\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) NumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","sourceOld":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) NumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","sourceNew":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) LegacyNumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","sourceOld":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return NumericUtils.filterPrefixCodedLongs(terms.iterator());\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) NumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testInfoStream().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testInfoStream().mjava","sourceNew":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) LegacyNumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","sourceOld":"  public void testInfoStream() throws Exception {\n    try {\n      FieldCache cache = FieldCache.DEFAULT;\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      cache.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n      cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n      cache.getNumerics(reader, \"theDouble\", new FieldCache.Parser() {\n        @Override\n        public TermsEnum termsEnum(Terms terms) throws IOException {\n          return LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n        }\n        @Override\n        public long parseValue(BytesRef term) {\n          int val = (int) LegacyNumericUtils.prefixCodedToLong(term);\n          if (val<0) val ^= 0x7fffffff;\n          return val;\n        }\n      }, false);\n      assertTrue(bos.toString(IOUtils.UTF_8).indexOf(\"WARNING\") != -1);\n    } finally {\n      FieldCache.DEFAULT.setInfoStream(null);\n      FieldCache.DEFAULT.purgeAllCaches();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["770342641f7b505eaa8dccdc666158bff2419109"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"770342641f7b505eaa8dccdc666158bff2419109":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c146731a64debc22c115bbf11ee1a060aa7ea02"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["770342641f7b505eaa8dccdc666158bff2419109"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"770342641f7b505eaa8dccdc666158bff2419109":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}