{"path":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testReloadFromPersistentStorage().mjava","commits":[{"id":"637230d0125f5aa153298289322945139167ef76","date":1404226166,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testReloadFromPersistentStorage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReloadFromPersistentStorage() throws Exception {\n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");\n    File unitTestStorageDir = createTempDir(\"testRestManager\");\n    assertTrue(unitTestStorageDir.getAbsolutePath()+\" is not a directory!\", \n        unitTestStorageDir.isDirectory());    \n    assertTrue(unitTestStorageDir.canRead());\n    assertTrue(unitTestStorageDir.canWrite());\n\n    NamedList<String> ioInitArgs = new NamedList<>();\n    ioInitArgs.add(ManagedResourceStorage.STORAGE_DIR_INIT_ARG, \n        unitTestStorageDir.getAbsolutePath());\n    \n    StorageIO storageIO = new ManagedResourceStorage.FileStorageIO();\n    storageIO.configure(loader, ioInitArgs);\n    \n    NamedList<String> initArgs = new NamedList<>();\n    RestManager restManager = new RestManager();\n    restManager.init(loader, initArgs, storageIO);\n    \n    // verifies a RestManager can be reloaded from a previous RestManager's data\n    RestManager restManager2 = new RestManager();\n    restManager2.init(loader, initArgs, storageIO);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testReloadFromPersistentStorage().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testReloadFromPersistentStorage().mjava","sourceNew":"  @Test\n  public void testReloadFromPersistentStorage() throws Exception {\n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");\n    File unitTestStorageDir = createTempDir(\"testRestManager\").toFile();\n    assertTrue(unitTestStorageDir.getAbsolutePath()+\" is not a directory!\", \n        unitTestStorageDir.isDirectory());    \n    assertTrue(unitTestStorageDir.canRead());\n    assertTrue(unitTestStorageDir.canWrite());\n\n    NamedList<String> ioInitArgs = new NamedList<>();\n    ioInitArgs.add(ManagedResourceStorage.STORAGE_DIR_INIT_ARG, \n        unitTestStorageDir.getAbsolutePath());\n    \n    StorageIO storageIO = new ManagedResourceStorage.FileStorageIO();\n    storageIO.configure(loader, ioInitArgs);\n    \n    NamedList<String> initArgs = new NamedList<>();\n    RestManager restManager = new RestManager();\n    restManager.init(loader, initArgs, storageIO);\n    \n    // verifies a RestManager can be reloaded from a previous RestManager's data\n    RestManager restManager2 = new RestManager();\n    restManager2.init(loader, initArgs, storageIO);    \n  }\n\n","sourceOld":"  @Test\n  public void testReloadFromPersistentStorage() throws Exception {\n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");\n    File unitTestStorageDir = createTempDir(\"testRestManager\");\n    assertTrue(unitTestStorageDir.getAbsolutePath()+\" is not a directory!\", \n        unitTestStorageDir.isDirectory());    \n    assertTrue(unitTestStorageDir.canRead());\n    assertTrue(unitTestStorageDir.canWrite());\n\n    NamedList<String> ioInitArgs = new NamedList<>();\n    ioInitArgs.add(ManagedResourceStorage.STORAGE_DIR_INIT_ARG, \n        unitTestStorageDir.getAbsolutePath());\n    \n    StorageIO storageIO = new ManagedResourceStorage.FileStorageIO();\n    storageIO.configure(loader, ioInitArgs);\n    \n    NamedList<String> initArgs = new NamedList<>();\n    RestManager restManager = new RestManager();\n    restManager.init(loader, initArgs, storageIO);\n    \n    // verifies a RestManager can be reloaded from a previous RestManager's data\n    RestManager restManager2 = new RestManager();\n    restManager2.init(loader, initArgs, storageIO);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testReloadFromPersistentStorage().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testReloadFromPersistentStorage().mjava","sourceNew":"  @Test\n  public void testReloadFromPersistentStorage() throws Exception {\n    SolrResourceLoader loader = new SolrResourceLoader(Paths.get(\"./\"));\n    File unitTestStorageDir = createTempDir(\"testRestManager\").toFile();\n    assertTrue(unitTestStorageDir.getAbsolutePath()+\" is not a directory!\", \n        unitTestStorageDir.isDirectory());    \n    assertTrue(unitTestStorageDir.canRead());\n    assertTrue(unitTestStorageDir.canWrite());\n\n    NamedList<String> ioInitArgs = new NamedList<>();\n    ioInitArgs.add(ManagedResourceStorage.STORAGE_DIR_INIT_ARG, \n        unitTestStorageDir.getAbsolutePath());\n    \n    StorageIO storageIO = new ManagedResourceStorage.FileStorageIO();\n    storageIO.configure(loader, ioInitArgs);\n    \n    NamedList<String> initArgs = new NamedList<>();\n    RestManager restManager = new RestManager();\n    restManager.init(loader, initArgs, storageIO);\n    \n    // verifies a RestManager can be reloaded from a previous RestManager's data\n    RestManager restManager2 = new RestManager();\n    restManager2.init(loader, initArgs, storageIO);    \n  }\n\n","sourceOld":"  @Test\n  public void testReloadFromPersistentStorage() throws Exception {\n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");\n    File unitTestStorageDir = createTempDir(\"testRestManager\").toFile();\n    assertTrue(unitTestStorageDir.getAbsolutePath()+\" is not a directory!\", \n        unitTestStorageDir.isDirectory());    \n    assertTrue(unitTestStorageDir.canRead());\n    assertTrue(unitTestStorageDir.canWrite());\n\n    NamedList<String> ioInitArgs = new NamedList<>();\n    ioInitArgs.add(ManagedResourceStorage.STORAGE_DIR_INIT_ARG, \n        unitTestStorageDir.getAbsolutePath());\n    \n    StorageIO storageIO = new ManagedResourceStorage.FileStorageIO();\n    storageIO.configure(loader, ioInitArgs);\n    \n    NamedList<String> initArgs = new NamedList<>();\n    RestManager restManager = new RestManager();\n    restManager.init(loader, initArgs, storageIO);\n    \n    // verifies a RestManager can be reloaded from a previous RestManager's data\n    RestManager restManager2 = new RestManager();\n    restManager2.init(loader, initArgs, storageIO);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"637230d0125f5aa153298289322945139167ef76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["637230d0125f5aa153298289322945139167ef76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a626ec4d1c92e59fe390724d6220081047b03ce7"]},"commit2Childs":{"637230d0125f5aa153298289322945139167ef76":["f4abec28b874149a7223e32cc7a01704c27790de"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["637230d0125f5aa153298289322945139167ef76"],"f4abec28b874149a7223e32cc7a01704c27790de":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}