{"path":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],Term[],Term[],int,float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],Term[],Term[],int,float).mjava","pathOld":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],Term[],Term[],int,float).mjava","sourceNew":"  /*\n   * Check if src and dest have overlapped part and if it is, create PhraseQueries and add expandQueries.\n   * \n   * ex1) src=\"a b\", dest=\"c d\"       => no overlap\n   * ex2) src=\"a b\", dest=\"a b c\"     => no overlap\n   * ex3) src=\"a b\", dest=\"b c\"       => overlap; expandQueries={\"a b c\"}\n   * ex4) src=\"a b c\", dest=\"b c d\"   => overlap; expandQueries={\"a b c d\"}\n   * ex5) src=\"a b c\", dest=\"b c\"     => no overlap\n   * ex6) src=\"a b c\", dest=\"b\"       => no overlap\n   * ex7) src=\"a a a a\", dest=\"a a a\" => overlap;\n   *                                     expandQueries={\"a a a a a\",\"a a a a a a\"}\n   * ex8) src=\"a b c d\", dest=\"b c\"   => no overlap\n   */\n  private void checkOverlap( Collection<Query> expandQueries, Term[] src, Term[] dest, int slop, float boost ){\n    // beginning from 1 (not 0) is safe because that the PhraseQuery has multiple terms\n    // is guaranteed in flatten() method (if PhraseQuery has only one term, flatten()\n    // converts PhraseQuery to TermQuery)\n    for( int i = 1; i < src.length; i++ ){\n      boolean overlap = true;\n      for( int j = i; j < src.length; j++ ){\n        if( ( j - i ) < dest.length && !src[j].text().equals( dest[j-i].text() ) ){\n          overlap = false;\n          break;\n        }\n      }\n      if( overlap && src.length - i < dest.length ){\n        PhraseQuery pq = new PhraseQuery();\n        for( Term srcTerm : src )\n          pq.add( srcTerm );\n        for( int k = src.length - i; k < dest.length; k++ ){\n          pq.add( new Term( src[0].field(), dest[k].text() ) );\n        }\n        pq.setSlop( slop );\n        pq.setBoost( boost );\n        if(!expandQueries.contains( pq ) )\n          expandQueries.add( pq );\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Check if src and dest have overlapped part and if it is, create PhraseQueries and add expandQueries.\n   * \n   * ex1) src=\"a b\", dest=\"c d\"       => no overlap\n   * ex2) src=\"a b\", dest=\"a b c\"     => no overlap\n   * ex3) src=\"a b\", dest=\"b c\"       => overlap; expandQueries={\"a b c\"}\n   * ex4) src=\"a b c\", dest=\"b c d\"   => overlap; expandQueries={\"a b c d\"}\n   * ex5) src=\"a b c\", dest=\"b c\"     => no overlap\n   * ex6) src=\"a b c\", dest=\"b\"       => no overlap\n   * ex7) src=\"a a a a\", dest=\"a a a\" => overlap;\n   *                                     expandQueries={\"a a a a a\",\"a a a a a a\"}\n   * ex8) src=\"a b c d\", dest=\"b c\"   => no overlap\n   */\n  private void checkOverlap( Collection<Query> expandQueries, Term[] src, Term[] dest, int slop, float boost ){\n    // beginning from 1 (not 0) is safe because that the PhraseQuery has multiple terms\n    // is guaranteed in flatten() method (if PhraseQuery has only one term, flatten()\n    // converts PhraseQuery to TermQuery)\n    for( int i = 1; i < src.length; i++ ){\n      boolean overlap = true;\n      for( int j = i; j < src.length; j++ ){\n        if( ( j - i ) < dest.length && !src[j].text().equals( dest[j-i].text() ) ){\n          overlap = false;\n          break;\n        }\n      }\n      if( overlap && src.length - i < dest.length ){\n        PhraseQuery pq = new PhraseQuery();\n        for( Term srcTerm : src )\n          pq.add( srcTerm );\n        for( int k = src.length - i; k < dest.length; k++ ){\n          pq.add( new Term( src[0].field(), dest[k].text() ) );\n        }\n        pq.setSlop( slop );\n        pq.setBoost( boost );\n        if(!expandQueries.contains( pq ) )\n          expandQueries.add( pq );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],Term[],Term[],int,float).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],Term[],Term[],int,float).mjava","sourceNew":"  /*\n   * Check if src and dest have overlapped part and if it is, create PhraseQueries and add expandQueries.\n   * \n   * ex1) src=\"a b\", dest=\"c d\"       => no overlap\n   * ex2) src=\"a b\", dest=\"a b c\"     => no overlap\n   * ex3) src=\"a b\", dest=\"b c\"       => overlap; expandQueries={\"a b c\"}\n   * ex4) src=\"a b c\", dest=\"b c d\"   => overlap; expandQueries={\"a b c d\"}\n   * ex5) src=\"a b c\", dest=\"b c\"     => no overlap\n   * ex6) src=\"a b c\", dest=\"b\"       => no overlap\n   * ex7) src=\"a a a a\", dest=\"a a a\" => overlap;\n   *                                     expandQueries={\"a a a a a\",\"a a a a a a\"}\n   * ex8) src=\"a b c d\", dest=\"b c\"   => no overlap\n   */\n  private void checkOverlap( Collection<Query> expandQueries, Term[] src, Term[] dest, int slop, float boost ){\n    // beginning from 1 (not 0) is safe because that the PhraseQuery has multiple terms\n    // is guaranteed in flatten() method (if PhraseQuery has only one term, flatten()\n    // converts PhraseQuery to TermQuery)\n    for( int i = 1; i < src.length; i++ ){\n      boolean overlap = true;\n      for( int j = i; j < src.length; j++ ){\n        if( ( j - i ) < dest.length && !src[j].text().equals( dest[j-i].text() ) ){\n          overlap = false;\n          break;\n        }\n      }\n      if( overlap && src.length - i < dest.length ){\n        PhraseQuery pq = new PhraseQuery();\n        for( Term srcTerm : src )\n          pq.add( srcTerm );\n        for( int k = src.length - i; k < dest.length; k++ ){\n          pq.add( new Term( src[0].field(), dest[k].text() ) );\n        }\n        pq.setSlop( slop );\n        pq.setBoost( boost );\n        if(!expandQueries.contains( pq ) )\n          expandQueries.add( pq );\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Check if src and dest have overlapped part and if it is, create PhraseQueries and add expandQueries.\n   * \n   * ex1) src=\"a b\", dest=\"c d\"       => no overlap\n   * ex2) src=\"a b\", dest=\"a b c\"     => no overlap\n   * ex3) src=\"a b\", dest=\"b c\"       => overlap; expandQueries={\"a b c\"}\n   * ex4) src=\"a b c\", dest=\"b c d\"   => overlap; expandQueries={\"a b c d\"}\n   * ex5) src=\"a b c\", dest=\"b c\"     => no overlap\n   * ex6) src=\"a b c\", dest=\"b\"       => no overlap\n   * ex7) src=\"a a a a\", dest=\"a a a\" => overlap;\n   *                                     expandQueries={\"a a a a a\",\"a a a a a a\"}\n   * ex8) src=\"a b c d\", dest=\"b c\"   => no overlap\n   */\n  private void checkOverlap( Collection<Query> expandQueries, Term[] src, Term[] dest, int slop, float boost ){\n    // beginning from 1 (not 0) is safe because that the PhraseQuery has multiple terms\n    // is guaranteed in flatten() method (if PhraseQuery has only one term, flatten()\n    // converts PhraseQuery to TermQuery)\n    for( int i = 1; i < src.length; i++ ){\n      boolean overlap = true;\n      for( int j = i; j < src.length; j++ ){\n        if( ( j - i ) < dest.length && !src[j].text().equals( dest[j-i].text() ) ){\n          overlap = false;\n          break;\n        }\n      }\n      if( overlap && src.length - i < dest.length ){\n        PhraseQuery pq = new PhraseQuery();\n        for( Term srcTerm : src )\n          pq.add( srcTerm );\n        for( int k = src.length - i; k < dest.length; k++ ){\n          pq.add( new Term( src[0].field(), dest[k].text() ) );\n        }\n        pq.setSlop( slop );\n        pq.setBoost( boost );\n        if(!expandQueries.contains( pq ) )\n          expandQueries.add( pq );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}