{"path":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":"  /**\n   * @param w\n   *          Writer to use\n   * @param defaultCoreName\n   *          to use for cores with name \"\"\n   * @param coreDescriptors\n   *          to persist\n   * @param rootSolrAttribs\n   *          solrxml solr attribs\n   * @param containerProperties\n   *          to persist\n   * @param coresAttribs\n   *          solrxml cores attribs\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @param defaultCoreName\n   *          to use for cores with name \"\"\n   * @param coreDescriptors\n   *          to persist\n   * @param rootSolrAttribs\n   *          solrxml solr attribs\n   * @param containerProperties\n   *          to persist\n   * @param coresAttribs\n   *          solrxml cores attribs\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":"  /**\n   * @param w\n   *          Writer to use\n   * @param defaultCoreName\n   *          to use for cores with name \"\"\n   * @param coreDescriptors\n   *          to persist\n   * @param rootSolrAttribs\n   *          solrxml solr attribs\n   * @param containerProperties\n   *          to persist\n   * @param coresAttribs\n   *          solrxml cores attribs\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @param defaultCoreName\n   *          to use for cores with name \"\"\n   * @param coreDescriptors\n   *          to persist\n   * @param rootSolrAttribs\n   *          solrxml solr attribs\n   * @param containerProperties\n   *          to persist\n   * @param coresAttribs\n   *          solrxml cores attribs\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":"  /**\n   * @param w\n   *          Writer to use\n   * @param defaultCoreName\n   *          to use for cores with name \"\"\n   * @param coreDescriptors\n   *          to persist\n   * @param rootSolrAttribs\n   *          solrxml solr attribs\n   * @param containerProperties\n   *          to persist\n   * @param coresAttribs\n   *          solrxml cores attribs\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @param defaultCoreName\n   *          to use for cores with name \"\"\n   * @param coreDescriptors\n   *          to persist\n   * @param rootSolrAttribs\n   *          solrxml solr attribs\n   * @param containerProperties\n   *          to persist\n   * @param coresAttribs\n   *          solrxml cores attribs\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578eff0bc5aee20ceab0bb85d2e639e93d68c952","date":1335146102,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @param defaultCoreName\n   *          to use for cores with name \"\"\n   * @param coreDescriptors\n   *          to persist\n   * @param rootSolrAttribs\n   *          solrxml solr attribs\n   * @param containerProperties\n   *          to persist\n   * @param coresAttribs\n   *          solrxml cores attribs\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException If there is a low-level I/O error.\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException If there is a low-level I/O error.\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n\n    // Output logging section if any\n    if (solrXMLDef.loggingAttribs.size() > 0 || solrXMLDef.watcherAttribs.size() > 0) {\n      w.write(INDENT + \"<logging\");\n      for (Map.Entry<String, String> ent : solrXMLDef.loggingAttribs.entrySet()) {\n        writeAttribute(w, ent.getKey(), ent.getValue());\n      }\n      w.write(\">\\n\");\n\n      if (solrXMLDef.watcherAttribs.size() > 0) {\n        w.write(INDENT + INDENT + \"<watcher\");\n        for (Map.Entry<String, String> ent : solrXMLDef.watcherAttribs.entrySet()) {\n          writeAttribute(w, ent.getKey(), ent.getValue());\n        }\n        w.write(\"/>\\n\");\n      }\n      w.write(INDENT + \"</logging>\\n\");\n    }\n\n    // Output shard handler section if any\n    if (solrXMLDef.shardHandlerAttribs.size() > 0 || solrXMLDef.shardHandlerProps.size() > 0) {\n      w.write(INDENT + \"<shardHandlerFactory\");\n      for (Map.Entry<String, String> ent : solrXMLDef.shardHandlerAttribs.entrySet()) {\n        writeAttribute(w, ent.getKey(), ent.getValue());\n      }\n      w.write(\">\\n\");\n      if (solrXMLDef.shardHandlerProps.size() > 0) {\n        for (Map.Entry<String, String> ent : solrXMLDef.shardHandlerProps.entrySet()) {\n          w.write(INDENT + INDENT + \"<int name=\\\"\" + ent.getKey() + \"\\\"\" + \">\" + ent.getValue() + \"</int>\\n\");\n        }\n      }\n      w.write(INDENT + \"</shardHandlerFactory>\\n\");\n    }\n\n\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException If there is a low-level I/O error.\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f225b9b576dc345ee8c27f91147b4afc0350511c","date":1373552135,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException If there is a low-level I/O error.\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n\n    // Output logging section if any\n    if (solrXMLDef.loggingAttribs.size() > 0 || solrXMLDef.watcherAttribs.size() > 0) {\n      w.write(INDENT + \"<logging\");\n      for (Map.Entry<String, String> ent : solrXMLDef.loggingAttribs.entrySet()) {\n        writeAttribute(w, ent.getKey(), ent.getValue());\n      }\n      w.write(\">\\n\");\n\n      if (solrXMLDef.watcherAttribs.size() > 0) {\n        w.write(INDENT + INDENT + \"<watcher\");\n        for (Map.Entry<String, String> ent : solrXMLDef.watcherAttribs.entrySet()) {\n          writeAttribute(w, ent.getKey(), ent.getValue());\n        }\n        w.write(\"/>\\n\");\n      }\n      w.write(INDENT + \"</logging>\\n\");\n    }\n\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    // Shard handler section\n    if (solrXMLDef.shardHandlerNode != null) {\n      w.write(nodeToXML(solrXMLDef.shardHandlerNode));\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException If there is a low-level I/O error.\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n\n    // Output logging section if any\n    if (solrXMLDef.loggingAttribs.size() > 0 || solrXMLDef.watcherAttribs.size() > 0) {\n      w.write(INDENT + \"<logging\");\n      for (Map.Entry<String, String> ent : solrXMLDef.loggingAttribs.entrySet()) {\n        writeAttribute(w, ent.getKey(), ent.getValue());\n      }\n      w.write(\">\\n\");\n\n      if (solrXMLDef.watcherAttribs.size() > 0) {\n        w.write(INDENT + INDENT + \"<watcher\");\n        for (Map.Entry<String, String> ent : solrXMLDef.watcherAttribs.entrySet()) {\n          writeAttribute(w, ent.getKey(), ent.getValue());\n        }\n        w.write(\"/>\\n\");\n      }\n      w.write(INDENT + \"</logging>\\n\");\n    }\n\n    // Output shard handler section if any\n    if (solrXMLDef.shardHandlerAttribs.size() > 0 || solrXMLDef.shardHandlerProps.size() > 0) {\n      w.write(INDENT + \"<shardHandlerFactory\");\n      for (Map.Entry<String, String> ent : solrXMLDef.shardHandlerAttribs.entrySet()) {\n        writeAttribute(w, ent.getKey(), ent.getValue());\n      }\n      w.write(\">\\n\");\n      if (solrXMLDef.shardHandlerProps.size() > 0) {\n        for (Map.Entry<String, String> ent : solrXMLDef.shardHandlerProps.entrySet()) {\n          w.write(INDENT + INDENT + \"<int name=\\\"\" + ent.getKey() + \"\\\"\" + \">\" + ent.getValue() + \"</int>\\n\");\n        }\n      }\n      w.write(INDENT + \"</shardHandlerFactory>\\n\");\n    }\n\n\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException If there is a low-level I/O error.\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n\n    // Output logging section if any\n    if (solrXMLDef.loggingAttribs.size() > 0 || solrXMLDef.watcherAttribs.size() > 0) {\n      w.write(INDENT + \"<logging\");\n      for (Map.Entry<String, String> ent : solrXMLDef.loggingAttribs.entrySet()) {\n        writeAttribute(w, ent.getKey(), ent.getValue());\n      }\n      w.write(\">\\n\");\n\n      if (solrXMLDef.watcherAttribs.size() > 0) {\n        w.write(INDENT + INDENT + \"<watcher\");\n        for (Map.Entry<String, String> ent : solrXMLDef.watcherAttribs.entrySet()) {\n          writeAttribute(w, ent.getKey(), ent.getValue());\n        }\n        w.write(\"/>\\n\");\n      }\n      w.write(INDENT + \"</logging>\\n\");\n    }\n\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    // Shard handler section\n    if (solrXMLDef.shardHandlerNode != null) {\n      w.write(nodeToXML(solrXMLDef.shardHandlerNode));\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException If there is a low-level I/O error.\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862bf0de4075dc8febeba1ba433bcf74c78d356e","date":1407456501,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrXMLDef).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param w\n   *          Writer to use\n   * @throws IOException If there is a low-level I/O error.\n   */\n  void persist(Writer w, SolrXMLDef solrXMLDef) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    Map<String,String> rootSolrAttribs = solrXMLDef.solrAttribs;\n    Set<String> solrAttribKeys = rootSolrAttribs.keySet();\n    for (String key : solrAttribKeys) {\n      String value = rootSolrAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    \n    w.write(\">\\n\");\n    Properties containerProperties = solrXMLDef.containerProperties;\n    if (containerProperties != null && !containerProperties.isEmpty()) {\n      writeProperties(w, containerProperties, \"  \");\n    }\n\n    // Output logging section if any\n    if (solrXMLDef.loggingAttribs.size() > 0 || solrXMLDef.watcherAttribs.size() > 0) {\n      w.write(INDENT + \"<logging\");\n      for (Map.Entry<String, String> ent : solrXMLDef.loggingAttribs.entrySet()) {\n        writeAttribute(w, ent.getKey(), ent.getValue());\n      }\n      w.write(\">\\n\");\n\n      if (solrXMLDef.watcherAttribs.size() > 0) {\n        w.write(INDENT + INDENT + \"<watcher\");\n        for (Map.Entry<String, String> ent : solrXMLDef.watcherAttribs.entrySet()) {\n          writeAttribute(w, ent.getKey(), ent.getValue());\n        }\n        w.write(\"/>\\n\");\n      }\n      w.write(INDENT + \"</logging>\\n\");\n    }\n\n    w.write(INDENT + \"<cores\");\n    Map<String,String> coresAttribs = solrXMLDef.coresAttribs;\n    Set<String> coreAttribKeys = coresAttribs.keySet();\n    for (String key : coreAttribKeys) {\n      String value = coresAttribs.get(key);\n      writeAttribute(w, key, value);\n    }\n    w.write(\">\\n\");\n    \n    for (SolrCoreXMLDef coreDef : solrXMLDef.coresDefs) {\n      persist(w, coreDef);\n    }\n\n    // Shard handler section\n    if (solrXMLDef.shardHandlerNode != null) {\n      w.write(nodeToXML(solrXMLDef.shardHandlerNode));\n    }\n\n    w.write(INDENT + \"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["c26f00b574427b55127e869b935845554afde1fa"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","f225b9b576dc345ee8c27f91147b4afc0350511c"],"862bf0de4075dc8febeba1ba433bcf74c78d356e":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f225b9b576dc345ee8c27f91147b4afc0350511c":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["862bf0de4075dc8febeba1ba433bcf74c78d356e"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["dc6e48afbb50ae0a22fa76e226f04fd585532938","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"862bf0de4075dc8febeba1ba433bcf74c78d356e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f225b9b576dc345ee8c27f91147b4afc0350511c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","862bf0de4075dc8febeba1ba433bcf74c78d356e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}