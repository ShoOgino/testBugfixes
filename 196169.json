{"path":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","commits":[{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Constructs a new SSLConnectionSocketFactory for HTTP <b>clients</b> to use when communicating \n   * with servers which have been configured based on the settings of this object. Will return null\n   * unless {@link #isSSLMode} is true.\n   */\n  public SSLConnectionSocketFactory buildClientSSLConnectionSocketFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    SSLConnectionSocketFactory sslConnectionFactory;\n    try {\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      SSLContext sslContext = buildClientSSLContext();\n      if (sslCheckPeerName == false) {\n        sslConnectionFactory = new SSLConnectionSocketFactory\n          (sslContext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n      } else {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext);\n      }\n    } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", e);\n    }\n    return sslConnectionFactory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Constructs a new SSLConnectionSocketFactory for HTTP <b>clients</b> to use when communicating \n   * with servers which have been configured based on the settings of this object. Will return null\n   * unless {@link #isSSLMode} is true.\n   */\n  public SSLConnectionSocketFactory buildClientSSLConnectionSocketFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    SSLConnectionSocketFactory sslConnectionFactory;\n    try {\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      SSLContext sslContext = buildClientSSLContext();\n      if (sslCheckPeerName == false) {\n        sslConnectionFactory = new SSLConnectionSocketFactory\n          (sslContext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n      } else {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext);\n      }\n    } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", e);\n    }\n    return sslConnectionFactory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","date":1524429517,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","sourceNew":"  /** \n   * Constructs a new SSLConnectionSocketFactory for HTTP <b>clients</b> to use when communicating \n   * with servers which have been configured based on the settings of this object. Will return null\n   * unless {@link #isSSLMode} is true.\n   */\n  public SSLConnectionSocketFactory buildClientSSLConnectionSocketFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    SSLConnectionSocketFactory sslConnectionFactory;\n    try {\n      SSLContext sslContext = buildClientSSLContext();\n      if (checkPeerName == false) {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n      } else {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext);\n      }\n    } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", e);\n    }\n    return sslConnectionFactory;\n  }\n\n","sourceOld":"  /** \n   * Constructs a new SSLConnectionSocketFactory for HTTP <b>clients</b> to use when communicating \n   * with servers which have been configured based on the settings of this object. Will return null\n   * unless {@link #isSSLMode} is true.\n   */\n  public SSLConnectionSocketFactory buildClientSSLConnectionSocketFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    SSLConnectionSocketFactory sslConnectionFactory;\n    try {\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      SSLContext sslContext = buildClientSSLContext();\n      if (sslCheckPeerName == false) {\n        sslConnectionFactory = new SSLConnectionSocketFactory\n          (sslContext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n      } else {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext);\n      }\n    } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", e);\n    }\n    return sslConnectionFactory;\n  }\n\n","bugFix":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f4aeebb20113377af399c0f4e9bf74ef941405","date":1560858591,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","sourceNew":"  /** \n   * Constructs a new SSLConnectionSocketFactory for HTTP <b>clients</b> to use when communicating \n   * with servers which have been configured based on the settings of this object. Will return null\n   * unless {@link #isSSLMode} is true.\n   */\n  public SSLConnectionSocketFactory buildClientSSLConnectionSocketFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    SSLConnectionSocketFactory sslConnectionFactory;\n    try {\n      SSLContext sslContext = buildClientSSLContext();\n      if (checkPeerName == false) {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n      } else {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext,\n            HttpClientUtil.SUPPORTED_SSL_PROTOCOLS,\n            null, SSLConnectionSocketFactory.getDefaultHostnameVerifier());\n      }\n    } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", e);\n    }\n    return sslConnectionFactory;\n  }\n\n","sourceOld":"  /** \n   * Constructs a new SSLConnectionSocketFactory for HTTP <b>clients</b> to use when communicating \n   * with servers which have been configured based on the settings of this object. Will return null\n   * unless {@link #isSSLMode} is true.\n   */\n  public SSLConnectionSocketFactory buildClientSSLConnectionSocketFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    SSLConnectionSocketFactory sslConnectionFactory;\n    try {\n      SSLContext sslContext = buildClientSSLContext();\n      if (checkPeerName == false) {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n      } else {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext);\n      }\n    } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", e);\n    }\n    return sslConnectionFactory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3ffa4c5138b265fd040cebc0c054245f746fec8","date":1560937397,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSSLConnectionSocketFactory().mjava","sourceNew":"  /** \n   * Constructs a new SSLConnectionSocketFactory for HTTP <b>clients</b> to use when communicating \n   * with servers which have been configured based on the settings of this object. Will return null\n   * unless {@link #isSSLMode} is true.\n   */\n  public SSLConnectionSocketFactory buildClientSSLConnectionSocketFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    SSLConnectionSocketFactory sslConnectionFactory;\n    try {\n      SSLContext sslContext = buildClientSSLContext();\n      if (checkPeerName == false) {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n      } else {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext);\n      }\n    } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", e);\n    }\n    return sslConnectionFactory;\n  }\n\n","sourceOld":"  /** \n   * Constructs a new SSLConnectionSocketFactory for HTTP <b>clients</b> to use when communicating \n   * with servers which have been configured based on the settings of this object. Will return null\n   * unless {@link #isSSLMode} is true.\n   */\n  public SSLConnectionSocketFactory buildClientSSLConnectionSocketFactory() {\n    if (!isSSLMode()) {\n      return null;\n    }\n    SSLConnectionSocketFactory sslConnectionFactory;\n    try {\n      SSLContext sslContext = buildClientSSLContext();\n      if (checkPeerName == false) {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n      } else {\n        sslConnectionFactory = new SSLConnectionSocketFactory(sslContext,\n            HttpClientUtil.SUPPORTED_SSL_PROTOCOLS,\n            null, SSLConnectionSocketFactory.getDefaultHostnameVerifier());\n      }\n    } catch (KeyManagementException | UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", e);\n    }\n    return sslConnectionFactory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"c3ffa4c5138b265fd040cebc0c054245f746fec8":["e9f4aeebb20113377af399c0f4e9bf74ef941405"],"e9f4aeebb20113377af399c0f4e9bf74ef941405":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c3ffa4c5138b265fd040cebc0c054245f746fec8"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e58bb31b4af6b8eeb1539849575c59df745bc6e6"]},"commit2Childs":{"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["e9f4aeebb20113377af399c0f4e9bf74ef941405"],"c3ffa4c5138b265fd040cebc0c054245f746fec8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","55b50463286869f584cf849d1587a0fcd54d1dfa"],"e9f4aeebb20113377af399c0f4e9bf74ef941405":["c3ffa4c5138b265fd040cebc0c054245f746fec8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}