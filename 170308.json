{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int,int).mjava","commits":[{"id":"d3cc3fa1ecad75b99ec55169e44628808f9866ad","date":1592311545,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID, final int docID) {\n    final FreqProxPostingsArray postings = freqProxPostingsArray;\n    assert !hasFreq || postings.termFreqs[termID] > 0;\n\n    if (!hasFreq) {\n      assert postings.termFreqs == null;\n      if (termFreqAtt.getTermFrequency() != 1) {\n        throw new IllegalStateException(\"field \\\"\" + getFieldName() + \"\\\": must index term freq while using custom TermFrequencyAttribute\");\n      }\n      if (docID != postings.lastDocIDs[termID]) {\n        // New document; now encode docCode for previous doc:\n        assert docID > postings.lastDocIDs[termID];\n        writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else if (docID != postings.lastDocIDs[termID]) {\n      assert docID > postings.lastDocIDs[termID]:\"id: \"+docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n      // Term not yet seen in the current doc but previously\n      // seen in other doc(s) since the last flush\n\n      // Now that we know doc freq for previous doc,\n      // write it & lastDocCode\n      if (1 == postings.termFreqs[termID]) {\n        writeVInt(0, postings.lastDocCodes[termID]|1);\n      } else {\n        writeVInt(0, postings.lastDocCodes[termID]);\n        writeVInt(0, postings.termFreqs[termID]);\n      }\n\n      // Init freq for the current document\n      postings.termFreqs[termID] = getTermFreq();\n      fieldState.maxTermFrequency = Math.max(postings.termFreqs[termID], fieldState.maxTermFrequency);\n      postings.lastDocCodes[termID] = (docID - postings.lastDocIDs[termID]) << 1;\n      postings.lastDocIDs[termID] = docID;\n      if (hasProx) {\n        writeProx(termID, fieldState.position);\n        if (hasOffsets) {\n          postings.lastOffsets[termID] = 0;\n          writeOffsets(termID, fieldState.offset);\n        }\n      } else {\n        assert !hasOffsets;\n      }\n      fieldState.uniqueTermCount++;\n    } else {\n      postings.termFreqs[termID] = Math.addExact(postings.termFreqs[termID], getTermFreq());\n      fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, postings.termFreqs[termID]);\n      if (hasProx) {\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n        if (hasOffsets) {\n          writeOffsets(termID, fieldState.offset);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    final FreqProxPostingsArray postings = freqProxPostingsArray;\n    assert !hasFreq || postings.termFreqs[termID] > 0;\n\n    if (!hasFreq) {\n      assert postings.termFreqs == null;\n      if (termFreqAtt.getTermFrequency() != 1) {\n        throw new IllegalStateException(\"field \\\"\" + fieldInfo.name + \"\\\": must index term freq while using custom TermFrequencyAttribute\");\n      }\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        // New document; now encode docCode for previous doc:\n        assert docState.docID > postings.lastDocIDs[termID];\n        writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else if (docState.docID != postings.lastDocIDs[termID]) {\n      assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n      // Term not yet seen in the current doc but previously\n      // seen in other doc(s) since the last flush\n\n      // Now that we know doc freq for previous doc,\n      // write it & lastDocCode\n      if (1 == postings.termFreqs[termID]) {\n        writeVInt(0, postings.lastDocCodes[termID]|1);\n      } else {\n        writeVInt(0, postings.lastDocCodes[termID]);\n        writeVInt(0, postings.termFreqs[termID]);\n      }\n\n      // Init freq for the current document\n      postings.termFreqs[termID] = getTermFreq();\n      fieldState.maxTermFrequency = Math.max(postings.termFreqs[termID], fieldState.maxTermFrequency);\n      postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n      postings.lastDocIDs[termID] = docState.docID;\n      if (hasProx) {\n        writeProx(termID, fieldState.position);\n        if (hasOffsets) {\n          postings.lastOffsets[termID] = 0;\n          writeOffsets(termID, fieldState.offset);\n        }\n      } else {\n        assert !hasOffsets;\n      }\n      fieldState.uniqueTermCount++;\n    } else {\n      postings.termFreqs[termID] = Math.addExact(postings.termFreqs[termID], getTermFreq());\n      fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, postings.termFreqs[termID]);\n      if (hasProx) {\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n        if (hasOffsets) {\n          writeOffsets(termID, fieldState.offset);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}