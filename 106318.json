{"path":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","commits":[{"id":"635548f88824977119a14d0594bf158e75cb2b48","date":1328965599,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":["d85277fe0f487ec4ed00df56cce41f715e1a5a1c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.shutdown();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.shutdown();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.shutdown();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.shutdown();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.shutdown();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.shutdown();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.shutdown();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.shutdown();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["635548f88824977119a14d0594bf158e75cb2b48","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["635548f88824977119a14d0594bf158e75cb2b48"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"635548f88824977119a14d0594bf158e75cb2b48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"635548f88824977119a14d0594bf158e75cb2b48":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["635548f88824977119a14d0594bf158e75cb2b48"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}