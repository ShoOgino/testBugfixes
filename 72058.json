{"path":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    \n    Map<String,Replica> replicas = new HashMap<String,Replica>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<String>();\n    ClusterState state = new ClusterState(liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    \n    Map<String,Replica> replicas = new HashMap<String,Replica>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<String>();\n    ClusterState state = new ClusterState(liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c543b4f6989a86c0d59dfe26e92c767b5045603a","date":1386588149,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    \n    Map<String,Replica> replicas = new HashMap<String,Replica>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<String>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates,ClusterStateTest.getMockZkStateReader(collectionStates.keySet()));\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    \n    Map<String,Replica> replicas = new HashMap<String,Replica>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<String>();\n    ClusterState state = new ClusterState(liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    \n    Map<String,Replica> replicas = new HashMap<String,Replica>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<String>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates,ClusterStateTest.getMockZkStateReader(collectionStates.keySet()));\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    \n    Map<String,Replica> replicas = new HashMap<String,Replica>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<String>();\n    ClusterState state = new ClusterState(liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates,ClusterStateTest.getMockZkStateReader(collectionStates.keySet()));\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<String,DocCollection>();\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    \n    Map<String,Replica> replicas = new HashMap<String,Replica>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<String>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates,ClusterStateTest.getMockZkStateReader(collectionStates.keySet()));\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates,ClusterStateTest.getMockZkStateReader(collectionStates.keySet()));\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates, ClusterStateTest.getMockZkStateReader(collectionStates.keySet()));\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates, ClusterStateTest.getMockZkStateReader(collectionStates.keySet()));\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(), \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, \"ACTIVE\", \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(), \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(state.getCollection(\"collection1\"));\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(), \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(), \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(state.getCollection(\"collection1\"));\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(), \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(\"collection1\", state);\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f100e4a037a938ee4b027674f1ca80fc208badf","date":1500526196,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    String nodeName = Assign.assignNode(zkClient, \"collection1\");\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, \"collection2\");\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, \"collection1\");\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(), \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(state.getCollection(\"collection1\"));\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    String nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    String nodeName = Assign.assignNode(zkClient, \"collection1\");\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, \"collection2\");\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, \"collection1\");\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    String nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    String cname = \"collection1\";\n    \n    Map<String,DocCollection> collectionStates = new HashMap<>();\n    \n    Map<String,Slice> slices = new HashMap<>();\n    \n    Map<String,Replica> replicas = new HashMap<>();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(), \n        ZkStateReader.BASE_URL_PROP, \"0.0.0.0\", \n        ZkStateReader.CORE_NAME_PROP, \"core1\",\n        ZkStateReader.ROLES_PROP, null,\n        ZkStateReader.NODE_NAME_PROP, \"0_0_0_0\",\n        ZkStateReader.SHARD_ID_PROP, \"shard1\",\n        ZkStateReader.COLLECTION_PROP, cname,\n        ZkStateReader.NUM_SHARDS_PROP, \"1\",\n        ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\");\n    Replica replica = new Replica(\"core_node1\" , m.getProperties());\n    replicas.put(\"core_node1\", replica);\n    \n    Slice slice = new Slice(\"slice1\", replicas , new HashMap<String,Object>(0));\n    slices.put(\"slice1\", slice);\n    \n    DocRouter router = new ImplicitDocRouter();\n    DocCollection docCollection = new DocCollection(cname, slices, new HashMap<String,Object>(0), router);\n\n    collectionStates.put(cname, docCollection);\n    \n    Set<String> liveNodes = new HashSet<>();\n    ClusterState state = new ClusterState(-1,liveNodes, collectionStates);\n    String nodeName = Assign.assignNode(state.getCollection(\"collection1\"));\n    \n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    String nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    String nodeName = Assign.assignNode(zkClient, \"collection1\");\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, \"collection2\");\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, \"collection1\");\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    String nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(zkClient, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9","date":1509820648,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignNode(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c543b4f6989a86c0d59dfe26e92c767b5045603a"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a219f1dcad1700e84807666bdbd2b573e8de7021","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a52341299179de5479672f7cf518bf4b173f34b3"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["9f100e4a037a938ee4b027674f1ca80fc208badf","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c543b4f6989a86c0d59dfe26e92c767b5045603a":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["849494cf2f3a96af5c8c84995108ddd8456fcd04","c543b4f6989a86c0d59dfe26e92c767b5045603a"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9f100e4a037a938ee4b027674f1ca80fc208badf":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["9f100e4a037a938ee4b027674f1ca80fc208badf","936cdd5882761db3b844afd6f84ab81cbb011a75"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c543b4f6989a86c0d59dfe26e92c767b5045603a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"a52341299179de5479672f7cf518bf4b173f34b3":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"c543b4f6989a86c0d59dfe26e92c767b5045603a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","936cdd5882761db3b844afd6f84ab81cbb011a75","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}