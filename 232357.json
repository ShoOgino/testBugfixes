{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int).mjava","commits":[{"id":"4e84d639980c2b2eb5d41330d5ff68d143239495","date":1337729749,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n            // cool - we can use this number globally\n            fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n        \n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValues.Type dvType) {\n      if (dvType != null) {\n        DocValues.Type currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != null && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e84d639980c2b2eb5d41330d5ff68d143239495"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","6e2893fd5349134af382d33ccc3d84840394c6c1"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e84d639980c2b2eb5d41330d5ff68d143239495":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4e84d639980c2b2eb5d41330d5ff68d143239495"],"4e84d639980c2b2eb5d41330d5ff68d143239495":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}