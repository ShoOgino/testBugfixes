{"path":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersOutOfOrder1().mjava","commits":[{"id":"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","date":1389311746,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersOutOfOrder1().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersHashCode().mjava","sourceNew":"  public void testFiltersOutOfOrder1() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.INT));\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    List<Query> filters = Arrays.<Query>asList(new TermQuery(new Term(\"test\", \"field\")),\n                                               new TermQuery(new Term(\"test2\", \"field2\")));\n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = Arrays.<Query>asList(new TermQuery(new Term(\"test2\", \"field2\")),\n                                                new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    assertKeyEquals(qrk1, qrk2);\n  }\n\n","sourceOld":"  @Test\n  public void testFiltersHashCode() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.INT));\n    List<Query> filters = new ArrayList<Query>();\n    filters.add(new TermQuery(new Term(\"test\", \"field\")));\n    filters.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = new ArrayList<Query>();\n    filters2.add(new TermQuery(new Term(\"test2\", \"field2\")));\n    filters2.add(new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    \n    assertEquals(qrk1.hashCode(), qrk2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersOutOfOrder1().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testFiltersOutOfOrder1().mjava","sourceNew":"  public void testFiltersOutOfOrder1() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.INT));\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    List<Query> filters = Arrays.<Query>asList(new TermQuery(new Term(\"test\", \"field\")),\n                                               new TermQuery(new Term(\"test2\", \"field2\")));\n    QueryResultKey qrk1 = new QueryResultKey(query.build() , filters, sort, 1);\n    \n    List<Query> filters2 = Arrays.<Query>asList(new TermQuery(new Term(\"test2\", \"field2\")),\n                                                new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query.build() , filters2, sort, 1);\n    assertKeyEquals(qrk1, qrk2);\n  }\n\n","sourceOld":"  public void testFiltersOutOfOrder1() {\n    // the hashcode should be the same even when the list\n    // of filters is in a different order\n    \n    Sort sort = new Sort(new SortField(\"test\", SortField.Type.INT));\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"test\", \"field\")), Occur.MUST);\n    \n    List<Query> filters = Arrays.<Query>asList(new TermQuery(new Term(\"test\", \"field\")),\n                                               new TermQuery(new Term(\"test2\", \"field2\")));\n    QueryResultKey qrk1 = new QueryResultKey(query , filters, sort, 1);\n    \n    List<Query> filters2 = Arrays.<Query>asList(new TermQuery(new Term(\"test2\", \"field2\")),\n                                                new TermQuery(new Term(\"test\", \"field\")));\n    QueryResultKey qrk2 = new QueryResultKey(query , filters2, sort, 1);\n    assertKeyEquals(qrk1, qrk2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}