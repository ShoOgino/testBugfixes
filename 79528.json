{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#assertMatches(LightAutomaton,String...).mjava","sourceNew":"  private void assertMatches(Automaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRef ints = new IntsRef();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, Operations.getFiniteStrings(Operations.determinize(a), -1)); \n  }\n\n","sourceOld":"  private void assertMatches(LightAutomaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRef ints = new IntsRef();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, SpecialOperations.getFiniteStrings(BasicOperations.determinize(a), -1)); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertMatches(Automaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRef ints = new IntsRef();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, Operations.getFiniteStrings(Operations.determinize(a), -1)); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","sourceNew":"  private void assertMatches(Automaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRefBuilder ints = new IntsRefBuilder();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, Operations.getFiniteStrings(Operations.determinize(a), -1)); \n  }\n\n","sourceOld":"  private void assertMatches(Automaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRef ints = new IntsRef();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, Operations.getFiniteStrings(Operations.determinize(a), -1)); \n  }\n\n","bugFix":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","sourceNew":"  private void assertMatches(Automaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRefBuilder ints = new IntsRefBuilder();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, Operations.getFiniteStrings(Operations.determinize(a,\n      DEFAULT_MAX_DETERMINIZED_STATES), -1)); \n  }\n\n","sourceOld":"  private void assertMatches(Automaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRefBuilder ints = new IntsRefBuilder();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, Operations.getFiniteStrings(Operations.determinize(a), -1)); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertMatches(Automaton,String...).mjava","sourceNew":"  private void assertMatches(Automaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRefBuilder ints = new IntsRefBuilder();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, TestOperations.getFiniteStrings(\n        Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES)));\n  }\n\n","sourceOld":"  private void assertMatches(Automaton a, String... strings) {\n    Set<IntsRef> expected = new HashSet<>();\n    for(String s : strings) {\n      IntsRefBuilder ints = new IntsRefBuilder();\n      expected.add(Util.toUTF32(s, ints));\n    }\n\n    assertEquals(expected, Operations.getFiniteStrings(Operations.determinize(a,\n      DEFAULT_MAX_DETERMINIZED_STATES), -1)); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"5c84485629d80d203608e8975a1139de9933cc38":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}