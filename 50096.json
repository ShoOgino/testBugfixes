{"path":"contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.ScoreTermQueue#lessThan(ScoreTerm,ScoreTerm).mjava","commits":[{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.ScoreTermQueue#lessThan(ScoreTerm,ScoreTerm).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.ScoreTermQueue#lessThan(Object,Object).mjava","sourceNew":"        /* (non-Javadoc)\n         * @see org.apache.lucene.util.PriorityQueue#lessThan(java.lang.Object, java.lang.Object)\n         */\n        protected boolean lessThan(ScoreTerm termA, ScoreTerm termB) {\n          if (termA.score== termB.score)\n            return termA.term.compareTo(termB.term) > 0;\n          else\n            return termA.score < termB.score;\n        }\n\n","sourceOld":"        /* (non-Javadoc)\n         * @see org.apache.lucene.util.PriorityQueue#lessThan(java.lang.Object, java.lang.Object)\n         */\n        protected boolean lessThan(Object a, Object b) {\n          ScoreTerm termA = (ScoreTerm)a;\n          ScoreTerm termB = (ScoreTerm)b;\n          if (termA.score== termB.score)\n            return termA.term.compareTo(termB.term) > 0;\n          else\n            return termA.score < termB.score;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.ScoreTermQueue#lessThan(ScoreTerm,ScoreTerm).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.ScoreTermQueue#lessThan(ScoreTerm,ScoreTerm).mjava","sourceNew":"        /* (non-Javadoc)\n         * @see org.apache.lucene.util.PriorityQueue#lessThan(java.lang.Object, java.lang.Object)\n         */\n        @Override\n        protected boolean lessThan(ScoreTerm termA, ScoreTerm termB) {\n          if (termA.score== termB.score)\n            return termA.term.compareTo(termB.term) > 0;\n          else\n            return termA.score < termB.score;\n        }\n\n","sourceOld":"        /* (non-Javadoc)\n         * @see org.apache.lucene.util.PriorityQueue#lessThan(java.lang.Object, java.lang.Object)\n         */\n        protected boolean lessThan(ScoreTerm termA, ScoreTerm termB) {\n          if (termA.score== termB.score)\n            return termA.term.compareTo(termB.term) > 0;\n          else\n            return termA.score < termB.score;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.ScoreTermQueue#lessThan(ScoreTerm,ScoreTerm).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.ScoreTermQueue#lessThan(ScoreTerm,ScoreTerm).mjava","sourceNew":"        /* (non-Javadoc)\n         * @see org.apache.lucene.util.PriorityQueue#lessThan(java.lang.Object, java.lang.Object)\n         */\n        @Override\n        protected boolean lessThan(ScoreTerm termA, ScoreTerm termB) {\n          if (termA.score== termB.score)\n            return termA.term.compareTo(termB.term) > 0;\n          else\n            return termA.score < termB.score;\n        }\n\n","sourceOld":"        /* (non-Javadoc)\n         * @see org.apache.lucene.util.PriorityQueue#lessThan(java.lang.Object, java.lang.Object)\n         */\n        @Override\n        protected boolean lessThan(ScoreTerm termA, ScoreTerm termB) {\n          if (termA.score== termB.score)\n            return termA.term.compareTo(termB.term) > 0;\n          else\n            return termA.score < termB.score;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}