{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues, boolean cloudClient) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"daeaac5f7b42498079f0fb7c3a91802e588fc21a","date":1493066118,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean).mjava","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues, boolean cloudClient) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues, boolean cloudClient) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}