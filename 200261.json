{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#advance(int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed947d41796fd2096684c439e8a9b69aac940cf","date":1321538339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // last doc in our buffer is >= target, binary search + next()\n      if (++start < count && docs[count-1] >= target) {\n        binarySearch(target);\n        return nextDoc();\n      }\n      \n      start = count; // buffer is consumed\n      \n      return doc = skipTo(target);\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1","date":1324025015,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // last doc in our buffer is >= target, binary search + next()\n      if (++start < count && docs[count-1] >= target) {\n        binarySearch(target);\n        return nextDoc();\n      }\n      \n      start = count; // buffer is consumed\n      \n      return doc = skipTo(target);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["7b91922b55d15444d554721b352861d028eb8278"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}