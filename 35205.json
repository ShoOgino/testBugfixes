{"path":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","commits":[{"id":"3d5335b75378451628ea2c59d34e446d476a78a8","date":1097529879,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.<p/>\n   * Note that this effectively truncates large documents, excluding from the\n   * index terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than 10,000 terms will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    this.maxFieldLength = maxFieldLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.<p/>\n   * Note that this effectively truncates large documents, excluding from the\n   * index terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than 10,000 terms will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.<p/>\n   * Note that this effectively truncates large documents, excluding from the\n   * index terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than 10,000 terms will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    this.maxFieldLength = maxFieldLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a1cd17e8127b56acd632d0f704e9d34c8535fe","date":1184964838,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than 10,000 terms will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.<p/>\n   * Note that this effectively truncates large documents, excluding from the\n   * index terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than 10,000 terms will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than 10,000 terms will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than 10,000 terms will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link IndexWriter#DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than 10,000 terms will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link IndexWriter#DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link IndexWriter#DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link IndexWriter#DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   * @deprecated use {@link IndexWriterConfig#setMaxFieldLength(int)} instead\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxFieldLength(maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   * @deprecated use {@link IndexWriterConfig#setMaxFieldLength(int)} instead\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxFieldLength(maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   * @deprecated use {@link IndexWriterConfig#setMaxFieldLength(int)} instead\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxFieldLength(maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   * @deprecated use {@link IndexWriterConfig#setMaxFieldLength(int)} instead\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxFieldLength(maxFieldLength);\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document.  This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory.  This setting refers to the number of running terms,\n   * not to the number of different terms.<p/>\n   * <strong>Note:</strong> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document.  If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit\n   * is your memory, but you should anticipate an OutOfMemoryError.<p/>\n   * By default, no more than {@link #DEFAULT_MAX_FIELD_LENGTH} terms\n   * will be indexed for a field.\n   * @deprecated use {@link IndexWriterConfig#setMaxFieldLength(int)} instead\n   */\n  public void setMaxFieldLength(int maxFieldLength) {\n    ensureOpen();\n    this.maxFieldLength = maxFieldLength;\n    docWriter.setMaxFieldLength(maxFieldLength);\n    if (infoStream != null)\n      message(\"setMaxFieldLength \" + maxFieldLength);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxFieldLength(maxFieldLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["3d5335b75378451628ea2c59d34e446d476a78a8"],"3d5335b75378451628ea2c59d34e446d476a78a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["5350389bf83287111f7760b9e3db3af8e3648474"],"49a1cd17e8127b56acd632d0f704e9d34c8535fe":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["67006a60923e2124212d3baa0d29b444bcbd8373"],"67006a60923e2124212d3baa0d29b444bcbd8373":["49a1cd17e8127b56acd632d0f704e9d34c8535fe"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["49a1cd17e8127b56acd632d0f704e9d34c8535fe"],"3d5335b75378451628ea2c59d34e446d476a78a8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"49a1cd17e8127b56acd632d0f704e9d34c8535fe":["67006a60923e2124212d3baa0d29b444bcbd8373"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["5350389bf83287111f7760b9e3db3af8e3648474"],"67006a60923e2124212d3baa0d29b444bcbd8373":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d5335b75378451628ea2c59d34e446d476a78a8"],"5350389bf83287111f7760b9e3db3af8e3648474":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}