{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#AutoScalingConfig(Map[String,Object]).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#AutoScalingConfig(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct from a JSON map representation.\n   * @param jsonMap JSON map representation of the config. Note that this map is evaluated lazily, and\n   *                outside modifications may cause unpredictable behavior.\n   */\n  public AutoScalingConfig(Map<String, Object> jsonMap) {\n    this.jsonMap = jsonMap;\n    int version = -1;\n    if (jsonMap.containsKey(AutoScalingParams.ZK_VERSION)) {\n      try {\n        version = (Integer)jsonMap.get(AutoScalingParams.ZK_VERSION);\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n    zkVersion = version;\n    jsonMap.remove(AutoScalingParams.ZK_VERSION);\n    empty = jsonMap.isEmpty();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#AutoScalingConfig(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct from a JSON map representation.\n   * @param jsonMap JSON map representation of the config. Note that this map is evaluated lazily, and\n   *                outside modifications may cause unpredictable behavior.\n   */\n  public AutoScalingConfig(Map<String, Object> jsonMap) {\n    this.jsonMap = jsonMap;\n    int version = -1;\n    if (jsonMap.containsKey(AutoScalingParams.ZK_VERSION)) {\n      try {\n        version = (Integer)jsonMap.get(AutoScalingParams.ZK_VERSION);\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n    zkVersion = version;\n    jsonMap.remove(AutoScalingParams.ZK_VERSION);\n    empty = jsonMap.isEmpty();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#AutoScalingConfig(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct from a JSON map representation.\n   * @param jsonMap JSON map representation of the config. Note that this map is evaluated lazily, and\n   *                outside modifications may cause unpredictable behavior.\n   */\n  public AutoScalingConfig(Map<String, Object> jsonMap) {\n    this.jsonMap = jsonMap;\n    int version = -1;\n    if (jsonMap.containsKey(AutoScalingParams.ZK_VERSION)) {\n      try {\n        version = (Integer)jsonMap.get(AutoScalingParams.ZK_VERSION);\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n    zkVersion = version;\n    jsonMap.remove(AutoScalingParams.ZK_VERSION);\n    empty = jsonMap.isEmpty();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59506fa452342983f7cd1faf6d27274c658f3e09","date":1545397484,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#AutoScalingConfig(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#AutoScalingConfig(Map[String,Object]).mjava","sourceNew":"  /**\n   * Construct from a JSON map representation.\n   * @param jsonMap JSON map representation of the config. Note that this map is evaluated lazily, and\n   *                outside modifications may cause unpredictable behavior.\n   */\n  public AutoScalingConfig(Map<String, Object> jsonMap) {\n    this.jsonMap = jsonMap;\n    int version = 0;\n    if (jsonMap.containsKey(AutoScalingParams.ZK_VERSION)) {\n      try {\n        version = (Integer)jsonMap.get(AutoScalingParams.ZK_VERSION);\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n    zkVersion = version;\n    jsonMap.remove(AutoScalingParams.ZK_VERSION);\n    empty = jsonMap.isEmpty();\n  }\n\n","sourceOld":"  /**\n   * Construct from a JSON map representation.\n   * @param jsonMap JSON map representation of the config. Note that this map is evaluated lazily, and\n   *                outside modifications may cause unpredictable behavior.\n   */\n  public AutoScalingConfig(Map<String, Object> jsonMap) {\n    this.jsonMap = jsonMap;\n    int version = -1;\n    if (jsonMap.containsKey(AutoScalingParams.ZK_VERSION)) {\n      try {\n        version = (Integer)jsonMap.get(AutoScalingParams.ZK_VERSION);\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n    zkVersion = version;\n    jsonMap.remove(AutoScalingParams.ZK_VERSION);\n    empty = jsonMap.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#AutoScalingConfig(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct from a JSON map representation.\n   * @param jsonMap JSON map representation of the config. Note that this map is evaluated lazily, and\n   *                outside modifications may cause unpredictable behavior.\n   */\n  public AutoScalingConfig(Map<String, Object> jsonMap) {\n    this.jsonMap = jsonMap;\n    int version = 0;\n    if (jsonMap.containsKey(AutoScalingParams.ZK_VERSION)) {\n      try {\n        version = (Integer)jsonMap.get(AutoScalingParams.ZK_VERSION);\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n    zkVersion = version;\n    jsonMap.remove(AutoScalingParams.ZK_VERSION);\n    empty = jsonMap.isEmpty();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["59506fa452342983f7cd1faf6d27274c658f3e09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59506fa452342983f7cd1faf6d27274c658f3e09":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["59506fa452342983f7cd1faf6d27274c658f3e09"],"59506fa452342983f7cd1faf6d27274c658f3e09":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}