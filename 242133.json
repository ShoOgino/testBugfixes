{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Overseer.Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","sourceNew":"  public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = new HashSet<>();\n    this.runningTasks = new HashSet<>();\n    this.completedTasks = new HashMap<>();\n  }\n\n","sourceOld":"  public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n                                        Overseer.Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = new HashSet<>();\n    this.runningTasks = new HashSet<>();\n    this.completedTasks = new HashMap<>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042da0877b8e28fd372a8ed80d11c4506a466ad7","date":1534516670,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","sourceNew":"  public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = new HashSet<>();\n    this.runningTasks = new HashSet<>();\n    this.completedTasks = new HashMap<>();\n    thisNode = Utils.getMDCNode();\n  }\n\n","sourceOld":"  public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = new HashSet<>();\n    this.runningTasks = new HashSet<>();\n    this.completedTasks = new HashMap<>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98b85aeea4d572e94fd5e6ba67043b5b363f1380","date":1592921806,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","sourceNew":"  public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = ConcurrentHashMap.newKeySet();\n    this.runningTasks = ConcurrentHashMap.newKeySet();\n    this.completedTasks = new ConcurrentHashMap<>();\n    thisNode = Utils.getMDCNode();\n  }\n\n","sourceOld":"  public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = new HashSet<>();\n    this.runningTasks = new HashSet<>();\n    this.completedTasks = new HashMap<>();\n    thisNode = Utils.getMDCNode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(CloudConfig,ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","sourceNew":"  public OverseerTaskProcessor(CloudConfig cloudConfig, ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.cloudConfig = cloudConfig;\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = ConcurrentHashMap.newKeySet();\n    this.runningTasks = ConcurrentHashMap.newKeySet();\n    this.completedTasks = new ConcurrentHashMap<>();\n    thisNode = Utils.getMDCNode();\n  }\n\n","sourceOld":"  public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = ConcurrentHashMap.newKeySet();\n    this.runningTasks = ConcurrentHashMap.newKeySet();\n    this.completedTasks = new ConcurrentHashMap<>();\n    thisNode = Utils.getMDCNode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#OverseerTaskProcessor(CloudConfig,ZkStateReader,String,Stats,OverseerMessageHandlerSelector,OverseerNodePrioritizer,OverseerTaskQueue,DistributedMap,DistributedMap,DistributedMap).mjava","sourceNew":"  public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = ConcurrentHashMap.newKeySet();\n    this.runningTasks = ConcurrentHashMap.newKeySet();\n    this.completedTasks = new ConcurrentHashMap<>();\n    thisNode = Utils.getMDCNode();\n  }\n\n","sourceOld":"  public OverseerTaskProcessor(CloudConfig cloudConfig, ZkStateReader zkStateReader, String myId,\n                                        Stats stats,\n                                        OverseerMessageHandlerSelector selector,\n                                        OverseerNodePrioritizer prioritizer,\n                                        OverseerTaskQueue workQueue,\n                                        DistributedMap runningMap,\n                                        DistributedMap completedMap,\n                                        DistributedMap failureMap) {\n    this.cloudConfig = cloudConfig;\n    this.zkStateReader = zkStateReader;\n    this.myId = myId;\n    this.stats = stats;\n    this.selector = selector;\n    this.prioritizer = prioritizer;\n    this.workQueue = workQueue;\n    this.runningMap = runningMap;\n    this.completedMap = completedMap;\n    this.failureMap = failureMap;\n    this.runningZKTasks = ConcurrentHashMap.newKeySet();\n    this.runningTasks = ConcurrentHashMap.newKeySet();\n    this.completedTasks = new ConcurrentHashMap<>();\n    thisNode = Utils.getMDCNode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["98b85aeea4d572e94fd5e6ba67043b5b363f1380"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98b85aeea4d572e94fd5e6ba67043b5b363f1380":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"98b85aeea4d572e94fd5e6ba67043b5b363f1380":["c526352db87264a72a7a9ad68c1b769b81e54305"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["98b85aeea4d572e94fd5e6ba67043b5b363f1380"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}