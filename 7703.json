{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#clearAsyncId(String).mjava","commits":[{"id":"dd8a9ad1acc754f713e220250044c2bf06a22a0b","date":1518740056,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#clearAsyncId(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Clears an asyncId previously claimed by calling {@link #claimAsyncId(String)}\n   * @param asyncId A string representing the asyncId of an operation. Can't be null.\n   * @return True if the asyncId existed and was cleared.\n   *         False if the asyncId didn't exist before.\n   */\n  public boolean clearAsyncId(String asyncId) throws KeeperException {\n    try {\n      return asyncIdsMap.remove(asyncId);\n    } catch (InterruptedException e) {\n      log.error(\"Could not release asyncId=\" + asyncId, e);\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#clearAsyncId(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#clearAsyncId(String).mjava","sourceNew":"  /**\n   * Clears an asyncId previously claimed by calling {@link #claimAsyncId(String)}\n   * @param asyncId A string representing the asyncId of an operation. Can't be null.\n   * @return True if the asyncId existed and was cleared.\n   *         False if the asyncId didn't exist before.\n   */\n  public boolean clearAsyncId(String asyncId) throws KeeperException {\n    try {\n      return asyncIdsMap.remove(asyncId);\n    } catch (InterruptedException e) {\n      log.error(\"Could not release asyncId={}\", asyncId, e);\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clears an asyncId previously claimed by calling {@link #claimAsyncId(String)}\n   * @param asyncId A string representing the asyncId of an operation. Can't be null.\n   * @return True if the asyncId existed and was cleared.\n   *         False if the asyncId didn't exist before.\n   */\n  public boolean clearAsyncId(String asyncId) throws KeeperException {\n    try {\n      return asyncIdsMap.remove(asyncId);\n    } catch (InterruptedException e) {\n      log.error(\"Could not release asyncId=\" + asyncId, e);\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["ad4957cde742defe6db19689abdc267c5d948066"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}