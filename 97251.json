{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","commits":[{"id":"c721fca3c540a91b445e6c57e51e2fcb64af01a7","date":1508161002,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Clause.Violation],List[Clause.Violation]).mjava","sourceNew":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Clause.Violation> fresh, List<Clause.Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Clause.Violation freshViolation = fresh.get(i);\n        Clause.Violation oldViolation = null;\n        for (Clause.Violation v : old) {\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","sourceNew":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {//look for exactly same clause being violated\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation == null) {//if no match, look for similar violation\n          for (Violation v : old) {\n            if (v.isSimilarViolation(freshViolation)) oldViolation = v;\n          }\n        }\n\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","sourceNew":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {//look for exactly same clause being violated\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation == null) {//if no match, look for similar violation\n          for (Violation v : old) {\n            if (v.isSimilarViolation(freshViolation)) oldViolation = v;\n          }\n        }\n\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","sourceNew":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {//look for exactly same clause being violated\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation == null) {//if no match, look for similar violation\n          for (Violation v : old) {\n            if (v.isSimilarViolation(freshViolation)) oldViolation = v;\n          }\n        }\n\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","sourceNew":null,"sourceOld":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {//look for exactly same clause being violated\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation == null) {//if no match, look for similar violation\n          for (Violation v : old) {\n            if (v.isSimilarViolation(freshViolation)) oldViolation = v;\n          }\n        }\n\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c721fca3c540a91b445e6c57e51e2fcb64af01a7","9837f40c922407d857991971de6def18eda0857b"],"3f504512a03d978990cbff30db0522b354e846db":["9837f40c922407d857991971de6def18eda0857b"],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9837f40c922407d857991971de6def18eda0857b":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["c721fca3c540a91b445e6c57e51e2fcb64af01a7","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3f504512a03d978990cbff30db0522b354e846db","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}