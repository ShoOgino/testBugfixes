{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/FiniteStringsIterator#next().mjava","commits":[{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/FiniteStringsIterator#next().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generate next finite string.\n   * The return value is just valid until the next call of this method!\n   *\n   * @return Finite string or null, if no more finite strings are available.\n   */\n  public IntsRef next() {\n    // Special case the empty string, as usual:\n    if (emitEmptyString) {\n      emitEmptyString = false;\n      return EMPTY;\n    }\n\n    for (int depth = string.length(); depth > 0;) {\n      PathNode node = nodes[depth-1];\n\n      // Get next label leaving the current node:\n      int label = node.nextLabel(a);\n      if (label != -1) {\n        string.setIntAt(depth - 1, label);\n\n        int to = node.to;\n        if (a.getNumTransitions(to) != 0) {\n          // Now recurse: the destination of this transition has outgoing transitions:\n          if (pathStates.get(to)) {\n            throw new IllegalArgumentException(\"automaton has cycles\");\n          }\n          pathStates.set(to);\n\n          // Push node onto stack:\n          growStack(depth);\n          nodes[depth].resetState(a, to);\n          depth++;\n          string.setLength(depth);\n          string.grow(depth);\n        } else if (a.isAccept(to)) {\n          // This transition leads to an accept state, so we save the current string:\n          return string.get();\n        }\n      } else {\n        // No more transitions leaving this state, pop/return back to previous state:\n        int state = node.state;\n        assert pathStates.get(state);\n        pathStates.clear(state);\n        depth--;\n        string.setLength(depth);\n\n        if (a.isAccept(state)) {\n          // This transition leads to an accept state, so we save the current string:\n          return string.get();\n        }\n      }\n    }\n\n    // Finished iteration.\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/FiniteStringsIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/FiniteStringsIterator#next().mjava","sourceNew":"  /**\n   * Generate next finite string.\n   * The return value is just valid until the next call of this method!\n   *\n   * @return Finite string or null, if no more finite strings are available.\n   */\n  public IntsRef next() {\n    // Special case the empty string, as usual:\n    if (emitEmptyString) {\n      emitEmptyString = false;\n      return EMPTY;\n    }\n\n    for (int depth = string.length(); depth > 0;) {\n      PathNode node = nodes[depth-1];\n\n      // Get next label leaving the current node:\n      int label = node.nextLabel(a);\n      if (label != -1) {\n        string.setIntAt(depth - 1, label);\n\n        int to = node.to;\n        if (a.getNumTransitions(to) != 0 && to != endState) {\n          // Now recurse: the destination of this transition has outgoing transitions:\n          if (pathStates.get(to)) {\n            throw new IllegalArgumentException(\"automaton has cycles\");\n          }\n          pathStates.set(to);\n\n          // Push node onto stack:\n          growStack(depth);\n          nodes[depth].resetState(a, to);\n          depth++;\n          string.setLength(depth);\n          string.grow(depth);\n        } else if (endState == to || a.isAccept(to)) {\n          // This transition leads to an accept state, so we save the current string:\n          return string.get();\n        }\n      } else {\n        // No more transitions leaving this state, pop/return back to previous state:\n        int state = node.state;\n        assert pathStates.get(state);\n        pathStates.clear(state);\n        depth--;\n        string.setLength(depth);\n\n        if (a.isAccept(state)) {\n          // This transition leads to an accept state, so we save the current string:\n          return string.get();\n        }\n      }\n    }\n\n    // Finished iteration.\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Generate next finite string.\n   * The return value is just valid until the next call of this method!\n   *\n   * @return Finite string or null, if no more finite strings are available.\n   */\n  public IntsRef next() {\n    // Special case the empty string, as usual:\n    if (emitEmptyString) {\n      emitEmptyString = false;\n      return EMPTY;\n    }\n\n    for (int depth = string.length(); depth > 0;) {\n      PathNode node = nodes[depth-1];\n\n      // Get next label leaving the current node:\n      int label = node.nextLabel(a);\n      if (label != -1) {\n        string.setIntAt(depth - 1, label);\n\n        int to = node.to;\n        if (a.getNumTransitions(to) != 0) {\n          // Now recurse: the destination of this transition has outgoing transitions:\n          if (pathStates.get(to)) {\n            throw new IllegalArgumentException(\"automaton has cycles\");\n          }\n          pathStates.set(to);\n\n          // Push node onto stack:\n          growStack(depth);\n          nodes[depth].resetState(a, to);\n          depth++;\n          string.setLength(depth);\n          string.grow(depth);\n        } else if (a.isAccept(to)) {\n          // This transition leads to an accept state, so we save the current string:\n          return string.get();\n        }\n      } else {\n        // No more transitions leaving this state, pop/return back to previous state:\n        int state = node.state;\n        assert pathStates.get(state);\n        pathStates.clear(state);\n        depth--;\n        string.setLength(depth);\n\n        if (a.isAccept(state)) {\n          // This transition leads to an accept state, so we save the current string:\n          return string.get();\n        }\n      }\n    }\n\n    // Finished iteration.\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}