{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","commits":[{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c62e7afee69a9aa7036185473ffd37ed723755b3","date":1359388738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b","date":1359664357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e129598ae448211d969dd7cdf2ad4558a0658a1","date":1362963550,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64e6baad25b7155a116cb0126b4e2a06b945a5c5","date":1362976847,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6","date":1363054647,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8405d98acebb7e287bf7ac40e937ba05b8661285","date":1401433291,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":["dac1db31006989ae24922811f00f909d30f1391d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n\n      final BytesRef term = new BytesRef();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          term.bytes = ArrayUtil.grow(term.bytes, output.length);\n          term.offset = 0;\n          term.length = 0;\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          term.grow(output.length);\n          term.clear();\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n\n      final BytesRef term = new BytesRef();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          term.bytes = ArrayUtil.grow(term.bytes, output.length);\n          term.offset = 0;\n          term.length = 0;\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","f93c27491251c14ea21df71ebbf6feb9f891e6cb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          term.grow(output.length);\n          term.clear();\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          term.grow(output.length);\n          term.clear();\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          term.grow(output.length);\n          term.clear();\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          term.grow(output.length);\n          term.clear();\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dac1db31006989ae24922811f00f909d30f1391d"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c62e7afee69a9aa7036185473ffd37ed723755b3":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["c62e7afee69a9aa7036185473ffd37ed723755b3"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f366ce28775e2b8ea4e06355009471328711666d"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","4cc45c615dbb82bf79d5f9550286098367874fbf"],"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["64e6baad25b7155a116cb0126b4e2a06b945a5c5"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e129598ae448211d969dd7cdf2ad4558a0658a1":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"dac1db31006989ae24922811f00f909d30f1391d":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"64e6baad25b7155a116cb0126b4e2a06b945a5c5":["7e129598ae448211d969dd7cdf2ad4558a0658a1"],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"c62e7afee69a9aa7036185473ffd37ed723755b3":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["7e129598ae448211d969dd7cdf2ad4558a0658a1"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["dac1db31006989ae24922811f00f909d30f1391d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["c62e7afee69a9aa7036185473ffd37ed723755b3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f366ce28775e2b8ea4e06355009471328711666d"],"7e129598ae448211d969dd7cdf2ad4558a0658a1":["64e6baad25b7155a116cb0126b4e2a06b945a5c5"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"dac1db31006989ae24922811f00f909d30f1391d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f366ce28775e2b8ea4e06355009471328711666d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"64e6baad25b7155a116cb0126b4e2a06b945a5c5":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}