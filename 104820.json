{"path":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory).mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory).mjava","pathOld":"/dev/null","sourceNew":"  private void init(File path, boolean create, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.lockClass is set, instantiate that;\n    // else, use SimpleFSLockFactory:\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory:\n          File lockDir;\n          if (LOCK_DIR == null) {\n            lockDir = directory;\n          } else {\n            lockDir = new File(LOCK_DIR);\n          }\n          lockFactory = new SimpleFSLockFactory(lockDir);\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n\n    init(path, create);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39","date":1161023282,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory).mjava","sourceNew":"  private void init(File path, boolean create, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory:\n          File lockDir;\n          if (LOCK_DIR == null) {\n            lockDir = directory;\n          } else {\n            lockDir = new File(LOCK_DIR);\n          }\n          lockFactory = new SimpleFSLockFactory(lockDir);\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n\n    init(path, create);\n  }\n\n","sourceOld":"  private void init(File path, boolean create, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.lockClass is set, instantiate that;\n    // else, use SimpleFSLockFactory:\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory:\n          File lockDir;\n          if (LOCK_DIR == null) {\n            lockDir = directory;\n          } else {\n            lockDir = new File(LOCK_DIR);\n          }\n          lockFactory = new SimpleFSLockFactory(lockDir);\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n\n    init(path, create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory).mjava","sourceNew":"  private void init(File path, boolean create, LockFactory lockFactory, boolean doRemoveOldFiles) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory:\n          File lockDir;\n          if (LOCK_DIR == null) {\n            lockDir = directory;\n          } else {\n            lockDir = new File(LOCK_DIR);\n          }\n          lockFactory = new SimpleFSLockFactory(lockDir);\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n\n    init(path, create, doRemoveOldFiles);\n  }\n\n","sourceOld":"  private void init(File path, boolean create, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory:\n          File lockDir;\n          if (LOCK_DIR == null) {\n            lockDir = directory;\n          } else {\n            lockDir = new File(LOCK_DIR);\n          }\n          lockFactory = new SimpleFSLockFactory(lockDir);\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n\n    init(path, create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["284c1d3c8b19931bf6f312fae7470487f5d9e580"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}