{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","commits":[{"id":"7fe41964e49958f662028ea7ed8c224e0955edae","date":1462534610,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector).mjava","sourceNew":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final Vector thePoint) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePoint, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePoint);\n      this.thePoint = thePoint;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,Vector,Vector).mjava","sourceNew":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final Vector testPoint, final Vector thePoint) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePoint, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePoint);\n      this.thePoint = thePoint;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7090fb56105afb6515b6506724359c32ec7639","date":1521211434,"type":6,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.FullLinearCrossingEdgeIterator#FullLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","sourceNew":"    public FullLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // It doesn't matter which 1/2 of the world we choose, but we must choose only one.\n      this.bound = new SidedPlane(plane, testPoint);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","bugFix":null,"bugIntro":["d1ddb4f16cfdfa4f6fa9349fb90d48b0f1e6f040"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e7090fb56105afb6515b6506724359c32ec7639","date":1521211434,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#SectorLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","sourceNew":"    public SectorLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // This is safe since we know we aren't doing a full 1/2 a world.\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","bugFix":null,"bugIntro":["d1ddb4f16cfdfa4f6fa9349fb90d48b0f1e6f040"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1e7090fb56105afb6515b6506724359c32ec7639":["7fe41964e49958f662028ea7ed8c224e0955edae"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fe41964e49958f662028ea7ed8c224e0955edae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7fe41964e49958f662028ea7ed8c224e0955edae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fe41964e49958f662028ea7ed8c224e0955edae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e7090fb56105afb6515b6506724359c32ec7639"]},"commit2Childs":{"1e7090fb56105afb6515b6506724359c32ec7639":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","7fe41964e49958f662028ea7ed8c224e0955edae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7fe41964e49958f662028ea7ed8c224e0955edae":["1e7090fb56105afb6515b6506724359c32ec7639","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}