{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n\n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","date":1454767455,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      // nocommit must check for no pending deletes here, like IW does\n\n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n\n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      // nocommit must check for no pending deletes here, like IW does\n\n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      // nocommit must check for no pending deletes here, like IW does\n\n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8ec0889b27701f0ad90a25c95b75454e898cf3","date":1454871481,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      // nocommit must check for no pending deletes here, like IW does\n\n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b844e2ae5435a8d4d925003c10027c25e26e02d","date":1455044345,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8ec0889b27701f0ad90a25c95b75454e898cf3":["1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"2b844e2ae5435a8d4d925003c10027c25e26e02d":["4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4a8ec0889b27701f0ad90a25c95b75454e898cf3":["2b844e2ae5435a8d4d925003c10027c25e26e02d"],"2b844e2ae5435a8d4d925003c10027c25e26e02d":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2b844e2ae5435a8d4d925003c10027c25e26e02d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}