{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","commits":[{"id":"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","date":1436588269,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","pathOld":"/dev/null","sourceNew":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    List<String> nodes = new ArrayList<>();\n    for (Replica rep : slice.getReplicas()) {\n      nodes.add(rep.getNodeName());\n    }\n\n    assertTrue(\"Should have some nodes!\", nodes.size() > 0);\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","sourceNew":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState();\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    List<String> nodes = new ArrayList<>();\n    for (Replica rep : slice.getReplicas()) {\n      nodes.add(rep.getNodeName());\n    }\n\n    assertTrue(\"Should have some nodes!\", nodes.size() > 0);\n    return nodes;\n  }\n\n","sourceOld":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    List<String> nodes = new ArrayList<>();\n    for (Replica rep : slice.getReplicas()) {\n      nodes.add(rep.getNodeName());\n    }\n\n    assertTrue(\"Should have some nodes!\", nodes.size() > 0);\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","sourceNew":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    List<String> nodes = new ArrayList<>();\n    for (Replica rep : slice.getReplicas()) {\n      nodes.add(rep.getNodeName());\n    }\n\n    assertTrue(\"Should have some nodes!\", nodes.size() > 0);\n    return nodes;\n  }\n\n","sourceOld":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState();\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    List<String> nodes = new ArrayList<>();\n    for (Replica rep : slice.getReplicas()) {\n      nodes.add(rep.getNodeName());\n    }\n\n    assertTrue(\"Should have some nodes!\", nodes.size() > 0);\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","sourceNew":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    DocCollection state = getCollectionState(collectionName);\n    return state.getReplicas().stream().map(Replica::getNodeName).distinct().collect(Collectors.toList());\n  }\n\n","sourceOld":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    List<String> nodes = new ArrayList<>();\n    for (Replica rep : slice.getReplicas()) {\n      nodes.add(rep.getNodeName());\n    }\n\n    assertTrue(\"Should have some nodes!\", nodes.size() > 0);\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","sourceNew":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    DocCollection state = getCollectionState(collectionName);\n    return state.getReplicas().stream().map(Replica::getNodeName).distinct().collect(Collectors.toList());\n  }\n\n","sourceOld":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    List<String> nodes = new ArrayList<>();\n    for (Replica rep : slice.getReplicas()) {\n      nodes.add(rep.getNodeName());\n    }\n\n    assertTrue(\"Should have some nodes!\", nodes.size() > 0);\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","sourceNew":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    DocCollection state = getCollectionState(collectionName);\n    return state.getReplicas().stream().map(Replica::getNodeName).distinct().collect(Collectors.toList());\n  }\n\n","sourceOld":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    DocCollection state = getCollectionState(collectionName);\n    return state.getReplicas().stream().map(Replica::getNodeName).distinct().collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#getAllNodeNames(String).mjava","sourceNew":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    DocCollection state = getCollectionState(collectionName);\n    return state.getReplicas().stream().map(Replica::getNodeName).distinct().collect(Collectors.toList());\n  }\n\n","sourceOld":"  private List<String> getAllNodeNames(String collectionName) throws KeeperException, InterruptedException {\n    DocCollection state = getCollectionState(collectionName);\n    return state.getReplicas().stream().map(Replica::getNodeName).distinct().collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4efd3fffdd7acd625bb88e455c8097e17f75735","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}