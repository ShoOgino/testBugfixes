{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","commits":[{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    Map params = new HashMap();\n    params.put(\"q\",\"*:*\");\n    params.put(\"sort\", \"_version_ desc\");\n    params.put(\"distrib\", \"false\");\n    params.put(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(\"sort\", \"_version_ desc\");\n    params.set(\"distrib\", \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    Map params = new HashMap();\n    params.put(\"q\",\"*:*\");\n    params.put(\"sort\", \"_version_ desc\");\n    params.put(\"distrib\", \"false\");\n    params.put(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(\"sort\", \"_version_ desc\");\n    params.set(\"distrib\", \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    Map params = new HashMap();\n    params.put(\"q\",\"*:*\");\n    params.put(\"sort\", \"_version_ desc\");\n    params.put(\"distrib\", \"false\");\n    params.put(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(\"sort\", \"_version_ desc\");\n    params.set(\"distrib\", \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    Map params = new HashMap();\n    params.put(\"q\",\"*:*\");\n    params.put(\"sort\", \"_version_ desc\");\n    params.put(\"distrib\", \"false\");\n    params.put(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(\"sort\", \"_version_ desc\");\n    params.set(\"distrib\", \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          StreamContext localContext = new StreamContext();\n          localContext.setSolrClientCache(streamContext.getSolrClientCache());\n          solrStream.setStreamContext(localContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(\"sort\", \"_version_ desc\");\n    params.set(\"distrib\", \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(\"sort\", \"_version_ desc\");\n    params.set(\"distrib\", \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          StreamContext localContext = new StreamContext();\n          localContext.setSolrClientCache(streamContext.getSolrClientCache());\n          solrStream.setStreamContext(localContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    Map params = new HashMap();\n    params.put(\"q\",\"*:*\");\n    params.put(\"sort\", \"_version_ desc\");\n    params.put(\"distrib\", \"false\");\n    params.put(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(SORT, \"_version_ desc\");\n    params.set(DISTRIB, \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          StreamContext localContext = new StreamContext();\n          localContext.setSolrClientCache(streamContext.getSolrClientCache());\n          solrStream.setStreamContext(localContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(\"sort\", \"_version_ desc\");\n    params.set(\"distrib\", \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          StreamContext localContext = new StreamContext();\n          localContext.setSolrClientCache(streamContext.getSolrClientCache());\n          solrStream.setStreamContext(localContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(SORT, \"_version_ desc\");\n    params.set(DISTRIB, \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          StreamContext localContext = new StreamContext();\n          localContext.setSolrClientCache(streamContext.getSolrClientCache());\n          solrStream.setStreamContext(localContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(\"sort\", \"_version_ desc\");\n    params.set(\"distrib\", \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          StreamContext localContext = new StreamContext();\n          localContext.setSolrClientCache(streamContext.getSolrClientCache());\n          solrStream.setStreamContext(localContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7ced979f39d7651addfc7d805e1d9bfac215822","date":1589391432,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoint(Slice,Set[String]).mjava","sourceNew":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(SORT, \"_version_ desc\");\n    params.set(DISTRIB, \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          StreamContext localContext = new StreamContext();\n          localContext.setSolrClientCache(streamContext.getSolrClientCache());\n          localContext.setObjectCache(streamContext.getObjectCache());\n          solrStream.setStreamContext(localContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","sourceOld":"  //Gets the highest version number for the slice.\n  private long getCheckpoint(Slice slice, Set<String> liveNodes) throws IOException {\n    Collection<Replica> replicas = slice.getReplicas();\n    long checkpoint = -1;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"*:*\");\n    params.set(SORT, \"_version_ desc\");\n    params.set(DISTRIB, \"false\");\n    params.set(\"rows\", 1);\n    for(Replica replica : replicas) {\n      if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n        String coreUrl = replica.getCoreUrl();\n        SolrStream solrStream = new SolrStream(coreUrl, params);\n\n        if(streamContext != null) {\n          StreamContext localContext = new StreamContext();\n          localContext.setSolrClientCache(streamContext.getSolrClientCache());\n          solrStream.setStreamContext(localContext);\n        }\n\n        try {\n          solrStream.open();\n          Tuple tuple = solrStream.read();\n          if(tuple.EOF) {\n            return 0;\n          } else {\n            checkpoint = tuple.getLong(\"_version_\");\n          }\n          break;\n        } finally {\n          solrStream.close();\n        }\n      }\n    }\n    return checkpoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d7ced979f39d7651addfc7d805e1d9bfac215822":["01624b85de12fb02335810bdf325124e59040772"],"915201312eef398482b3dffe8a297e1809f3b29a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["915201312eef398482b3dffe8a297e1809f3b29a"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["10b9c6c42133576daaccbd79bd04c88511b9caca","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"01624b85de12fb02335810bdf325124e59040772":["915201312eef398482b3dffe8a297e1809f3b29a"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["10b9c6c42133576daaccbd79bd04c88511b9caca","915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["10b9c6c42133576daaccbd79bd04c88511b9caca","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"d7ced979f39d7651addfc7d805e1d9bfac215822":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"915201312eef398482b3dffe8a297e1809f3b29a":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"01624b85de12fb02335810bdf325124e59040772":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}