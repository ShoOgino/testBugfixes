{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testSegmentCountOnFlushBasic().mjava","commits":[{"id":"06663b933cd6a92982d79726136b07915bc86aef","date":1399473227,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testSegmentCountOnFlushBasic().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5644: for first segment, two threads each indexed one doc (likely concurrently), but for second segment, each thread indexed the\n  // doc NOT at the same time, and should have shared the same thread state / segment\n  public void testSegmentCountOnFlushBasic() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final CountDownLatch startDone = new CountDownLatch(2);\n    final CountDownLatch middleGun = new CountDownLatch(1);\n    final CountDownLatch finalGun = new CountDownLatch(1);\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      final int threadID = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"here is some text\", Field.Store.NO));\n              w.addDocument(doc);\n              startDone.countDown();\n\n              middleGun.await();\n              if (threadID == 0) {\n                w.addDocument(doc);\n              } else {\n                finalGun.await();\n                w.addDocument(doc);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n    startDone.await();\n\n    IndexReader r = DirectoryReader.open(w, true);\n    assertEquals(2, r.numDocs());\n    int numSegments = r.leaves().size();\n    // 1 segment if the threads ran sequentially, else 2:\n    assertTrue(numSegments <= 2);\n    r.close();\n\n    middleGun.countDown();\n    threads[0].join();\n\n    finalGun.countDown();\n    threads[1].join();\n\n    r = DirectoryReader.open(w, true);\n    assertEquals(4, r.numDocs());\n    // Both threads should have shared a single thread state since they did not try to index concurrently:\n    assertEquals(1+numSegments, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testSegmentCountOnFlushBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testSegmentCountOnFlushBasic().mjava","sourceNew":"  // LUCENE-5644: for first segment, two threads each indexed one doc (likely concurrently), but for second segment, each thread indexed the\n  // doc NOT at the same time, and should have shared the same thread state / segment\n  public void testSegmentCountOnFlushBasic() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final CountDownLatch startDone = new CountDownLatch(2);\n    final CountDownLatch middleGun = new CountDownLatch(1);\n    final CountDownLatch finalGun = new CountDownLatch(1);\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      final int threadID = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"here is some text\", Field.Store.NO));\n              w.addDocument(doc);\n              startDone.countDown();\n\n              middleGun.await();\n              if (threadID == 0) {\n                w.addDocument(doc);\n              } else {\n                finalGun.await();\n                w.addDocument(doc);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n    startDone.await();\n\n    IndexReader r = DirectoryReader.open(w, true);\n    assertEquals(2, r.numDocs());\n    int numSegments = r.leaves().size();\n    // 1 segment if the threads ran sequentially, else 2:\n    assertTrue(numSegments <= 2);\n    r.close();\n\n    middleGun.countDown();\n    threads[0].join();\n\n    finalGun.countDown();\n    threads[1].join();\n\n    r = DirectoryReader.open(w, true);\n    assertEquals(4, r.numDocs());\n    // Both threads should have shared a single thread state since they did not try to index concurrently:\n    assertEquals(1+numSegments, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5644: for first segment, two threads each indexed one doc (likely concurrently), but for second segment, each thread indexed the\n  // doc NOT at the same time, and should have shared the same thread state / segment\n  public void testSegmentCountOnFlushBasic() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final CountDownLatch startDone = new CountDownLatch(2);\n    final CountDownLatch middleGun = new CountDownLatch(1);\n    final CountDownLatch finalGun = new CountDownLatch(1);\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      final int threadID = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"here is some text\", Field.Store.NO));\n              w.addDocument(doc);\n              startDone.countDown();\n\n              middleGun.await();\n              if (threadID == 0) {\n                w.addDocument(doc);\n              } else {\n                finalGun.await();\n                w.addDocument(doc);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n    startDone.await();\n\n    IndexReader r = DirectoryReader.open(w, true);\n    assertEquals(2, r.numDocs());\n    int numSegments = r.leaves().size();\n    // 1 segment if the threads ran sequentially, else 2:\n    assertTrue(numSegments <= 2);\n    r.close();\n\n    middleGun.countDown();\n    threads[0].join();\n\n    finalGun.countDown();\n    threads[1].join();\n\n    r = DirectoryReader.open(w, true);\n    assertEquals(4, r.numDocs());\n    // Both threads should have shared a single thread state since they did not try to index concurrently:\n    assertEquals(1+numSegments, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testSegmentCountOnFlushBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterThreadsToSegments#testSegmentCountOnFlushBasic().mjava","sourceNew":"  // LUCENE-5644: for first segment, two threads each indexed one doc (likely concurrently), but for second segment, each thread indexed the\n  // doc NOT at the same time, and should have shared the same thread state / segment\n  public void testSegmentCountOnFlushBasic() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final CountDownLatch startDone = new CountDownLatch(2);\n    final CountDownLatch middleGun = new CountDownLatch(1);\n    final CountDownLatch finalGun = new CountDownLatch(1);\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      final int threadID = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"here is some text\", Field.Store.NO));\n              w.addDocument(doc);\n              startDone.countDown();\n\n              middleGun.await();\n              if (threadID == 0) {\n                w.addDocument(doc);\n              } else {\n                finalGun.await();\n                w.addDocument(doc);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n    startDone.await();\n\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(2, r.numDocs());\n    int numSegments = r.leaves().size();\n    // 1 segment if the threads ran sequentially, else 2:\n    assertTrue(numSegments <= 2);\n    r.close();\n\n    middleGun.countDown();\n    threads[0].join();\n\n    finalGun.countDown();\n    threads[1].join();\n\n    r = DirectoryReader.open(w);\n    assertEquals(4, r.numDocs());\n    // Both threads should have shared a single thread state since they did not try to index concurrently:\n    assertEquals(1+numSegments, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5644: for first segment, two threads each indexed one doc (likely concurrently), but for second segment, each thread indexed the\n  // doc NOT at the same time, and should have shared the same thread state / segment\n  public void testSegmentCountOnFlushBasic() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final CountDownLatch startDone = new CountDownLatch(2);\n    final CountDownLatch middleGun = new CountDownLatch(1);\n    final CountDownLatch finalGun = new CountDownLatch(1);\n    Thread[] threads = new Thread[2];\n    for(int i=0;i<threads.length;i++) {\n      final int threadID = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              Document doc = new Document();\n              doc.add(newTextField(\"field\", \"here is some text\", Field.Store.NO));\n              w.addDocument(doc);\n              startDone.countDown();\n\n              middleGun.await();\n              if (threadID == 0) {\n                w.addDocument(doc);\n              } else {\n                finalGun.await();\n                w.addDocument(doc);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n    startDone.await();\n\n    IndexReader r = DirectoryReader.open(w, true);\n    assertEquals(2, r.numDocs());\n    int numSegments = r.leaves().size();\n    // 1 segment if the threads ran sequentially, else 2:\n    assertTrue(numSegments <= 2);\n    r.close();\n\n    middleGun.countDown();\n    threads[0].join();\n\n    finalGun.countDown();\n    threads[1].join();\n\n    r = DirectoryReader.open(w, true);\n    assertEquals(4, r.numDocs());\n    // Both threads should have shared a single thread state since they did not try to index concurrently:\n    assertEquals(1+numSegments, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["06663b933cd6a92982d79726136b07915bc86aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"],"06663b933cd6a92982d79726136b07915bc86aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06663b933cd6a92982d79726136b07915bc86aef"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2a1862266772deb28cdcb7d996b64d2177022687"],"06663b933cd6a92982d79726136b07915bc86aef":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}