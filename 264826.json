{"path":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"/dev/null","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n      Configuration conf = new Configuration();\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      FileSystem fs;\n      try {\n        URI uri = new URI(hdfsUri);\n        fs = FileSystem.newInstance(uri, conf);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n      }\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c51d60d4f34c66a3ee711805d96a5fbe0a83740","date":1372986050,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n      Configuration conf = new Configuration();\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      FileSystem fs;\n      try {\n        URI uri = new URI(hdfsUri);\n        fs = FileSystem.newInstance(uri, conf);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n      }\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"/dev/null","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(\"UTF-8\"), \"aaaaaa\".getBytes(\"UTF-8\"), content);\n      findReplace(\"BBBBBB\".getBytes(\"UTF-8\"), \"bbbbbb\".getBytes(\"UTF-8\"), content);\n      findReplace(\"CCCCCC\".getBytes(\"UTF-8\"), \"cccccc\".getBytes(\"UTF-8\"), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      try(FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]))) {\n        dos.writeLong(0xffffffffffffffffL);\n        dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      try(FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]))) {\n        byte[] content = new byte[dis.available()];\n        dis.readFully(content);\n\n        // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n        findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n        // WARNING... assumes format of .00000n where n is less than 9\n        long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n        String fname2 = String.format(Locale.ROOT,\n            UpdateLog.LOG_FILENAME_PATTERN,\n            UpdateLog.TLOG_NAME,\n            logNumber + 1);\n\n        try(FSDataOutputStream dos = fs.create(new Path(logDir, fname2), (short)1)) {\n          dos.write(content);\n        }\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]));\n      dos.writeLong(0xffffffffffffffffL);\n      dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      dos.close();\n      \n      FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]));\n      byte[] content = new byte[(int)dis.available()];\n\n      dis.readFully(content);\n\n      dis.close();\n\n      // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n      findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n      findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n      // WARNING... assumes format of .00000n where n is less than 9\n      long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n      String fname2 = String.format(Locale.ROOT,\n          UpdateLog.LOG_FILENAME_PATTERN,\n          UpdateLog.TLOG_NAME,\n          logNumber + 1);\n      \n      dos = fs.create(new Path(logDir, fname2), (short)1);\n      dos.write(content);\n      dos.close();\n      \n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":["9d3d365762604952e436b51980101dfc84cc1b3e","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      try(FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]))) {\n        dos.writeLong(0xffffffffffffffffL);\n        dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      try(FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]))) {\n        byte[] content = new byte[dis.available()];\n        dis.readFully(content);\n\n        // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n        findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n        // WARNING... assumes format of .00000n where n is less than 9\n        long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n        String fname2 = String.format(Locale.ROOT,\n            UpdateLog.LOG_FILENAME_PATTERN,\n            UpdateLog.TLOG_NAME,\n            logNumber + 1);\n\n        try(FSDataOutputStream dos = fs.create(new Path(logDir, fname2), (short)1)) {\n          dos.write(content);\n        }\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      try(FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]))) {\n        dos.writeLong(0xffffffffffffffffL);\n        dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      try(FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]))) {\n        byte[] content = new byte[dis.available()];\n        dis.readFully(content);\n\n        // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n        findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n        // WARNING... assumes format of .00000n where n is less than 9\n        long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n        String fname2 = String.format(Locale.ROOT,\n            UpdateLog.LOG_FILENAME_PATTERN,\n            UpdateLog.TLOG_NAME,\n            logNumber + 1);\n\n        try(FSDataOutputStream dos = fs.create(new Path(logDir, fname2), (short)1)) {\n          dos.write(content);\n        }\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      try(FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]))) {\n        dos.writeLong(0xffffffffffffffffL);\n        dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      try(FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]))) {\n        byte[] content = new byte[dis.available()];\n        dis.readFully(content);\n\n        // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n        findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n        // WARNING... assumes format of .00000n where n is less than 9\n        long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n        String fname2 = String.format(Locale.ROOT,\n            UpdateLog.LOG_FILENAME_PATTERN,\n            UpdateLog.TLOG_NAME,\n            logNumber + 1);\n\n        try(FSDataOutputStream dos = fs.create(new Path(logDir, fname2), (short)1)) {\n          dos.write(content);\n        }\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      try(FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]))) {\n        dos.writeLong(0xffffffffffffffffL);\n        dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      try(FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]))) {\n        byte[] content = new byte[dis.available()];\n        dis.readFully(content);\n\n        // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n        findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n        // WARNING... assumes format of .00000n where n is less than 9\n        long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n        String fname2 = String.format(Locale.ROOT,\n            UpdateLog.LOG_FILENAME_PATTERN,\n            UpdateLog.TLOG_NAME,\n            logNumber + 1);\n\n        try(FSDataOutputStream dos = fs.create(new Path(logDir, fname2), (short)1)) {\n          dos.write(content);\n        }\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testRecoveryMultipleLogs().mjava","sourceNew":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      try(FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]))) {\n        dos.writeLong(0xffffffffffffffffL);\n        dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      try(FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]))) {\n        byte[] content = new byte[dis.available()];\n        dis.readFully(content);\n\n        // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n        findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n        // WARNING... assumes format of .00000n where n is less than 9\n        long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n        String fname2 = String.format(Locale.ROOT,\n            UpdateLog.LOG_FILENAME_PATTERN,\n            UpdateLog.TLOG_NAME,\n            logNumber + 1);\n\n        try(FSDataOutputStream dos = fs.create(new Path(logDir, fname2), (short)1)) {\n          dos.write(content);\n        }\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)\n  @Test\n  public void testRecoveryMultipleLogs() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"AAAAAA\"));\n      assertU(adoc(\"id\",\"BBBBBB\"));\n      assertU(adoc(\"id\",\"CCCCCC\"));\n\n      h.close();\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      Arrays.sort(files);\n      String fname = files[files.length-1];\n\n      try(FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]))) {\n        dos.writeLong(0xffffffffffffffffL);\n        dos.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      try(FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]))) {\n        byte[] content = new byte[dis.available()];\n        dis.readFully(content);\n\n        // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!\n        findReplace(\"AAAAAA\".getBytes(StandardCharsets.UTF_8), \"aaaaaa\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"BBBBBB\".getBytes(StandardCharsets.UTF_8), \"bbbbbb\".getBytes(StandardCharsets.UTF_8), content);\n        findReplace(\"CCCCCC\".getBytes(StandardCharsets.UTF_8), \"cccccc\".getBytes(StandardCharsets.UTF_8), content);\n\n        // WARNING... assumes format of .00000n where n is less than 9\n        long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(\".\") + 1));\n        String fname2 = String.format(Locale.ROOT,\n            UpdateLog.LOG_FILENAME_PATTERN,\n            UpdateLog.TLOG_NAME,\n            logNumber + 1);\n\n        try(FSDataOutputStream dos = fs.create(new Path(logDir, fname2), (short)1)) {\n          dos.write(content);\n        }\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  // this is what the corrupted log currently produces... subject to change.\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==6\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c51d60d4f34c66a3ee711805d96a5fbe0a83740":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["7c51d60d4f34c66a3ee711805d96a5fbe0a83740","9d3d365762604952e436b51980101dfc84cc1b3e"],"a229cb50768e988c50a2106bdae3a92154f428bf":["add53de9835b2cd1a7a80b4e0036afee171c9fdf","6bdf107cf16be0f22504ae184fed81596665a244"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c51d60d4f34c66a3ee711805d96a5fbe0a83740"],"6bdf107cf16be0f22504ae184fed81596665a244":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"9d3d365762604952e436b51980101dfc84cc1b3e":["7c51d60d4f34c66a3ee711805d96a5fbe0a83740"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["6bdf107cf16be0f22504ae184fed81596665a244"],"3a0c04b71951333291abc7f317109a6a5957bd28":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["3a0c04b71951333291abc7f317109a6a5957bd28"]},"commit2Childs":{"7c51d60d4f34c66a3ee711805d96a5fbe0a83740":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","9d3d365762604952e436b51980101dfc84cc1b3e"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["7c51d60d4f34c66a3ee711805d96a5fbe0a83740"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","3a0c04b71951333291abc7f317109a6a5957bd28"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a0c04b71951333291abc7f317109a6a5957bd28":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a229cb50768e988c50a2106bdae3a92154f428bf","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}