{"path":"lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader#testSortOnAddIndicesInt().mjava","commits":[{"id":"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","date":1599130480,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSortingCodecReader#testSortOnAddIndicesInt().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortOnAddIndicesInt() throws IOException {\n    Directory tmpDir = newDirectory();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(tmpDir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", -1));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.commit();\n    w.close();\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.INT));\n\n    iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexSort(indexSort);\n    w = new IndexWriter(dir, iwc);\n    try (DirectoryReader reader = DirectoryReader.open(tmpDir)) {\n      List<CodecReader> readers = new ArrayList<>();\n      for (LeafReaderContext ctx : reader.leaves()) {\n        CodecReader wrap = SortingCodecReader.wrap(SlowCodecReaderWrapper.wrap(ctx.reader()), indexSort);\n        assertTrue(wrap.toString(), wrap.toString().startsWith(\"SortingCodecReader(\"));\n        readers.add(wrap);\n\n      }\n      w.addIndexes(readers.toArray(new CodecReader[0]));\n    }\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(-1, values.longValue());\n    assertEquals(1, values.nextDoc());\n    assertEquals(7, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(18, values.longValue());\n    assertNotNull(leaf.getMetaData().getSort());\n    IOUtils.close(r, w, dir, tmpDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}