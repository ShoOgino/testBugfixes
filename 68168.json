{"path":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"/dev/null","sourceNew":"  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7a899ae08a2414e44e9aec7db9783e3da08996d9","7a899ae08a2414e44e9aec7db9783e3da08996d9","7a899ae08a2414e44e9aec7db9783e3da08996d9","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**A responsewriter is registered automatically for wt=filestream\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream\n   * This response writer is used to transfer index files in a block-by-block manner within\n   * the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**A responsewriter is registered automatically for wt=filestream\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream\n   * This response writer is used to transfer index files in a block-by-block manner within\n   * the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["8620c64e323e74078214cf931e505179d14c888e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"ad94625fb8d088209f46650c8097196fec67f00c":["9be231d18ef58129524215a1d30331523320b744"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"9be231d18ef58129524215a1d30331523320b744":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["9be231d18ef58129524215a1d30331523320b744"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}