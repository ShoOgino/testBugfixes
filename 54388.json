{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","commits":[{"id":"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","date":1459379660,"type":0,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType.numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      if (fieldType.numericType() != FieldType.LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + fieldType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new FieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(fieldType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType.numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      if (fieldType.numericType() != FieldType.LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + fieldType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new FieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(fieldType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType.numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      if (fieldType.numericType() != FieldType.LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + fieldType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new FieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(fieldType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType.numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      if (fieldType.numericType() != FieldType.LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + fieldType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new FieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(fieldType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType.numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      if (fieldType.numericType() != FieldType.LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + fieldType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new FieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(fieldType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n\n    if (hasPointVals) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n\n    if (hasPointVals) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n\n    if (hasPointVals) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType instanceof LegacyFieldType && ((LegacyFieldType)fieldType).numericType() != null) {\n      if (hasPointVals) {\n        throw new IllegalArgumentException(\"pointValues and LegacyNumericType are mutually exclusive\");\n      }\n      final LegacyFieldType legacyType = (LegacyFieldType) fieldType;\n      if (legacyType.numericType() != LegacyNumericType.DOUBLE) {\n        throw new IllegalArgumentException(getClass() + \" does not support \" + legacyType.numericType());\n      }\n      numQuads++;\n      legacyNumericFieldType = new LegacyFieldType(LegacyDoubleField.TYPE_NOT_STORED);\n      legacyNumericFieldType.setNumericPrecisionStep(legacyType.numericPrecisionStep());\n      legacyNumericFieldType.freeze();\n    } else {\n      legacyNumericFieldType = null;\n    }\n\n    if (hasPointVals || legacyNumericFieldType != null) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDataDimensionCount() > 0)) {\n      numQuads++;\n    }\n\n    if (hasPointVals) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n\n    if (hasPointVals) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#BBoxStrategy(SpatialContext,String,FieldType).mjava","sourceNew":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDimensionCount() > 0)) {\n      numQuads++;\n    }\n\n    if (hasPointVals) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","sourceOld":"  /**\n   * Creates this strategy.\n   * {@code fieldType} is used to customize the indexing options of the 4 number fields, and to a lesser degree the XDL\n   * field too. Search requires pointValues (or legacy numerics), and relevancy requires docValues. If these features\n   * aren't needed then disable them.\n   */\n  public BBoxStrategy(SpatialContext ctx, String fieldNamePrefix, FieldType fieldType) {\n    super(ctx, fieldNamePrefix);\n    field_bbox = fieldNamePrefix;\n    field_minX = fieldNamePrefix + SUFFIX_MINX;\n    field_maxX = fieldNamePrefix + SUFFIX_MAXX;\n    field_minY = fieldNamePrefix + SUFFIX_MINY;\n    field_maxY = fieldNamePrefix + SUFFIX_MAXY;\n    field_xdl = fieldNamePrefix + SUFFIX_XDL;\n\n    fieldType.freeze();\n    this.optionsFieldType = fieldType;\n\n    int numQuads = 0;\n    if ((this.hasStored = fieldType.stored())) {\n      numQuads++;\n    }\n    if ((this.hasDocVals = fieldType.docValuesType() != DocValuesType.NONE)) {\n      numQuads++;\n    }\n    if ((this.hasPointVals = fieldType.pointDataDimensionCount() > 0)) {\n      numQuads++;\n    }\n\n    if (hasPointVals) { // if we have an index...\n      xdlFieldType = new FieldType(StringField.TYPE_NOT_STORED);\n      xdlFieldType.setIndexOptions(IndexOptions.DOCS);\n      xdlFieldType.freeze();\n    } else {\n      xdlFieldType = null;\n    }\n\n    this.fieldsLen = numQuads * 4 + (xdlFieldType != null ? 1 : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a178ac3dec643551e66363c457a9074f55545f86":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["f6652c943595e92c187ee904c382863013eae28f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}