{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#allocateLazyCores(Config).mjava","commits":[{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#allocateLazyCores(Config).mjava","pathOld":"/dev/null","sourceNew":"  // Trivial helper method for load, note it implements LRU on swappable cores\n  private void allocateLazyCores(Config cfg) {\n    swappableCacheSize = cfg.getInt(\"solr/cores/@swappableCacheSize\", Integer.MAX_VALUE);\n    if (swappableCacheSize != Integer.MAX_VALUE) {\n      swappableCores = new LinkedHashMap<String, SolrCore>(swappableCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > swappableCacheSize) {\n            eldest.getValue().close();\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33399cc2618223f11ba493f9a3a2026fe05b579","date":1356813042,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#allocateLazyCores(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#allocateLazyCores(Config).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores\n  private void allocateLazyCores(Config cfg) {\n    transientCacheSize = cfg.getInt(\"solr/cores/@transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            eldest.getValue().close();\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on swappable cores\n  private void allocateLazyCores(Config cfg) {\n    swappableCacheSize = cfg.getInt(\"solr/cores/@swappableCacheSize\", Integer.MAX_VALUE);\n    if (swappableCacheSize != Integer.MAX_VALUE) {\n      swappableCores = new LinkedHashMap<String, SolrCore>(swappableCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > swappableCacheSize) {\n            eldest.getValue().close();\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#allocateLazyCores(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#allocateLazyCores(Config).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores\n  private void allocateLazyCores(Config cfg) {\n    transientCacheSize = cfg.getInt(\"solr/cores/@transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            eldest.getValue().close();\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on swappable cores\n  private void allocateLazyCores(Config cfg) {\n    swappableCacheSize = cfg.getInt(\"solr/cores/@swappableCacheSize\", Integer.MAX_VALUE);\n    if (swappableCacheSize != Integer.MAX_VALUE) {\n      swappableCores = new LinkedHashMap<String, SolrCore>(swappableCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > swappableCacheSize) {\n            eldest.getValue().close();\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#allocateLazyCores(Config).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    transientCacheSize = cfg.getInt(ConfigSolr.ConfLevel.SOLR_CORES, \"transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              SolrCore closeMe = eldest.getValue();\n              synchronized (locker) {\n                pendingDynamicCloses.add(closeMe);\n                locker.notifyAll(); // Wakes up closer thread too\n              }\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores\n  private void allocateLazyCores(Config cfg) {\n    transientCacheSize = cfg.getInt(\"solr/cores/@transientCacheSize\", Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            eldest.getValue().close();\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b374d78db8148ec6796fdf37148b33897ab40a8c","c33399cc2618223f11ba493f9a3a2026fe05b579"],"c33399cc2618223f11ba493f9a3a2026fe05b579":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["c33399cc2618223f11ba493f9a3a2026fe05b579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a837c064b67fa63a9394136e31218b908cdcf783"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c33399cc2618223f11ba493f9a3a2026fe05b579":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c33399cc2618223f11ba493f9a3a2026fe05b579"],"a837c064b67fa63a9394136e31218b908cdcf783":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}