{"path":"solr/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","commits":[{"id":"ee3a275f925be62184fad78d647fa70e27ac7cea","date":1301416659,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","sourceNew":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","sourceOld":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","sourceNew":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","sourceOld":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestCollationField#testArabicSort().mjava","sourceNew":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","sourceOld":"  /** \n   * Test sort with an arabic collator. U+0633 is ordered after U+0698.\n   * With a binary collator, the range would also return nothing.\n   */\n  public void testArabicSort() {\n    assertQ(\"Collated Sort: \",\n        req(\"fl\", \"id\", \"q\", \"sort_ar:[\\u0698 TO \\u0633\\u0633]\", \"sort\", \"sort_ar asc\" ),\n               \"//*[@numFound='2']\",\n               \"//result/doc[1]/int[@name='id'][.=12]\",\n               \"//result/doc[2]/int[@name='id'][.=1]\"\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"c26f00b574427b55127e869b935845554afde1fa":["ee3a275f925be62184fad78d647fa70e27ac7cea","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"ee3a275f925be62184fad78d647fa70e27ac7cea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","ee3a275f925be62184fad78d647fa70e27ac7cea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"45669a651c970812a680841b97a77cce06af559f":[],"ee3a275f925be62184fad78d647fa70e27ac7cea":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}