{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Shape,int,boolean,boolean).mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Shape,int,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Shape,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added.\n   * <p/>\n   * This implementation checks if shape is a Point and if so returns {@link\n   * #getCells(com.spatial4j.core.shape.Point, int, boolean)}.\n   *\n   * @param shape       the shape; non-null\n   * @param detailLevel the maximum detail level to get cells for\n   * @param inclParents if true then all parent cells of leaves are returned\n   *                    too. The top world cell is never returned.\n   * @param simplify    for non-point shapes, this will simply/aggregate sets of\n   *                    complete leaves in a cell to its parent, resulting in\n   *                    ~20-25% fewer cells.\n   * @return a set of cells (no dups), sorted, immutable, non-null\n   */\n  public List<Cell> getCells(Shape shape, int detailLevel, boolean inclParents,\n                             boolean simplify) {\n    //TODO consider an on-demand iterator -- it won't build up all cells in memory.\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    if (shape instanceof Point) {\n      return getCells((Point) shape, detailLevel, inclParents);\n    }\n    List<Cell> cells = new ArrayList<Cell>(inclParents ? 4096 : 2048);\n    recursiveGetCells(getWorldCell(), shape, detailLevel, inclParents, simplify, cells);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added.\n   * <p/>\n   * This implementation checks if shape is a Point and if so returns {@link\n   * #getNodes(com.spatial4j.core.shape.Point, int, boolean)}.\n   *\n   * @param shape       the shape; non-null\n   * @param detailLevel the maximum detail level to get cells for\n   * @param inclParents if true then all parent cells of leaves are returned\n   *                    too. The top world cell is never returned.\n   * @param simplify    for non-point shapes, this will simply/aggregate sets of\n   *                    complete leaves in a cell to its parent, resulting in\n   *                    ~20-25% fewer cells.\n   * @return a set of cells (no dups), sorted, immutable, non-null\n   */\n  public List<Node> getNodes(Shape shape, int detailLevel, boolean inclParents,\n                             boolean simplify) {\n    //TODO consider an on-demand iterator -- it won't build up all cells in memory.\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    if (shape instanceof Point) {\n      return getNodes((Point) shape, detailLevel, inclParents);\n    }\n    List<Node> cells = new ArrayList<Node>(inclParents ? 4096 : 2048);\n    recursiveGetNodes(getWorldNode(), shape, detailLevel, inclParents, simplify, cells);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Shape,int,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Shape,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added.\n   * <p/>\n   * This implementation checks if shape is a Point and if so returns {@link\n   * #getCells(com.spatial4j.core.shape.Point, int, boolean)}.\n   *\n   * @param shape       the shape; non-null\n   * @param detailLevel the maximum detail level to get cells for\n   * @param inclParents if true then all parent cells of leaves are returned\n   *                    too. The top world cell is never returned.\n   * @param simplify    for non-point shapes, this will simply/aggregate sets of\n   *                    complete leaves in a cell to its parent, resulting in\n   *                    ~20-25% fewer cells.\n   * @return a set of cells (no dups), sorted, immutable, non-null\n   */\n  public List<Cell> getCells(Shape shape, int detailLevel, boolean inclParents,\n                             boolean simplify) {\n    //TODO consider an on-demand iterator -- it won't build up all cells in memory.\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    if (shape instanceof Point) {\n      return getCells((Point) shape, detailLevel, inclParents);\n    }\n    List<Cell> cells = new ArrayList<>(inclParents ? 4096 : 2048);\n    recursiveGetCells(getWorldCell(), shape, detailLevel, inclParents, simplify, cells);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added.\n   * <p/>\n   * This implementation checks if shape is a Point and if so returns {@link\n   * #getCells(com.spatial4j.core.shape.Point, int, boolean)}.\n   *\n   * @param shape       the shape; non-null\n   * @param detailLevel the maximum detail level to get cells for\n   * @param inclParents if true then all parent cells of leaves are returned\n   *                    too. The top world cell is never returned.\n   * @param simplify    for non-point shapes, this will simply/aggregate sets of\n   *                    complete leaves in a cell to its parent, resulting in\n   *                    ~20-25% fewer cells.\n   * @return a set of cells (no dups), sorted, immutable, non-null\n   */\n  public List<Cell> getCells(Shape shape, int detailLevel, boolean inclParents,\n                             boolean simplify) {\n    //TODO consider an on-demand iterator -- it won't build up all cells in memory.\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    if (shape instanceof Point) {\n      return getCells((Point) shape, detailLevel, inclParents);\n    }\n    List<Cell> cells = new ArrayList<Cell>(inclParents ? 4096 : 2048);\n    recursiveGetCells(getWorldCell(), shape, detailLevel, inclParents, simplify, cells);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Shape,int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added.\n   * <p/>\n   * This implementation checks if shape is a Point and if so returns {@link\n   * #getCells(com.spatial4j.core.shape.Point, int, boolean)}.\n   *\n   * @param shape       the shape; non-null\n   * @param detailLevel the maximum detail level to get cells for\n   * @param inclParents if true then all parent cells of leaves are returned\n   *                    too. The top world cell is never returned.\n   * @param simplify    for non-point shapes, this will simply/aggregate sets of\n   *                    complete leaves in a cell to its parent, resulting in\n   *                    ~20-25% fewer cells.\n   * @return a set of cells (no dups), sorted, immutable, non-null\n   */\n  public List<Cell> getCells(Shape shape, int detailLevel, boolean inclParents,\n                             boolean simplify) {\n    //TODO consider an on-demand iterator -- it won't build up all cells in memory.\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    if (shape instanceof Point) {\n      return getCells((Point) shape, detailLevel, inclParents);\n    }\n    List<Cell> cells = new ArrayList<>(inclParents ? 4096 : 2048);\n    recursiveGetCells(getWorldCell(), shape, detailLevel, inclParents, simplify, cells);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8259c159da2de2e8528524fb76b244b46cbded59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8259c159da2de2e8528524fb76b244b46cbded59":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}