{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStreamWithOffsets(IndexReader,int,String).mjava","commits":[{"id":"815287248ca7a77db68038baad5698c5767f36a7","date":1350761762,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStreamWithOffsets(IndexReader,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link TokenStream} with positions and offsets constructed from\n   * field termvectors.  If the field has no termvectors, or positions or offsets\n   * are not included in the termvector, return null.\n   * @param reader the {@link IndexReader} to retrieve term vectors from\n   * @param docId the document to retrieve termvectors for\n   * @param field the field to retrieve termvectors for\n   * @return a {@link TokenStream}, or null if positions and offsets are not available\n   * @throws IOException If there is a low-level I/O error\n   */\n  public static TokenStream getTokenStreamWithOffsets(IndexReader reader, int docId,\n                                                      String field) throws IOException {\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      return null;\n    }\n\n    Terms vector = vectors.terms(field);\n    if (vector == null) {\n      return null;\n    }\n\n    if (!vector.hasPositions() || !vector.hasOffsets()) {\n      return null;\n    }\n    \n    return getTokenStream(vector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStreamWithOffsets(IndexReader,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link TokenStream} with positions and offsets constructed from\n   * field termvectors.  If the field has no termvectors, or positions or offsets\n   * are not included in the termvector, return null.\n   * @param reader the {@link IndexReader} to retrieve term vectors from\n   * @param docId the document to retrieve termvectors for\n   * @param field the field to retrieve termvectors for\n   * @return a {@link TokenStream}, or null if positions and offsets are not available\n   * @throws IOException If there is a low-level I/O error\n   */\n  public static TokenStream getTokenStreamWithOffsets(IndexReader reader, int docId,\n                                                      String field) throws IOException {\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      return null;\n    }\n\n    Terms vector = vectors.terms(field);\n    if (vector == null) {\n      return null;\n    }\n\n    if (!vector.hasPositions() || !vector.hasOffsets()) {\n      return null;\n    }\n    \n    return getTokenStream(vector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae230518a1a68acc124bef8df61ef94bd7c1295e","date":1417181719,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStreamWithOffsets(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStreamWithOffsets(IndexReader,int,String).mjava","sourceNew":"  /**\n   * Returns a {@link TokenStream} with positions and offsets constructed from\n   * field termvectors.  If the field has no termvectors or offsets\n   * are not included in the termvector, return null.  See {@link #getTokenStream(org.apache.lucene.index.Terms)}\n   * for an explanation of what happens when positions aren't present.\n   *\n   * @param reader the {@link IndexReader} to retrieve term vectors from\n   * @param docId the document to retrieve termvectors for\n   * @param field the field to retrieve termvectors for\n   * @return a {@link TokenStream}, or null if offsets are not available\n   * @throws IOException If there is a low-level I/O error\n   *\n   * @see #getTokenStream(org.apache.lucene.index.Terms)\n   */\n  public static TokenStream getTokenStreamWithOffsets(IndexReader reader, int docId,\n                                                      String field) throws IOException {\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      return null;\n    }\n\n    Terms vector = vectors.terms(field);\n    if (vector == null) {\n      return null;\n    }\n\n    if (!vector.hasOffsets()) {\n      return null;\n    }\n    \n    return getTokenStream(vector);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link TokenStream} with positions and offsets constructed from\n   * field termvectors.  If the field has no termvectors, or positions or offsets\n   * are not included in the termvector, return null.\n   * @param reader the {@link IndexReader} to retrieve term vectors from\n   * @param docId the document to retrieve termvectors for\n   * @param field the field to retrieve termvectors for\n   * @return a {@link TokenStream}, or null if positions and offsets are not available\n   * @throws IOException If there is a low-level I/O error\n   */\n  public static TokenStream getTokenStreamWithOffsets(IndexReader reader, int docId,\n                                                      String field) throws IOException {\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      return null;\n    }\n\n    Terms vector = vectors.terms(field);\n    if (vector == null) {\n      return null;\n    }\n\n    if (!vector.hasPositions() || !vector.hasOffsets()) {\n      return null;\n    }\n    \n    return getTokenStream(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStreamWithOffsets(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStreamWithOffsets(IndexReader,int,String).mjava","sourceNew":"  /**\n   * Returns a {@link TokenStream} with positions and offsets constructed from\n   * field termvectors.  If the field has no termvectors or offsets\n   * are not included in the termvector, return null.  See {@link #getTokenStream(org.apache.lucene.index.Terms)}\n   * for an explanation of what happens when positions aren't present.\n   *\n   * @param reader the {@link IndexReader} to retrieve term vectors from\n   * @param docId the document to retrieve termvectors for\n   * @param field the field to retrieve termvectors for\n   * @return a {@link TokenStream}, or null if offsets are not available\n   * @throws IOException If there is a low-level I/O error\n   *\n   * @see #getTokenStream(org.apache.lucene.index.Terms)\n   */\n  @Deprecated // maintenance reasons LUCENE-6445\n  public static TokenStream getTokenStreamWithOffsets(IndexReader reader, int docId,\n                                                      String field) throws IOException {\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      return null;\n    }\n\n    Terms vector = vectors.terms(field);\n    if (vector == null) {\n      return null;\n    }\n\n    if (!vector.hasOffsets()) {\n      return null;\n    }\n    \n    return getTokenStream(vector);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link TokenStream} with positions and offsets constructed from\n   * field termvectors.  If the field has no termvectors or offsets\n   * are not included in the termvector, return null.  See {@link #getTokenStream(org.apache.lucene.index.Terms)}\n   * for an explanation of what happens when positions aren't present.\n   *\n   * @param reader the {@link IndexReader} to retrieve term vectors from\n   * @param docId the document to retrieve termvectors for\n   * @param field the field to retrieve termvectors for\n   * @return a {@link TokenStream}, or null if offsets are not available\n   * @throws IOException If there is a low-level I/O error\n   *\n   * @see #getTokenStream(org.apache.lucene.index.Terms)\n   */\n  public static TokenStream getTokenStreamWithOffsets(IndexReader reader, int docId,\n                                                      String field) throws IOException {\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors == null) {\n      return null;\n    }\n\n    Terms vector = vectors.terms(field);\n    if (vector == null) {\n      return null;\n    }\n\n    if (!vector.hasOffsets()) {\n      return null;\n    }\n    \n    return getTokenStream(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae230518a1a68acc124bef8df61ef94bd7c1295e":["815287248ca7a77db68038baad5698c5767f36a7"],"62e52115b56781006682fd92c6938efaf174304d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","815287248ca7a77db68038baad5698c5767f36a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d62e4938659e263e96ae8188e11aea8a940aea5":["ae230518a1a68acc124bef8df61ef94bd7c1295e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"815287248ca7a77db68038baad5698c5767f36a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae230518a1a68acc124bef8df61ef94bd7c1295e":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62e52115b56781006682fd92c6938efaf174304d","815287248ca7a77db68038baad5698c5767f36a7"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"815287248ca7a77db68038baad5698c5767f36a7":["ae230518a1a68acc124bef8df61ef94bd7c1295e","62e52115b56781006682fd92c6938efaf174304d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}