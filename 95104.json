{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,Term).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,Term).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/Passage#addMatch(int,int,Term).mjava","sourceNew":"  void addMatch(int startOffset, int endOffset, Term term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      Term newMatchTerms[] = new Term[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":"  void addMatch(int startOffset, int endOffset, Term term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      Term newMatchTerms[] = new Term[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,Term).mjava","pathOld":"/dev/null","sourceNew":"  void addMatch(int startOffset, int endOffset, Term term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      Term newMatchTerms[] = new Term[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,Term).mjava","sourceNew":"  void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      BytesRef newMatchTerms[] = new BytesRef[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":"  void addMatch(int startOffset, int endOffset, Term term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      Term newMatchTerms[] = new Term[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","bugFix":null,"bugIntro":["56c4afdffb7d4d205fdfe74efe460188a6197f19"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4831dd345148fcd7c33877b449ade21fc45459d8":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4831dd345148fcd7c33877b449ade21fc45459d8"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4831dd345148fcd7c33877b449ade21fc45459d8"],"4831dd345148fcd7c33877b449ade21fc45459d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}