{"path":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/TestKoreanTokenizer#assertPartsOfSpeech(Analyzer,String,POS.Type[],POS.Tag[],POS.Tag[]).mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/TestKoreanTokenizer#assertPartsOfSpeech(Analyzer,String,POS.Type[],POS.Tag[],POS.Tag[]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertPartsOfSpeech(Analyzer analyzer, String input, POS.Type[] posTypes, POS.Tag[] leftPosTags, POS.Tag[] rightPosTags) throws IOException {\n    assert posTypes.length == leftPosTags.length && posTypes.length == rightPosTags.length;\n    try (TokenStream ts = analyzer.tokenStream(\"ignored\", input)) {\n      PartOfSpeechAttribute partOfSpeechAtt = ts.addAttribute(PartOfSpeechAttribute.class);\n      ts.reset();\n      for (int i = 0; i < posTypes.length; i++) {\n        POS.Type posType = posTypes[i];\n        POS.Tag leftTag = leftPosTags[i];\n        POS.Tag rightTag = rightPosTags[i];\n        assertTrue(ts.incrementToken());\n        assertEquals(posType, partOfSpeechAtt.getPOSType());\n        assertEquals(leftTag, partOfSpeechAtt.getLeftPOS());\n        assertEquals(rightTag, partOfSpeechAtt.getRightPOS());\n      }\n      assertFalse(ts.incrementToken());\n      ts.end();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/test/org/apache/lucene/analysis/ko/TestKoreanTokenizer#assertPartsOfSpeech(Analyzer,String,POS.Type[],POS.Tag[],POS.Tag[]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertPartsOfSpeech(Analyzer analyzer, String input, POS.Type[] posTypes, POS.Tag[] leftPosTags, POS.Tag[] rightPosTags) throws IOException {\n    assert posTypes.length == leftPosTags.length && posTypes.length == rightPosTags.length;\n    try (TokenStream ts = analyzer.tokenStream(\"ignored\", input)) {\n      PartOfSpeechAttribute partOfSpeechAtt = ts.addAttribute(PartOfSpeechAttribute.class);\n      ts.reset();\n      for (int i = 0; i < posTypes.length; i++) {\n        POS.Type posType = posTypes[i];\n        POS.Tag leftTag = leftPosTags[i];\n        POS.Tag rightTag = rightPosTags[i];\n        assertTrue(ts.incrementToken());\n        assertEquals(posType, partOfSpeechAtt.getPOSType());\n        assertEquals(leftTag, partOfSpeechAtt.getLeftPOS());\n        assertEquals(rightTag, partOfSpeechAtt.getRightPOS());\n      }\n      assertFalse(ts.incrementToken());\n      ts.end();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c6453827f947004a68ad9db7418781e9df2f660"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c6453827f947004a68ad9db7418781e9df2f660":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}