{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestSimpleDrillSideways#getTopNOrds(int[],String[],int).mjava","commits":[{"id":"19f5022544a8fc895776356d1b35a4b46d05945c","date":1385063323,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestSimpleDrillSideways#getTopNOrds(int[],String[],int).mjava","pathOld":"/dev/null","sourceNew":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n    }.sort(0, ids.length);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#getTopNOrds(int[],String[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestSimpleDrillSideways#getTopNOrds(int[],String[],int).mjava","sourceNew":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n    }.sort(0, ids.length);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","sourceOld":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n    }.sort(0, ids.length);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f5022544a8fc895776356d1b35a4b46d05945c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["19f5022544a8fc895776356d1b35a4b46d05945c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"19f5022544a8fc895776356d1b35a4b46d05945c":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19f5022544a8fc895776356d1b35a4b46d05945c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}