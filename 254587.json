{"path":"solr/core/src/java/org/apache/solr/util/ExportTool.MultiThreadedRunner.CoreHandler#exportDocsFromCore().mjava","commits":[{"id":"b373db031e25f03ad6783efcfb77809dcd963565","date":1565686445,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ExportTool.MultiThreadedRunner.CoreHandler#exportDocsFromCore().mjava","pathOld":"/dev/null","sourceNew":"      boolean exportDocsFromCore()\n          throws IOException, SolrServerException {\n        HttpSolrClient client = new HttpSolrClient.Builder(baseurl).build();\n        try {\n          expectedDocs = getDocCount(replica.getCoreName(), client);\n          GenericSolrRequest request;\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.add(Q, query);\n          if (fields != null) params.add(FL, fields);\n          params.add(SORT, uniqueKey + \" asc\");\n          params.add(CommonParams.DISTRIB, \"false\");\n          params.add(CommonParams.ROWS, \"1000\");\n          String cursorMark = CursorMarkParams.CURSOR_MARK_START;\n          Consumer<SolrDocument> wrapper = doc -> {\n            try {\n              queue.offer(doc, 10, TimeUnit.SECONDS);\n              receivedDocs.incrementAndGet();\n            } catch (InterruptedException e) {\n              failed = true;\n              if (output != null) output.println(\"Failed to write docs from\" + e.getMessage());\n            }\n          };\n          StreamingBinaryResponseParser responseParser = new StreamingBinaryResponseParser(getStreamer(wrapper));\n          while (true) {\n            if (failed) return false;\n            if (docsWritten.get() > limit) return true;\n            params.set(CursorMarkParams.CURSOR_MARK_PARAM, cursorMark);\n            request = new GenericSolrRequest(SolrRequest.METHOD.GET,\n                \"/\" + replica.getCoreName() + \"/select\", params);\n            request.setResponseParser(responseParser);\n            try {\n              NamedList<Object> rsp = client.request(request);\n              String nextCursorMark = (String) rsp.get(CursorMarkParams.CURSOR_MARK_NEXT);\n              if (nextCursorMark == null || Objects.equals(cursorMark, nextCursorMark)) {\n                if (output != null)\n                  output.println(StrUtils.formatString(\"\\nExport complete for : {0}, docs : {1}\", replica.getCoreName(), receivedDocs.get()));\n                if (expectedDocs != receivedDocs.get()) {\n                  if (output != null) {\n                    output.println(StrUtils.formatString(\"Could not download all docs for core {0} , expected: {1} , actual\",\n                        replica.getCoreName(), expectedDocs, receivedDocs));\n                    return false;\n                  }\n                }\n                return true;\n              }\n              cursorMark = nextCursorMark;\n              if (output != null) output.print(\".\");\n            } catch (SolrServerException e) {\n              if(output != null) output.println(\"Error reading from server \"+ replica.getBaseUrl()+\"/\"+ replica.getCoreName());\n              failed = true;\n              return false;\n            }\n          }\n        } finally {\n          client.close();\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b373db031e25f03ad6783efcfb77809dcd963565":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b373db031e25f03ad6783efcfb77809dcd963565"]},"commit2Childs":{"b373db031e25f03ad6783efcfb77809dcd963565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b373db031e25f03ad6783efcfb77809dcd963565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}