{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","commits":[{"id":"df809bb5acd66e34fc29697ed01665134238ff8f","date":1300191603,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          System.exit(0);\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d734f51d4813b2acce6647edbd4e998076b35307","date":1300885847,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          System.exit(0);\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d734f51d4813b2acce6647edbd4e998076b35307"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["d734f51d4813b2acce6647edbd4e998076b35307"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d734f51d4813b2acce6647edbd4e998076b35307"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d734f51d4813b2acce6647edbd4e998076b35307","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"d734f51d4813b2acce6647edbd4e998076b35307":["df809bb5acd66e34fc29697ed01665134238ff8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df809bb5acd66e34fc29697ed01665134238ff8f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"d734f51d4813b2acce6647edbd4e998076b35307":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","8be6e1e4fbbc94d90b78f175c03ff389b6949373","d619839baa8ce5503e496b94a9e42ad6f079293f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","df809bb5acd66e34fc29697ed01665134238ff8f"],"df809bb5acd66e34fc29697ed01665134238ff8f":["d734f51d4813b2acce6647edbd4e998076b35307"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}