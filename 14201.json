{"path":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":null,"sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}