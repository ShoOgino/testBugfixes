{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected long waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      return waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      throw new AssertionError(message + \"\\n\" + \"Live Nodes: \" + liveNodesLastSeen.get() + \"\\nLast available state: \" + state.get(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,String,CollectionStatePredicate).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String message,\n                                  final String collection,\n                                  final CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      return waitForState(cloudManager, collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      throw new AssertionError(message + \"\\n\" + \"Live Nodes: \" + liveNodesLastSeen.get() + \"\\nLast available state: \" + state.get(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected long waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      return waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      throw new AssertionError(message + \"\\n\" + \"Live Nodes: \" + liveNodesLastSeen.get() + \"\\nLast available state: \" + state.get(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c6c0dad4932399aec99b4818086cb1772773916"]},"commit2Childs":{"9c6c0dad4932399aec99b4818086cb1772773916":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}