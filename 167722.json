{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n    assertTrue(reporters.containsKey(\"node_foo\"));\n    assertTrue(reporters.containsKey(\"multiregistry_foo\"));\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n    assertTrue(reporters.containsKey(\"specific_foo\"));\n    assertTrue(reporters.containsKey(\"core_foo\"));\n    assertTrue(reporters.containsKey(\"multiregistry_foo\"));\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n    assertTrue(reporters.containsKey(\"node_foo\"));\n    assertTrue(reporters.containsKey(\"multiregistry_foo\"));\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n    assertTrue(reporters.containsKey(\"specific_foo\"));\n    assertTrue(reporters.containsKey(\"core_foo\"));\n    assertTrue(reporters.containsKey(\"multiregistry_foo\"));\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","sourceNew":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n    assertTrue(reporters.containsKey(\"node_foo\"));\n    assertTrue(reporters.containsKey(\"multiregistry_foo\"));\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n    assertTrue(reporters.containsKey(\"specific_foo\"));\n    assertTrue(reporters.containsKey(\"core_foo\"));\n    assertTrue(reporters.containsKey(\"multiregistry_foo\"));\n\n    metricManager.loadReporters(plugins, loader, SolrInfoMBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo\"));\n    assertTrue(reporters.containsKey(\"multigroup_foo\"));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","sourceNew":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","sourceNew":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b350cc7f6d61095957cf669171e69fb4fad5472","date":1501256356,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","sourceNew":"  @Test\n  public void testReporters() throws Exception {\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","sourceNew":"  @Test\n  public void testReporters() throws Exception {\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testReporters() throws Exception {\n    Random r = random();\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testReporters().mjava","sourceNew":"  @Test\n  public void testReporters() throws Exception {\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, null, null, tag, SolrInfoBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, null, null, tag, SolrInfoBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, null, null, tag, SolrInfoBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testReporters() throws Exception {\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    PluginInfo[] plugins = new PluginInfo[] {\n        createPluginInfo(\"universal_foo\", null, null),\n        createPluginInfo(\"multigroup_foo\", \"jvm, node, core\", null),\n        createPluginInfo(\"multiregistry_foo\", null, \"solr.node, solr.core.collection1\"),\n        createPluginInfo(\"specific_foo\", null, \"solr.core.collection1\"),\n        createPluginInfo(\"node_foo\", \"node\", null),\n        createPluginInfo(\"core_foo\", \"core\", null)\n    };\n    String tag = \"xyz\";\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.node);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(4, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"node_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.core, \"collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(5, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"specific_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"core_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multiregistry_foo@\" + tag));\n\n    metricManager.loadReporters(plugins, loader, tag, SolrInfoBean.Group.jvm);\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(2, reporters.size());\n    assertTrue(reporters.containsKey(\"universal_foo@\" + tag));\n    assertTrue(reporters.containsKey(\"multigroup_foo@\" + tag));\n\n    metricManager.removeRegistry(\"solr.jvm\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.node\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.node));\n    assertEquals(0, reporters.size());\n\n    metricManager.removeRegistry(\"solr.core.collection1\");\n    reporters = metricManager.getReporters(\n        SolrMetricManager.getRegistryName(SolrInfoBean.Group.core, \"collection1\"));\n    assertEquals(0, reporters.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"6b350cc7f6d61095957cf669171e69fb4fad5472":["816521ebaad5add9cb96bb88c577394e2938c40b"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","6b350cc7f6d61095957cf669171e69fb4fad5472"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["6b350cc7f6d61095957cf669171e69fb4fad5472"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f90f26c648df8320685eb76fec8bb9972e1994c4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"6b350cc7f6d61095957cf669171e69fb4fad5472":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","f90f26c648df8320685eb76fec8bb9972e1994c4"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["6b350cc7f6d61095957cf669171e69fb4fad5472"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}