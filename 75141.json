{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      OrdinalPolicy ordinalPolicy = clp .getOrdinalPolicy(fr.categoryPath.components[0]);\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // rollup values\n        aggregator.rollupValues(rootOrd, children, siblings, facetArrays);\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f799def92dd641ab877459be5f6182bb811df6ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      OrdinalPolicy ordinalPolicy = clp .getOrdinalPolicy(fr.categoryPath.components[0]);\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // rollup values\n        aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      OrdinalPolicy ordinalPolicy = clp .getOrdinalPolicy(fr.categoryPath.components[0]);\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // rollup values\n        aggregator.rollupValues(rootOrd, children, siblings, facetArrays);\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["f799def92dd641ab877459be5f6182bb811df6ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd","date":1361836936,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult:\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = TaxonomyReader.INVALID_ORDINAL;\n        root.label = fr.categoryPath;\n        root.value = 0;\n        res.add(new FacetResult(fr, root, 0));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      OrdinalPolicy ordinalPolicy = clp .getOrdinalPolicy(fr.categoryPath.components[0]);\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // rollup values\n        aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      OrdinalPolicy ordinalPolicy = clp .getOrdinalPolicy(fr.categoryPath.components[0]);\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // rollup values\n        aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["004aa3627d484d9bc0a4281c12c40240ceeaf75a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f799def92dd641ab877459be5f6182bb811df6ff","date":1364274773,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult:\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = TaxonomyReader.INVALID_ORDINAL;\n        root.label = fr.categoryPath;\n        root.value = 0;\n        res.add(new FacetResult(fr, root, 0));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult:\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = TaxonomyReader.INVALID_ORDINAL;\n        root.label = fr.categoryPath;\n        root.value = 0;\n        res.add(new FacetResult(fr, root, 0));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      OrdinalPolicy ordinalPolicy = clp .getOrdinalPolicy(fr.categoryPath.components[0]);\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // rollup values\n        aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":["607428da722dcb3e86bbd11c63de8986e6275c36","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"004aa3627d484d9bc0a4281c12c40240ceeaf75a","date":1364791776,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult:\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = TaxonomyReader.INVALID_ORDINAL;\n        root.label = fr.categoryPath;\n        root.value = 0;\n        res.add(new FacetResult(fr, root, 0));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public abstract List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public abstract List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : getCategoryLists()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public abstract List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  public abstract List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"d33e19a97046248623a7591aeaa6547233fd15e2":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"004aa3627d484d9bc0a4281c12c40240ceeaf75a":["f799def92dd641ab877459be5f6182bb811df6ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["004aa3627d484d9bc0a4281c12c40240ceeaf75a"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","d33e19a97046248623a7591aeaa6547233fd15e2"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["004aa3627d484d9bc0a4281c12c40240ceeaf75a"],"f799def92dd641ab877459be5f6182bb811df6ff":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["f799def92dd641ab877459be5f6182bb811df6ff"],"607428da722dcb3e86bbd11c63de8986e6275c36":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"004aa3627d484d9bc0a4281c12c40240ceeaf75a":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"f799def92dd641ab877459be5f6182bb811df6ff":["004aa3627d484d9bc0a4281c12c40240ceeaf75a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}