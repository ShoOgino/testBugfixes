{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseOptimize().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for abort()\n     * and close().\n     */\n    public void xxxtestCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.abort();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for abort()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.abort();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for abort()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.abort();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for abort()\n     * and close().\n     */\n    public void xxxtestCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.abort();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}