{"path":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","commits":[{"id":"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6","date":1069355441,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n\n    // We cannot be sure whether the segments file is in the old format or the new one.\n    // Therefore we have to read the whole file and cannot simple seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5080735f27287ee9a86441cfca7da3af146ee8d7","date":1081415599,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    InputStream input = directory.openFile(\"segments\");\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n       }\n     }\n     finally {\n       input.close();\n     }\n     \n     if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n\n    // We cannot be sure whether the segments file is in the old format or the new one.\n    // Therefore we have to read the whole file and cannot simple seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    IndexInput input = directory.openInput(\"segments\");\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n       }\n     }\n     finally {\n       input.close();\n     }\n     \n     if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    InputStream input = directory.openFile(\"segments\");\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n       }\n     }\n     finally {\n       input.close();\n     }\n     \n     if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd6eb8b1d71f36e7d134adc278a3d27c2559414c","date":1118080332,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    IndexInput input = directory.openInput(Constants.INDEX_SEGMENTS_FILENAME);\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n       }\n     }\n     finally {\n       input.close();\n     }\n     \n     if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    IndexInput input = directory.openInput(\"segments\");\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n       }\n     }\n     finally {\n       input.close();\n     }\n     \n     if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24157515079eea65faeec4e1dbb01fea58444c8e","date":1118343636,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    IndexInput input = directory.openInput(IndexFileNames.SEGMENTS);\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n       }\n     }\n     finally {\n       input.close();\n     }\n     \n     if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    IndexInput input = directory.openInput(Constants.INDEX_SEGMENTS_FILENAME);\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n       }\n     }\n     finally {\n       input.close();\n     }\n     \n     if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fee30af6eec28e0a3e1333ae30cfb41d5b9ad88","date":1127692554,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    IndexInput input = directory.openInput(IndexFileNames.SEGMENTS);\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n     \n    if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    IndexInput input = directory.openInput(IndexFileNames.SEGMENTS);\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n       }\n     }\n     finally {\n       input.close();\n     }\n     \n     if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        public Object doBody(String segmentFileName) throws IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < FORMAT_LOCKLESS)\n                throw new IOException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n      \n    IndexInput input = directory.openInput(IndexFileNames.SEGMENTS);\n    int format = 0;\n    long version = 0;\n    try {\n      format = input.readInt();\n      if(format < 0){\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n     \n    if(format < 0)\n      return version;\n\n    // We cannot be sure about the format of the file.\n    // Therefore we have to read the whole file and cannot simply seek to the version entry.\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.getVersion();\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        public Object doBody(String segmentFileName) throws IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < FORMAT_SINGLE_NORM_FILE)\n                throw new IOException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        public Object doBody(String segmentFileName) throws IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < FORMAT_LOCKLESS)\n                throw new IOException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        public Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < FORMAT_SINGLE_NORM_FILE)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        public Object doBody(String segmentFileName) throws IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < FORMAT_SINGLE_NORM_FILE)\n                throw new IOException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580","6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"bugIntro":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a","date":1172364225,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < FORMAT_SINGLE_NORM_FILE)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        public Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < FORMAT_SINGLE_NORM_FILE)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ee8d31906e3001783889a491e55f218013a190","date":1173949687,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < CURRENT_FORMAT)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < FORMAT_SINGLE_NORM_FILE)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < CURRENT_FORMAT)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return Long.valueOf(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return Long.valueOf(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < CURRENT_FORMAT)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return new Long(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return new Long(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        @Override\n        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < CURRENT_FORMAT)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return Long.valueOf(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return Long.valueOf(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < CURRENT_FORMAT)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return Long.valueOf(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return Long.valueOf(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3b392ae35fe5500af50dcf0427a60084afdae14","date":1257770263,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.version;\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    return ((Long) new FindSegmentsFile(directory) {\n        @Override\n        protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n          IndexInput input = directory.openInput(segmentFileName);\n\n          int format = 0;\n          long version = 0;\n          try {\n            format = input.readInt();\n            if(format < 0){\n              if (format < CURRENT_FORMAT)\n                throw new CorruptIndexException(\"Unknown format version: \" + format);\n              version = input.readLong(); // read version\n            }\n          }\n          finally {\n            input.close();\n          }\n     \n          if(format < 0)\n            return Long.valueOf(version);\n\n          // We cannot be sure about the format of the file.\n          // Therefore we have to read the whole file and cannot simply seek to the version entry.\n          SegmentInfos sis = new SegmentInfos();\n          sis.read(directory, segmentFileName);\n          return Long.valueOf(sis.getVersion());\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#readCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.version;\n  }\n\n","sourceOld":"  /**\n   * Current version number from segments file.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long readCurrentVersion(Directory directory)\n    throws CorruptIndexException, IOException {\n\n    // Fully read the segments file: this ensures that it's\n    // completely written so that if\n    // IndexWriter.prepareCommit has been called (but not\n    // yet commit), then the reader will still see itself as\n    // current:\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(directory);\n    return sis.version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["c4ee8d31906e3001783889a491e55f218013a190"],"e971ba25509e21a130fef61f0687be0446ca27a0":["5080735f27287ee9a86441cfca7da3af146ee8d7"],"24157515079eea65faeec4e1dbb01fea58444c8e":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8a5cfde941b2f8208d739344fef3821381885618"],"8a9e385641d717e641408d8fbbc62be8fc766357":["6bcde5e3f23911110baa101ed062b544162825b5"],"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a3b392ae35fe5500af50dcf0427a60084afdae14":["8a9e385641d717e641408d8fbbc62be8fc766357"],"c4ee8d31906e3001783889a491e55f218013a190":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["e971ba25509e21a130fef61f0687be0446ca27a0"],"8a5cfde941b2f8208d739344fef3821381885618":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["8fee30af6eec28e0a3e1333ae30cfb41d5b9ad88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fee30af6eec28e0a3e1333ae30cfb41d5b9ad88":["24157515079eea65faeec4e1dbb01fea58444c8e"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a3b392ae35fe5500af50dcf0427a60084afdae14"],"5080735f27287ee9a86441cfca7da3af146ee8d7":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["8a9e385641d717e641408d8fbbc62be8fc766357"],"e971ba25509e21a130fef61f0687be0446ca27a0":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"24157515079eea65faeec4e1dbb01fea58444c8e":["8fee30af6eec28e0a3e1333ae30cfb41d5b9ad88"],"1b54a9bc667895a2095a886184bf69a3179e63df":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"8a9e385641d717e641408d8fbbc62be8fc766357":["a3b392ae35fe5500af50dcf0427a60084afdae14"],"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a":["c4ee8d31906e3001783889a491e55f218013a190"],"a3b392ae35fe5500af50dcf0427a60084afdae14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c4ee8d31906e3001783889a491e55f218013a190":["6bcde5e3f23911110baa101ed062b544162825b5"],"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["24157515079eea65faeec4e1dbb01fea58444c8e"],"8a5cfde941b2f8208d739344fef3821381885618":["1b54a9bc667895a2095a886184bf69a3179e63df"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["8a5cfde941b2f8208d739344fef3821381885618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"8fee30af6eec28e0a3e1333ae30cfb41d5b9ad88":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["5080735f27287ee9a86441cfca7da3af146ee8d7"],"5080735f27287ee9a86441cfca7da3af146ee8d7":["e971ba25509e21a130fef61f0687be0446ca27a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}