{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0716ddfa41d3662d014c42086a700ad78fc5dcb","date":1275676935,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory(random);\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory(random);\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergedSegmentWarmer(warmer));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["c0716ddfa41d3662d014c42086a700ad78fc5dcb"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"00743482822ec0841b0344a37944b666e6a0228d":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","f83af14a2a8131b14d7aee6274c740334e0363d3"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["c0716ddfa41d3662d014c42086a700ad78fc5dcb","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["00743482822ec0841b0344a37944b666e6a0228d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c0716ddfa41d3662d014c42086a700ad78fc5dcb":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["b21422ff1d1d56499dec481f193b402e5e8def5b","3242a09f703274d3b9283f2064a1a33064b53a1b"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["00743482822ec0841b0344a37944b666e6a0228d","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"00743482822ec0841b0344a37944b666e6a0228d":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["f83af14a2a8131b14d7aee6274c740334e0363d3","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["c0716ddfa41d3662d014c42086a700ad78fc5dcb"],"962d04139994fce5193143ef35615499a9a96d78":[],"c0716ddfa41d3662d014c42086a700ad78fc5dcb":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}