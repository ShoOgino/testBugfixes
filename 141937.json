{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","commits":[{"id":"6005b05c19356dfca18f39979caeeb6b85bc88bb","date":1331204804,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector<?> createSecondPassCollector(AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, (Collection) searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<MutableValue>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value =  mergedTopGroup.groupValue;\n        } else {\n          groupValue.value = new BytesRef();\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<Object, Object>());\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, (Collection) searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<MutableValue>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value =  mergedTopGroup.groupValue;\n        } else {\n          groupValue.value = new BytesRef();\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":1,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector<?> createSecondPassCollector(AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, (Collection) searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<MutableValue>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value =  mergedTopGroup.groupValue;\n        } else {\n          groupValue.value = new BytesRef();\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<Object, Object>());\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, (Collection) searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<MutableValue>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value =  mergedTopGroup.groupValue;\n        } else {\n          groupValue.value = new BytesRef();\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector<?> createSecondPassCollector(AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, (Collection) searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<MutableValue>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value =  mergedTopGroup.groupValue;\n        } else {\n          groupValue.value = new BytesRef();\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<Object, Object>());\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector<?> createSecondPassCollector(AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, (Collection) searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<MutableValue>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value =  mergedTopGroup.groupValue;\n        } else {\n          groupValue.value = new BytesRef();\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<Object, Object>());\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector<?> createSecondPassCollector(AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, (Collection) searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<MutableValue>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value =  mergedTopGroup.groupValue;\n        } else {\n          groupValue.value = new BytesRef();\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<Object, Object>());\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector<?> createSecondPassCollector(AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, (Collection) searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<SearchGroup<MutableValue>>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<MutableValue>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value =  mergedTopGroup.groupValue;\n        } else {\n          groupValue.value = new BytesRef();\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<Object, Object>());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}