{"path":"lucene/core/src/test/org/apache/lucene/document/TestFeatureDoubleValues#testHashCodeAndEquals().mjava","commits":[{"id":"b021bd2dcd921cfc332b1a65f27ea18872a71e2b","date":1560150444,"type":0,"author":"Colin Goodheart-Smithe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureDoubleValues#testHashCodeAndEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeAndEquals() {\n    FeatureDoubleValuesSource valuesSource = new FeatureDoubleValuesSource(\"test_field\", \"test_feature\");\n    FeatureDoubleValuesSource equal = new FeatureDoubleValuesSource(\"test_field\", \"test_feature\");\n\n    FeatureDoubleValuesSource differentField = new FeatureDoubleValuesSource(\"other field\", \"test_feature\");\n    FeatureDoubleValuesSource differentFeature = new FeatureDoubleValuesSource(\"test_field\", \"other_feature\");\n    DoubleValuesSource otherImpl = new DoubleValuesSource() {\n      \n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n      \n      @Override\n      public String toString() {\n        return null;\n      }\n      \n      @Override\n      public DoubleValuesSource rewrite(IndexSearcher reader) throws IOException {\n        return null;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n      \n      @Override\n      public int hashCode() {\n        return 0;\n      }\n      \n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return null;\n      }\n      \n      @Override\n      public boolean equals(Object obj) {\n        return false;\n      }\n    };\n    \n    assertTrue(valuesSource.equals(equal));\n    assertEquals(valuesSource.hashCode(), equal.hashCode());\n    assertFalse(valuesSource.equals(null));\n    assertFalse(valuesSource.equals(otherImpl));\n    assertNotEquals(valuesSource.hashCode(), otherImpl.hashCode());\n    assertFalse(valuesSource.equals(differentField));\n    assertNotEquals(valuesSource.hashCode(), differentField.hashCode());\n    assertFalse(valuesSource.equals(differentFeature));\n    assertNotEquals(valuesSource.hashCode(), differentFeature.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b021bd2dcd921cfc332b1a65f27ea18872a71e2b"],"b021bd2dcd921cfc332b1a65f27ea18872a71e2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b021bd2dcd921cfc332b1a65f27ea18872a71e2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b021bd2dcd921cfc332b1a65f27ea18872a71e2b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}