{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","commits":[{"id":"38ed11981e9035384eaae7fb49013b8156d7a977","date":1359112895,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","pathOld":"/dev/null","sourceNew":"  @Nightly\n  public void testBlockReaderOverflow() throws IOException {\n    final long valueCount = _TestUtil.nextLong(random(), 1L + Integer.MAX_VALUE, (long) Integer.MAX_VALUE * 2);\n    final int blockSize = 1 << _TestUtil.nextInt(random(), 20, 22);\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedWriter writer = new BlockPackedWriter(out, blockSize);\n    long value = random().nextInt() & 0xFFFFFFFFL;\n    long valueOffset = _TestUtil.nextLong(random(), 0, valueCount - 1);\n    for (long i = 0; i < valueCount; ) {\n      assertEquals(i, writer.ord());\n      if ((i & (blockSize - 1)) == 0 && (i + blockSize < valueOffset || i > valueOffset && i + blockSize < valueCount)) {\n        writer.addBlockOfZeros();\n        i += blockSize;\n      } else if (i == valueOffset) {\n        writer.add(value);\n        ++i;\n      } else {\n        writer.add(0);\n        ++i;\n      }\n    }\n    writer.finish();\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedReaderIterator it = new BlockPackedReaderIterator(in, PackedInts.VERSION_CURRENT, blockSize, valueCount);\n    it.skip(valueOffset);\n    assertEquals(value, it.next());\n    in.seek(0L);\n    final BlockPackedReader reader = new BlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n    assertEquals(value, reader.get(valueOffset));\n    for (int i = 0; i < 5; ++i) {\n      final long offset = _TestUtil.nextLong(random(), 0, valueCount - 1);\n      if (offset == valueOffset) {\n        assertEquals(value, reader.get(offset));\n      } else {\n        assertEquals(0, reader.get(offset));\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","pathOld":"/dev/null","sourceNew":"  @Nightly\n  public void testBlockReaderOverflow() throws IOException {\n    final long valueCount = _TestUtil.nextLong(random(), 1L + Integer.MAX_VALUE, (long) Integer.MAX_VALUE * 2);\n    final int blockSize = 1 << _TestUtil.nextInt(random(), 20, 22);\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedWriter writer = new BlockPackedWriter(out, blockSize);\n    long value = random().nextInt() & 0xFFFFFFFFL;\n    long valueOffset = _TestUtil.nextLong(random(), 0, valueCount - 1);\n    for (long i = 0; i < valueCount; ) {\n      assertEquals(i, writer.ord());\n      if ((i & (blockSize - 1)) == 0 && (i + blockSize < valueOffset || i > valueOffset && i + blockSize < valueCount)) {\n        writer.addBlockOfZeros();\n        i += blockSize;\n      } else if (i == valueOffset) {\n        writer.add(value);\n        ++i;\n      } else {\n        writer.add(0);\n        ++i;\n      }\n    }\n    writer.finish();\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedReaderIterator it = new BlockPackedReaderIterator(in, PackedInts.VERSION_CURRENT, blockSize, valueCount);\n    it.skip(valueOffset);\n    assertEquals(value, it.next());\n    in.seek(0L);\n    final BlockPackedReader reader = new BlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n    assertEquals(value, reader.get(valueOffset));\n    for (int i = 0; i < 5; ++i) {\n      final long offset = _TestUtil.nextLong(random(), 0, valueCount - 1);\n      if (offset == valueOffset) {\n        assertEquals(value, reader.get(offset));\n      } else {\n        assertEquals(0, reader.get(offset));\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","sourceNew":"  @Nightly\n  public void testBlockReaderOverflow() throws IOException {\n    final long valueCount = TestUtil.nextLong(random(), 1L + Integer.MAX_VALUE, (long) Integer.MAX_VALUE * 2);\n    final int blockSize = 1 << TestUtil.nextInt(random(), 20, 22);\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedWriter writer = new BlockPackedWriter(out, blockSize);\n    long value = random().nextInt() & 0xFFFFFFFFL;\n    long valueOffset = TestUtil.nextLong(random(), 0, valueCount - 1);\n    for (long i = 0; i < valueCount; ) {\n      assertEquals(i, writer.ord());\n      if ((i & (blockSize - 1)) == 0 && (i + blockSize < valueOffset || i > valueOffset && i + blockSize < valueCount)) {\n        writer.addBlockOfZeros();\n        i += blockSize;\n      } else if (i == valueOffset) {\n        writer.add(value);\n        ++i;\n      } else {\n        writer.add(0);\n        ++i;\n      }\n    }\n    writer.finish();\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedReaderIterator it = new BlockPackedReaderIterator(in, PackedInts.VERSION_CURRENT, blockSize, valueCount);\n    it.skip(valueOffset);\n    assertEquals(value, it.next());\n    in.seek(0L);\n    final BlockPackedReader reader = new BlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n    assertEquals(value, reader.get(valueOffset));\n    for (int i = 0; i < 5; ++i) {\n      final long offset = TestUtil.nextLong(random(), 0, valueCount - 1);\n      if (offset == valueOffset) {\n        assertEquals(value, reader.get(offset));\n      } else {\n        assertEquals(0, reader.get(offset));\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBlockReaderOverflow() throws IOException {\n    final long valueCount = _TestUtil.nextLong(random(), 1L + Integer.MAX_VALUE, (long) Integer.MAX_VALUE * 2);\n    final int blockSize = 1 << _TestUtil.nextInt(random(), 20, 22);\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedWriter writer = new BlockPackedWriter(out, blockSize);\n    long value = random().nextInt() & 0xFFFFFFFFL;\n    long valueOffset = _TestUtil.nextLong(random(), 0, valueCount - 1);\n    for (long i = 0; i < valueCount; ) {\n      assertEquals(i, writer.ord());\n      if ((i & (blockSize - 1)) == 0 && (i + blockSize < valueOffset || i > valueOffset && i + blockSize < valueCount)) {\n        writer.addBlockOfZeros();\n        i += blockSize;\n      } else if (i == valueOffset) {\n        writer.add(value);\n        ++i;\n      } else {\n        writer.add(0);\n        ++i;\n      }\n    }\n    writer.finish();\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedReaderIterator it = new BlockPackedReaderIterator(in, PackedInts.VERSION_CURRENT, blockSize, valueCount);\n    it.skip(valueOffset);\n    assertEquals(value, it.next());\n    in.seek(0L);\n    final BlockPackedReader reader = new BlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n    assertEquals(value, reader.get(valueOffset));\n    for (int i = 0; i < 5; ++i) {\n      final long offset = _TestUtil.nextLong(random(), 0, valueCount - 1);\n      if (offset == valueOffset) {\n        assertEquals(value, reader.get(offset));\n      } else {\n        assertEquals(0, reader.get(offset));\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3","date":1401710950,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","sourceNew":"  @Nightly\n  public void testBlockReaderOverflow() throws IOException {\n    final long valueCount = TestUtil.nextLong(random(), 1L + Integer.MAX_VALUE, (long) Integer.MAX_VALUE * 2);\n    final int blockSize = 1 << TestUtil.nextInt(random(), 20, 22);\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedWriter writer = new BlockPackedWriter(out, blockSize, PackedInts.COMPACT);\n    long value = random().nextInt() & 0xFFFFFFFFL;\n    long valueOffset = TestUtil.nextLong(random(), 0, valueCount - 1);\n    for (long i = 0; i < valueCount; ) {\n      assertEquals(i, writer.ord());\n      if ((i & (blockSize - 1)) == 0 && (i + blockSize < valueOffset || i > valueOffset && i + blockSize < valueCount)) {\n        writer.addBlockOfZeros();\n        i += blockSize;\n      } else if (i == valueOffset) {\n        writer.add(value);\n        ++i;\n      } else {\n        writer.add(0);\n        ++i;\n      }\n    }\n    writer.finish();\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedReaderIterator it = new BlockPackedReaderIterator(in, PackedInts.VERSION_CURRENT, blockSize, valueCount);\n    it.skip(valueOffset);\n    assertEquals(value, it.next());\n    in.seek(0L);\n    final BlockPackedReader reader = new BlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n    assertEquals(value, reader.get(valueOffset));\n    for (int i = 0; i < 5; ++i) {\n      final long offset = TestUtil.nextLong(random(), 0, valueCount - 1);\n      if (offset == valueOffset) {\n        assertEquals(value, reader.get(offset));\n      } else {\n        assertEquals(0, reader.get(offset));\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBlockReaderOverflow() throws IOException {\n    final long valueCount = TestUtil.nextLong(random(), 1L + Integer.MAX_VALUE, (long) Integer.MAX_VALUE * 2);\n    final int blockSize = 1 << TestUtil.nextInt(random(), 20, 22);\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedWriter writer = new BlockPackedWriter(out, blockSize);\n    long value = random().nextInt() & 0xFFFFFFFFL;\n    long valueOffset = TestUtil.nextLong(random(), 0, valueCount - 1);\n    for (long i = 0; i < valueCount; ) {\n      assertEquals(i, writer.ord());\n      if ((i & (blockSize - 1)) == 0 && (i + blockSize < valueOffset || i > valueOffset && i + blockSize < valueCount)) {\n        writer.addBlockOfZeros();\n        i += blockSize;\n      } else if (i == valueOffset) {\n        writer.add(value);\n        ++i;\n      } else {\n        writer.add(0);\n        ++i;\n      }\n    }\n    writer.finish();\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedReaderIterator it = new BlockPackedReaderIterator(in, PackedInts.VERSION_CURRENT, blockSize, valueCount);\n    it.skip(valueOffset);\n    assertEquals(value, it.next());\n    in.seek(0L);\n    final BlockPackedReader reader = new BlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n    assertEquals(value, reader.get(valueOffset));\n    for (int i = 0; i < 5; ++i) {\n      final long offset = TestUtil.nextLong(random(), 0, valueCount - 1);\n      if (offset == valueOffset) {\n        assertEquals(value, reader.get(offset));\n      } else {\n        assertEquals(0, reader.get(offset));\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBlockReaderOverflow().mjava","sourceNew":"  @Nightly\n  public void testBlockReaderOverflow() throws IOException {\n    final long valueCount = TestUtil.nextLong(random(), 1L + Integer.MAX_VALUE, (long) Integer.MAX_VALUE * 2);\n    final int blockSize = 1 << TestUtil.nextInt(random(), 20, 22);\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedWriter writer = new BlockPackedWriter(out, blockSize);\n    long value = random().nextInt() & 0xFFFFFFFFL;\n    long valueOffset = TestUtil.nextLong(random(), 0, valueCount - 1);\n    for (long i = 0; i < valueCount; ) {\n      assertEquals(i, writer.ord());\n      if ((i & (blockSize - 1)) == 0 && (i + blockSize < valueOffset || i > valueOffset && i + blockSize < valueCount)) {\n        writer.addBlockOfZeros();\n        i += blockSize;\n      } else if (i == valueOffset) {\n        writer.add(value);\n        ++i;\n      } else {\n        writer.add(0);\n        ++i;\n      }\n    }\n    writer.finish();\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedReaderIterator it = new BlockPackedReaderIterator(in, PackedInts.VERSION_CURRENT, blockSize, valueCount);\n    it.skip(valueOffset);\n    assertEquals(value, it.next());\n    in.seek(0L);\n    final BlockPackedReader reader = new BlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n    assertEquals(value, reader.get(valueOffset));\n    for (int i = 0; i < 5; ++i) {\n      final long offset = TestUtil.nextLong(random(), 0, valueCount - 1);\n      if (offset == valueOffset) {\n        assertEquals(value, reader.get(offset));\n      } else {\n        assertEquals(0, reader.get(offset));\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBlockReaderOverflow() throws IOException {\n    final long valueCount = TestUtil.nextLong(random(), 1L + Integer.MAX_VALUE, (long) Integer.MAX_VALUE * 2);\n    final int blockSize = 1 << TestUtil.nextInt(random(), 20, 22);\n    final Directory dir = newDirectory();\n    final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedWriter writer = new BlockPackedWriter(out, blockSize, PackedInts.COMPACT);\n    long value = random().nextInt() & 0xFFFFFFFFL;\n    long valueOffset = TestUtil.nextLong(random(), 0, valueCount - 1);\n    for (long i = 0; i < valueCount; ) {\n      assertEquals(i, writer.ord());\n      if ((i & (blockSize - 1)) == 0 && (i + blockSize < valueOffset || i > valueOffset && i + blockSize < valueCount)) {\n        writer.addBlockOfZeros();\n        i += blockSize;\n      } else if (i == valueOffset) {\n        writer.add(value);\n        ++i;\n      } else {\n        writer.add(0);\n        ++i;\n      }\n    }\n    writer.finish();\n    out.close();\n    final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n    final BlockPackedReaderIterator it = new BlockPackedReaderIterator(in, PackedInts.VERSION_CURRENT, blockSize, valueCount);\n    it.skip(valueOffset);\n    assertEquals(value, it.next());\n    in.seek(0L);\n    final BlockPackedReader reader = new BlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n    assertEquals(value, reader.get(valueOffset));\n    for (int i = 0; i < 5; ++i) {\n      final long offset = TestUtil.nextLong(random(), 0, valueCount - 1);\n      if (offset == valueOffset) {\n        assertEquals(value, reader.get(offset));\n      } else {\n        assertEquals(0, reader.get(offset));\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38ed11981e9035384eaae7fb49013b8156d7a977":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38ed11981e9035384eaae7fb49013b8156d7a977"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"]},"commit2Childs":{"38ed11981e9035384eaae7fb49013b8156d7a977":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38ed11981e9035384eaae7fb49013b8156d7a977","d4d69c535930b5cce125cff868d40f6373dc27d4"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}