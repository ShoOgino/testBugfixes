{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), \"�mlaut\");\n\n    // FIXME: change MockAnalyzer to not extend CharTokenizer for this test\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["c7f8e68717c68517265937c911e1ce9f25750247"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"c7f8e68717c68517265937c911e1ce9f25750247":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"962d04139994fce5193143ef35615499a9a96d78":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}