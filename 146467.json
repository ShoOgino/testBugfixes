{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /** create a query to find all polygons that intersect a defined bounding box\n   *  note: does not currently support dateline crossing boxes\n   * todo split dateline crossing boxes into two queries like {@link LatLonPoint#newBoxQuery}\n   **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /** create a query to find all polygons that intersect a defined bounding box\n   *  note: does not currently support dateline crossing boxes\n   * todo split dateline crossing boxes into two queries like {@link LatLonPoint#newBoxQuery}\n   **/\n  public static Query newBoxQuery(String field, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    return new LatLonShapeBoundingBoxQuery(field, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d","date":1541178922,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","sourceNew":"  /** create a query to find all polygons that intersect a defined bounding box\n   **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /** create a query to find all polygons that intersect a defined bounding box\n   *  note: does not currently support dateline crossing boxes\n   * todo split dateline crossing boxes into two queries like {@link LatLonPoint#newBoxQuery}\n   **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /** create a query to find all polygons that intersect a defined bounding box\n   **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    if (queryRelation == QueryRelation.CONTAINS && minLongitude > maxLongitude) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, GeoUtils.MAX_LON_INCL), BooleanClause.Occur.MUST);\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, GeoUtils.MIN_LON_INCL, maxLongitude), BooleanClause.Occur.MUST);\n      return builder.build();\n    }\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    if (queryRelation == QueryRelation.CONTAINS && minLongitude > maxLongitude) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, GeoUtils.MAX_LON_INCL), BooleanClause.Occur.MUST);\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, GeoUtils.MIN_LON_INCL, maxLongitude), BooleanClause.Occur.MUST);\n      return builder.build();\n    }\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    if (queryRelation == QueryRelation.CONTAINS && minLongitude > maxLongitude) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, GeoUtils.MAX_LON_INCL), BooleanClause.Occur.MUST);\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, GeoUtils.MIN_LON_INCL, maxLongitude), BooleanClause.Occur.MUST);\n      return builder.build();\n    }\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    if (queryRelation == QueryRelation.CONTAINS && minLongitude > maxLongitude) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, GeoUtils.MAX_LON_INCL), BooleanClause.Occur.MUST);\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, GeoUtils.MIN_LON_INCL, maxLongitude), BooleanClause.Occur.MUST);\n      return builder.build();\n    }\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["c286b0d8c507a88b289407e2fe161effa275c6b0","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}