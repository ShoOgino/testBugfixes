{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        numericInfo.put(field.name, ordsReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        numericInfo.put(field.name, reader);\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        numericInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        numericInfo.put(field.name, quotientReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        numericInfo.put(field.name, ordsReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        numericInfo.put(field.name, reader);\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        numericInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        numericInfo.put(field.name, quotientReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, input=\" + data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        numericInfo.put(field.name, ordsReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        numericInfo.put(field.name, reader);\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        numericInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        numericInfo.put(field.name, quotientReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n          numericInfo.put(field.name, ordsReader);\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(reader.ramBytesUsed());\n          numericInfo.put(field.name, reader);\n        }\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n          numericInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n          numericInfo.put(field.name, quotientReader);\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        numericInfo.put(field.name, ordsReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        numericInfo.put(field.name, reader);\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        numericInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        numericInfo.put(field.name, quotientReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n          numericInfo.put(field.name, ordsReader);\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(reader.ramBytesUsed());\n          numericInfo.put(field.name, reader);\n        }\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n          numericInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n          numericInfo.put(field.name, quotientReader);\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        numericInfo.put(field.name, ordsReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        numericInfo.put(field.name, reader);\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        numericInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n        numericInfo.put(field.name, quotientReader);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    data.seek(entry.offset);\n    switch (entry.format) {\n      case TABLE_COMPRESSED:\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), entry.packedIntsVersion, maxDoc, bitsPerValue);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n          numericInfo.put(field.name, ordsReader);\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      case DELTA_COMPRESSED:\n        final int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, blockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(reader.ramBytesUsed());\n          numericInfo.put(field.name, reader);\n        }\n        return reader;\n      case UNCOMPRESSED:\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n          numericInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = data.readLong();\n        final long mult = data.readLong();\n        final int quotientBlockSize = data.readVInt();\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, quotientBlockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(quotientReader.ramBytesUsed());\n          numericInfo.put(field.name, quotientReader);\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return min + mult * quotientReader.get(docID);\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bc8f80fee115148a0e4a0574560be06b494de821":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9bb9a29a5e71a90295f175df8919802993142c9a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}