{"path":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, mergeState.fieldInfos.hasProx(), codec, null,\n                                               mergeState.fieldInfos.hasVectors(),\n                                               mergeState.fieldInfos.hasDocValues(),\n                                               mergeState.fieldInfos.hasNorms(),\n                                               mergeState.fieldInfos.hasFreq());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc834f3412d287003cc04691da380b69ab983239","date":1337276089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, mergeState.fieldInfos.hasProx(), codec, null,\n                                               mergeState.fieldInfos.hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, mergeState.fieldInfos.hasProx(), codec, null,\n                                               mergeState.fieldInfos.hasVectors(),\n                                               mergeState.fieldInfos.hasDocValues(),\n                                               mergeState.fieldInfos.hasNorms(),\n                                               mergeState.fieldInfos.hasFreq());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, mergeState.fieldInfos.hasProx(), codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, mergeState.fieldInfos.hasProx(), codec, null,\n                                               mergeState.fieldInfos.hasVectors());\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc97c61094c5498702b29cc2e8309beac50c23dc","date":1337293692,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, mergeState.fieldInfos.hasProx(), codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, merged,\n                                               false, null, false, 0, codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, -1, merged,\n                                               false, null, false, 0, codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b2af6b2c05418fb9df466c739ed5b3a153eadde","date":1337520269,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, merged,\n                                               false, null, false, 0, codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, merged,\n                                               false, null, false, 0, codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.dir);\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, merged,\n                                               false, null, false, 0, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, merged,\n                                               false, null, false, 0, codec, null);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.dir);\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, merged,\n                                               false, null, false, 0, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["fc834f3412d287003cc04691da380b69ab983239"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["4356000e349e38c9fb48034695b7c309abd54557"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"a851824c09818632c94eba41e60ef5e72e323c8e":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"fc834f3412d287003cc04691da380b69ab983239":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"4356000e349e38c9fb48034695b7c309abd54557":["a851824c09818632c94eba41e60ef5e72e323c8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["a851824c09818632c94eba41e60ef5e72e323c8e"],"a851824c09818632c94eba41e60ef5e72e323c8e":["4356000e349e38c9fb48034695b7c309abd54557"],"fc834f3412d287003cc04691da380b69ab983239":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["fc834f3412d287003cc04691da380b69ab983239"],"4356000e349e38c9fb48034695b7c309abd54557":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}