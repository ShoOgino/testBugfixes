{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","commits":[{"id":"4d407445fd90f1db48b495a5a86957e999836701","date":1014411551,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,\n     *                MultiFieldQueryParser.REQUIRED FIELD,\n     *                MultiFieldQueryParser.PROHIBITED FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:{query}) +(contents:{query}) -(description:{query})\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParserException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, true, false);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, false, true);\n                    break;\n                default:\n                    bQuery.add(q, false, false);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18","date":1016767353,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,\n     *                MultiFieldQueryParser.REQUIRED FIELD,\n     *                MultiFieldQueryParser.PROHIBITED FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParserException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, true, false);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, false, true);\n                    break;\n                default:\n                    bQuery.add(q, false, false);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,\n     *                MultiFieldQueryParser.REQUIRED FIELD,\n     *                MultiFieldQueryParser.PROHIBITED FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:{query}) +(contents:{query}) -(description:{query})\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParserException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, true, false);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, false, true);\n                    break;\n                default:\n                    bQuery.add(q, false, false);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0859992fd49ca637e9f00011fa4b0281196a9c58","date":1065658314,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,\n     *                MultiFieldQueryParser.REQUIRED FIELD,\n     *                MultiFieldQueryParser.PROHIBITED FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, true, false);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, false, true);\n                    break;\n                default:\n                    bQuery.add(q, false, false);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,\n     *                MultiFieldQueryParser.REQUIRED FIELD,\n     *                MultiFieldQueryParser.PROHIBITED FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParserException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, true, false);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, false, true);\n                    break;\n                default:\n                    bQuery.add(q, false, false);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2a35410e365d9b0027637c577b72b8a6f96ce85","date":1093643417,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,\n     *                MultiFieldQueryParser.REQUIRED FIELD,\n     *                MultiFieldQueryParser.PROHIBITED FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n                    break;\n                default:\n                    bQuery.add(q, BooleanClause.Occur.SHOULD);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,\n     *                MultiFieldQueryParser.REQUIRED FIELD,\n     *                MultiFieldQueryParser.PROHIBITED FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, true, false);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, false, true);\n                    break;\n                default:\n                    bQuery.add(q, false, false);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0","date":1102865269,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,\n     *                MultiFieldQueryParser.REQUIRED_FIELD,\n     *                MultiFieldQueryParser.PROHIBITED_FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @throws IllegalArgumentException if the length of the fields array differs\n     *  from the length of the flags array\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer) throws ParseException\n    {\n        if (fields.length != flags.length)\n          throw new IllegalArgumentException(\"fields.length != flags.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n                    break;\n                default:\n                    bQuery.add(q, BooleanClause.Occur.SHOULD);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,\n     *                MultiFieldQueryParser.REQUIRED FIELD,\n     *                MultiFieldQueryParser.PROHIBITED FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer)\n\tthrows ParseException\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n                    break;\n                default:\n                    bQuery.add(q, BooleanClause.Occur.SHOULD);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"006e70a9e04438ee808b8fe40a5217f7cfa28fbd","date":1121971459,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,\n     *                MultiFieldQueryParser.REQUIRED_FIELD,\n     *                MultiFieldQueryParser.PROHIBITED_FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @throws IllegalArgumentException if the length of the fields array differs\n     *  from the length of the flags array\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer) throws ParseException\n    {\n        if (fields.length != flags.length)\n          throw new IllegalArgumentException(\"fields.length != flags.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            QueryParser qp = new QueryParser(fields[i], analyzer);\n            Query q = qp.parse(query);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n                    break;\n                default:\n                    bQuery.add(q, BooleanClause.Occur.SHOULD);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,\n     *                MultiFieldQueryParser.REQUIRED_FIELD,\n     *                MultiFieldQueryParser.PROHIBITED_FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @throws IllegalArgumentException if the length of the fields array differs\n     *  from the length of the flags array\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer) throws ParseException\n    {\n        if (fields.length != flags.length)\n          throw new IllegalArgumentException(\"fields.length != flags.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n                    break;\n                default:\n                    bQuery.add(q, BooleanClause.Occur.SHOULD);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aae9fe64c5e6de1908855356afc05d7eb82903f","date":1121973155,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query, searching on the fields specified.\n   * Use this if you need to specify certain fields as required,\n   * and others as prohibited.\n   * <p><pre>\n   * Usage:\n   * <code>\n   * String[] fields = {\"filename\", \"contents\", \"description\"};\n   * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,\n   *                MultiFieldQueryParser.REQUIRED_FIELD,\n   *                MultiFieldQueryParser.PROHIBITED_FIELD,};\n   * parse(query, fields, flags, analyzer);\n   * </code>\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * <pre>\n   * <code>\n   * (filename:query) +(contents:query) -(description:query)\n   * </code>\n   * </pre>\n   *\n   * @param query Query string to parse\n   * @param fields Fields to search on\n   * @param flags Flags describing the fields\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws TokenMgrError if query parsing fails\n   * @throws IllegalArgumentException if the length of the fields array differs\n   *  from the length of the flags array\n   */\n  public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer) throws ParseException\n  {\n    if (fields.length != flags.length)\n      throw new IllegalArgumentException(\"fields.length != flags.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(query);\n      int flag = flags[i];\n      switch (flag)\n      {\n        case REQUIRED_FIELD:\n          bQuery.add(q, BooleanClause.Occur.MUST);\n          break;\n        case PROHIBITED_FIELD:\n          bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n          break;\n        default:\n          bQuery.add(q, BooleanClause.Occur.SHOULD);\n        break;\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query, searching on the fields specified.\n     * Use this if you need to specify certain fields as required,\n     * and others as prohibited.\n     * <p><pre>\n     * Usage:\n     * <code>\n     * String[] fields = {\"filename\", \"contents\", \"description\"};\n     * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,\n     *                MultiFieldQueryParser.REQUIRED_FIELD,\n     *                MultiFieldQueryParser.PROHIBITED_FIELD,};\n     * parse(query, fields, flags, analyzer);\n     * </code>\n     * </pre>\n     *<p>\n     * The code above would construct a query:\n     * <pre>\n     * <code>\n     * (filename:query) +(contents:query) -(description:query)\n     * </code>\n     * </pre>\n     *\n     * @param query Query string to parse\n     * @param fields Fields to search on\n     * @param flags Flags describing the fields\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @throws IllegalArgumentException if the length of the fields array differs\n     *  from the length of the flags array\n     */\n    public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer) throws ParseException\n    {\n        if (fields.length != flags.length)\n          throw new IllegalArgumentException(\"fields.length != flags.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            QueryParser qp = new QueryParser(fields[i], analyzer);\n            Query q = qp.parse(query);\n            int flag = flags[i];\n            switch (flag)\n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n                    break;\n                default:\n                    bQuery.add(q, BooleanClause.Occur.SHOULD);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"497366d9491b581aca93e5134d95505e501aa58d","date":1128546088,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query, searching on the fields specified.\n   * Use this if you need to specify certain fields as required,\n   * and others as prohibited.\n   * <p><pre>\n   * Usage:\n   * <code>\n   * String[] fields = {\"filename\", \"contents\", \"description\"};\n   * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,\n   *                MultiFieldQueryParser.REQUIRED_FIELD,\n   *                MultiFieldQueryParser.PROHIBITED_FIELD,};\n   * parse(query, fields, flags, analyzer);\n   * </code>\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * <pre>\n   * <code>\n   * (filename:query) +(contents:query) -(description:query)\n   * </code>\n   * </pre>\n   *\n   * @param query Query string to parse\n   * @param fields Fields to search on\n   * @param flags Flags describing the fields\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws TokenMgrError if query parsing fails\n   * @throws IllegalArgumentException if the length of the fields array differs\n   *  from the length of the flags array\n   * @deprecated use {@link #parse(String, String[], BooleanClause.Occur[], Analyzer)} instead\n   */\n  public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer) throws ParseException\n  {\n    if (fields.length != flags.length)\n      throw new IllegalArgumentException(\"fields.length != flags.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(query);\n      int flag = flags[i];\n      switch (flag)\n      {\n        case REQUIRED_FIELD:\n          bQuery.add(q, BooleanClause.Occur.MUST);\n          break;\n        case PROHIBITED_FIELD:\n          bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n          break;\n        default:\n          bQuery.add(q, BooleanClause.Occur.SHOULD);\n        break;\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query, searching on the fields specified.\n   * Use this if you need to specify certain fields as required,\n   * and others as prohibited.\n   * <p><pre>\n   * Usage:\n   * <code>\n   * String[] fields = {\"filename\", \"contents\", \"description\"};\n   * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,\n   *                MultiFieldQueryParser.REQUIRED_FIELD,\n   *                MultiFieldQueryParser.PROHIBITED_FIELD,};\n   * parse(query, fields, flags, analyzer);\n   * </code>\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * <pre>\n   * <code>\n   * (filename:query) +(contents:query) -(description:query)\n   * </code>\n   * </pre>\n   *\n   * @param query Query string to parse\n   * @param fields Fields to search on\n   * @param flags Flags describing the fields\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws TokenMgrError if query parsing fails\n   * @throws IllegalArgumentException if the length of the fields array differs\n   *  from the length of the flags array\n   */\n  public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer) throws ParseException\n  {\n    if (fields.length != flags.length)\n      throw new IllegalArgumentException(\"fields.length != flags.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(query);\n      int flag = flags[i];\n      switch (flag)\n      {\n        case REQUIRED_FIELD:\n          bQuery.add(q, BooleanClause.Occur.MUST);\n          break;\n        case PROHIBITED_FIELD:\n          bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n          break;\n        default:\n          bQuery.add(q, BooleanClause.Occur.SHOULD);\n        break;\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String,String[],int[],Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses a query, searching on the fields specified.\n   * Use this if you need to specify certain fields as required,\n   * and others as prohibited.\n   * <p><pre>\n   * Usage:\n   * <code>\n   * String[] fields = {\"filename\", \"contents\", \"description\"};\n   * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,\n   *                MultiFieldQueryParser.REQUIRED_FIELD,\n   *                MultiFieldQueryParser.PROHIBITED_FIELD,};\n   * parse(query, fields, flags, analyzer);\n   * </code>\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * <pre>\n   * <code>\n   * (filename:query) +(contents:query) -(description:query)\n   * </code>\n   * </pre>\n   *\n   * @param query Query string to parse\n   * @param fields Fields to search on\n   * @param flags Flags describing the fields\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws TokenMgrError if query parsing fails\n   * @throws IllegalArgumentException if the length of the fields array differs\n   *  from the length of the flags array\n   * @deprecated use {@link #parse(String, String[], BooleanClause.Occur[], Analyzer)} instead\n   */\n  public static Query parse(String query, String[] fields, int[] flags,\n\tAnalyzer analyzer) throws ParseException\n  {\n    if (fields.length != flags.length)\n      throw new IllegalArgumentException(\"fields.length != flags.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(query);\n      int flag = flags[i];\n      switch (flag)\n      {\n        case REQUIRED_FIELD:\n          bQuery.add(q, BooleanClause.Occur.MUST);\n          break;\n        case PROHIBITED_FIELD:\n          bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n          break;\n        default:\n          bQuery.add(q, BooleanClause.Occur.SHOULD);\n        break;\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"006e70a9e04438ee808b8fe40a5217f7cfa28fbd":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"6aae9fe64c5e6de1908855356afc05d7eb82903f":["006e70a9e04438ee808b8fe40a5217f7cfa28fbd"],"0859992fd49ca637e9f00011fa4b0281196a9c58":["bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18"],"497366d9491b581aca93e5134d95505e501aa58d":["6aae9fe64c5e6de1908855356afc05d7eb82903f"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["497366d9491b581aca93e5134d95505e501aa58d"],"bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18":["4d407445fd90f1db48b495a5a86957e999836701"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["b2a35410e365d9b0027637c577b72b8a6f96ce85"],"4d407445fd90f1db48b495a5a86957e999836701":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b2a35410e365d9b0027637c577b72b8a6f96ce85":["0859992fd49ca637e9f00011fa4b0281196a9c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"006e70a9e04438ee808b8fe40a5217f7cfa28fbd":["6aae9fe64c5e6de1908855356afc05d7eb82903f"],"6aae9fe64c5e6de1908855356afc05d7eb82903f":["497366d9491b581aca93e5134d95505e501aa58d"],"0859992fd49ca637e9f00011fa4b0281196a9c58":["b2a35410e365d9b0027637c577b72b8a6f96ce85"],"497366d9491b581aca93e5134d95505e501aa58d":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18":["0859992fd49ca637e9f00011fa4b0281196a9c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d407445fd90f1db48b495a5a86957e999836701"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["006e70a9e04438ee808b8fe40a5217f7cfa28fbd"],"4d407445fd90f1db48b495a5a86957e999836701":["bda318649f764d9c0ccbb2a2e8ba0c7c22a87b18"],"b2a35410e365d9b0027637c577b72b8a6f96ce85":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}