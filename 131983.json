{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertScoreEquals(Query,Query).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertScoreEquals(Query,Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#assertScoreEquals(Query,Query).mjava","sourceNew":"  /**\n   * Tests whether the scores of the two queries are the same.\n   */\n  public void assertScoreEquals(Query q1, Query q2) throws Exception {\n    ScoreDoc[] hits1 = searcher.search (q1, null, 1000).scoreDocs;\n    ScoreDoc[] hits2 = searcher.search (q2, null, 1000).scoreDocs;\n      \n    assertEquals(hits1.length, hits2.length);\n    \n    for (int i = 0; i < hits1.length; i++) {\n      assertEquals(hits1[i].score, hits2[i].score, 0.000001f);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests whether the scores of the two queries are the same.\n   */\n  public void assertScoreEquals(Query q1, Query q2) throws Exception {\n    ScoreDoc[] hits1 = searcher.search (q1, null, 1000).scoreDocs;\n    ScoreDoc[] hits2 = searcher.search (q2, null, 1000).scoreDocs;\n      \n    assertEquals(hits1.length, hits2.length);\n    \n    for (int i = 0; i < hits1.length; i++) {\n      assertEquals(hits1[i].score, hits2[i].score, 0.000001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertScoreEquals(Query,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertScoreEquals(Query,Query).mjava","sourceNew":"  /**\n   * Tests whether the scores of the two queries are the same.\n   */\n  public void assertScoreEquals(Query q1, Query q2) throws Exception {\n    ScoreDoc[] hits1 = searcher.search (q1, 1000).scoreDocs;\n    ScoreDoc[] hits2 = searcher.search (q2, 1000).scoreDocs;\n      \n    assertEquals(hits1.length, hits2.length);\n    \n    for (int i = 0; i < hits1.length; i++) {\n      assertEquals(hits1[i].score, hits2[i].score, 0.000001f);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests whether the scores of the two queries are the same.\n   */\n  public void assertScoreEquals(Query q1, Query q2) throws Exception {\n    ScoreDoc[] hits1 = searcher.search (q1, null, 1000).scoreDocs;\n    ScoreDoc[] hits2 = searcher.search (q2, null, 1000).scoreDocs;\n      \n    assertEquals(hits1.length, hits2.length);\n    \n    for (int i = 0; i < hits1.length; i++) {\n      assertEquals(hits1[i].score, hits2[i].score, 0.000001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertScoreEquals(Query,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests whether the scores of the two queries are the same.\n   */\n  public void assertScoreEquals(Query q1, Query q2) throws Exception {\n    ScoreDoc[] hits1 = searcher.search (q1, 1000).scoreDocs;\n    ScoreDoc[] hits2 = searcher.search (q2, 1000).scoreDocs;\n      \n    assertEquals(hits1.length, hits2.length);\n    \n    for (int i = 0; i < hits1.length; i++) {\n      assertEquals(hits1[i].score, hits2[i].score, 0.000001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}