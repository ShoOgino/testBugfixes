{"path":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","commits":[{"id":"24b51843dd98041bc40be26a47e44d7cb49bef72","date":1403043869,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    int numAddFieldPuts = 0;\n    int numAddFieldPosts = 0;\n    List<CopyFieldInfo> copyFields = new ArrayList<>();\n\n    for (int i = 0; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n\n      int type = random().nextInt(3);\n      if (type == 0) { // send an add field via PUT\n        addFieldPut(publisher, \"newfieldPut\" + numAddFieldPuts++);\n      }\n      else if (type == 1) { // send an add field via POST\n        addFieldPost(publisher, \"newfieldPost\" + numAddFieldPosts++);\n      }\n      else if (type == 2) { // send a copy field\n        String sourceField = null;\n        String destField = null;\n\n        int sourceType = random().nextInt(3);\n        if (sourceType == 0) {  // existing\n          sourceField = \"name\";\n        } else if (sourceType == 1) { // newly created\n          sourceField = \"copySource\" + i;\n          addFieldPut(publisher, sourceField);\n        } else { // dynamic\n          sourceField = \"*_dynamicSource\" + i + \"_t\";\n          // * only supported if both src and dst use it\n          destField = \"*_dynamicDest\" + i + \"_t\";\n        }\n        \n        if (destField == null) {\n          int destType = random().nextInt(2);\n          if (destType == 0) {  // existing\n            destField = \"title\";\n          } else { // newly created\n            destField = \"copyDest\" + i;\n            addFieldPut(publisher, destField);\n          }\n        }\n        copyField(publisher, sourceField, destField);\n        copyFields.add(new CopyFieldInfo(sourceField, destField));\n      }\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(numAddFieldPuts, numAddFieldPosts);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(copyFields);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    int numAddFieldPuts = 0;\n    int numAddFieldPosts = 0;\n    List<CopyFieldInfo> copyFields = new ArrayList<>();\n\n    for (int i = 0; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n\n      int type = random().nextInt(3);\n      if (type == 0) { // send an add field via PUT\n        addFieldPut(publisher, \"newfieldPut\" + numAddFieldPuts++);\n      }\n      else if (type == 1) { // send an add field via POST\n        addFieldPost(publisher, \"newfieldPost\" + numAddFieldPosts++);\n      }\n      else if (type == 2) { // send a copy field\n        String sourceField = null;\n        String destField = null;\n\n        int sourceType = random().nextInt(3);\n        if (sourceType == 0) {  // existing\n          sourceField = \"name\";\n        } else if (sourceType == 1) { // newly created\n          sourceField = \"copySource\" + i;\n          addFieldPut(publisher, sourceField);\n        } else { // dynamic\n          sourceField = \"*_dynamicSource\" + i + \"_t\";\n          // * only supported if both src and dst use it\n          destField = \"*_dynamicDest\" + i + \"_t\";\n        }\n        \n        if (destField == null) {\n          int destType = random().nextInt(2);\n          if (destType == 0) {  // existing\n            destField = \"title\";\n          } else { // newly created\n            destField = \"copyDest\" + i;\n            addFieldPut(publisher, destField);\n          }\n        }\n        copyField(publisher, sourceField, destField);\n        copyFields.add(new CopyFieldInfo(sourceField, destField));\n      }\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(numAddFieldPuts, numAddFieldPosts);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(copyFields);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a54972b2387f87fdd92600308f9a0d477b1f53b0","date":1404789654,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }  \n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    \n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 100;\n    int numAddFieldPuts = 0;\n    int numAddFieldPosts = 0;\n    List<CopyFieldInfo> copyFields = new ArrayList<>();\n\n    for (int i = 0; i <= numFields ; ++i) {\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n\n      int type = random().nextInt(3);\n      if (type == 0) { // send an add field via PUT\n        addFieldPut(publisher, \"newfieldPut\" + numAddFieldPuts++);\n      }\n      else if (type == 1) { // send an add field via POST\n        addFieldPost(publisher, \"newfieldPost\" + numAddFieldPosts++);\n      }\n      else if (type == 2) { // send a copy field\n        String sourceField = null;\n        String destField = null;\n\n        int sourceType = random().nextInt(3);\n        if (sourceType == 0) {  // existing\n          sourceField = \"name\";\n        } else if (sourceType == 1) { // newly created\n          sourceField = \"copySource\" + i;\n          addFieldPut(publisher, sourceField);\n        } else { // dynamic\n          sourceField = \"*_dynamicSource\" + i + \"_t\";\n          // * only supported if both src and dst use it\n          destField = \"*_dynamicDest\" + i + \"_t\";\n        }\n        \n        if (destField == null) {\n          int destType = random().nextInt(2);\n          if (destType == 0) {  // existing\n            destField = \"title\";\n          } else { // newly created\n            destField = \"copyDest\" + i;\n            addFieldPut(publisher, destField);\n          }\n        }\n        copyField(publisher, sourceField, destField);\n        copyFields.add(new CopyFieldInfo(sourceField, destField));\n      }\n    }\n\n    String[] expectedAddFields = getExpectedFieldResponses(numAddFieldPuts, numAddFieldPosts);\n    String[] expectedCopyFields = getExpectedCopyFieldResponses(copyFields);\n\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    long startTime = System.nanoTime();\n    String request = null;\n    String response = null;\n    String result = null;\n\n    while ( ! success \n           && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      Thread.sleep(100);\n\n      for (RestTestHarness client : restTestHarnesses) {\n        // verify addFieldPuts and addFieldPosts\n        request = \"/schema/fields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedAddFields);\n        if (result != null) {\n          break;\n        }\n\n        // verify copyFields\n        request = \"/schema/copyfields?wt=xml\";\n        response = client.query(request);\n        result = BaseTestHarness.validateXPath(response, expectedCopyFields);\n        if (result != null) {\n          break;\n        }\n      }\n      success = (result == null);\n    }\n    if ( ! success) {\n      String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n      log.error(msg);\n      fail(msg);\n    }\n  }\n\n","bugFix":["24b51843dd98041bc40be26a47e44d7cb49bef72"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    verifyWaitForSchemaUpdateToPropagate();\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    verifyWaitForSchemaUpdateToPropagate();\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 8)\n  public void test() throws Exception {\n    verifyWaitForSchemaUpdateToPropagate();\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    verifyWaitForSchemaUpdateToPropagate();\n    setupHarnesses();\n    concurrentOperationsTest();\n    schemaLockTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24b51843dd98041bc40be26a47e44d7cb49bef72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"abb23fcc2461782ab204e61213240feb77d355aa":["106069d345c14ee5c76f0ea76397b02a656f883c"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24b51843dd98041bc40be26a47e44d7cb49bef72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["37e5b631c49de2fb88f245c36ecf87650cfa4a24","106069d345c14ee5c76f0ea76397b02a656f883c"],"106069d345c14ee5c76f0ea76397b02a656f883c":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["24b51843dd98041bc40be26a47e44d7cb49bef72"]},"commit2Childs":{"24b51843dd98041bc40be26a47e44d7cb49bef72":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","a54972b2387f87fdd92600308f9a0d477b1f53b0"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24b51843dd98041bc40be26a47e44d7cb49bef72","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["abb23fcc2461782ab204e61213240feb77d355aa","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}