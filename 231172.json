{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsWriter#Lucene84PostingsWriter(SegmentWriteState).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsWriter#Lucene84PostingsWriter(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a postings writer */\n  public Lucene84PostingsWriter(SegmentWriteState state) throws IOException {\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene84PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      ByteOrder byteOrder = ByteOrder.nativeOrder();\n      if (byteOrder == ByteOrder.BIG_ENDIAN) {\n        docOut.writeByte((byte) 'B');\n      } else if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        docOut.writeByte((byte) 'L');\n      } else {\n        throw new Error();\n      }\n      final ForUtil forUtil = new ForUtil();\n      forDeltaUtil = new ForDeltaUtil(forUtil);\n      pforUtil = new PForUtil(forUtil);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new long[BLOCK_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene84PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new long[BLOCK_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new long[BLOCK_SIZE];\n          offsetLengthBuffer = new long[BLOCK_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene84PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new long[BLOCK_SIZE];\n    freqBuffer = new long[BLOCK_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene84SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.maxDoc(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}