{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given OLDER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    fileListEntityProcessor.init(c);\n    fList.clear();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given NEWER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745","6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d241a0d7846c11e0602e9ade2311edaa6e833c9a","date":1233693200,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given OLDER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    fileListEntityProcessor.init(c);\n    fList.clear();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given NEWER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given OLDER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    fileListEntityProcessor.init(c);\n    fList.clear();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given NEWER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given OLDER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);\n    fileListEntityProcessor.init(c);\n    fList.clear();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given NEWER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given OLDER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    fileListEntityProcessor.init(c);\n    fList.clear();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given NEWER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee545e24d7448c1c28710f34a22e32bd1d7cf83b","date":1252329121,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given OLDER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);\n    fileListEntityProcessor.init(c);\n    fList.clear();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    System.out.println(\"List of files when given NEWER_THAN -- \" + fList);\n    Assert.assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b23c1453febc85f31827ff5d92bb4b8d895d82b","date":1254307450,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", AbstractDataImportHandlerTest.createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    Assert.assertEquals(1, fList.size());\n    Assert.assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745","6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testNTOT().mjava","sourceNew":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", AbstractDataImportHandlerTest.createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    Assert.assertEquals(1, fList.size());\n    Assert.assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testNTOT() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.OLDER_THAN, \"'NOW'\");\n    List<String> fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"'NOW-2HOURS'\");\n    fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n\n    // Use a variable for newerThan\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.NEWER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    String lastMod = DataImporter.DATE_TIME_FORMAT.get().format(new Date(System.currentTimeMillis() - 50000));\n    resolver.addNamespace(\"a\", AbstractDataImportHandlerTest.createMap(\"x\", lastMod));\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    fList = getFiles(resolver, attrs);\n    Assert.assertEquals(1, fList.size());\n    Assert.assertEquals(\"File name must be t.xml\", new File(tmpdir, \"t.xml\").getAbsolutePath(), fList.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ee545e24d7448c1c28710f34a22e32bd1d7cf83b":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2b23c1453febc85f31827ff5d92bb4b8d895d82b"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["d241a0d7846c11e0602e9ade2311edaa6e833c9a"],"d241a0d7846c11e0602e9ade2311edaa6e833c9a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b23c1453febc85f31827ff5d92bb4b8d895d82b":["ee545e24d7448c1c28710f34a22e32bd1d7cf83b"]},"commit2Childs":{"ee545e24d7448c1c28710f34a22e32bd1d7cf83b":["2b23c1453febc85f31827ff5d92bb4b8d895d82b"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["d241a0d7846c11e0602e9ade2311edaa6e833c9a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["ee545e24d7448c1c28710f34a22e32bd1d7cf83b"],"d241a0d7846c11e0602e9ade2311edaa6e833c9a":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"2b23c1453febc85f31827ff5d92bb4b8d895d82b":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}