{"path":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","pathOld":"/dev/null","sourceNew":"  private final void createCompoundFile() \n  throws IOException\n  {\n    CompoundFileWriter oneWriter = \n        new CompoundFileWriter(directory, segment + \".cfs\");\n    \n    ArrayList files = \n        new ArrayList(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i=0; i<COMPOUND_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while(it.hasNext()) {\n        oneWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    oneWriter.close();\n    \n    \n    // Now delete the source files\n    it = files.iterator();\n    while(it.hasNext()) {\n        directory.deleteFile((String) it.next());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d53d1ed802ec0e72098251fb5781beff5f9ef01","date":1066055248,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","sourceNew":"  private final void createCompoundFile() \n  throws IOException {\n    CompoundFileWriter cfsWriter = \n        new CompoundFileWriter(directory, segment + \".cfs\");\n    \n    ArrayList files = \n        new ArrayList(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i=0; i<COMPOUND_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while(it.hasNext()) {\n      cfsWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n        \n    // Now delete the source files\n    it = files.iterator();\n    while(it.hasNext()) {\n      directory.deleteFile((String) it.next());\n    }\n  }\n\n","sourceOld":"  private final void createCompoundFile() \n  throws IOException\n  {\n    CompoundFileWriter oneWriter = \n        new CompoundFileWriter(directory, segment + \".cfs\");\n    \n    ArrayList files = \n        new ArrayList(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i=0; i<COMPOUND_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while(it.hasNext()) {\n        oneWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    oneWriter.close();\n    \n    \n    // Now delete the source files\n    it = files.iterator();\n    while(it.hasNext()) {\n        directory.deleteFile((String) it.next());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","sourceNew":"  private final void createCompoundFile()\n          throws IOException {\n    CompoundFileWriter cfsWriter =\n            new CompoundFileWriter(directory, segment + \".cfs\");\n\n    ArrayList files =\n      new ArrayList(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i = 0; i < COMPOUND_EXTENSIONS.length; i++) {\n      files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (int i = 0; i < VECTOR_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + VECTOR_EXTENSIONS[i]);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while (it.hasNext()) {\n      cfsWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n        \n    // Now delete the source files\n    it = files.iterator();\n    while (it.hasNext()) {\n      directory.deleteFile((String) it.next());\n    }\n  }\n\n","sourceOld":"  private final void createCompoundFile() \n  throws IOException {\n    CompoundFileWriter cfsWriter = \n        new CompoundFileWriter(directory, segment + \".cfs\");\n    \n    ArrayList files = \n        new ArrayList(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i=0; i<COMPOUND_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while(it.hasNext()) {\n      cfsWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n        \n    // Now delete the source files\n    it = files.iterator();\n    while(it.hasNext()) {\n      directory.deleteFile((String) it.next());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79fc67d5cdece593cd3b3b6c7ef195ee2625522c","date":1091970333,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","sourceNew":"  final void createCompoundFile()\n          throws IOException {\n    CompoundFileWriter cfsWriter =\n            new CompoundFileWriter(directory, segment + \".cfs\");\n\n    ArrayList files =\n      new ArrayList(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i = 0; i < COMPOUND_EXTENSIONS.length; i++) {\n      files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (int i = 0; i < VECTOR_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + VECTOR_EXTENSIONS[i]);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while (it.hasNext()) {\n      cfsWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n        \n    // Now delete the source files\n    it = files.iterator();\n    while (it.hasNext()) {\n      directory.deleteFile((String) it.next());\n    }\n  }\n\n","sourceOld":"  private final void createCompoundFile()\n          throws IOException {\n    CompoundFileWriter cfsWriter =\n            new CompoundFileWriter(directory, segment + \".cfs\");\n\n    ArrayList files =\n      new ArrayList(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i = 0; i < COMPOUND_EXTENSIONS.length; i++) {\n      files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (int i = 0; i < VECTOR_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + VECTOR_EXTENSIONS[i]);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while (it.hasNext()) {\n      cfsWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n        \n    // Now delete the source files\n    it = files.iterator();\n    while (it.hasNext()) {\n      directory.deleteFile((String) it.next());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7","date":1092245915,"type":5,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile().mjava","sourceNew":"  final Vector createCompoundFile(String fileName)\n          throws IOException {\n    CompoundFileWriter cfsWriter =\n            new CompoundFileWriter(directory, fileName);\n\n    Vector files =\n      new Vector(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i = 0; i < COMPOUND_EXTENSIONS.length; i++) {\n      files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (int i = 0; i < VECTOR_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + VECTOR_EXTENSIONS[i]);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while (it.hasNext()) {\n      cfsWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n   \n    return files;\n  }\n\n","sourceOld":"  final void createCompoundFile()\n          throws IOException {\n    CompoundFileWriter cfsWriter =\n            new CompoundFileWriter(directory, segment + \".cfs\");\n\n    ArrayList files =\n      new ArrayList(COMPOUND_EXTENSIONS.length + fieldInfos.size());    \n    \n    // Basic files\n    for (int i = 0; i < COMPOUND_EXTENSIONS.length; i++) {\n      files.add(segment + \".\" + COMPOUND_EXTENSIONS[i]);\n    }\n\n    // Field norm files\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        files.add(segment + \".f\" + i);\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (int i = 0; i < VECTOR_EXTENSIONS.length; i++) {\n        files.add(segment + \".\" + VECTOR_EXTENSIONS[i]);\n      }\n    }\n\n    // Now merge all added files\n    Iterator it = files.iterator();\n    while (it.hasNext()) {\n      cfsWriter.addFile((String) it.next());\n    }\n    \n    // Perform the merge\n    cfsWriter.close();\n        \n    // Now delete the source files\n    it = files.iterator();\n    while (it.hasNext()) {\n      directory.deleteFile((String) it.next());\n    }\n  }\n\n","bugFix":null,"bugIntro":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["1d53d1ed802ec0e72098251fb5781beff5f9ef01"],"79fc67d5cdece593cd3b3b6c7ef195ee2625522c":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"1d53d1ed802ec0e72098251fb5781beff5f9ef01":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7":["79fc67d5cdece593cd3b3b6c7ef195ee2625522c"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["79fc67d5cdece593cd3b3b6c7ef195ee2625522c"],"79fc67d5cdece593cd3b3b6c7ef195ee2625522c":["6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7"],"1d53d1ed802ec0e72098251fb5781beff5f9ef01":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"6263f219dcdfc6e861ecffaecf5e1e195f1aaaa7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["1d53d1ed802ec0e72098251fb5781beff5f9ef01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}