{"path":"solr/core/src/test/org/apache/solr/cloud/MissingSegmentRecoveryTest#setup().mjava","commits":[{"id":"b39b1b02e442aaf736cc87417e93552cbd8ef1da","date":1484786722,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MissingSegmentRecoveryTest#setup().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setup() throws SolrServerException, IOException {\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 2)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a collection with one shard and two replicas\", collection, clusterShape(1, 2));\n    cluster.getSolrClient().setDefaultCollection(collection);\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      docs.add(doc);\n    }\n\n    cluster.getSolrClient().add(docs);\n    cluster.getSolrClient().commit();\n    \n    DocCollection state = getCollectionState(collection);\n    leader = state.getLeader(\"shard1\");\n    replica = getRandomReplica(state.getSlice(\"shard1\"), (r) -> leader != r);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MissingSegmentRecoveryTest#setup().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setup() throws SolrServerException, IOException {\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 2)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a collection with one shard and two replicas\", collection, clusterShape(1, 2));\n    cluster.getSolrClient().setDefaultCollection(collection);\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      docs.add(doc);\n    }\n\n    cluster.getSolrClient().add(docs);\n    cluster.getSolrClient().commit();\n    \n    DocCollection state = getCollectionState(collection);\n    leader = state.getLeader(\"shard1\");\n    replica = getRandomReplica(state.getSlice(\"shard1\"), (r) -> leader != r);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MissingSegmentRecoveryTest#setup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MissingSegmentRecoveryTest#setup().mjava","sourceNew":"  @Before\n  public void setup() throws SolrServerException, IOException {\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a collection with one shard and two replicas\", collection, clusterShape(1, 2));\n    cluster.getSolrClient().setDefaultCollection(collection);\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      docs.add(doc);\n    }\n\n    cluster.getSolrClient().add(docs);\n    cluster.getSolrClient().commit();\n    \n    DocCollection state = getCollectionState(collection);\n    leader = state.getLeader(\"shard1\");\n    replica = getRandomReplica(state.getSlice(\"shard1\"), (r) -> leader != r);\n  }\n\n","sourceOld":"  @Before\n  public void setup() throws SolrServerException, IOException {\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 2)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected a collection with one shard and two replicas\", collection, clusterShape(1, 2));\n    cluster.getSolrClient().setDefaultCollection(collection);\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      docs.add(doc);\n    }\n\n    cluster.getSolrClient().add(docs);\n    cluster.getSolrClient().commit();\n    \n    DocCollection state = getCollectionState(collection);\n    leader = state.getLeader(\"shard1\");\n    replica = getRandomReplica(state.getSlice(\"shard1\"), (r) -> leader != r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b39b1b02e442aaf736cc87417e93552cbd8ef1da","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}