{"path":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#isInstrumentationAccessAllowed(ServletContext,HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"99b97f030e743d8dd4d7685202f71718d7e5af22","date":1548957620,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#isInstrumentationAccessAllowed(ServletContext,HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks the user has privileges to access to instrumentation servlets.\n   * \n   * If <code>hadoop.security.instrumentation.requires.admin</code> is set to FALSE\n   * (default value) it always returns TRUE.\n   *\n   * If <code>hadoop.security.instrumentation.requires.admin</code> is set to TRUE\n   * it will check that if the current user is in the admin ACLS. If the user is\n   * in the admin ACLs it returns TRUE, otherwise it returns FALSE.\n   *\n   * @param servletContext the servlet context.\n   * @param request the servlet request.\n   * @param response the servlet response.\n   * @return TRUE/FALSE based on the logic decribed above.\n   */\n  public static boolean isInstrumentationAccessAllowed(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf =\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    boolean access = true;\n    boolean adminAccess = conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_INSTRUMENTATION_REQUIRES_ADMIN,\n        false);\n    if (adminAccess) {\n      access = hasAdministratorAccess(servletContext, request, response);\n    }\n    return access;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b74c124d68d8e306d6ef09624f3cd053b8a2fd","date":1548981962,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#isInstrumentationAccessAllowed(ServletContext,HttpServletRequest,HttpServletResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Checks the user has privileges to access to instrumentation servlets.\n   * \n   * If <code>hadoop.security.instrumentation.requires.admin</code> is set to FALSE\n   * (default value) it always returns TRUE.\n   *\n   * If <code>hadoop.security.instrumentation.requires.admin</code> is set to TRUE\n   * it will check that if the current user is in the admin ACLS. If the user is\n   * in the admin ACLs it returns TRUE, otherwise it returns FALSE.\n   *\n   * @param servletContext the servlet context.\n   * @param request the servlet request.\n   * @param response the servlet response.\n   * @return TRUE/FALSE based on the logic decribed above.\n   */\n  public static boolean isInstrumentationAccessAllowed(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf =\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    boolean access = true;\n    boolean adminAccess = conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_INSTRUMENTATION_REQUIRES_ADMIN,\n        false);\n    if (adminAccess) {\n      access = hasAdministratorAccess(servletContext, request, response);\n    }\n    return access;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#isInstrumentationAccessAllowed(ServletContext,HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks the user has privileges to access to instrumentation servlets.\n   * \n   * If <code>hadoop.security.instrumentation.requires.admin</code> is set to FALSE\n   * (default value) it always returns TRUE.\n   *\n   * If <code>hadoop.security.instrumentation.requires.admin</code> is set to TRUE\n   * it will check that if the current user is in the admin ACLS. If the user is\n   * in the admin ACLs it returns TRUE, otherwise it returns FALSE.\n   *\n   * @param servletContext the servlet context.\n   * @param request the servlet request.\n   * @param response the servlet response.\n   * @return TRUE/FALSE based on the logic decribed above.\n   */\n  public static boolean isInstrumentationAccessAllowed(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf =\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    boolean access = true;\n    boolean adminAccess = conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_INSTRUMENTATION_REQUIRES_ADMIN,\n        false);\n    if (adminAccess) {\n      access = hasAdministratorAccess(servletContext, request, response);\n    }\n    return access;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44ca189138a5b6e1989d12ab992fab60e235ddc7"]},"commit2Childs":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}