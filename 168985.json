{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","commits":[{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","sourceNew":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : FieldType.LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","sourceOld":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : FieldType.LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","sourceNew":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","sourceOld":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : FieldType.LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","sourceNew":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","sourceOld":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : FieldType.LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","sourceNew":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","sourceOld":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : FieldType.LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b8410419cbbe9d8e1a96c918a951976bffe680","date":1471869553,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","sourceNew":null,"sourceOld":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","sourceNew":null,"sourceOld":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","sourceNew":null,"sourceOld":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertOpenRangeQuery(NumberType,String,int).mjava","sourceNew":null,"sourceOld":"  public void assertOpenRangeQuery(NumberType boundType, String operator, int expectedDocCount)\n      throws QueryNodeException, IOException {\n\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : FieldType.LegacyNumericType.values()) {\n      String boundStr = numberToString(getNumberType(boundType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(operator).append('\"').append(boundStr).append('\"').append(' ');\n    }\n    \n    String boundDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(boundType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(operator).append('\"').append(boundDateStr).append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["683242c67a3f6086bae8b1354748fcaa38edfbd5","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["403d05f7f8d69b65659157eff1bc1d2717f04c66","50b8410419cbbe9d8e1a96c918a951976bffe680"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["683242c67a3f6086bae8b1354748fcaa38edfbd5","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["403d05f7f8d69b65659157eff1bc1d2717f04c66","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["683242c67a3f6086bae8b1354748fcaa38edfbd5","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["0c82557b0a8c9d4012f208e5de912ae7500ea351","50b8410419cbbe9d8e1a96c918a951976bffe680","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}