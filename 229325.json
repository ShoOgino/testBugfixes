{"path":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","sourceNew":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","sourceOld":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","sourceNew":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      freq = 1;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","sourceOld":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","sourceNew":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      freq = 1;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","sourceOld":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","sourceNew":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      freq = 1;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","sourceOld":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#reset(Bits,PulsingTermState).mjava","sourceNew":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      freq = 1;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","sourceOld":"    public PulsingDocsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      //System.out.println(\"PR docsEnum termState=\" + termState + \" docFreq=\" + termState.docFreq);\n      assert termState.postingsSize != -1;\n\n      // Must make a copy of termState's byte[] so that if\n      // app does TermsEnum.next(), this DocsEnum is not affected\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      docID = -1;\n      accum = 0;\n      freq = 1;\n      payloadLength = 0;\n      this.liveDocs = liveDocs;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"02331260bb246364779cb6f04919ca47900d01bb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"02331260bb246364779cb6f04919ca47900d01bb":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}