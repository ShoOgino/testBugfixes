{"path":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean,boolean).mjava","commits":[{"id":"e7f18e513f9984ff8d5c94dbdf877c5e21922c92","date":1205874488,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    HitCollector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeLimitedCollector.TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitedCollector.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitedCollector.getResolution());\n    // b) Not too late  (this part might be problematic in a busy system, consider removing it if it raises false test failures. \n    assertTrue ( \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded),\n        timoutException.getTimeElapsed() < maxTime(multiThreaded));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71fa0eb6cfe3f0f7dbdc38a6644911b3e966dc2d","date":1217923087,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    HitCollector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeLimitedCollector.TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitedCollector.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitedCollector.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    HitCollector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeLimitedCollector.TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitedCollector.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitedCollector.getResolution());\n    // b) Not too late  (this part might be problematic in a busy system, consider removing it if it raises false test failures. \n    assertTrue ( \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded),\n        timoutException.getTimeElapsed() < maxTime(multiThreaded));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    HitCollector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeLimitedCollector.TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitedCollector.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitedCollector.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    HitCollector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeLimitedCollector.TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitedCollector.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitedCollector.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["71fa0eb6cfe3f0f7dbdc38a6644911b3e966dc2d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["71fa0eb6cfe3f0f7dbdc38a6644911b3e966dc2d","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"71fa0eb6cfe3f0f7dbdc38a6644911b3e966dc2d":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["71fa0eb6cfe3f0f7dbdc38a6644911b3e966dc2d"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71fa0eb6cfe3f0f7dbdc38a6644911b3e966dc2d":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}