{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","commits":[{"id":"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd","date":1340946597,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op,shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring( edx+1 ).trim();\n      if (body.length() > 0) {\n        Map<String,String> aa = parseMap(body);\n        args.setMin(readDouble(aa.remove(\"min\")) );\n        args.setMax(readDouble(aa.remove(\"max\")));\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"147a814c4b009f0a613263ddea933f231804c47b","date":1341285543,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setMin(readDouble(aa.remove(\"min\")));\n        args.setMax(readDouble(aa.remove(\"max\")));\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","sourceOld":"  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op,shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring( edx+1 ).trim();\n      if (body.length() > 0) {\n        Map<String,String> aa = parseMap(body);\n        args.setMin(readDouble(aa.remove(\"min\")) );\n        args.setMax(readDouble(aa.remove(\"max\")));\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setMin(readDouble(aa.remove(\"min\")));\n        args.setMax(readDouble(aa.remove(\"max\")));\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bd5ee5fdc220627fc7a1f6dafd1a737f14733fc","date":1345412522,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setMin(readDouble(aa.remove(\"min\")));\n        args.setMax(readDouble(aa.remove(\"max\")));\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67588aedbc6edbcce873bd0c3c7b4199fbf0987c","date":1345506207,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setMin(readDouble(aa.remove(\"min\")));\n        args.setMax(readDouble(aa.remove(\"max\")));\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setMin(readDouble(aa.remove(\"min\")));\n        args.setMax(readDouble(aa.remove(\"max\")));\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new IllegalArgumentException(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new IllegalArgumentException(\"missing body : \" + v, null);\n    }\n\n    Shape shape = new ShapeReadWriter(ctx).readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws InvalidSpatialArgument If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link SpatialContext#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws InvalidSpatialArgument, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new InvalidSpatialArgument(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new InvalidSpatialArgument(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new InvalidSpatialArgument(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":["9cb4b4651ba335fd70d51cf8448325add98f71c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e2410e27320f6aaba450cbf500d7822baf642f8","date":1347075066,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new IllegalArgumentException(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new IllegalArgumentException(\"missing body : \" + v, null);\n    }\n\n    Shape shape = new ShapeReadWriter(ctx).readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistErrPct(readDouble(aa.remove(\"distErrPct\")));\n        args.setDistErr(readDouble(aa.remove(\"distErr\")));\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distPec=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new IllegalArgumentException(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new IllegalArgumentException(\"missing body : \" + v, null);\n    }\n\n    Shape shape = new ShapeReadWriter(ctx).readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistPrecision(readDouble(aa.remove(\"distPrec\")));\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    return args;\n  }\n\n","bugFix":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd","147a814c4b009f0a613263ddea933f231804c47b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f044420e7c388b87aaec0a86dd41064c986a97b","date":1347851943,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new IllegalArgumentException(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new IllegalArgumentException(\"missing body : \" + v, null);\n    }\n\n    Shape shape = new ShapeReadWriter(ctx).readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistErrPct(readDouble(aa.remove(DIST_ERR_PCT)));\n        args.setDistErr(readDouble(aa.remove(DIST_ERR)));\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new IllegalArgumentException(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new IllegalArgumentException(\"missing body : \" + v, null);\n    }\n\n    Shape shape = new ShapeReadWriter(ctx).readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistErrPct(readDouble(aa.remove(\"distErrPct\")));\n        args.setDistErr(readDouble(aa.remove(\"distErr\")));\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9cb4b4651ba335fd70d51cf8448325add98f71c6","date":1348862946,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new IllegalArgumentException(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new IllegalArgumentException(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistErrPct(readDouble(aa.remove(DIST_ERR_PCT)));\n        args.setDistErr(readDouble(aa.remove(DIST_ERR)));\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new IllegalArgumentException(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new IllegalArgumentException(\"missing body : \" + v, null);\n    }\n\n    Shape shape = new ShapeReadWriter(ctx).readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistErrPct(readDouble(aa.remove(DIST_ERR_PCT)));\n        args.setDistErr(readDouble(aa.remove(DIST_ERR)));\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","bugFix":["da956410d7a790f567af4e7e94584fb0930212f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(ENVELOPE(-10,-8,22,20)) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException if the parameters don't make sense or an add-on parameter is unknown\n   * @throws ParseException If there is a problem parsing the string\n   * @throws InvalidShapeException When the coordinates are invalid for the shape\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws ParseException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new ParseException(\"missing parens: \" + v, -1);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new ParseException(\"missing body : \" + v, idx + 1);\n    }\n\n    Shape shape = parseShape(body, ctx);\n    SpatialArgs args = newSpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        readNameValuePairs(args, aa);\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(-10,20,-8,22) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException If there is a problem parsing the string.\n   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new IllegalArgumentException(\"missing parens: \" + v, null);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new IllegalArgumentException(\"missing body : \" + v, null);\n    }\n\n    Shape shape = ctx.readShape(body);\n    SpatialArgs args = new SpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        args.setDistErrPct(readDouble(aa.remove(DIST_ERR_PCT)));\n        args.setDistErr(readDouble(aa.remove(DIST_ERR)));\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa, null);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(ENVELOPE(-10,-8,22,20)) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException if the parameters don't make sense or an add-on parameter is unknown\n   * @throws ParseException If there is a problem parsing the string\n   * @throws InvalidShapeException When the coordinates are invalid for the shape\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws ParseException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new ParseException(\"missing parens: \" + v, -1);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new ParseException(\"missing body : \" + v, idx + 1);\n    }\n\n    Shape shape = parseShape(body, ctx);\n    SpatialArgs args = newSpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        readNameValuePairs(args, aa);\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(ENVELOPE(-10,-8,22,20)) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException if the parameters don't make sense or an add-on parameter is unknown\n   * @throws ParseException If there is a problem parsing the string\n   * @throws InvalidShapeException When the coordinates are invalid for the shape\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws ParseException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new ParseException(\"missing parens: \" + v, -1);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new ParseException(\"missing body : \" + v, idx + 1);\n    }\n\n    Shape shape = parseShape(body, ctx);\n    SpatialArgs args = newSpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        readNameValuePairs(args, aa);\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgsParser#parse(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses a string such as \"Intersects(ENVELOPE(-10,-8,22,20)) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException if the parameters don't make sense or an add-on parameter is unknown\n   * @throws ParseException If there is a problem parsing the string\n   * @throws InvalidShapeException When the coordinates are invalid for the shape\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws ParseException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new ParseException(\"missing parens: \" + v, -1);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new ParseException(\"missing body : \" + v, idx + 1);\n    }\n\n    Shape shape = parseShape(body, ctx);\n    SpatialArgs args = newSpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        readNameValuePairs(args, aa);\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","sourceOld":"  /**\n   * Parses a string such as \"Intersects(ENVELOPE(-10,-8,22,20)) distErrPct=0.025\".\n   *\n   * @param v   The string to parse. Mandatory.\n   * @param ctx The spatial context. Mandatory.\n   * @return Not null.\n   * @throws IllegalArgumentException if the parameters don't make sense or an add-on parameter is unknown\n   * @throws ParseException If there is a problem parsing the string\n   * @throws InvalidShapeException When the coordinates are invalid for the shape\n   */\n  public SpatialArgs parse(String v, SpatialContext ctx) throws ParseException, InvalidShapeException {\n    int idx = v.indexOf('(');\n    int edx = v.lastIndexOf(')');\n\n    if (idx < 0 || idx > edx) {\n      throw new ParseException(\"missing parens: \" + v, -1);\n    }\n\n    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());\n\n    String body = v.substring(idx + 1, edx).trim();\n    if (body.length() < 1) {\n      throw new ParseException(\"missing body : \" + v, idx + 1);\n    }\n\n    Shape shape = parseShape(body, ctx);\n    SpatialArgs args = newSpatialArgs(op, shape);\n\n    if (v.length() > (edx + 1)) {\n      body = v.substring(edx + 1).trim();\n      if (body.length() > 0) {\n        Map<String, String> aa = parseMap(body);\n        readNameValuePairs(args, aa);\n        if (!aa.isEmpty()) {\n          throw new IllegalArgumentException(\"unused parameters: \" + aa);\n        }\n      }\n    }\n    args.validate();\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["147a814c4b009f0a613263ddea933f231804c47b","8bd5ee5fdc220627fc7a1f6dafd1a737f14733fc"],"af2638813028b254a88b418ebeafb541afb49653":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","112d77ac8d3e10a362516ad834c9a11d35c94234"],"3f044420e7c388b87aaec0a86dd41064c986a97b":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"da956410d7a790f567af4e7e94584fb0930212f2":["8bd5ee5fdc220627fc7a1f6dafd1a737f14733fc"],"9cb4b4651ba335fd70d51cf8448325add98f71c6":["3f044420e7c388b87aaec0a86dd41064c986a97b"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"6e2410e27320f6aaba450cbf500d7822baf642f8":["da956410d7a790f567af4e7e94584fb0930212f2"],"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","147a814c4b009f0a613263ddea933f231804c47b"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["9cb4b4651ba335fd70d51cf8448325add98f71c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8bd5ee5fdc220627fc7a1f6dafd1a737f14733fc"],"8bd5ee5fdc220627fc7a1f6dafd1a737f14733fc":["147a814c4b009f0a613263ddea933f231804c47b"],"147a814c4b009f0a613263ddea933f231804c47b":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f044420e7c388b87aaec0a86dd41064c986a97b":["9cb4b4651ba335fd70d51cf8448325add98f71c6"],"da956410d7a790f567af4e7e94584fb0930212f2":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"9cb4b4651ba335fd70d51cf8448325add98f71c6":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"6e2410e27320f6aaba450cbf500d7822baf642f8":["3f044420e7c388b87aaec0a86dd41064c986a97b"],"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd":["147a814c4b009f0a613263ddea933f231804c47b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":[],"8bd5ee5fdc220627fc7a1f6dafd1a737f14733fc":["001b25b42373b22a52f399dbf072f1224632e8e6","da956410d7a790f567af4e7e94584fb0930212f2","67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"147a814c4b009f0a613263ddea933f231804c47b":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","8bd5ee5fdc220627fc7a1f6dafd1a737f14733fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}