{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","commits":[{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard1\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard1\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5088ce415a50eb8412f4942aeabe293e75c81e7","date":1504531555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard1\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"/dev/null","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"/dev/null","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH', nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH', nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH',  nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', put:'on-each' nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH', nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH',  nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', put:'on-each-node' nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH',  nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', put:'on-each' nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH',  nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', put:'on-each-node' nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH',  nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', put:'on-each-node' nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset : {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"    { 'replica': 0, 'shard': '#EACH',  nodeset : { sysprop.fs : '!ssd'},  type : TLOG }\" +\n          \"    { 'replica': 0, 'shard': '#EACH', put:'on-each-node' nodeset : {sysprop.fs : '!slowdisk'} ,  type : PULL }\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3, sysprop.fs: unknown },\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1, sysprop.fs: unknown}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(), op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\", \"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard1\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(), op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\", \"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"newColl\", \"shard2\"))\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG);\n    op = suggester.getSuggestion();\n    assertNull(\"No node should qualify for this\", op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7194afdfe9b45ca331c1cd5001cd9766688688b":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5088ce415a50eb8412f4942aeabe293e75c81e7"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["ee5183ac042828ef74f90f0874eaba7daeb409bd","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"a7194afdfe9b45ca331c1cd5001cd9766688688b":["9ba1b632c041956c93c41aa1143d16a567014891"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}