{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          state.termCount = metaDataUpto;\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode\");\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n            state.docFreq = freqReader.readVInt();\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n            }\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1bfe3cedf815c14939d170d53031c88eb5c444","date":1295896578,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          state.termCount = metaDataUpto;\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode\");\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n            state.docFreq = freqReader.readVInt();\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n            }\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          state.termCount = metaDataUpto;\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode\");\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n            state.docFreq = freqReader.readVInt();\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n            }\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          state.termCount = metaDataUpto;\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode\");\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n            state.docFreq = freqReader.readVInt();\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n            }\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          state.termCount = metaDataUpto;\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode\");\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n            state.docFreq = freqReader.readVInt();\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n            }\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          state.termCount = metaDataUpto;\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode\");\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n            state.docFreq = freqReader.readVInt();\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n            }\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb306ec66adbcdf2dc42488e5a441e1dbdeef894","date":1302774723,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (!fieldInfo.omitTermFreqAndPositions) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termCount + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termCount;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termCount = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termCount++;\n          }\n        //} else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","sourceOld":"      private void decodeMetaData() throws IOException {\n        //System.out.println(\"BTR.decodeMetadata mdUpto=\" + metaDataUpto + \" vs termCount=\" + state.termBlockOrd + \" state=\" + state);\n        if (!seekPending) {\n          // TODO: cutover to random-access API\n          // here.... really stupid that we have to decode N\n          // wasted term metadata just to get to the N+1th\n          // that we really need...\n\n          // lazily catch up on metadata decode:\n          final int limit = state.termBlockOrd;\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          state.termBlockOrd = metaDataUpto;\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n            //System.out.println(\"  decode mdUpto=\" + metaDataUpto);\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            state.docFreq = freqReader.readVInt();\n            //System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              state.totalTermFreq = state.docFreq + freqReader.readVLong();\n              //System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, state);\n            metaDataUpto++;\n            state.termBlockOrd++;\n          }\n        } else {\n          //System.out.println(\"  skip! seekPending\");\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["fb306ec66adbcdf2dc42488e5a441e1dbdeef894"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","fb306ec66adbcdf2dc42488e5a441e1dbdeef894"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eb46686a27187e42311e77666a2c7026f461ebc":["bde51b089eb7f86171eb3406e38a274743f9b7ac","fb306ec66adbcdf2dc42488e5a441e1dbdeef894"],"fb306ec66adbcdf2dc42488e5a441e1dbdeef894":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","fb306ec66adbcdf2dc42488e5a441e1dbdeef894"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["fd1bfe3cedf815c14939d170d53031c88eb5c444","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","fb306ec66adbcdf2dc42488e5a441e1dbdeef894","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","29ef99d61cda9641b6250bf9567329a6e65f901d"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"fb306ec66adbcdf2dc42488e5a441e1dbdeef894":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1add9ddc0005b07550d4350720aac22dc9886b3","fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1eb46686a27187e42311e77666a2c7026f461ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}