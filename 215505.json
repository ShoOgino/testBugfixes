{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tint n = 0;\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tint n = 0;\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ec63b41d741f5323f34c2820265518550b50dd","date":1108585215,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tint n = 0;\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f","date":1153001991,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4dbfaec317df80ca6f412ce1b94b337b581e17","date":1238022314,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList<String> fragTexts = new ArrayList<String>();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList<String> fragTexts = new ArrayList<String>();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList<String> fragTexts = new ArrayList<String>();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f":["e6ec63b41d741f5323f34c2820265518550b50dd"],"e6ec63b41d741f5323f34c2820265518550b50dd":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["e6ec63b41d741f5323f34c2820265518550b50dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"e6ec63b41d741f5323f34c2820265518550b50dd":["f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}