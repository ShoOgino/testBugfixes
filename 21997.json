{"path":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n    forward(user, request, response, filterChain);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n\n    final FilterChain ffc = filterChain;\n    final AtomicBoolean requestContinues = new AtomicBoolean(false);\n    forward(user, request, response, new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest req, ServletResponse res) throws IOException, ServletException {\n        ffc.doFilter(req, res);\n        requestContinues.set(true);\n      }\n    });\n    return requestContinues.get();\n  }\n\n","sourceOld":"  @Override\n  public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n    forward(user, request, response, filterChain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n\n    final FilterChain ffc = filterChain;\n    final AtomicBoolean requestContinues = new AtomicBoolean(false);\n    forward(user, request, response, new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest req, ServletResponse res) throws IOException, ServletException {\n        ffc.doFilter(req, res);\n        requestContinues.set(true);\n      }\n    });\n    return requestContinues.get();\n  }\n\n","sourceOld":"  @Override\n  public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n    forward(user, request, response, filterChain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n\n    final FilterChain ffc = filterChain;\n    final AtomicBoolean requestContinues = new AtomicBoolean(false);\n    forward(user, request, response, new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest req, ServletResponse res) throws IOException, ServletException {\n        ffc.doFilter(req, res);\n        requestContinues.set(true);\n      }\n    });\n    return requestContinues.get();\n  }\n\n","sourceOld":"  @Override\n  public void doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n    forward(user, request, response, filterChain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n\n    final AtomicBoolean requestContinues = new AtomicBoolean(false);\n    forward(user, request, response, (req, res) -> {\n      filterChain.doFilter(req, res);\n      requestContinues.set(true);\n    });\n    return requestContinues.get();\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n\n    final FilterChain ffc = filterChain;\n    final AtomicBoolean requestContinues = new AtomicBoolean(false);\n    forward(user, request, response, new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest req, ServletResponse res) throws IOException, ServletException {\n        ffc.doFilter(req, res);\n        requestContinues.set(true);\n      }\n    });\n    return requestContinues.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20be168d828ac40d262f85364d02f15b491dd88b":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b3a34dae868734612eb6329aa0ef754f30bd2036","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["b3a34dae868734612eb6329aa0ef754f30bd2036","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b436ffee26b67f87efef6a3bab24697332b6b2"]},"commit2Childs":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"20be168d828ac40d262f85364d02f15b491dd88b":["23b436ffee26b67f87efef6a3bab24697332b6b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}