{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#currentLevelMap(String[],Map[String,Object],boolean).mjava","commits":[{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#currentLevelMap(String[],Map[String,Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String,Object> currentLevelMap(String[] keyParts,\n      Map<String,Object> currentLevel, boolean includeLastLevel) {\n    int j = includeLastLevel ? keyParts.length : keyParts.length - 1;\n    for (int i = 0; i < j; i++) {\n      Object o = currentLevel.get(keyParts[i]);\n      if (o == null) {\n        Map<String,Object> nextLevel = new HashMap<String,Object>();\n        currentLevel.put(keyParts[i], nextLevel);\n        currentLevel = nextLevel;\n      } else if (o instanceof Map<?,?>) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> nextLevel = (Map<String,Object>) o;\n        currentLevel = nextLevel;\n      } else {\n        throw new AssertionError(\n            \"Non-leaf nodes should be of type java.util.Map\");\n      }\n    }\n    return currentLevel;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#currentLevelMap(String[],Map[String,Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String,Object> currentLevelMap(String[] keyParts,\n      Map<String,Object> currentLevel, boolean includeLastLevel) {\n    int j = includeLastLevel ? keyParts.length : keyParts.length - 1;\n    for (int i = 0; i < j; i++) {\n      Object o = currentLevel.get(keyParts[i]);\n      if (o == null) {\n        Map<String,Object> nextLevel = new HashMap<String,Object>();\n        currentLevel.put(keyParts[i], nextLevel);\n        currentLevel = nextLevel;\n      } else if (o instanceof Map<?,?>) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> nextLevel = (Map<String,Object>) o;\n        currentLevel = nextLevel;\n      } else {\n        throw new AssertionError(\n            \"Non-leaf nodes should be of type java.util.Map\");\n      }\n    }\n    return currentLevel;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba58b751368f9b74be72216b17abfb47ecb18588","date":1363023437,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#currentLevelMap(String[],Map[String,Object],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#currentLevelMap(String[],Map[String,Object],boolean).mjava","sourceNew":"  private CurrentLevel currentLevelMap(String[] keyParts,\n      Map<String,Object> currentLevel, boolean includeLastLevel) {\n    int j = includeLastLevel ? keyParts.length : keyParts.length - 1;\n    for (int i = 0; i < j; i++) {\n      Object o = currentLevel.get(keyParts[i]);\n      if (o == null) {\n        if(i == j-1) {\n          Map<String,Object> nextLevel = new HashMap<String,Object>();\n          currentLevel.put(keyParts[i], nextLevel);\n          currentLevel = nextLevel;\n        } else {\n          return new CurrentLevel(i, currentLevel);\n        }\n      } else if (o instanceof Map<?,?>) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> nextLevel = (Map<String,Object>) o;\n        currentLevel = nextLevel;\n      } else {\n        throw new AssertionError(\n            \"Non-leaf nodes should be of type java.util.Map\");\n      }\n    }\n    return new CurrentLevel(j-1, currentLevel);\n  }\n\n","sourceOld":"  private Map<String,Object> currentLevelMap(String[] keyParts,\n      Map<String,Object> currentLevel, boolean includeLastLevel) {\n    int j = includeLastLevel ? keyParts.length : keyParts.length - 1;\n    for (int i = 0; i < j; i++) {\n      Object o = currentLevel.get(keyParts[i]);\n      if (o == null) {\n        Map<String,Object> nextLevel = new HashMap<String,Object>();\n        currentLevel.put(keyParts[i], nextLevel);\n        currentLevel = nextLevel;\n      } else if (o instanceof Map<?,?>) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> nextLevel = (Map<String,Object>) o;\n        currentLevel = nextLevel;\n      } else {\n        throw new AssertionError(\n            \"Non-leaf nodes should be of type java.util.Map\");\n      }\n    }\n    return currentLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#currentLevelMap(String[],Map[String,Object],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#currentLevelMap(String[],Map[String,Object],boolean).mjava","sourceNew":"  private CurrentLevel currentLevelMap(String[] keyParts,\n      Map<String,Object> currentLevel, boolean includeLastLevel) {\n    int j = includeLastLevel ? keyParts.length : keyParts.length - 1;\n    for (int i = 0; i < j; i++) {\n      Object o = currentLevel.get(keyParts[i]);\n      if (o == null) {\n        if(i == j-1) {\n          Map<String,Object> nextLevel = new HashMap<>();\n          currentLevel.put(keyParts[i], nextLevel);\n          currentLevel = nextLevel;\n        } else {\n          return new CurrentLevel(i, currentLevel);\n        }\n      } else if (o instanceof Map<?,?>) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> nextLevel = (Map<String,Object>) o;\n        currentLevel = nextLevel;\n      } else {\n        throw new AssertionError(\n            \"Non-leaf nodes should be of type java.util.Map\");\n      }\n    }\n    return new CurrentLevel(j-1, currentLevel);\n  }\n\n","sourceOld":"  private CurrentLevel currentLevelMap(String[] keyParts,\n      Map<String,Object> currentLevel, boolean includeLastLevel) {\n    int j = includeLastLevel ? keyParts.length : keyParts.length - 1;\n    for (int i = 0; i < j; i++) {\n      Object o = currentLevel.get(keyParts[i]);\n      if (o == null) {\n        if(i == j-1) {\n          Map<String,Object> nextLevel = new HashMap<String,Object>();\n          currentLevel.put(keyParts[i], nextLevel);\n          currentLevel = nextLevel;\n        } else {\n          return new CurrentLevel(i, currentLevel);\n        }\n      } else if (o instanceof Map<?,?>) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> nextLevel = (Map<String,Object>) o;\n        currentLevel = nextLevel;\n      } else {\n        throw new AssertionError(\n            \"Non-leaf nodes should be of type java.util.Map\");\n      }\n    }\n    return new CurrentLevel(j-1, currentLevel);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/VariableResolver#currentLevelMap(String[],Map[String,Object],boolean).mjava","sourceNew":null,"sourceOld":"  private CurrentLevel currentLevelMap(String[] keyParts,\n      Map<String,Object> currentLevel, boolean includeLastLevel) {\n    int j = includeLastLevel ? keyParts.length : keyParts.length - 1;\n    for (int i = 0; i < j; i++) {\n      Object o = currentLevel.get(keyParts[i]);\n      if (o == null) {\n        if(i == j-1) {\n          Map<String,Object> nextLevel = new HashMap<>();\n          currentLevel.put(keyParts[i], nextLevel);\n          currentLevel = nextLevel;\n        } else {\n          return new CurrentLevel(i, currentLevel);\n        }\n      } else if (o instanceof Map<?,?>) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> nextLevel = (Map<String,Object>) o;\n        currentLevel = nextLevel;\n      } else {\n        throw new AssertionError(\n            \"Non-leaf nodes should be of type java.util.Map\");\n      }\n    }\n    return new CurrentLevel(j-1, currentLevel);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba58b751368f9b74be72216b17abfb47ecb18588":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ba58b751368f9b74be72216b17abfb47ecb18588"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"ba58b751368f9b74be72216b17abfb47ecb18588":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["ba58b751368f9b74be72216b17abfb47ecb18588","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}