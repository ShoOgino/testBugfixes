{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","commits":[{"id":"32d5034e9ef94910c8cd2b01cc3c2be222453d0c","date":1342825337,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"/dev/null","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938e4fd7b1e4b34da1650edba7471764bbfaefde","date":1344033248,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc2388a5005de25370273411bc713d0ff722805","date":1345719157,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect, true);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":["32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"bugIntro":["b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect, true);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect, true);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect, true);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect, true);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect, true);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect, true);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02","date":1360357765,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    boolean alreadyCreatedZkReader = false;\n    try {\n      alreadyCreatedZkReader = publishAndWaitForDownStates(alreadyCreatedZkReader);\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!alreadyCreatedZkReader) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect, true);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"474a065e1bf22f3551c2fd2c9e18bde479e5c3c5","date":1361033993,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    boolean alreadyCreatedZkReader = false;\n    try {\n      alreadyCreatedZkReader = publishAndWaitForDownStates(alreadyCreatedZkReader);\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!alreadyCreatedZkReader) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["18e308fd752ba41936ed33164835d1f7600652bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    boolean alreadyCreatedZkReader = false;\n    try {\n      alreadyCreatedZkReader = publishAndWaitForDownStates(alreadyCreatedZkReader);\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!alreadyCreatedZkReader) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader,this);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader,this);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cbf075846889e7dab27a7ad7f0b62225ba66cf","date":1397251910,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader, this);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader,this);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"edd798f7fee521c28277d3123deeecdf8927a26b","date":1407429276,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, adminPath, zkStateReader, this);\n        ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      overseerElector = new LeaderElector(zkClient);\n      this.overseer = new Overseer(shardHandler, adminPath, zkStateReader, this);\n      ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, false);\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            adminPath, zkStateReader, this, cc.getConfig());\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, adminPath, zkStateReader, this);\n        ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18e308fd752ba41936ed33164835d1f7600652bb","date":1414594609,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            adminPath, zkStateReader, this, cc.getConfig());\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      if (zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, true)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            adminPath, zkStateReader, this, cc.getConfig());\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":["474a065e1bf22f3551c2fd2c9e18bde479e5c3c5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cc.getConfig());\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      String adminPath;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      adminPath = cc.getAdminPath();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            adminPath, zkStateReader, this, cc.getConfig());\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cc.getConfig());\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n\n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n\n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat!= null && stat.getNumChildren()>0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n      \n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cc.getConfig());\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n      \n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e78c35bca3e32dfc7a695136fa2b5de1ae135c22","date":1441118240,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n\n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n\n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CoreContainer.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":["e15199583d3635cb940942caed05132dd6c4c7c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05b08348be52bb628b319cfd65cd2691a6edf8be","date":1456253944,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n\n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n\n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      boolean createdWatchesAndUpdated = false;\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        createdWatchesAndUpdated = true;\n        publishAndWaitForDownStates();\n      }\n\n      createClusterZkNodes(zkClient);\n\n      createEphemeralLiveNode();\n\n      ShardHandler shardHandler;\n      UpdateShardHandler updateShardHandler;\n      shardHandler = cc.getShardHandlerFactory().getShardHandler();\n      updateShardHandler = cc.getUpdateShardHandler();\n\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(shardHandler, updateShardHandler,\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      if (!createdWatchesAndUpdated) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10bdc820112adba1fe274124a0b60b7bca24d9d2","date":1456780149,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87fd9d0d02614519415a01c83417fd750882a42b","date":1467191999,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer((HttpShardHandler) cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer(cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":["05b08348be52bb628b319cfd65cd2691a6edf8be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c560208bc8842ee884b76b08784ccb132f05b48","date":1585344697,"type":5,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init() {\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer((HttpShardHandler) cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer((HttpShardHandler) cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["d6f074e73200c07d54f242d3880a8da5a35ff97b","adc2388a5005de25370273411bc713d0ff722805"],"af2638813028b254a88b418ebeafb541afb49653":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","10bdc820112adba1fe274124a0b60b7bca24d9d2"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["87fd9d0d02614519415a01c83417fd750882a42b","664ff2b928393480d9655010aa700656b0fcade0"],"adc2388a5005de25370273411bc713d0ff722805":["938e4fd7b1e4b34da1650edba7471764bbfaefde"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["560c18d71dad43d675158783c3840f8c80d6d39c"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["18e308fd752ba41936ed33164835d1f7600652bb"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22","a5296efc4b319f5647b606629c093a94b23692c6"],"0ad30c6a479e764150a3316e57263319775f1df2":["af2638813028b254a88b418ebeafb541afb49653","115923bc88e5b1dc4bef049b1ded8486723052ed"],"05b08348be52bb628b319cfd65cd2691a6edf8be":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"e15199583d3635cb940942caed05132dd6c4c7c6":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["af2638813028b254a88b418ebeafb541afb49653","0ad30c6a479e764150a3316e57263319775f1df2"],"18e308fd752ba41936ed33164835d1f7600652bb":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","fbcfc050b9f253136eaa5950b57248b2109eac11"],"edd798f7fee521c28277d3123deeecdf8927a26b":["35cbf075846889e7dab27a7ad7f0b62225ba66cf"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02","474a065e1bf22f3551c2fd2c9e18bde479e5c3c5"],"5b15576cafd8b5d06857055c28f26912321937e3":["474a065e1bf22f3551c2fd2c9e18bde479e5c3c5"],"d82832af39f94dbb58a3130fd216ff1d49435589":["a6378064655e76cd7b908b1cab4ce425b384b508","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["a6378064655e76cd7b908b1cab4ce425b384b508"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"a5296efc4b319f5647b606629c093a94b23692c6":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22","05b08348be52bb628b319cfd65cd2691a6edf8be"],"560c18d71dad43d675158783c3840f8c80d6d39c":["87fd9d0d02614519415a01c83417fd750882a42b","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"32d5034e9ef94910c8cd2b01cc3c2be222453d0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10bdc820112adba1fe274124a0b60b7bca24d9d2":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"664ff2b928393480d9655010aa700656b0fcade0":["87fd9d0d02614519415a01c83417fd750882a42b","c32a8448145a74a8902798f2e63e322827757ff2"],"5eb2511ababf862ea11e10761c70ee560cd84510":["474a065e1bf22f3551c2fd2c9e18bde479e5c3c5","5b15576cafd8b5d06857055c28f26912321937e3"],"1c560208bc8842ee884b76b08784ccb132f05b48":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"474a065e1bf22f3551c2fd2c9e18bde479e5c3c5":["b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a6378064655e76cd7b908b1cab4ce425b384b508","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","87fd9d0d02614519415a01c83417fd750882a42b"],"35cbf075846889e7dab27a7ad7f0b62225ba66cf":["5b15576cafd8b5d06857055c28f26912321937e3"],"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a6378064655e76cd7b908b1cab4ce425b384b508":["adc2388a5005de25370273411bc713d0ff722805"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["af2638813028b254a88b418ebeafb541afb49653"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["edd798f7fee521c28277d3123deeecdf8927a26b"],"87fd9d0d02614519415a01c83417fd750882a42b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"c32a8448145a74a8902798f2e63e322827757ff2":["87fd9d0d02614519415a01c83417fd750882a42b"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["e15199583d3635cb940942caed05132dd6c4c7c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c560208bc8842ee884b76b08784ccb132f05b48"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["7875fce026a0a335830cfc75abc3eb009eff9a73"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"af2638813028b254a88b418ebeafb541afb49653":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","115923bc88e5b1dc4bef049b1ded8486723052ed"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"adc2388a5005de25370273411bc713d0ff722805":["001b25b42373b22a52f399dbf072f1224632e8e6","a6378064655e76cd7b908b1cab4ce425b384b508"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1c560208bc8842ee884b76b08784ccb132f05b48"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["af2638813028b254a88b418ebeafb541afb49653","10bdc820112adba1fe274124a0b60b7bca24d9d2"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"05b08348be52bb628b319cfd65cd2691a6edf8be":["a5296efc4b319f5647b606629c093a94b23692c6"],"e15199583d3635cb940942caed05132dd6c4c7c6":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["87fd9d0d02614519415a01c83417fd750882a42b"],"18e308fd752ba41936ed33164835d1f7600652bb":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"edd798f7fee521c28277d3123deeecdf8927a26b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"5b15576cafd8b5d06857055c28f26912321937e3":["5eb2511ababf862ea11e10761c70ee560cd84510","35cbf075846889e7dab27a7ad7f0b62225ba66cf"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","05b08348be52bb628b319cfd65cd2691a6edf8be","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"560c18d71dad43d675158783c3840f8c80d6d39c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"10bdc820112adba1fe274124a0b60b7bca24d9d2":["af2638813028b254a88b418ebeafb541afb49653"],"32d5034e9ef94910c8cd2b01cc3c2be222453d0c":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"664ff2b928393480d9655010aa700656b0fcade0":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"474a065e1bf22f3551c2fd2c9e18bde479e5c3c5":["95303ff3749680c743b9425f9cf99e6e4065e8a8","5b15576cafd8b5d06857055c28f26912321937e3","5eb2511ababf862ea11e10761c70ee560cd84510"],"1c560208bc8842ee884b76b08784ccb132f05b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["adc2388a5005de25370273411bc713d0ff722805","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"35cbf075846889e7dab27a7ad7f0b62225ba66cf":["edd798f7fee521c28277d3123deeecdf8927a26b"],"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02":["95303ff3749680c743b9425f9cf99e6e4065e8a8","474a065e1bf22f3551c2fd2c9e18bde479e5c3c5"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d82832af39f94dbb58a3130fd216ff1d49435589","88f39c3b3a16aebc5a91335341c7ad5b560e2277","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["18e308fd752ba41936ed33164835d1f7600652bb"],"87fd9d0d02614519415a01c83417fd750882a42b":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","664ff2b928393480d9655010aa700656b0fcade0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c32a8448145a74a8902798f2e63e322827757ff2"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["001b25b42373b22a52f399dbf072f1224632e8e6"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","95303ff3749680c743b9425f9cf99e6e4065e8a8","d82832af39f94dbb58a3130fd216ff1d49435589","5eb2511ababf862ea11e10761c70ee560cd84510","db4fdbf3d262768eabc027cd8321edca0cd11fa8","8fd5be977c105554c6a7b68afcdbc511439723ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}