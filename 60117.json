{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, DimensionalValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, DimensionalValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: sameValuePct=\" + sameValuePct);\n    }\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: sameValuePct=\" + sameValuePct);\n    }\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbf46f22bc7fee423e8a0b7e50148c91b57c9d6e","date":1547471565,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: sameValuePct=\" + sameValuePct);\n    }\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    if (VERBOSE) {\n      System.out.println(\"Picking values: \" + numValues);\n    }\n    for (int ord = 0; ord < numValues; ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: sameValuePct=\" + sameValuePct);\n    }\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_INDEX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: sameValuePct=\" + sameValuePct);\n    }\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    if (VERBOSE) {\n      System.out.println(\"Picking values: \" + numValues);\n    }\n    for (int ord = 0; ord < numValues; ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: sameValuePct=\" + sameValuePct);\n    }\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    if (VERBOSE) {\n      System.out.println(\"Picking values: \" + numValues);\n    }\n    for (int ord = 0; ord < numValues; ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["dbf46f22bc7fee423e8a0b7e50148c91b57c9d6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"dbf46f22bc7fee423e8a0b7e50148c91b57c9d6e":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["9856095f7afb5a607bf5e65077615ed91273508c","dbf46f22bc7fee423e8a0b7e50148c91b57c9d6e"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"dbf46f22bc7fee423e8a0b7e50148c91b57c9d6e":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}