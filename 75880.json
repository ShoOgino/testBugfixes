{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegeneratePath.PathSegment#pathCenterDistance(PlanetModel,DistanceStyle,double,double,double).mjava","commits":[{"id":"f304c65d7091741e7b2448045a0b4083da0f441b","date":1505411441,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegeneratePath.PathSegment#pathCenterDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Compute path center distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric, or Double.POSITIVE_INFINITY if outside this segment\n     */\n    public double pathCenterDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      // First, if this point is outside the endplanes of the segment, return POSITIVE_INFINITY.\n      if (!startCutoffPlane.isWithin(x, y, z) || !endCutoffPlane.isWithin(x, y, z)) {\n        return Double.POSITIVE_INFINITY;\n      }\n      // (1) Compute normalizedPerpPlane.  If degenerate, then there is no such plane, which means that the point given\n      // is insufficient to distinguish between a family of such planes.  This can happen only if the point is one of the\n      // \"poles\", imagining the normalized plane to be the \"equator\".  In that case, the distance returned should be zero.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x, y, z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegeneratePath.PathSegment#pathCenterDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Compute path center distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric, or Double.POSITIVE_INFINITY if outside this segment\n     */\n    public double pathCenterDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      // First, if this point is outside the endplanes of the segment, return POSITIVE_INFINITY.\n      if (!startCutoffPlane.isWithin(x, y, z) || !endCutoffPlane.isWithin(x, y, z)) {\n        return Double.POSITIVE_INFINITY;\n      }\n      // (1) Compute normalizedPerpPlane.  If degenerate, then there is no such plane, which means that the point given\n      // is insufficient to distinguish between a family of such planes.  This can happen only if the point is one of the\n      // \"poles\", imagining the normalized plane to be the \"equator\".  In that case, the distance returned should be zero.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x, y, z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f304c65d7091741e7b2448045a0b4083da0f441b"],"f304c65d7091741e7b2448045a0b4083da0f441b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f304c65d7091741e7b2448045a0b4083da0f441b"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"f304c65d7091741e7b2448045a0b4083da0f441b":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f304c65d7091741e7b2448045a0b4083da0f441b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}