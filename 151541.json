{"path":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(IndexInput,String,int,int).mjava","commits":[{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(IndexInput,String,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(IndexInput,String,int).mjava","sourceNew":"  public static int checkHeader(IndexInput in, String codec, int minVersion, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(null, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(null, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":"  public static int checkHeader(IndexInput in, String codec, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion > maxVersion) {\n      throw new CorruptIndexException(\"version \" + actualVersion + \" is too new (expected <= version \" + maxVersion + \")\");\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(IndexInput,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static int checkHeader(IndexInput in, String codec, int minVersion, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(null, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(null, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","date":1301994806,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(DataInput,String,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(IndexInput,String,int,int).mjava","sourceNew":"  public static int checkHeader(DataInput in, String codec, int minVersion, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(null, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(null, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":"  public static int checkHeader(IndexInput in, String codec, int minVersion, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(null, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(null, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(DataInput,String,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(IndexInput,String,int,int).mjava","sourceNew":"  public static int checkHeader(DataInput in, String codec, int minVersion, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(null, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(null, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":"  public static int checkHeader(IndexInput in, String codec, int minVersion, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(null, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(null, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(IndexInput,String,int,int).mjava","sourceNew":null,"sourceOld":"  public static int checkHeader(IndexInput in, String codec, int minVersion, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(null, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(null, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#checkHeader(IndexInput,String,int,int).mjava","sourceNew":null,"sourceOld":"  public static int checkHeader(IndexInput in, String codec, int minVersion, int maxVersion)\n    throws IOException {\n\n    // Safety to guard against reading a bogus string:\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC);\n    }\n\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec);\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(null, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(null, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3776dccca01c11e7046323cfad46a3b4a471233":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"962d04139994fce5193143ef35615499a9a96d78":["5f4e87790277826a2aea119328600dfb07761f32","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"]},"commit2Childs":{"a3776dccca01c11e7046323cfad46a3b4a471233":[],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5f4e87790277826a2aea119328600dfb07761f32"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["a3776dccca01c11e7046323cfad46a3b4a471233","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","135621f3a0670a9394eb563224a3b76cc4dddc0f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}