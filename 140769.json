{"path":"solr/core/src/test/org/apache/solr/internal/csv/ExtendedBufferedReaderTest#testReadLine().mjava","commits":[{"id":"a62060bf935e54f2cf73861fbc773508ab49aeb9","date":1333411307,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/ExtendedBufferedReaderTest#testReadLine().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadLine() throws Exception {\n    ExtendedBufferedReader br = getEBR(\"\");\n    assertTrue(br.readLine() == null);\n    \n    br = getEBR(\"\\n\");\n    assertTrue(br.readLine().equals(\"\"));\n    assertTrue(br.readLine() == null);\n    \n    br = getEBR(\"foo\\n\\nhello\");\n    assertEquals(0, br.getLineNumber());\n    assertTrue(br.readLine().equals(\"foo\"));\n    assertEquals(1, br.getLineNumber());\n    assertTrue(br.readLine().equals(\"\"));\n    assertEquals(2, br.getLineNumber());\n    assertTrue(br.readLine().equals(\"hello\"));\n    assertEquals(3, br.getLineNumber());\n    assertTrue(br.readLine() == null);\n    assertEquals(3, br.getLineNumber());\n    \n    br = getEBR(\"foo\\n\\nhello\");\n    assertEquals('f', br.read());\n    assertEquals('o', br.lookAhead());\n    assertTrue(br.readLine().equals(\"oo\"));\n    assertEquals(1, br.getLineNumber());\n    assertEquals('\\n', br.lookAhead());\n    assertTrue(br.readLine().equals(\"\"));\n    assertEquals(2, br.getLineNumber());\n    assertEquals('h', br.lookAhead());\n    assertTrue(br.readLine().equals(\"hello\"));\n    assertTrue(br.readLine() == null);\n    assertEquals(3, br.getLineNumber());\n    \n \n    br = getEBR(\"foo\\rbaar\\r\\nfoo\");\n    assertTrue(br.readLine().equals(\"foo\"));\n    assertEquals('b', br.lookAhead());\n    assertTrue(br.readLine().equals(\"baar\"));\n    assertEquals('f', br.lookAhead());\n    assertTrue(br.readLine().equals(\"foo\"));\n    assertTrue(br.readLine() == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a62060bf935e54f2cf73861fbc773508ab49aeb9"]},"commit2Childs":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}