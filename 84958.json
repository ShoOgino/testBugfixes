{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#twoPhaseIterator().mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#twoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    DocIdSetIterator approximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert ensureConsistent();\n\n        // Move 'lead' iterators back to the tail\n        pushBackLeads(target);\n\n        // Advance 'head' as well\n        advanceHead(target);\n\n        // Pop the new 'lead' from the 'head'\n        setDocAndFreq();\n\n        assert ensureConsistent();\n\n        // Advance to the next possible match\n        return doNextCandidate();\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n    };\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        while (leadMaxScore < minCompetitiveScore) {\n          if (leadMaxScore + tailMaxScore >= minCompetitiveScore) {\n            // a match on doc is still possible, try to\n            // advance scorers from the tail\n            advanceTail();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        // maximum number of scorer that matches() might advance\n        return tail.length;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#twoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    DocIdSetIterator approximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert ensureConsistent();\n\n        // Move 'lead' iterators back to the tail\n        pushBackLeads(target);\n\n        // Advance 'head' as well\n        advanceHead(target);\n\n        // Pop the new 'lead' from the 'head'\n        setDocAndFreq();\n\n        assert ensureConsistent();\n\n        // Advance to the next possible match\n        return doNextCandidate();\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n    };\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        while (leadMaxScore < minCompetitiveScore) {\n          if (leadMaxScore + tailMaxScore >= minCompetitiveScore) {\n            // a match on doc is still possible, try to\n            // advance scorers from the tail\n            advanceTail();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        // maximum number of scorer that matches() might advance\n        return tail.length;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#twoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    DocIdSetIterator approximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert ensureConsistent();\n\n        // Move 'lead' iterators back to the tail\n        pushBackLeads(target);\n\n        // Advance 'head' as well\n        advanceHead(target);\n\n        // Pop the new 'lead' from 'head'\n        moveToNextCandidate(target);\n\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n\n        assert ensureConsistent();\n\n        // Advance to the next possible match\n        return doNextCompetitiveCandidate();\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n    };\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        while (leadMaxScore < minCompetitiveScore) {\n          if (leadMaxScore + tailMaxScore >= minCompetitiveScore) {\n            // a match on doc is still possible, try to\n            // advance scorers from the tail\n            advanceTail();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        // maximum number of scorer that matches() might advance\n        return tail.length;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    DocIdSetIterator approximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert ensureConsistent();\n\n        // Move 'lead' iterators back to the tail\n        pushBackLeads(target);\n\n        // Advance 'head' as well\n        advanceHead(target);\n\n        // Pop the new 'lead' from the 'head'\n        setDocAndFreq();\n\n        assert ensureConsistent();\n\n        // Advance to the next possible match\n        return doNextCandidate();\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n    };\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        while (leadMaxScore < minCompetitiveScore) {\n          if (leadMaxScore + tailMaxScore >= minCompetitiveScore) {\n            // a match on doc is still possible, try to\n            // advance scorers from the tail\n            advanceTail();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        // maximum number of scorer that matches() might advance\n        return tail.length;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["523cc6563c99a55527ef7993efc5413c6648852d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}