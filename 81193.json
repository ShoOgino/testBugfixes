{"path":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    synchronized (cache) {  // check cache\n      DocIdSet cached = (DocIdSet) cache.get(reader);\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet docIdSet = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, docIdSet);\n    }\n\n    return docIdSet;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1dab6a073497f68cd618ed4a55d491e65dd0c569"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1dab6a073497f68cd618ed4a55d491e65dd0c569","date":1227302226,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    Object cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      if (cached instanceof DocIdSet)\n        return (DocIdSet) cached;\n      else\n        return new DocIdBitSet((BitSet) cached);\n    }\n\n    final DocIdSet docIdSet = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, docIdSet);\n    }\n\n    return docIdSet;\n    \n  }\n\n","sourceOld":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    synchronized (cache) {  // check cache\n      DocIdSet cached = (DocIdSet) cache.get(reader);\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet docIdSet = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, docIdSet);\n    }\n\n    return docIdSet;\n    \n  }\n\n","bugFix":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cef18fc3088da45bfa252a5c18e2952d7e2f2dc0","date":1228157445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    Object cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      if (cached instanceof DocIdSet)\n        return (DocIdSet) cached;\n      else\n        return new DocIdBitSet((BitSet) cached);\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, docIdSet);\n    }\n\n    return docIdSet;\n    \n  }\n\n","sourceOld":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    Object cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      if (cached instanceof DocIdSet)\n        return (DocIdSet) cached;\n      else\n        return new DocIdBitSet((BitSet) cached);\n    }\n\n    final DocIdSet docIdSet = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, docIdSet);\n    }\n\n    return docIdSet;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d6c98c690b593cea727f68742684c979ead1a0a","date":1248688202,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    Object cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      if (cached instanceof DocIdSet)\n        return (DocIdSet) cached;\n      else\n        return new DocIdBitSet((BitSet) cached);\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      synchronized (cache) {  // update cache\n        cache.put(reader, docIdSet);\n      }\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    Object cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      if (cached instanceof DocIdSet)\n        return (DocIdSet) cached;\n      else\n        return new DocIdBitSet((BitSet) cached);\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, docIdSet);\n    }\n\n    return docIdSet;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bd365049a486e1ddff4a17c8aaab9b002969a0","date":1254951825,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader, DocIdSet>();\n    }\n\n    DocIdSet cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      return (DocIdSet) cached;\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      synchronized (cache) {  // update cache\n        cache.put(reader, docIdSet);\n      }\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    Object cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      if (cached instanceof DocIdSet)\n        return (DocIdSet) cached;\n      else\n        return new DocIdBitSet((BitSet) cached);\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      synchronized (cache) {  // update cache\n        cache.put(reader, docIdSet);\n      }\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader, DocIdSet>();\n    }\n\n    DocIdSet cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      return cached;\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      synchronized (cache) {  // update cache\n        cache.put(reader, docIdSet);\n      }\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader, DocIdSet>();\n    }\n\n    DocIdSet cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      return (DocIdSet) cached;\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      synchronized (cache) {  // update cache\n        cache.put(reader, docIdSet);\n      }\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader, DocIdSet>();\n    }\n\n    DocIdSet cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      return cached;\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      synchronized (cache) {  // update cache\n        cache.put(reader, docIdSet);\n      }\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader, DocIdSet>();\n    }\n\n    DocIdSet cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      return cached;\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      synchronized (cache) {  // update cache\n        cache.put(reader, docIdSet);\n      }\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c972cc1d730c09d9b1648fc41aad39afe79e4c5","date":1257716780,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    lock.lock();\n    try {\n      if (cache == null) {\n        cache = new WeakHashMap<IndexReader,DocIdSet>();\n      }\n\n      final DocIdSet cached = cache.get(reader);\n      if (cached != null) return cached;\n    } finally {\n      lock.unlock();\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n    if (docIdSet != null) {\n      lock.lock();\n      try {\n        cache.put(reader, docIdSet);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader, DocIdSet>();\n    }\n\n    DocIdSet cached = null;\n    synchronized (cache) {  // check cache\n      cached = cache.get(reader);\n    }\n\n    if (cached != null) {\n      return cached;\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      synchronized (cache) {  // update cache\n        cache.put(reader, docIdSet);\n      }\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    lock.lock();\n    try {\n      if (cache == null) {\n        cache = new WeakHashMap<IndexReader,DocIdSet>();\n      }\n\n      final DocIdSet cached = cache.get(reader);\n      if (cached != null) return cached;\n    } finally {\n      lock.unlock();\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n    if (docIdSet != null) {\n      lock.lock();\n      try {\n        cache.put(reader, docIdSet);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    lock.lock();\n    try {\n      if (cache == null) {\n        cache = new WeakHashMap<IndexReader,DocIdSet>();\n      }\n\n      final DocIdSet cached = cache.get(reader);\n      if (cached != null) return cached;\n    } finally {\n      lock.unlock();\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n    if (docIdSet != null) {\n      lock.lock();\n      try {\n        cache.put(reader, docIdSet);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c972cc1d730c09d9b1648fc41aad39afe79e4c5":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"cef18fc3088da45bfa252a5c18e2952d7e2f2dc0":["1dab6a073497f68cd618ed4a55d491e65dd0c569"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"8d6c98c690b593cea727f68742684c979ead1a0a":["cef18fc3088da45bfa252a5c18e2952d7e2f2dc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9c972cc1d730c09d9b1648fc41aad39afe79e4c5"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["8d6c98c690b593cea727f68742684c979ead1a0a"],"1dab6a073497f68cd618ed4a55d491e65dd0c569":["52ce7e961a8217faac8128e3c8fe67819eefdde9"]},"commit2Childs":{"9c972cc1d730c09d9b1648fc41aad39afe79e4c5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9c972cc1d730c09d9b1648fc41aad39afe79e4c5"],"cef18fc3088da45bfa252a5c18e2952d7e2f2dc0":["8d6c98c690b593cea727f68742684c979ead1a0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["1dab6a073497f68cd618ed4a55d491e65dd0c569"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8d6c98c690b593cea727f68742684c979ead1a0a":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"1dab6a073497f68cd618ed4a55d491e65dd0c569":["cef18fc3088da45bfa252a5c18e2952d7e2f2dc0"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}