{"path":"src/test/org/apache/solr/analysis/TestMappingCharFilterFactory#testParseString().mjava","commits":[{"id":"00c1e7284eb0e728903446dd05972acc9905dd53","date":1226627781,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch( RuntimeException expected ){}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch( RuntimeException expected ){}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"src/test/org/apache/solr/analysis/TestMappingCharFilterFactory#testParseString().mjava","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch( RuntimeException expected ){}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch( RuntimeException expected ){}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch( RuntimeException expected ){}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch( RuntimeException expected ){}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"00c1e7284eb0e728903446dd05972acc9905dd53":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["00c1e7284eb0e728903446dd05972acc9905dd53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["00c1e7284eb0e728903446dd05972acc9905dd53"],"00c1e7284eb0e728903446dd05972acc9905dd53":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}