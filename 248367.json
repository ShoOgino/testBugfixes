{"path":"src/java/org/apache/lucene/search/MultiSearcher#search(QueryWeight,Filter,int,Sort).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(QueryWeight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  public TopFieldDocs search (QueryWeight weight, Filter filter, int n, Sort sort)\n  throws IOException {\n    FieldDocSortedHitQueue hq = null;\n    int totalHits = 0;\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopFieldDocs docs = searchables[i].search (weight, filter, n, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchers.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = new Integer(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n      if (hq == null) hq = new FieldDocSortedHitQueue (docs.fields, n);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      maxScore = Math.max(maxScore, docs.getMaxScore());\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if (!hq.insert (scoreDoc))\n          break;                                  // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs (totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  public TopFieldDocs search (Weight weight, Filter filter, int n, Sort sort)\n  throws IOException {\n    FieldDocSortedHitQueue hq = null;\n    int totalHits = 0;\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopFieldDocs docs = searchables[i].search (weight, filter, n, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchers.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = new Integer(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n      if (hq == null) hq = new FieldDocSortedHitQueue (docs.fields, n);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      maxScore = Math.max(maxScore, docs.getMaxScore());\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if (!hq.insert (scoreDoc))\n          break;                                  // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs (totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(QueryWeight,Filter,int,Sort).mjava","sourceNew":"  public TopFieldDocs search (Weight weight, Filter filter, int n, Sort sort)\n  throws IOException {\n    FieldDocSortedHitQueue hq = null;\n    int totalHits = 0;\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopFieldDocs docs = searchables[i].search (weight, filter, n, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchers.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = new Integer(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n      if (hq == null) hq = new FieldDocSortedHitQueue (docs.fields, n);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      maxScore = Math.max(maxScore, docs.getMaxScore());\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if (!hq.insert (scoreDoc))\n          break;                                  // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs (totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  public TopFieldDocs search (QueryWeight weight, Filter filter, int n, Sort sort)\n  throws IOException {\n    FieldDocSortedHitQueue hq = null;\n    int totalHits = 0;\n\n    float maxScore=Float.NEGATIVE_INFINITY;\n    \n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopFieldDocs docs = searchables[i].search (weight, filter, n, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchers.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = new Integer(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n      if (hq == null) hq = new FieldDocSortedHitQueue (docs.fields, n);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      maxScore = Math.max(maxScore, docs.getMaxScore());\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if (!hq.insert (scoreDoc))\n          break;                                  // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopFieldDocs (totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}