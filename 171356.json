{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, TermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.docFreq <= maxPulsingDocFreq) {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return ((PulsingDocsAndPositionsEnum) reuse).reset(skipDocs, termState);\n      } else {\n        PulsingDocsAndPositionsEnum postingsEnum = new PulsingDocsAndPositionsEnum();\n        return postingsEnum.reset(skipDocs, termState);\n      }\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, TermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, TermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.docFreq <= maxPulsingDocFreq) {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return ((PulsingDocsAndPositionsEnum) reuse).reset(skipDocs, termState);\n      } else {\n        PulsingDocsAndPositionsEnum postingsEnum = new PulsingDocsAndPositionsEnum();\n        return postingsEnum.reset(skipDocs, termState);\n      }\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, PrefixCodedTermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, TermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (field.omitTermFreqAndPositions) {\n      return null;\n    }\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        postings = new PulsingDocsAndPositionsEnum(field);\n      }\n\n      return postings.reset(skipDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":null,"sourceOld":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, TermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.docFreq <= maxPulsingDocFreq) {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return ((PulsingDocsAndPositionsEnum) reuse).reset(skipDocs, termState);\n      } else {\n        PulsingDocsAndPositionsEnum postingsEnum = new PulsingDocsAndPositionsEnum();\n        return postingsEnum.reset(skipDocs, termState);\n      }\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":null,"sourceOld":"  // TODO: -- not great that we can't always reuse\n  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, TermState _termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.docFreq <= maxPulsingDocFreq) {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return ((PulsingDocsAndPositionsEnum) reuse).reset(skipDocs, termState);\n      } else {\n        PulsingDocsAndPositionsEnum postingsEnum = new PulsingDocsAndPositionsEnum();\n        return postingsEnum.reset(skipDocs, termState);\n      }\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, null);\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, skipDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d53c3f769ca0f9e7434937b792877770271aecf":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["3d53c3f769ca0f9e7434937b792877770271aecf"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa1a999d6674423e5c4ac858b410283f6fe03f20"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","3d53c3f769ca0f9e7434937b792877770271aecf","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3d53c3f769ca0f9e7434937b792877770271aecf":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}