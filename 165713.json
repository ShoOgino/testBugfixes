{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docMap[docID];\n          }\n        }, null, docMap.length, i));\n    }\n\n    // nocommit test w/ deletions too\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    assertEquals(totDocCount, count);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docMap[docID];\n          }\n        }, docMap.length, i));\n    }\n\n    // nocommit test w/ deletions too\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    assertEquals(totDocCount, count);\n  }\n\n","sourceOld":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docMap[docID];\n          }\n        }, null, docMap.length, i));\n    }\n\n    // nocommit test w/ deletions too\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    assertEquals(totDocCount, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e03940e6e9044943de4b7ac08f8581da37a9534","date":1462870173,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","sourceOld":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docMap[docID];\n          }\n        }, docMap.length, i));\n    }\n\n    // nocommit test w/ deletions too\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    assertEquals(totDocCount, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = DocIDMerger.of(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","sourceOld":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testWithSort().mjava","sourceNew":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = DocIDMerger.of(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","sourceOld":"  public void testWithSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<int[]> oldToNew = new ArrayList<>();\n    // how many docs we've written to each sub:\n    List<Integer> uptos = new ArrayList<>();\n    int totDocCount = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      uptos.add(0);\n      oldToNew.add(new int[maxDoc]);\n      totDocCount += maxDoc;\n    }\n\n    List<int[]> completedSubs = new ArrayList<>();\n\n    // randomly distribute target docIDs into the segments:\n    for(int docID=0;docID<totDocCount;docID++) {\n      int sub = random().nextInt(oldToNew.size());\n      int upto = uptos.get(sub);\n      int[] subDocs = oldToNew.get(sub);\n      subDocs[upto] = docID;\n      upto++;\n      if (upto == subDocs.length) {\n        completedSubs.add(subDocs);\n        oldToNew.remove(sub);\n        uptos.remove(sub);\n      } else {\n        uptos.set(sub, upto);\n      }\n    }\n    assertEquals(0, oldToNew.size());\n\n    // sometimes do some deletions:\n    final FixedBitSet liveDocs;\n    if (random().nextBoolean()) {\n      liveDocs = new FixedBitSet(totDocCount);\n      liveDocs.set(0, totDocCount);\n      int deleteAttemptCount = TestUtil.nextInt(random(), 1, totDocCount);\n      for(int i=0;i<deleteAttemptCount;i++) {\n        liveDocs.clear(random().nextInt(totDocCount));\n      }\n    } else {\n      liveDocs = null;\n    }\n\n    List<TestSubSorted> subs = new ArrayList<>();\n    for(int i=0;i<subCount;i++) {\n      final int[] docMap = completedSubs.get(i);\n      subs.add(new TestSubSorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            int mapped = docMap[docID];\n            if (liveDocs == null || liveDocs.get(mapped)) {\n              return mapped;\n            } else {\n              return -1;\n            }\n          }\n        }, docMap.length, i));\n    }\n\n    DocIDMerger<TestSubSorted> merger = new DocIDMerger<>(subs, true);\n\n    int count = 0;\n    while (true) {\n      TestSubSorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      if (liveDocs != null) {\n        count = liveDocs.nextSetBit(count);\n      }\n      assertEquals(count, sub.mappedDocID);\n      count++;\n    }\n\n    if (liveDocs != null) {\n      if (count < totDocCount) {\n        assertEquals(NO_MORE_DOCS, liveDocs.nextSetBit(count));\n      } else {\n        assertEquals(totDocCount, count);\n      }\n    } else {\n      assertEquals(totDocCount, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e03940e6e9044943de4b7ac08f8581da37a9534"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d85b6e22926e7564c040d2a864f4887f6c59fa92"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d85b6e22926e7564c040d2a864f4887f6c59fa92"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["5e03940e6e9044943de4b7ac08f8581da37a9534"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d85b6e22926e7564c040d2a864f4887f6c59fa92","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}