{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#testCustomB().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#testCustomB().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * sets b=0 to disable passage length normalization\n   */\n  public void testCustomB() throws Exception {\n    Directory dir = newDirectory();\n    indexAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    IndexWriterConfig iwc = newIndexWriterConfig(indexAnalyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.  This test is a better test but the sentence is excruiatingly long, \" +\n        \"you have no idea how painful it was for me to type this long sentence into my IDE.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return new PassageScorer(1.2f, 0, 87);\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"This <b>test</b> is a better <b>test</b>\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#testCustomB().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * sets b=0 to disable passage length normalization\n   */\n  public void testCustomB() throws Exception {\n    Directory dir = newDirectory();\n    indexAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    IndexWriterConfig iwc = newIndexWriterConfig(indexAnalyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.  This test is a better test but the sentence is excruiatingly long, \" +\n        \"you have no idea how painful it was for me to type this long sentence into my IDE.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return new PassageScorer(1.2f, 0, 87);\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"This <b>test</b> is a better <b>test</b>\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#testCustomB().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#testCustomB().mjava","sourceNew":"  /**\n   * sets b=0 to disable passage length normalization\n   */\n  public void testCustomB() throws Exception {\n    Directory dir = newDirectory();\n    indexAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    IndexWriterConfig iwc = newIndexWriterConfig(indexAnalyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.  This test is a better test but the sentence is excruiatingly long, \" +\n        \"you have no idea how painful it was for me to type this long sentence into my IDE.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return new PassageScorer(1.2f, 0, 87);\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"This <b>test</b> is a better <b>test</b>\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * sets b=0 to disable passage length normalization\n   */\n  public void testCustomB() throws Exception {\n    Directory dir = newDirectory();\n    indexAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    IndexWriterConfig iwc = newIndexWriterConfig(indexAnalyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.  This test is a better test but the sentence is excruiatingly long, \" +\n        \"you have no idea how painful it was for me to type this long sentence into my IDE.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return new PassageScorer(1.2f, 0, 87);\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"This <b>test</b> is a better <b>test</b>\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#testCustomB().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterRanking#testCustomB().mjava","sourceNew":"  /**\n   * sets b=0 to disable passage length normalization\n   */\n  public void testCustomB() throws Exception {\n    Directory dir = newDirectory();\n    indexAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    IndexWriterConfig iwc = newIndexWriterConfig(indexAnalyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.  This test is a better test but the sentence is excruiatingly long, \" +\n        \"you have no idea how painful it was for me to type this long sentence into my IDE.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Set<HighlightFlag> getFlags(String field) {\n        if (random().nextBoolean()) {\n          return EnumSet.of(HighlightFlag.MULTI_TERM_QUERY, HighlightFlag.PHRASES, HighlightFlag.WEIGHT_MATCHES);\n        } else {\n          return super.getFlags(field);\n        }\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return new PassageScorer(1.2f, 0, 87);\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"This <b>test</b> is a better <b>test</b>\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * sets b=0 to disable passage length normalization\n   */\n  public void testCustomB() throws Exception {\n    Directory dir = newDirectory();\n    indexAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    IndexWriterConfig iwc = newIndexWriterConfig(indexAnalyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.  This test is a better test but the sentence is excruiatingly long, \" +\n        \"you have no idea how painful it was for me to type this long sentence into my IDE.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return new PassageScorer(1.2f, 0, 87);\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"This <b>test</b> is a better <b>test</b>\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["83788ad129a5154d5c6562c4e8ce3db48793aada","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}