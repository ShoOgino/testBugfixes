{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","commits":[{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"/dev/null","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\")); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"docs1.xml\")); // 2\n    up.addFile(getFile(\"docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054986425ac6be57638da07535df74c6b9dbcb99","date":1335442678,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\")); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n    \n    //params encoding, multipart\n    up = new ContentStreamUpdateRequest(\"/debug/dump\");\n    up.addFile(getFile(\"solrj/docs1.xml\")); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\")); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    result = server.request(up);\n    System.out.println(result);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\")); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6be93e1a146822b1c8661198ce91645127d5f52","date":1335514198,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\")); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\")); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    up.setParam(CommonParams.HEADER_ECHO_PARAMS, CommonParams.EchoParamStyle.ALL.toString());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\")); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\")); // 3\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n    \n    //params encoding, multipart\n    up = new ContentStreamUpdateRequest(\"/debug/dump\");\n    up.addFile(getFile(\"solrj/docs1.xml\")); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\")); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    result = server.request(up);\n    System.out.println(result);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\"),\"application/xml\"); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\"),\"application/xml\"); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    up.setParam(CommonParams.HEADER_ECHO_PARAMS, CommonParams.EchoParamStyle.ALL.toString());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\")); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\")); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    up.setParam(CommonParams.HEADER_ECHO_PARAMS, CommonParams.EchoParamStyle.ALL.toString());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\"),\"application/xml\"); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\"),\"application/xml\"); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    up.setParam(CommonParams.HEADER_ECHO_PARAMS, CommonParams.EchoParamStyle.ALL.toString());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\"),\"application/xml\"); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\"),\"application/xml\"); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    up.setParam(CommonParams.HEADER_ECHO_PARAMS, CommonParams.EchoParamStyle.ALL.toString());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b6c193737882b94fcb01749c75371bf7d7d4c93","date":1539067480,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentStreamRequest().mjava","sourceNew":"  @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\"),\"application/xml\"); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\"),\"application/xml\"); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    up.setParam(CommonParams.HEADER_ECHO_PARAMS, CommonParams.EchoParamStyle.ALL.toString());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testMultiContentStreamRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/docs1.xml\"),\"application/xml\"); // 2\n    up.addFile(getFile(\"solrj/docs2.xml\"),\"application/xml\"); // 3\n    up.setParam(\"a\", \"\\u1234\");\n    up.setParam(CommonParams.HEADER_ECHO_PARAMS, CommonParams.EchoParamStyle.ALL.toString());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    Assert.assertEquals(\"\\u1234\",\n        ((NamedList)((NamedList) result.get(\"responseHeader\")).get(\"params\")).get(\"a\"));\n    assertNotNull(\"Couldn't upload xml files\", result);\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6be93e1a146822b1c8661198ce91645127d5f52":["054986425ac6be57638da07535df74c6b9dbcb99"],"7b6c193737882b94fcb01749c75371bf7d7d4c93":["bafca15d8e408346a67f4282ad1143b88023893b"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a258fbb26824fd104ed795e5d9033d2d040049ee"],"042e4d934397657ba04c82b46cc5665076bc5c58":["f6be93e1a146822b1c8661198ce91645127d5f52"],"054986425ac6be57638da07535df74c6b9dbcb99":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["042e4d934397657ba04c82b46cc5665076bc5c58"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b6c193737882b94fcb01749c75371bf7d7d4c93"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"f6be93e1a146822b1c8661198ce91645127d5f52":["042e4d934397657ba04c82b46cc5665076bc5c58"],"7b6c193737882b94fcb01749c75371bf7d7d4c93":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["c26f00b574427b55127e869b935845554afde1fa"],"042e4d934397657ba04c82b46cc5665076bc5c58":["bafca15d8e408346a67f4282ad1143b88023893b"],"054986425ac6be57638da07535df74c6b9dbcb99":["f6be93e1a146822b1c8661198ce91645127d5f52"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9507caf22f292ac0e5e59f62db4275adf4511","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["7b6c193737882b94fcb01749c75371bf7d7d4c93"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["054986425ac6be57638da07535df74c6b9dbcb99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}