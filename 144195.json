{"path":"src/java/org/apache/solr/search/function/BoostedQuery.BoostedWeight#explain(Searcher,IndexReader,int).mjava","commits":[{"id":"070092fd2d6ccc4eada741b38c12ee648917dd2b","date":1250433910,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/BoostedQuery.BoostedWeight#explain(Searcher,IndexReader,int).mjava","pathOld":"src/java/org/apache/solr/search/function/BoostedQuery.BoostedWeight#explain(IndexReader,int).mjava","sourceNew":"    public Explanation explain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      SolrIndexReader topReader = (SolrIndexReader)reader;\n      SolrIndexReader[] subReaders = topReader.getLeafReaders();\n      int[] offsets = topReader.getLeafOffsets();\n      int readerPos = SolrIndexReader.readerIndex(doc, offsets);\n      int readerBase = offsets[readerPos];\n\n      Explanation subQueryExpl = qWeight.explain(searcher,reader,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n\n      DocValues vals = boostVal.getValues(subReaders[readerPos]);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc-readerBase);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc-readerBase));\n      return res;\n    }\n\n","sourceOld":"    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      SolrIndexReader topReader = (SolrIndexReader)reader;\n      SolrIndexReader[] subReaders = topReader.getLeafReaders();\n      int[] offsets = topReader.getLeafOffsets();\n      int readerPos = SolrIndexReader.readerIndex(doc, offsets);\n      int readerBase = offsets[readerPos];\n\n      Explanation subQueryExpl = qWeight.explain(reader,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n\n      DocValues vals = boostVal.getValues(subReaders[readerPos]);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc-readerBase);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc-readerBase));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21c15d4f6b1232239e84909ad29b7df7f9c8cdd","date":1251489499,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/BoostedQuery.BoostedWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/solr/search/function/BoostedQuery.BoostedWeight#explain(Searcher,IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      SolrIndexReader topReader = (SolrIndexReader)reader;\n      SolrIndexReader[] subReaders = topReader.getLeafReaders();\n      int[] offsets = topReader.getLeafOffsets();\n      int readerPos = SolrIndexReader.readerIndex(doc, offsets);\n      int readerBase = offsets[readerPos];\n\n      Explanation subQueryExpl = qWeight.explain(reader,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n\n      DocValues vals = boostVal.getValues(subReaders[readerPos]);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc-readerBase);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc-readerBase));\n      return res;\n    }\n\n","sourceOld":"    public Explanation explain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      SolrIndexReader topReader = (SolrIndexReader)reader;\n      SolrIndexReader[] subReaders = topReader.getLeafReaders();\n      int[] offsets = topReader.getLeafOffsets();\n      int readerPos = SolrIndexReader.readerIndex(doc, offsets);\n      int readerBase = offsets[readerPos];\n\n      Explanation subQueryExpl = qWeight.explain(searcher,reader,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n\n      DocValues vals = boostVal.getValues(subReaders[readerPos]);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc-readerBase);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc-readerBase));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21c15d4f6b1232239e84909ad29b7df7f9c8cdd":["070092fd2d6ccc4eada741b38c12ee648917dd2b"],"070092fd2d6ccc4eada741b38c12ee648917dd2b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b21c15d4f6b1232239e84909ad29b7df7f9c8cdd":[],"070092fd2d6ccc4eada741b38c12ee648917dd2b":["b21c15d4f6b1232239e84909ad29b7df7f9c8cdd"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["070092fd2d6ccc4eada741b38c12ee648917dd2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b21c15d4f6b1232239e84909ad29b7df7f9c8cdd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}