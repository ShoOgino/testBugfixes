{"path":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","commits":[{"id":"ac294a7806e0df9ee114c74aa695a9358954d19a","date":1134071586,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","pathOld":"/dev/null","sourceNew":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.delete(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","sourceNew":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n  }\n\n","sourceOld":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.delete(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","sourceNew":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiReader(dir, sis, false, readers);\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiReader(dir, sis, false, readers);\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","sourceOld":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","sourceNew":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiSegmentReader reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","sourceOld":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiReader reader = new MultiReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiReader(dir, sis, false, readers);\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiReader(dir, sis, false, readers);\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580","ac294a7806e0df9ee114c74aa695a9358954d19a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","sourceNew":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiSegmentReader reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    openReaders();\n    reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","sourceOld":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiSegmentReader reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiSegmentReader#doTestUndeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testUndeleteAll().mjava","sourceNew":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","sourceOld":"  public void testUndeleteAll() throws IOException {\n    sis.read(dir);\n    MultiSegmentReader reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    openReaders();\n    reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    sis.read(dir);\n    reader = new MultiSegmentReader(dir, sis, false, readers);\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["ac294a7806e0df9ee114c74aa695a9358954d19a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"ac294a7806e0df9ee114c74aa695a9358954d19a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac294a7806e0df9ee114c74aa695a9358954d19a"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"ac294a7806e0df9ee114c74aa695a9358954d19a":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}