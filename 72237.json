{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","sourceNew":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","sourceNew":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntSequenceOutputs#common(IntsRef,IntsRef).mjava","sourceNew":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public IntsRef common(IntsRef output1, IntsRef output2) {\n    assert output1 != null;\n    assert output2 != null;\n\n    int pos1 = output1.offset;\n    int pos2 = output2.offset;\n    int stopAt1 = pos1 + Math.min(output1.length, output2.length);\n    while(pos1 < stopAt1) {\n      if (output1.ints[pos1] != output2.ints[pos2]) {\n        break;\n      }\n      pos1++;\n      pos2++;\n    }\n\n    if (pos1 == output1.offset) {\n      // no common prefix\n      return NO_OUTPUT;\n    } else if (pos1 == output1.offset + output1.length) {\n      // output1 is a prefix of output2\n      return output1;\n    } else if (pos2 == output2.offset + output2.length) {\n      // output2 is a prefix of output1\n      return output2;\n    } else {\n      return new IntsRef(output1.ints, output1.offset, pos1-output1.offset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}