{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", \"test sentence\");\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", \"test sentence\");\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"test sentence\"));\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    try (TokenStream ts = analyzer.tokenStream(\"content\", \"test sentence\")) {\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n      ts.reset();\n      while (ts.incrementToken()) {\n        String termText =  termAtt.toString();\n        q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n      }\n      ts.end();\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\", \"test sentence\");\n    \n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n    ts.reset();\n\n    while (ts.incrementToken()) {\n      String termText =  termAtt.toString();\n      q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":["0dda87e5ad7246b25d0da56a16ead95360499d86","c3e328a6f2b163170d23e06008798fb82c27af8b","fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a7347509fad0711ac30cb15a746e9a3830a38ebd","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    try (TokenStream ts = analyzer.tokenStream(\"content\", \"test sentence\")) {\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n      ts.reset();\n      while (ts.incrementToken()) {\n        String termText =  termAtt.toString();\n        q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n      }\n      ts.end();\n    }\n\n    ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    try (TokenStream ts = analyzer.tokenStream(\"content\", \"test sentence\")) {\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n      ts.reset();\n      while (ts.incrementToken()) {\n        String termText =  termAtt.toString();\n        q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n      }\n      ts.end();\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperBooleanQuery().mjava","sourceNew":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n\n    try (TokenStream ts = analyzer.tokenStream(\"content\", \"test sentence\")) {\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n      ts.reset();\n      while (ts.incrementToken()) {\n        String termText =  termAtt.toString();\n        q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n      }\n      ts.end();\n    }\n\n    ScoreDoc[] hits = searcher.search(q.build(), 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * How to construct a boolean query with shingles. A query like this will\n   * implicitly score those documents higher that contain the words in the query\n   * in the right order and adjacent to each other.\n   */\n  public void testShingleAnalyzerWrapperBooleanQuery() throws Exception {\n    BooleanQuery q = new BooleanQuery();\n\n    try (TokenStream ts = analyzer.tokenStream(\"content\", \"test sentence\")) {\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n      ts.reset();\n      while (ts.incrementToken()) {\n        String termText =  termAtt.toString();\n        q.add(new TermQuery(new Term(\"content\", termText)),\n            BooleanClause.Occur.SHOULD);\n      }\n      ts.end();\n    }\n\n    ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}