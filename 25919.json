{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n\n    Terms terms = context.reader().terms(field);\n    if (terms == null) {\n      return null; // field does not exist\n    }\n\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n    SpanCollector subSpanCollector = inOrder ? collector.bufferedCollector() : collector;\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts, subSpanCollector);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans) : new NearSpansOrdered(this, subSpans, collector);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n\n    Terms terms = context.reader().terms(field);\n    if (terms == null) {\n      return null; // field does not exist\n    }\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans)\n          : collectPayloads && terms.hasPayloads() ? new NearSpansPayloadOrdered(this, subSpans)\n          : new NearSpansOrdered(this, subSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n\n    Terms terms = context.reader().terms(field);\n    if (terms == null) {\n      return null; // field does not exist\n    }\n\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n    SpanCollector subSpanCollector = inOrder ? collector.bufferedCollector() : collector;\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts, subSpanCollector);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans) : new NearSpansOrdered(this, subSpans, collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}