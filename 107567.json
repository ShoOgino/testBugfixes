{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","commits":[{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","pathOld":"/dev/null","sourceNew":"  private void testConversions(CharacterUtils charUtils) {\n    final char[] orig = _TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = random().nextInt(5);\n    final int o2 = _TestUtil.nextInt(random(), 0, o1);\n    final int o3 = _TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = charUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = charUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d29048034555f0f5f5d552500a7d75c9e8a91d09","date":1371107175,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","sourceNew":"  private void testConversions(CharacterUtils charUtils) {\n    final char[] orig = _TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = _TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = _TestUtil.nextInt(random(), 0, o1);\n    final int o3 = _TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = charUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = charUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","sourceOld":"  private void testConversions(CharacterUtils charUtils) {\n    final char[] orig = _TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = random().nextInt(5);\n    final int o2 = _TestUtil.nextInt(random(), 0, o1);\n    final int o3 = _TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = charUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = charUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","sourceNew":"  private void testConversions(CharacterUtils charUtils) {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = charUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = charUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","sourceOld":"  private void testConversions(CharacterUtils charUtils) {\n    final char[] orig = _TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = _TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = _TestUtil.nextInt(random(), 0, o1);\n    final int o3 = _TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = charUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = charUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","sourceNew":null,"sourceOld":"  private void testConversions(CharacterUtils charUtils) {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = charUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = charUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","sourceNew":null,"sourceOld":"  private void testConversions(CharacterUtils charUtils) {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = charUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = charUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions(CharacterUtils).mjava","sourceNew":null,"sourceOld":"  private void testConversions(CharacterUtils charUtils) {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = charUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = charUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d29048034555f0f5f5d552500a7d75c9e8a91d09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["6613659748fe4411a7dcf85266e55db1f95f7315","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"d29048034555f0f5f5d552500a7d75c9e8a91d09":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6613659748fe4411a7dcf85266e55db1f95f7315","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["d29048034555f0f5f5d552500a7d75c9e8a91d09"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"6613659748fe4411a7dcf85266e55db1f95f7315":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d29048034555f0f5f5d552500a7d75c9e8a91d09":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}