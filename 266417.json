{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new DirectoryTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new DirectoryTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      assertNull(new DirectoryTaxonomyWriter(indexDir));\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n    assertNotNull(newtr);\n    tr.close();\n    tr = newtr;\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new DirectoryTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      assertNull(new DirectoryTaxonomyWriter(indexDir));\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n    assertNotNull(newtr);\n    tr.close();\n    tr = newtr;\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new DirectoryTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new FacetLabel(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      assertNull(new DirectoryTaxonomyWriter(indexDir));\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new FacetLabel(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n    assertNotNull(newtr);\n    tr.close();\n    tr = newtr;\n    assertEquals(3, tr.getOrdinal(new FacetLabel(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      assertNull(new DirectoryTaxonomyWriter(indexDir));\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n    assertNotNull(newtr);\n    tr.close();\n    tr = newtr;\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new FacetLabel(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      assertNull(new DirectoryTaxonomyWriter(indexDir));\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new FacetLabel(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n    assertNotNull(newtr);\n    tr.close();\n    tr = newtr;\n    assertEquals(3, tr.getOrdinal(new FacetLabel(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      assertNull(new DirectoryTaxonomyWriter(indexDir));\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n    assertNotNull(newtr);\n    tr.close();\n    tr = newtr;\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafd23b8e49a461cdbc22b302dfdea2f2a08d953","date":1415887806,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new FacetLabel(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      assertNull(new DirectoryTaxonomyWriter(indexDir));\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new FacetLabel(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    TaxonomyReader newtr = TaxonomyReader.openIfChanged(tr);\n    assertNotNull(newtr);\n    tr.close();\n    tr = newtr;\n    assertEquals(3, tr.getOrdinal(new FacetLabel(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fafd23b8e49a461cdbc22b302dfdea2f2a08d953":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["407687e67faf6e1f02a211ca078d8e3eed631027","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"fafd23b8e49a461cdbc22b302dfdea2f2a08d953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}