{"path":"src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List newReaders = new ArrayList();\n    \n    boolean success = false;\n    \n    try {\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = (IndexReader) readers.get(i);\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = (IndexReader) newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List newDecrefOnClose = new ArrayList();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = (IndexReader) readers.get(i);\n        IndexReader newReader = (IndexReader) newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = (IndexReader) readers.get(i);\n        IndexReader newReader = (IndexReader) newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List newReaders = new ArrayList();\n    \n    boolean success = false;\n    \n    try {\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = (IndexReader) readers.get(i);\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = (IndexReader) newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List newDecrefOnClose = new ArrayList();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = (IndexReader) readers.get(i);\n        IndexReader newReader = (IndexReader) newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = (IndexReader) readers.get(i);\n        IndexReader newReader = (IndexReader) newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}