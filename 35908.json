{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","commits":[{"id":"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","date":1351696336,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"/dev/null","sourceNew":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ee663728a95682ffb5dee37517ac9e863cd0820","date":1352758633,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":null,"sourceOld":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ee663728a95682ffb5dee37517ac9e863cd0820":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["9ee663728a95682ffb5dee37517ac9e863cd0820"]},"commit2Childs":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["9ee663728a95682ffb5dee37517ac9e863cd0820","407687e67faf6e1f02a211ca078d8e3eed631027"],"9ee663728a95682ffb5dee37517ac9e863cd0820":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}