{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/index/IndexTask#run().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/index/IndexTask#run().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexTask#run().mjava","sourceNew":"    /**\n     * @see java.lang.Runnable#run()\n     */\n    public void run() {\n\n        while (!this.stopped.get() || this.taskQueue.size() != 0) {\n\n            try {\n                /*\n                 * get the future from the queue and wait until processing has\n                 * been done\n                 */\n                Future<IndexDocument> future = getTask();\n                if (future != null) {\n                    IndexDocument document = future.get();\n                    setOptimize(document);\n                    processDocument(document); \n                    /*\n                     * the document contains the info for commit or optimize -->\n                     * this comes from the controller\n                     */\n                    if (document == null || document.commitAfter())\n                        this.indexer.commit(document == null ? false : this.optimize.getAndSet(false));\n                }\n                if (this.commit.getAndSet(false))\n                    this.indexer.commit(this.optimize.getAndSet(false));\n\n            } catch (InterruptedException e) {\n                INNERLOG.warn(\"Queue is interrupted exiting IndexTask -- \", e);\n\n            } catch (GdataIndexerException e) {\n                /*\n                 * \n                 * TODO fire callback here as well\n                 */\n                INNERLOG.error(\"can not retrieve Field from IndexDocument  \", e);\n            } catch (ExecutionException e) {\n                /*\n                 * TODO callback for fail this exception is caused by an\n                 * exception while processing the document. call back for failed\n                 * docs should be placed here\n                 */\n                INNERLOG.error(\"Future throws execution exception \", e);\n\n            } catch (IOException e) {\n                INNERLOG.error(\"IOException thrown while processing document \",\n                        e);\n\n            } catch (Throwable e) {\n                /*\n                 * catch all to prevent the thread from dieing\n                 */\n                INNERLOG.error(\n                        \"Unexpected exception while processing document -- \"\n                                + e.getMessage(), e);\n            }\n        }\n        try {\n            this.indexer.commit(this.optimize.getAndSet(false));\n        } catch (IOException e) {\n            INNERLOG.warn(\"commit on going down failed - \"+e.getMessage(),e);\n            \n        }\n        this.stop();\n    }\n\n","sourceOld":"    /**\n     * @see java.lang.Runnable#run()\n     */\n    public void run() {\n\n        while (!this.stopped.get() || this.taskQueue.size() != 0) {\n\n            try {\n                /*\n                 * get the future from the queue and wait until processing has\n                 * been done\n                 */\n                Future<IndexDocument> future = getTask();\n                if (future != null) {\n                    IndexDocument document = future.get();\n                    setOptimize(document);\n                    processDocument(document); \n                    /*\n                     * the document contains the info for commit or optimize -->\n                     * this comes from the controller\n                     */\n                    if (document == null || document.commitAfter())\n                        this.indexer.commit(document == null ? false : this.optimize.getAndSet(false));\n                }\n                if (this.commit.getAndSet(false))\n                    this.indexer.commit(this.optimize.getAndSet(false));\n\n            } catch (InterruptedException e) {\n                INNERLOG.warn(\"Queue is interrupted exiting IndexTask -- \", e);\n\n            } catch (GdataIndexerException e) {\n                /*\n                 * \n                 * TODO fire callback here as well\n                 */\n                INNERLOG.error(\"can not retrieve Field from IndexDocument  \", e);\n            } catch (ExecutionException e) {\n                /*\n                 * TODO callback for fail this exception is caused by an\n                 * exception while processing the document. call back for failed\n                 * docs should be placed here\n                 */\n                INNERLOG.error(\"Future throws execution exception \", e);\n\n            } catch (IOException e) {\n                INNERLOG.error(\"IOException thrown while processing document \",\n                        e);\n\n            } catch (Throwable e) {\n                /*\n                 * catch all to prevent the thread from dieing\n                 */\n                INNERLOG.error(\n                        \"Unexpected exception while processing document -- \"\n                                + e.getMessage(), e);\n            }\n        }\n        try {\n            this.indexer.commit(this.optimize.getAndSet(false));\n        } catch (IOException e) {\n            INNERLOG.warn(\"commit on going down failed - \"+e.getMessage(),e);\n            \n        }\n        this.stop();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/index/IndexTask#run().mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/index/IndexTask#run().mjava","sourceNew":"    /**\n     * @see java.lang.Runnable#run()\n     */\n    public void run() {\n\n        while (!this.stopped.get() || this.taskQueue.size() != 0) {\n\n            try {\n                /*\n                 * get the future from the queue and wait until processing has\n                 * been done\n                 */\n                Future<IndexDocument> future = getTask();\n                if (future != null) {\n                    IndexDocument document = future.get();\n                    setOptimize(document);\n                    processDocument(document); \n                    /*\n                     * the document contains the info for commit or optimize -->\n                     * this comes from the controller\n                     */\n                    if (document == null || document.commitAfter())\n                        this.indexer.commit(document == null ? false : this.optimize.getAndSet(false));\n                }\n                if (this.commit.getAndSet(false))\n                    this.indexer.commit(this.optimize.getAndSet(false));\n\n            } catch (InterruptedException e) {\n                INNERLOG.warn(\"Queue is interrupted exiting IndexTask -- \", e);\n\n            } catch (GdataIndexerException e) {\n                /*\n                 * \n                 * TODO fire callback here as well\n                 */\n                INNERLOG.error(\"can not retrieve Field from IndexDocument  \", e);\n            } catch (ExecutionException e) {\n                /*\n                 * TODO callback for fail this exception is caused by an\n                 * exception while processing the document. call back for failed\n                 * docs should be placed here\n                 */\n                INNERLOG.error(\"Future throws execution exception \", e);\n\n            } catch (IOException e) {\n                INNERLOG.error(\"IOException thrown while processing document \",\n                        e);\n\n            } catch (Throwable e) {\n                /*\n                 * catch all to prevent the thread from dieing\n                 */\n                INNERLOG.error(\n                        \"Unexpected exception while processing document -- \"\n                                + e.getMessage(), e);\n            }\n        }\n        try {\n            this.indexer.commit(this.optimize.getAndSet(false));\n        } catch (IOException e) {\n            INNERLOG.warn(\"commit on going down failed - \"+e.getMessage(),e);\n            \n        }\n        this.stop();\n    }\n\n","sourceOld":"    /**\n     * @see java.lang.Runnable#run()\n     */\n    public void run() {\n\n        while (!this.stopped.get() || this.taskQueue.size() != 0) {\n\n            try {\n                /*\n                 * get the future from the queue and wait until processing has\n                 * been done\n                 */\n                Future<IndexDocument> future = getTask();\n                if (future != null) {\n                    IndexDocument document = future.get();\n                    setOptimize(document);\n                    processDocument(document); \n                    /*\n                     * the document contains the info for commit or optimize -->\n                     * this comes from the controller\n                     */\n                    if (document == null || document.commitAfter())\n                        this.indexer.commit(document == null ? false : this.optimize.getAndSet(false));\n                }\n                if (this.commit.getAndSet(false))\n                    this.indexer.commit(this.optimize.getAndSet(false));\n\n            } catch (InterruptedException e) {\n                INNERLOG.warn(\"Queue is interrupted exiting IndexTask -- \", e);\n\n            } catch (GdataIndexerException e) {\n                /*\n                 * \n                 * TODO fire callback here as well\n                 */\n                INNERLOG.error(\"can not retrieve Field from IndexDocument  \", e);\n            } catch (ExecutionException e) {\n                /*\n                 * TODO callback for fail this exception is caused by an\n                 * exception while processing the document. call back for failed\n                 * docs should be placed here\n                 */\n                INNERLOG.error(\"Future throws execution exception \", e);\n\n            } catch (IOException e) {\n                INNERLOG.error(\"IOException thrown while processing document \",\n                        e);\n\n            } catch (Throwable e) {\n                /*\n                 * catch all to prevent the thread from dieing\n                 */\n                INNERLOG.error(\n                        \"Unexpected exception while processing document -- \"\n                                + e.getMessage(), e);\n            }\n        }\n        try {\n            this.indexer.commit(this.optimize.getAndSet(false));\n        } catch (IOException e) {\n            INNERLOG.warn(\"commit on going down failed - \"+e.getMessage(),e);\n            \n        }\n        this.stop();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}