{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":["6f26f74e4969851a019d28f10315cb1c77786f22","2209af2c265d2258ec4b29c8cc78622d36994a15","058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    reset(overseerMock);\n    reset(zkControllerMock);\n    reset(cloudDataProviderMock);\n    reset(clusterStateProviderMock);\n    reset(stateManagerMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    reset(overseerMock);\n    reset(zkControllerMock);\n    reset(cloudDataProviderMock);\n    objectCache.clear();\n    when(cloudDataProviderMock.getObjectCache()).thenReturn(objectCache);\n    when(cloudDataProviderMock.getTimeSource()).thenReturn(TimeSource.NANO_TIME);\n    reset(clusterStateProviderMock);\n    reset(stateManagerMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    reset(overseerMock);\n    reset(zkControllerMock);\n    reset(cloudDataProviderMock);\n    reset(clusterStateProviderMock);\n    reset(stateManagerMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(stateUpdateQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    reset(overseerMock);\n    reset(zkControllerMock);\n    reset(cloudDataProviderMock);\n    objectCache.clear();\n    when(cloudDataProviderMock.getObjectCache()).thenReturn(objectCache);\n    when(cloudDataProviderMock.getTimeSource()).thenReturn(TimeSource.NANO_TIME);\n    reset(clusterStateProviderMock);\n    reset(stateManagerMock);\n    reset(cloudManagerMock);\n    reset(distribStateManagerMock);\n    reset(coreContainerMock);\n    reset(updateShardHandlerMock);\n    reset(httpClientMock);\n\n    zkClientData.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    reset(overseerMock);\n    reset(zkControllerMock);\n    reset(cloudDataProviderMock);\n    objectCache.clear();\n    when(cloudDataProviderMock.getObjectCache()).thenReturn(objectCache);\n    when(cloudDataProviderMock.getTimeSource()).thenReturn(TimeSource.NANO_TIME);\n    reset(clusterStateProviderMock);\n    reset(stateManagerMock);\n\n    zkMap.clear();\n    collectionsSet.clear();\n    replicas.clear();\n  }\n\n","bugFix":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["28288370235ed02234a64753cdbf0c6ec096304a"],"9856095f7afb5a607bf5e65077615ed91273508c":["2209af2c265d2258ec4b29c8cc78622d36994a15","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","9856095f7afb5a607bf5e65077615ed91273508c","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}