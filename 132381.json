{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPolygonTest#testPolygonBounds().mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPolygonTest#testPolygonBounds().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonTest#testPolygonBounds().mjava","sourceNew":"  @Test\n  public void testPolygonBounds() {\n    GeoMembershipShape c;\n    Bounds b;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonBounds() {\n    GeoMembershipShape c;\n    Bounds b;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPolygonTest#testPolygonBounds().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPolygonTest#testPolygonBounds().mjava","sourceNew":"  @Test\n  public void testPolygonBounds() {\n    GeoMembershipShape c;\n    LatLonBounds b;\n    List<GeoPoint> points;\n    XYZBounds xyzb;\n    GeoPoint point;\n    GeoArea area;\n    \n    // BKD failure\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.36716183577912814, 1.4836349969188696));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.7846038240742979, -0.02743348424931823));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.7376479402362607, -0.5072961758807019));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.3760415907667887, 1.4970455334565513));\n    \n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, 1);\n    \n    point = new GeoPoint(PlanetModel.WGS84, -0.01580760332365284, -0.03956004622490505);\n    assertTrue(c.isWithin(point));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(area.isWithin(point));\n    \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonBounds() {\n    GeoMembershipShape c;\n    Bounds b;\n    List<GeoPoint> points;\n\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonBounds().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPolygonTest#testPolygonBounds().mjava","sourceNew":"  @Test\n  public void testPolygonBounds() {\n    GeoMembershipShape c;\n    LatLonBounds b;\n    List<GeoPoint> points;\n    XYZBounds xyzb;\n    GeoPoint point;\n    GeoArea area;\n    \n    // BKD failure\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.36716183577912814, 1.4836349969188696));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.7846038240742979, -0.02743348424931823));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.7376479402362607, -0.5072961758807019));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.3760415907667887, 1.4970455334565513));\n    \n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, 1);\n    \n    point = new GeoPoint(PlanetModel.WGS84, -0.01580760332365284, -0.03956004622490505);\n    assertTrue(c.isWithin(point));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(area.isWithin(point));\n    \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonBounds() {\n    GeoMembershipShape c;\n    LatLonBounds b;\n    List<GeoPoint> points;\n    XYZBounds xyzb;\n    GeoPoint point;\n    GeoArea area;\n    \n    // BKD failure\n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.36716183577912814, 1.4836349969188696));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.7846038240742979, -0.02743348424931823));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.7376479402362607, -0.5072961758807019));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.3760415907667887, 1.4970455334565513));\n    \n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, 1);\n    \n    point = new GeoPoint(PlanetModel.WGS84, -0.01580760332365284, -0.03956004622490505);\n    assertTrue(c.isWithin(point));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(area.isWithin(point));\n    \n    points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n\n    c = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}