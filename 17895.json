{"path":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"/dev/null","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new SimpleAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new SimpleAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new SimpleAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new SimpleAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new SimpleAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new SimpleAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}