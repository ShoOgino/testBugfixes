{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/TestGeo3DPointField#getCodec().mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/TestGeo3DPointField#getCodec().mjava","pathOld":"/dev/null","sourceNew":"  private static Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 16, 2048);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60DimensionalFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public DimensionalFormat dimensionalFormat() {\n          return new DimensionalFormat() {\n            @Override\n            public DimensionalWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60DimensionalWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public DimensionalReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60DimensionalReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d6307e7d04e80016cbee8e15e53cc08d1ebaa023"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6307e7d04e80016cbee8e15e53cc08d1ebaa023","date":1447328391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/TestGeo3DPointField#getCodec().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/TestGeo3DPointField#getCodec().mjava","sourceNew":"  private static Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 16, 2048);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60DimensionalFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public DimensionalFormat dimensionalFormat() {\n          return new DimensionalFormat() {\n            @Override\n            public DimensionalWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60DimensionalWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public DimensionalReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60DimensionalReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","sourceOld":"  private static Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 16, 2048);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60DimensionalFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public DimensionalFormat dimensionalFormat() {\n          return new DimensionalFormat() {\n            @Override\n            public DimensionalWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60DimensionalWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public DimensionalReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60DimensionalReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/TestGeo3DPointField#getCodec().mjava","sourceNew":null,"sourceOld":"  private static Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 16, 2048);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60DimensionalFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public DimensionalFormat dimensionalFormat() {\n          return new DimensionalFormat() {\n            @Override\n            public DimensionalWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60DimensionalWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public DimensionalReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60DimensionalReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["d6307e7d04e80016cbee8e15e53cc08d1ebaa023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6307e7d04e80016cbee8e15e53cc08d1ebaa023":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"d6307e7d04e80016cbee8e15e53cc08d1ebaa023":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["d6307e7d04e80016cbee8e15e53cc08d1ebaa023"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}