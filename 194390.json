{"path":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","commits":[{"id":"ae2cc9c0968d7f98c987726279617b99c53129ed","date":1319936406,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","sourceNew":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","sourceOld":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","sourceNew":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","sourceOld":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","sourceNew":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","sourceOld":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#checkSpeedEncoding(String,String,String).mjava","sourceNew":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","sourceOld":"  private void checkSpeedEncoding(String encoder, String toBeEncoded, String estimated) throws Exception {\n\t  long start = System.currentTimeMillis();\n\t  for ( int i=0; i<REPEATS; i++) {\n\t\t    assertAlgorithm(encoder, \"false\", toBeEncoded,\n\t\t            new String[] { estimated });\n\t  }\n\t  long duration = System.currentTimeMillis()-start;\n\t  if (VERBOSE)\n\t    System.out.println(encoder + \" encodings per msec: \"+(REPEATS/duration));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["ae2cc9c0968d7f98c987726279617b99c53129ed","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae2cc9c0968d7f98c987726279617b99c53129ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["ae2cc9c0968d7f98c987726279617b99c53129ed","5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["ae2cc9c0968d7f98c987726279617b99c53129ed","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["ae2cc9c0968d7f98c987726279617b99c53129ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae2cc9c0968d7f98c987726279617b99c53129ed":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae2cc9c0968d7f98c987726279617b99c53129ed"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}