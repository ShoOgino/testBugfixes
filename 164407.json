{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }     \n      };\n      \n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }     \n      };\n      \n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }     \n      };\n      \n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }     \n      };\n      \n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }\n      };\n\n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }\n      };\n\n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }\n      };\n\n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }     \n      };\n      \n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }\n      };\n\n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }     \n      };\n      \n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }\n      };\n\n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }     \n      };\n      \n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068303c7eefa006e42a6e790e1e51b5d26ffa02f","date":1311518223,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      // evil we cannot init our random here, because super() calls computeTestMethods!!!!;\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }\n      };\n\n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }\n      };\n\n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb2037f0b6c95cf65a182dc85883bca429889705","date":1314326112,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#LuceneTestCaseRunner(Class[#]).mjava","sourceNew":null,"sourceOld":"    public LuceneTestCaseRunner(Class<?> clazz) throws InitializationError {\n      super(clazz);\n      // evil we cannot init our random here, because super() calls computeTestMethods!!!!;\n      Filter f = new Filter() {\n\n        @Override\n        public String describe() { return \"filters according to TEST_METHOD\"; }\n\n        @Override\n        public boolean shouldRun(Description d) {\n          return TEST_METHOD == null || d.getMethodName().equals(TEST_METHOD);\n        }\n      };\n\n      try {\n        f.apply(this);\n      } catch (NoTestsRemainException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"068303c7eefa006e42a6e790e1e51b5d26ffa02f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"eb2037f0b6c95cf65a182dc85883bca429889705":["068303c7eefa006e42a6e790e1e51b5d26ffa02f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb2037f0b6c95cf65a182dc85883bca429889705"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"068303c7eefa006e42a6e790e1e51b5d26ffa02f":["eb2037f0b6c95cf65a182dc85883bca429889705"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["068303c7eefa006e42a6e790e1e51b5d26ffa02f","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"eb2037f0b6c95cf65a182dc85883bca429889705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}