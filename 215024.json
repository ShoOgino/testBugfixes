{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvolution().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvolution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testConvolution().mjava","sourceNew":"  @Test\n  public void testConvolution() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(2, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, conv=conv(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> convolution = (List<Number>)(tuples.get(0)).get(\"conv\");\n    assertTrue(convolution.size() == 7);\n    assertTrue(convolution.get(0).equals(20000L));\n    assertTrue(convolution.get(1).equals(20000L));\n    assertTrue(convolution.get(2).equals(25000L));\n    assertTrue(convolution.get(3).equals(30000L));\n    assertTrue(convolution.get(4).equals(15000L));\n    assertTrue(convolution.get(5).equals(10000L));\n    assertTrue(convolution.get(6).equals(5000L));\n  }\n\n","sourceOld":"  @Test\n  public void testConvolution() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(2, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, conv=conv(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> convolution = (List<Number>)(tuples.get(0)).get(\"conv\");\n    assertTrue(convolution.size() == 7);\n    assertTrue(convolution.get(0).equals(20000L));\n    assertTrue(convolution.get(1).equals(20000L));\n    assertTrue(convolution.get(2).equals(25000L));\n    assertTrue(convolution.get(3).equals(30000L));\n    assertTrue(convolution.get(4).equals(15000L));\n    assertTrue(convolution.get(5).equals(10000L));\n    assertTrue(convolution.get(6).equals(5000L));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3eb251dab40cb8cabcea8ed646a2c060d423f18","date":1570756765,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvolution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvolution().mjava","sourceNew":"  @Test\n  public void testConvolution() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(2, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, conv=conv(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> convolution = (List<Number>)(tuples.get(0)).get(\"conv\");\n    assertTrue(convolution.size() == 7);\n    assertTrue(convolution.get(0).equals(20000D));\n    assertTrue(convolution.get(1).equals(20000D));\n    assertTrue(convolution.get(2).equals(25000D));\n    assertTrue(convolution.get(3).equals(30000D));\n    assertTrue(convolution.get(4).equals(15000D));\n    assertTrue(convolution.get(5).equals(10000D));\n    assertTrue(convolution.get(6).equals(5000D));\n  }\n\n","sourceOld":"  @Test\n  public void testConvolution() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(2, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, conv=conv(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> convolution = (List<Number>)(tuples.get(0)).get(\"conv\");\n    assertTrue(convolution.size() == 7);\n    assertTrue(convolution.get(0).equals(20000L));\n    assertTrue(convolution.get(1).equals(20000L));\n    assertTrue(convolution.get(2).equals(25000L));\n    assertTrue(convolution.get(3).equals(30000L));\n    assertTrue(convolution.get(4).equals(15000L));\n    assertTrue(convolution.get(5).equals(10000L));\n    assertTrue(convolution.get(6).equals(5000L));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvolution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvolution().mjava","sourceNew":"  @Test\n  public void testConvolution() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(2, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, conv=conv(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> convolution = (List<Number>)(tuples.get(0)).get(\"conv\");\n    assertTrue(convolution.size() == 7);\n    assertTrue(convolution.get(0).equals(20000D));\n    assertTrue(convolution.get(1).equals(20000D));\n    assertTrue(convolution.get(2).equals(25000D));\n    assertTrue(convolution.get(3).equals(30000D));\n    assertTrue(convolution.get(4).equals(15000D));\n    assertTrue(convolution.get(5).equals(10000D));\n    assertTrue(convolution.get(6).equals(5000D));\n  }\n\n","sourceOld":"  @Test\n  public void testConvolution() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(2, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, conv=conv(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> convolution = (List<Number>)(tuples.get(0)).get(\"conv\");\n    assertTrue(convolution.size() == 7);\n    assertTrue(convolution.get(0).equals(20000L));\n    assertTrue(convolution.get(1).equals(20000L));\n    assertTrue(convolution.get(2).equals(25000L));\n    assertTrue(convolution.get(3).equals(30000L));\n    assertTrue(convolution.get(4).equals(15000L));\n    assertTrue(convolution.get(5).equals(10000L));\n    assertTrue(convolution.get(6).equals(5000L));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvolution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvolution().mjava","sourceNew":"  @Test\n  public void testConvolution() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(2, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, conv=conv(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> convolution = (List<Number>)(tuples.get(0)).get(\"conv\");\n    assertTrue(convolution.size() == 7);\n    assertTrue(convolution.get(0).equals(20000D));\n    assertTrue(convolution.get(1).equals(20000D));\n    assertTrue(convolution.get(2).equals(25000D));\n    assertTrue(convolution.get(3).equals(30000D));\n    assertTrue(convolution.get(4).equals(15000D));\n    assertTrue(convolution.get(5).equals(10000D));\n    assertTrue(convolution.get(6).equals(5000D));\n  }\n\n","sourceOld":"  @Test\n  public void testConvolution() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", b=select(\"+expr+\",mult(2, count(*)) as nvalue), c=col(a, count(*)), d=col(b, nvalue), tuple(colc=c, cold=d, conv=conv(c,d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> convolution = (List<Number>)(tuples.get(0)).get(\"conv\");\n    assertTrue(convolution.size() == 7);\n    assertTrue(convolution.get(0).equals(20000D));\n    assertTrue(convolution.get(1).equals(20000D));\n    assertTrue(convolution.get(2).equals(25000D));\n    assertTrue(convolution.get(3).equals(30000D));\n    assertTrue(convolution.get(4).equals(15000D));\n    assertTrue(convolution.get(5).equals(10000D));\n    assertTrue(convolution.get(6).equals(5000D));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["c3eb251dab40cb8cabcea8ed646a2c060d423f18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3eb251dab40cb8cabcea8ed646a2c060d423f18":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","c3eb251dab40cb8cabcea8ed646a2c060d423f18"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"c3eb251dab40cb8cabcea8ed646a2c060d423f18":["9ba1b632c041956c93c41aa1143d16a567014891","b0b597c65628ca9e73913a07e81691f8229bae35"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c3eb251dab40cb8cabcea8ed646a2c060d423f18","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}