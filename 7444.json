{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a TokenStream which tokenizes all the text in the provided Reader.\n   *\n   * @return A TokenStream build from a StandardTokenizer filtered with\n   *         StandardFilter, StopFilter, FrenchStemFilter and LowerCaseFilter\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream which tokenizes all the text in the provided Reader.\n   *\n   * @return A TokenStream build from a StandardTokenizer filtered with\n   *         StandardFilter, StopFilter, FrenchStemFilter and LowerCaseFilter\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18359c8e12d55f66c27cfe7babe86283f06a6aa5","date":1250426225,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a TokenStream which tokenizes all the text in the provided Reader.\n   *\n   * @return A TokenStream built from a StandardTokenizer filtered with\n   *         StandardFilter, StopFilter, FrenchStemFilter and LowerCaseFilter\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream which tokenizes all the text in the provided Reader.\n   *\n   * @return A TokenStream build from a StandardTokenizer filtered with\n   *         StandardFilter, StopFilter, FrenchStemFilter and LowerCaseFilter\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45b06c3ff8a4d9d3d751dd311e51c59303c2719c","date":1250600126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a TokenStream which tokenizes all the text in the provided Reader.\n   *\n   * @return A TokenStream built from a StandardTokenizer filtered with\n   *         StandardFilter, StopFilter, FrenchStemFilter and LowerCaseFilter\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(false, result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83a2e572295a9d2b63506929926d0522f61d386","date":1256184192,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(false, result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n\n    if (fieldName == null) throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (reader == null) throw new IllegalArgumentException(\"reader must not be null\");\n\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(false, result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","bugFix":["79a4babde9a4de13b09d3bcfdad856df5f211846","41e87957816194cba30143d585051c8acecf6141"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(matchVersion, reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                            result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(false, result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  @Override\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(matchVersion, reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                            result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(matchVersion, reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                            result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ce0ce6485d29a241c4ca4b6179d14df6a66bae","date":1259357651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  @Override\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(matchVersion, reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                            result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(matchVersion, result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  @Override\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(matchVersion, reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                            result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  @Override\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(matchVersion, reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(matchVersion, result);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  @Override\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(matchVersion, reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                            result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(matchVersion, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided\n   * {@link Reader}.\n   *\n   * @return {@link TokenStreamComponents} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new StopFilter(matchVersion, result, stopwords);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer} \n   *         filtered with {@link StandardFilter}, {@link StopFilter}, \n   *         {@link FrenchStemFilter} and {@link LowerCaseFilter}\n   */\n  @Override\n  public final TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new StandardTokenizer(matchVersion, reader);\n    result = new StandardFilter(result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    result = new FrenchStemFilter(result, excltable);\n    // Convert to lowercase after stemming!\n    result = new LowerCaseFilter(matchVersion, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["c2877c077c0dc229ee9871dc196b2a62442df599"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["ba1116b3450a9c1642c89445d131b37344055245"],"c83a2e572295a9d2b63506929926d0522f61d386":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"ddc5fbfd4c64963aba52713a4496522540294d69":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc5fbfd4c64963aba52713a4496522540294d69"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"ba1116b3450a9c1642c89445d131b37344055245":["c83a2e572295a9d2b63506929926d0522f61d386"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"c83a2e572295a9d2b63506929926d0522f61d386":["ba1116b3450a9c1642c89445d131b37344055245"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["c83a2e572295a9d2b63506929926d0522f61d386"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"ddc5fbfd4c64963aba52713a4496522540294d69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"ba1116b3450a9c1642c89445d131b37344055245":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["ddc5fbfd4c64963aba52713a4496522540294d69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}