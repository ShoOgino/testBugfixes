{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["b89678825b68eccaf09e6ab71675fc0b0af1e099","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}