{"path":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"933780884e79144ac5dbe8785ec03c5f4ed3f218","date":1423843143,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        final String desc;\n        if (match) {\n          assert scorer.score() == 0f;\n          desc = \"Match on id \" + doc;\n        } else {\n          desc = \"No match on id \" + doc;\n        }\n        return new ComplexExplanation(match, 0f, desc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int nextPosition() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public int startOffset() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public int endOffset() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public BytesRef getPayload() throws IOException {\n            return null;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449f2318aa7f06ce3bce9031e402201231cb781e","date":1424530966,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        final String desc;\n        if (match) {\n          assert scorer.score() == 0f;\n          desc = \"Match on id \" + doc;\n        } else {\n          desc = \"No match on id \" + doc;\n        }\n        return new ComplexExplanation(match, 0f, desc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        final String desc;\n        if (match) {\n          assert scorer.score() == 0f;\n          desc = \"Match on id \" + doc;\n        } else {\n          desc = \"No match on id \" + doc;\n        }\n        return new ComplexExplanation(match, 0f, desc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int nextPosition() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public int startOffset() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public int endOffset() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public BytesRef getPayload() throws IOException {\n            return null;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5","date":1429083443,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        final String desc;\n        if (match) {\n          assert scorer.score() == 0f;\n          desc = \"Match on id \" + doc;\n        } else {\n          desc = \"No match on id \" + doc;\n        }\n        return new ComplexExplanation(match, 0f, desc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        final String desc;\n        if (match) {\n          assert scorer.score() == 0f;\n          desc = \"Match on id \" + doc;\n        } else {\n          desc = \"No match on id \" + doc;\n        }\n        return new ComplexExplanation(match, 0f, desc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        final String desc;\n        if (match) {\n          assert scorer.score() == 0f;\n          desc = \"Match on id \" + doc;\n        } else {\n          desc = \"No match on id \" + doc;\n        }\n        return new ComplexExplanation(match, 0f, desc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        final String desc;\n        if (match) {\n          assert scorer.score() == 0f;\n          desc = \"Match on id \" + doc;\n        } else {\n          desc = \"No match on id \" + doc;\n        }\n        return new ComplexExplanation(match, 0f, desc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        final String desc;\n        if (match) {\n          assert scorer.score() == 0f;\n          desc = \"Match on id \" + doc;\n        } else {\n          desc = \"No match on id \" + doc;\n        }\n        return new ComplexExplanation(match, 0f, desc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new Scorer(this) {\n\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return iterator.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return iterator.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return iterator.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return iterator.cost();\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context, context.reader().getLiveDocs());\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final DocIdSet set = getDocIdSet(context, acceptDocs);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return 0f;\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["1db68e96dd908fcd79ef809095822736aa601d08"],"1db68e96dd908fcd79ef809095822736aa601d08":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"449f2318aa7f06ce3bce9031e402201231cb781e":["933780884e79144ac5dbe8785ec03c5f4ed3f218"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["449f2318aa7f06ce3bce9031e402201231cb781e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"933780884e79144ac5dbe8785ec03c5f4ed3f218":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["05c52ac194342b760b830342ee8423fcf00e54d0"],"05c52ac194342b760b830342ee8423fcf00e54d0":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"1db68e96dd908fcd79ef809095822736aa601d08":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["1db68e96dd908fcd79ef809095822736aa601d08"],"449f2318aa7f06ce3bce9031e402201231cb781e":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["05c52ac194342b760b830342ee8423fcf00e54d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["933780884e79144ac5dbe8785ec03c5f4ed3f218"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"933780884e79144ac5dbe8785ec03c5f4ed3f218":["449f2318aa7f06ce3bce9031e402201231cb781e"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"05c52ac194342b760b830342ee8423fcf00e54d0":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}