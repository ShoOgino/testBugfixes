{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, boolean compressed) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary || compressed ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6267e1ce56c2eec111425690cd04e251b6f14952"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}