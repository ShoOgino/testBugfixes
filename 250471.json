{"path":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetSumFloatAssociations#getTopChildren(int,String,String...).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetSumFloatAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumFloatAssociations#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    FacetsConfig.DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValue = 0;\n    int childCount = 0;\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(sumValue, labelValues, childCount);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    FacetsConfig.DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValue = 0;\n    int childCount = 0;\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(sumValue, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e499df4729e7162d5b39a70b0142e3186a029f","date":1385554050,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetSumFloatAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetSumFloatAssociations#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    // TODO: can we factor this out?\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    FacetsConfig.DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValue = 0;\n    int childCount = 0;\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(sumValue, labelValues, childCount);\n  }\n\n","sourceOld":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    FacetsConfig.DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValue = 0;\n    int childCount = 0;\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(sumValue, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1536855b62f453c22bb60258029b3b2a07b2532c","date":1385570079,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetSumFloatAssociations#getTopChildren(int,String,String...).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    // TODO: can we factor this out?\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    FacetsConfig.DimConfig dimConfig = verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(Math.min(taxoReader.getSize(), topN));\n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValue = 0;\n    int childCount = 0;\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(sumValue, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6e499df4729e7162d5b39a70b0142e3186a029f":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1536855b62f453c22bb60258029b3b2a07b2532c":["b6e499df4729e7162d5b39a70b0142e3186a029f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b6e499df4729e7162d5b39a70b0142e3186a029f":["1536855b62f453c22bb60258029b3b2a07b2532c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":["b6e499df4729e7162d5b39a70b0142e3186a029f"],"1536855b62f453c22bb60258029b3b2a07b2532c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1536855b62f453c22bb60258029b3b2a07b2532c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}