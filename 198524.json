{"path":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","commits":[{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.squaredEuclideanDistance(vals1, vals2);\n  }\n\n","sourceOld":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, DocValues dv1, DocValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.squaredEuclideanDistance(vals1, vals2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.squaredEuclideanDistance(vals1, vals2);\n  }\n\n","sourceOld":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, DocValues dv1, DocValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.squaredEuclideanDistance(vals1, vals2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.distSquaredCartesian(vals1, vals2);\n  }\n\n","sourceOld":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.squaredEuclideanDistance(vals1, vals2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.distSquaredCartesian(vals1, vals2);\n  }\n\n","sourceOld":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.squaredEuclideanDistance(vals1, vals2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return distSquaredCartesian(vals1, vals2);\n  }\n\n","sourceOld":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return DistanceUtils.distSquaredCartesian(vals1, vals2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) throws IOException {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return distSquaredCartesian(vals1, vals2);\n  }\n\n","sourceOld":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return distSquaredCartesian(vals1, vals2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) throws IOException {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return distSquaredCartesian(vals1, vals2);\n  }\n\n","sourceOld":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return distSquaredCartesian(vals1, vals2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) throws IOException {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return distSquaredCartesian(vals1, vals2);\n  }\n\n","sourceOld":"  /**\n   * @param doc The doc to score\n   */\n  @Override\n  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {\n\n    double[] vals1 = new double[source1.dimension()];\n    double[] vals2 = new double[source1.dimension()];\n    dv1.doubleVal(doc, vals1);\n    dv2.doubleVal(doc, vals2);\n\n    return distSquaredCartesian(vals1, vals2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["e47768b261c28e7e6032060e8331475c81057953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e47768b261c28e7e6032060e8331475c81057953":["d638301ad1cfcae567b681b893bc8781f0ee48a5","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e47768b261c28e7e6032060e8331475c81057953":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}