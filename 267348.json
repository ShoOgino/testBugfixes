{"path":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair().mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair().mjava","pathOld":"/dev/null","sourceNew":"    public RSAKeyPair() {\n      KeyPairGenerator keyGen = null;\n      try {\n        keyGen = KeyPairGenerator.getInstance(\"RSA\");\n      } catch (NoSuchAlgorithmException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n      keyGen.initialize(512);\n      java.security.KeyPair keyPair = keyGen.genKeyPair();\n      privateKey = keyPair.getPrivate();\n      publicKey = keyPair.getPublic();\n\n      X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(\n          publicKey.getEncoded());\n\n      pubKeyStr = Base64.byteArrayToBase64(x509EncodedKeySpec.getEncoded());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26c2fd463e268c86c79ad89b5f87a909f7df0c0c","date":1479331998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair().mjava","sourceNew":"    public RSAKeyPair() {\n      KeyPairGenerator keyGen = null;\n      try {\n        keyGen = KeyPairGenerator.getInstance(\"RSA\");\n      } catch (NoSuchAlgorithmException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n      keyGen.initialize(DEFAULT_KEYPAIR_LENGTH);\n      java.security.KeyPair keyPair = keyGen.genKeyPair();\n      privateKey = keyPair.getPrivate();\n      publicKey = keyPair.getPublic();\n\n      X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(\n          publicKey.getEncoded());\n\n      pubKeyStr = Base64.byteArrayToBase64(x509EncodedKeySpec.getEncoded());\n    }\n\n","sourceOld":"    public RSAKeyPair() {\n      KeyPairGenerator keyGen = null;\n      try {\n        keyGen = KeyPairGenerator.getInstance(\"RSA\");\n      } catch (NoSuchAlgorithmException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n      keyGen.initialize(512);\n      java.security.KeyPair keyPair = keyGen.genKeyPair();\n      privateKey = keyPair.getPrivate();\n      publicKey = keyPair.getPublic();\n\n      X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(\n          publicKey.getEncoded());\n\n      pubKeyStr = Base64.byteArrayToBase64(x509EncodedKeySpec.getEncoded());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair().mjava","sourceNew":"    public RSAKeyPair() {\n      KeyPairGenerator keyGen = null;\n      try {\n        keyGen = KeyPairGenerator.getInstance(\"RSA\");\n      } catch (NoSuchAlgorithmException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n      keyGen.initialize(DEFAULT_KEYPAIR_LENGTH);\n      java.security.KeyPair keyPair = keyGen.genKeyPair();\n      privateKey = keyPair.getPrivate();\n      publicKey = keyPair.getPublic();\n\n      X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(\n          publicKey.getEncoded());\n\n      pubKeyStr = Base64.byteArrayToBase64(x509EncodedKeySpec.getEncoded());\n    }\n\n","sourceOld":"    public RSAKeyPair() {\n      KeyPairGenerator keyGen = null;\n      try {\n        keyGen = KeyPairGenerator.getInstance(\"RSA\");\n      } catch (NoSuchAlgorithmException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n      keyGen.initialize(512);\n      java.security.KeyPair keyPair = keyGen.genKeyPair();\n      privateKey = keyPair.getPrivate();\n      publicKey = keyPair.getPublic();\n\n      X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(\n          publicKey.getEncoded());\n\n      pubKeyStr = Base64.byteArrayToBase64(x509EncodedKeySpec.getEncoded());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b409047f69fb85704c506753bc23a37d7ad37b54","date":1582574830,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair().mjava","sourceNew":"    /**\n     * Create an RSA key pair with newly generated keys.\n     */\n    public RSAKeyPair() {\n      KeyPairGenerator keyGen;\n      try {\n        keyGen = KeyPairGenerator.getInstance(\"RSA\");\n      } catch (NoSuchAlgorithmException e) {\n        throw new AssertionError(\"JVM spec is required to support RSA\", e);\n      }\n      keyGen.initialize(DEFAULT_KEYPAIR_LENGTH);\n      java.security.KeyPair keyPair = keyGen.genKeyPair();\n      privateKey = keyPair.getPrivate();\n      publicKey = keyPair.getPublic();\n      pubKeyStr = Base64.byteArrayToBase64(publicKey.getEncoded());\n    }\n\n","sourceOld":"    public RSAKeyPair() {\n      KeyPairGenerator keyGen = null;\n      try {\n        keyGen = KeyPairGenerator.getInstance(\"RSA\");\n      } catch (NoSuchAlgorithmException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n      keyGen.initialize(DEFAULT_KEYPAIR_LENGTH);\n      java.security.KeyPair keyPair = keyGen.genKeyPair();\n      privateKey = keyPair.getPrivate();\n      publicKey = keyPair.getPublic();\n\n      X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(\n          publicKey.getEncoded());\n\n      pubKeyStr = Base64.byteArrayToBase64(x509EncodedKeySpec.getEncoded());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b409047f69fb85704c506753bc23a37d7ad37b54":["26c2fd463e268c86c79ad89b5f87a909f7df0c0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["b3a34dae868734612eb6329aa0ef754f30bd2036","26c2fd463e268c86c79ad89b5f87a909f7df0c0c"],"26c2fd463e268c86c79ad89b5f87a909f7df0c0c":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b409047f69fb85704c506753bc23a37d7ad37b54"]},"commit2Childs":{"b409047f69fb85704c506753bc23a37d7ad37b54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["2e859e664a65796dadf8aaf65db6f66f3a885368","26c2fd463e268c86c79ad89b5f87a909f7df0c0c"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"26c2fd463e268c86c79ad89b5f87a909f7df0c0c":["b409047f69fb85704c506753bc23a37d7ad37b54","2e859e664a65796dadf8aaf65db6f66f3a885368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}