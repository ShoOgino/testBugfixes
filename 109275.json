{"path":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#cloneDoc(Document).mjava","commits":[{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#cloneDoc(Document).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  private Document cloneDoc(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      if (field1.getOmitNorms()) {\n        field2.setOmitNorms(true);\n      }\n      if (field1.getOmitTermFreqAndPositions()) {\n        field2.setOmitTermFreqAndPositions(true);\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#cloneDoc(Document).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  private Document cloneDoc(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      if (field1.getOmitNorms()) {\n        field2.setOmitNorms(true);\n      }\n      if (field1.getOmitTermFreqAndPositions()) {\n        field2.setOmitTermFreqAndPositions(true);\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#cloneDoc(Document).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  private Document cloneDoc(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      if (field1.getOmitNorms()) {\n        field2.setOmitNorms(true);\n      }\n      if (field1.getOmitTermFreqAndPositions()) {\n        field2.setOmitTermFreqAndPositions(true);\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#cloneDoc(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      field2.setOmitNorms(field1.getOmitNorms());\n      field2.setOmitTermFreqAndPositions(field1.getOmitTermFreqAndPositions());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  private Document cloneDoc(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      if (field1.getOmitNorms()) {\n        field2.setOmitNorms(true);\n      }\n      if (field1.getOmitTermFreqAndPositions()) {\n        field2.setOmitTermFreqAndPositions(true);\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#cloneDoc(Document).mjava","sourceNew":null,"sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  private Document cloneDoc(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      if (field1.getOmitNorms()) {\n        field2.setOmitNorms(true);\n      }\n      if (field1.getOmitTermFreqAndPositions()) {\n        field2.setOmitTermFreqAndPositions(true);\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#cloneDoc(Document).mjava","sourceNew":null,"sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  private Document cloneDoc(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      if (field1.getOmitNorms()) {\n        field2.setOmitNorms(true);\n      }\n      if (field1.getOmitTermFreqAndPositions()) {\n        field2.setOmitTermFreqAndPositions(true);\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["97e30c53fd81463c6ccd52402c91a6548cf42acb","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d083e83f225b11e5fdd900e83d26ddb385b6955c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}