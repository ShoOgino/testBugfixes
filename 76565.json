{"path":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[]).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_quickSort(T[]).mjava","sourceNew":"  /**\n   * Sorts the given array in natural order. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   */\n  public static <T extends Comparable<? super T>> void introSort(T[] a) {\n    introSort(a, 0, a.length);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array in natural order. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   */\n  public static <T extends Comparable<? super T>> void quickSort(T[] a) {\n    quickSort(a, 0, a.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}