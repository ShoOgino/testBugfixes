{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","commits":[{"id":"b6c71577c4ee99246f48a2c29bc213daab310ee5","date":1505785422,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig withAutoAddReplicasTrigger(AutoScalingConfig autoScalingConfig) {\n    CloudConfig cloudConfig = zkController.getCoreContainer().getConfig().getCloudConfig();\n    Map<String, Object> triggerProps = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_PROPS;\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (cloudConfig.getAutoReplicaFailoverWaitAfterExpiration() / 1000));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d74e47b708b42ff110911e64513d0e872ac2577b","date":1505844540,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig withAutoAddReplicasTrigger(AutoScalingConfig autoScalingConfig) {\n    Map<String, Object> triggerProps = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_PROPS;\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (cloudConfig.getAutoReplicaFailoverWaitAfterExpiration() / 1000));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig withAutoAddReplicasTrigger(AutoScalingConfig autoScalingConfig) {\n    CloudConfig cloudConfig = zkController.getCoreContainer().getConfig().getCloudConfig();\n    Map<String, Object> triggerProps = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_PROPS;\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (cloudConfig.getAutoReplicaFailoverWaitAfterExpiration() / 1000));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig withAutoAddReplicasTrigger(AutoScalingConfig autoScalingConfig) {\n    Map<String, Object> triggerProps = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_PROPS;\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (cloudConfig.getAutoReplicaFailoverWaitAfterExpiration() / 1000));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig withAutoAddReplicasTrigger(AutoScalingConfig autoScalingConfig) {\n    Map<String, Object> triggerProps = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_PROPS;\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (cloudConfig.getAutoReplicaFailoverWaitAfterExpiration() / 1000));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig withAutoAddReplicasTrigger(AutoScalingConfig autoScalingConfig) {\n    Map<String, Object> triggerProps = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_PROPS;\n    return withDefaultTrigger(triggerProps, autoScalingConfig);\n  }\n\n","sourceOld":"  private AutoScalingConfig withAutoAddReplicasTrigger(AutoScalingConfig autoScalingConfig) {\n    Map<String, Object> triggerProps = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_PROPS;\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (cloudConfig.getAutoReplicaFailoverWaitAfterExpiration() / 1000));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withAutoAddReplicasTrigger(AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  private AutoScalingConfig withAutoAddReplicasTrigger(AutoScalingConfig autoScalingConfig) {\n    Map<String, Object> triggerProps = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_PROPS;\n    return withDefaultTrigger(triggerProps, autoScalingConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c6c0dad4932399aec99b4818086cb1772773916":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d74e47b708b42ff110911e64513d0e872ac2577b"],"3f504512a03d978990cbff30db0522b354e846db":["9c6c0dad4932399aec99b4818086cb1772773916"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d74e47b708b42ff110911e64513d0e872ac2577b":["b6c71577c4ee99246f48a2c29bc213daab310ee5"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"b6c71577c4ee99246f48a2c29bc213daab310ee5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9c6c0dad4932399aec99b4818086cb1772773916":["3f504512a03d978990cbff30db0522b354e846db"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","b6c71577c4ee99246f48a2c29bc213daab310ee5"],"d74e47b708b42ff110911e64513d0e872ac2577b":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["9c6c0dad4932399aec99b4818086cb1772773916"],"b6c71577c4ee99246f48a2c29bc213daab310ee5":["d74e47b708b42ff110911e64513d0e872ac2577b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}