{"path":"solr/core/src/test/org/apache/solr/cloud/hdfs/BasicHdfsTest#doTest().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/BasicHdfsTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    createCollection(\"delete_data_dir\", 1, 1, 1);\n    waitForRecoveriesToFinish(\"delete_data_dir\", false);\n    cloudClient.setDefaultCollection(\"delete_data_dir\");\n    cloudClient.getZkStateReader().updateClusterState(true);\n    NamedList<Object> response = cloudClient.query(\n        new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String dataDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\"))\n        .get(\"data\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"delete_data_dir\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n    \n    Configuration conf = new Configuration();\n    conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n    FileSystem fs = FileSystem.newInstance(new URI(dataDir), conf);\n    assertFalse(\n        \"Data directory exists after collection removal : \"\n            + dataDir, fs.exists(new Path(dataDir)));\n    fs.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/BasicHdfsTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    createCollection(\"delete_data_dir\", 1, 1, 1);\n    waitForRecoveriesToFinish(\"delete_data_dir\", false);\n    cloudClient.setDefaultCollection(\"delete_data_dir\");\n    cloudClient.getZkStateReader().updateClusterState(true);\n    NamedList<Object> response = cloudClient.query(\n        new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String dataDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\"))\n        .get(\"data\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"delete_data_dir\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n    \n    Configuration conf = new Configuration();\n    conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n    FileSystem fs = FileSystem.newInstance(new URI(dataDir), conf);\n    assertFalse(\n        \"Data directory exists after collection removal : \"\n            + dataDir, fs.exists(new Path(dataDir)));\n    fs.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0","date":1374088456,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/BasicHdfsTest#doTest().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doTest() throws Exception {\n    createCollection(\"delete_data_dir\", 1, 1, 1);\n    waitForRecoveriesToFinish(\"delete_data_dir\", false);\n    cloudClient.setDefaultCollection(\"delete_data_dir\");\n    cloudClient.getZkStateReader().updateClusterState(true);\n    NamedList<Object> response = cloudClient.query(\n        new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String dataDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\"))\n        .get(\"data\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"delete_data_dir\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n    \n    Configuration conf = new Configuration();\n    conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n    FileSystem fs = FileSystem.newInstance(new URI(dataDir), conf);\n    assertFalse(\n        \"Data directory exists after collection removal : \"\n            + dataDir, fs.exists(new Path(dataDir)));\n    fs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/BasicHdfsTest#doTest().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doTest() throws Exception {\n    createCollection(\"delete_data_dir\", 1, 1, 1);\n    waitForRecoveriesToFinish(\"delete_data_dir\", false);\n    cloudClient.setDefaultCollection(\"delete_data_dir\");\n    cloudClient.getZkStateReader().updateClusterState(true);\n    NamedList<Object> response = cloudClient.query(\n        new SolrQuery().setRequestHandler(\"/admin/system\")).getResponse();\n    NamedList<Object> coreInfo = (NamedList<Object>) response.get(\"core\");\n    String dataDir = (String) ((NamedList<Object>) coreInfo.get(\"directory\"))\n        .get(\"data\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"delete_data_dir\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n    \n    Configuration conf = new Configuration();\n    conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n    FileSystem fs = FileSystem.newInstance(new URI(dataDir), conf);\n    assertFalse(\n        \"Data directory exists after collection removal : \"\n            + dataDir, fs.exists(new Path(dataDir)));\n    fs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}