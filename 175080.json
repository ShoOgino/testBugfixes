{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","commits":[{"id":"34127d6b305c3e200d697bfcb58e639d65250c6f","date":1457034866,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","sourceNew":"  @Test\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws Exception {\n\n    final String collectionName = \"deletereplica_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2).process(cluster.getSolrClient());\n\n    Replica leader = cluster.getSolrClient().getZkStateReader().getLeaderRetry(collectionName, \"shard1\");\n\n    //Confirm that the instance and data directory exist\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", Files.exists(Paths.get(coreStatus.getInstanceDirectory())));\n    assertTrue(\"DataDirectory doesn't exist\", Files.exists(Paths.get(coreStatus.getDataDirectory())));\n\n    CollectionAdminRequest.deleteReplica(collectionName, \"shard1\",leader.getName())\n        .process(cluster.getSolrClient());\n\n    Replica newLeader = cluster.getSolrClient().getZkStateReader().getLeaderRetry(collectionName, \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n    assertFalse(\"Instance directory still exists\", Files.exists(Paths.get(coreStatus.getInstanceDirectory())));\n    assertFalse(\"DataDirectory still exists\", Files.exists(Paths.get(coreStatus.getDataDirectory())));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","sourceNew":"  @Test\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws Exception {\n\n    final String collectionName = \"deletereplica_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2).process(cluster.getSolrClient());\n\n    Replica leader = cluster.getSolrClient().getZkStateReader().getLeaderRetry(collectionName, \"shard1\");\n\n    //Confirm that the instance and data directory exist\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", Files.exists(Paths.get(coreStatus.getInstanceDirectory())));\n    assertTrue(\"DataDirectory doesn't exist\", Files.exists(Paths.get(coreStatus.getDataDirectory())));\n\n    CollectionAdminRequest.deleteReplica(collectionName, \"shard1\",leader.getName())\n        .process(cluster.getSolrClient());\n\n    Replica newLeader = cluster.getSolrClient().getZkStateReader().getLeaderRetry(collectionName, \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n    assertFalse(\"Instance directory still exists\", Files.exists(Paths.get(coreStatus.getInstanceDirectory())));\n    assertFalse(\"DataDirectory still exists\", Files.exists(Paths.get(coreStatus.getDataDirectory())));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaAndVerifyDirectoryCleanup().mjava","sourceNew":"  @Test\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws Exception {\n\n    final String collectionName = \"deletereplica_test\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2).process(cluster.getSolrClient());\n\n    Replica leader = cluster.getSolrClient().getZkStateReader().getLeaderRetry(collectionName, \"shard1\");\n\n    //Confirm that the instance and data directory exist\n    CoreStatus coreStatus = getCoreStatus(leader);\n    assertTrue(\"Instance directory doesn't exist\", Files.exists(Paths.get(coreStatus.getInstanceDirectory())));\n    assertTrue(\"DataDirectory doesn't exist\", Files.exists(Paths.get(coreStatus.getDataDirectory())));\n\n    CollectionAdminRequest.deleteReplica(collectionName, \"shard1\",leader.getName())\n        .process(cluster.getSolrClient());\n\n    Replica newLeader = cluster.getSolrClient().getZkStateReader().getLeaderRetry(collectionName, \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n    assertFalse(\"Instance directory still exists\", Files.exists(Paths.get(coreStatus.getInstanceDirectory())));\n    assertFalse(\"DataDirectory still exists\", Files.exists(Paths.get(coreStatus.getDataDirectory())));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void deleteReplicaAndVerifyDirectoryCleanup() throws IOException, SolrServerException, InterruptedException {\n    createCollection(\"deletereplica_test\", 1, 2, 4);\n\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n    String baseUrl = (String) leader.get(\"base_url\");\n    String core = (String) leader.get(\"core\");\n    String leaderCoreName = leader.getName();\n\n    String instanceDir;\n    String dataDir;\n\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(core, client);\n      NamedList r = statusResp.getCoreStatus().get(core);\n      instanceDir = (String) r.findRecursive(\"instanceDir\");\n      dataDir = (String) r.get(\"dataDir\");\n    }\n\n    //Confirm that the instance and data directory exist\n    assertTrue(\"Instance directory doesn't exist\", FileUtils.fileExists(instanceDir));\n    assertTrue(\"DataDirectory doesn't exist\", FileUtils.fileExists(dataDir));\n\n    new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(\"deletereplica_test\")\n        .setShardName(\"shard1\")\n        .setReplica(leaderCoreName)\n        .process(cloudClient);\n\n    Replica newLeader = cloudClient.getZkStateReader().getLeaderRetry(\"deletereplica_test\", \"shard1\");\n\n    assertFalse(leader.equals(newLeader));\n\n    //Confirm that the instance and data directory were deleted by default\n\n    assertFalse(\"Instance directory still exists\", FileUtils.fileExists(instanceDir));\n    assertFalse(\"DataDirectory still exists\", FileUtils.fileExists(dataDir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34127d6b305c3e200d697bfcb58e639d65250c6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","34127d6b305c3e200d697bfcb58e639d65250c6f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34127d6b305c3e200d697bfcb58e639d65250c6f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"34127d6b305c3e200d697bfcb58e639d65250c6f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","609b19bb8de96c4e5e338d1d4a0349957522b601","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}