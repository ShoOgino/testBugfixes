{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","commits":[{"id":"9339df295b9162e4c81adbb4da44b5939d27c1ef","date":1520594349,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bfcbdfe07d46da058707c12412aef939a5f2198","date":1521339918,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["849f0b604d62767ac71859248cb478428b39170c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849f0b604d62767ac71859248cb478428b39170c","date":1523510880,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":["0bfcbdfe07d46da058707c12412aef939a5f2198"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43ad790248d7f7daee5d9cced548c546f37c7218","date":1527269998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d6f92dfa9251d9da6d80ec5963a9cbecc90180","date":1530559969,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#basicTest().mjava","sourceNew":"  @Test\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    String nodeName = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getNodeName();\n    \n    JettySolrRunner j = cluster.getJettySolrRunner(0);\n    j.stop();\n    cluster.waitForJettyToStop(j);\n    \n    cluster.getSolrClient().getZkStateReader().waitForState(collectionName, 10, TimeUnit.SECONDS, (liveNodes, collectionState) -> !liveNodes.contains(nodeName));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      if (newLeader == null) {\n        return false;\n      }\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    \n    cluster.waitForAllNodes(30);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  //28-June-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void basicTest() throws Exception {\n    final String collectionName = \"basicTest\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(1, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getHighestTerm());\n    }\n\n    cluster.getJettySolrRunner(0).stop();\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Timeout waiting for replica win the election\", collectionName, (liveNodes, collectionState) -> {\n      Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n      return newLeader.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName());\n    });\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      Replica newLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n      assertEquals(2, zkShardTerms.getTerms().size());\n      assertEquals(1L, zkShardTerms.getTerm(newLeader.getName()));\n    }\n\n    cluster.getJettySolrRunner(0).start();\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":["9339df295b9162e4c81adbb4da44b5939d27c1ef","f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["9339df295b9162e4c81adbb4da44b5939d27c1ef","0bfcbdfe07d46da058707c12412aef939a5f2198"],"43ad790248d7f7daee5d9cced548c546f37c7218":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["43ad790248d7f7daee5d9cced548c546f37c7218"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["203e3fcf513c02ee2c07015f2ce277e26dc60907","849f0b604d62767ac71859248cb478428b39170c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["43ad790248d7f7daee5d9cced548c546f37c7218","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bfcbdfe07d46da058707c12412aef939a5f2198":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"849f0b604d62767ac71859248cb478428b39170c":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["43ad790248d7f7daee5d9cced548c546f37c7218","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["203e3fcf513c02ee2c07015f2ce277e26dc60907","0bfcbdfe07d46da058707c12412aef939a5f2198"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","849f0b604d62767ac71859248cb478428b39170c"],"43ad790248d7f7daee5d9cced548c546f37c7218":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["43ad790248d7f7daee5d9cced548c546f37c7218"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"0bfcbdfe07d46da058707c12412aef939a5f2198":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"849f0b604d62767ac71859248cb478428b39170c":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}