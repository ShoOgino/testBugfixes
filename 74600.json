{"path":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3646ead588297558973dbd1162e69791e822b944","date":1525482176,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateOnlyConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    defaultConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":["bfc52860e6d13d034226a760813c59d984c6817a","b16266db764c72c65ab2977b36da1436b4efbb9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateHttpListenerFactory.initializeMetrics(manager, registryName, tag, expandedScope);\n    defaultConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateOnlyConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    defaultConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateHttpListenerFactory.initializeMetrics(solrMetricsContext, expandedScope);\n    defaultConnectionManager.initializeMetrics(solrMetricsContext, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateHttpListenerFactory.initializeMetrics(manager, registryName, tag, expandedScope);\n    defaultConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["3646ead588297558973dbd1162e69791e822b944"],"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"3646ead588297558973dbd1162e69791e822b944":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["3646ead588297558973dbd1162e69791e822b944"],"3646ead588297558973dbd1162e69791e822b944":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}