{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.bytes.length);\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":null,"sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"/dev/null","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.bytes.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":null,"sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":null,"sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":null,"sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["334c1175813aea771a71728cd2c4ee4754fd0603"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["334c1175813aea771a71728cd2c4ee4754fd0603","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"334c1175813aea771a71728cd2c4ee4754fd0603":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","8fe956d65251358d755c56f14fe8380644790e47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8fe956d65251358d755c56f14fe8380644790e47","ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}