{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/AlphaNumericComparator#compare(Object,Object).mjava","commits":[{"id":"42d384b06aa87eae925b668b65f3246154f0b0fa","date":1386181725,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/AlphaNumericComparator#compare(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    public int compare(Object o1, Object o2) {\n        String s1 = o1.toString();\n        String s2 = o2.toString();\n        int n1 = s1.length(), n2 = s2.length();\n        int i1 = 0, i2 = 0;\n        while (i1 < n1 && i2 < n2) {\n            int p1 = i1;\n            int p2 = i2;\n            char c1 = s1.charAt(i1++);\n            char c2 = s2.charAt(i2++);\n            if(c1 != c2) {\n                if (Character.isDigit(c1) && Character.isDigit(c2)) {\n                    int value1 = 0, value2 = 0;\n                    while (i1 < n1 && Character.isDigit(c1 = s1.charAt(i1))) {\n                      i1++;\n                    }\n                    value1 = Integer.parseInt(s1.substring(p1, i1));\n                    while (i2 < n2 && Character.isDigit(c2 = s2.charAt(i2))) {\n                      i2++;\n                    }\n                    value2 = Integer.parseInt(s2.substring(p2, i2));                    \n                    if (value1 != value2) {\n                      return value1 - value2;\n                    }\n                }\n                return c1 - c2;\n            }\n        }\n\n        return n1 - n2;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/AlphaNumericComparator#compare(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    public int compare(Object o1, Object o2) {\n        String s1 = o1.toString();\n        String s2 = o2.toString();\n        int n1 = s1.length(), n2 = s2.length();\n        int i1 = 0, i2 = 0;\n        while (i1 < n1 && i2 < n2) {\n            int p1 = i1;\n            int p2 = i2;\n            char c1 = s1.charAt(i1++);\n            char c2 = s2.charAt(i2++);\n            if(c1 != c2) {\n                if (Character.isDigit(c1) && Character.isDigit(c2)) {\n                    int value1 = 0, value2 = 0;\n                    while (i1 < n1 && Character.isDigit(c1 = s1.charAt(i1))) {\n                      i1++;\n                    }\n                    value1 = Integer.parseInt(s1.substring(p1, i1));\n                    while (i2 < n2 && Character.isDigit(c2 = s2.charAt(i2))) {\n                      i2++;\n                    }\n                    value2 = Integer.parseInt(s2.substring(p2, i2));                    \n                    if (value1 != value2) {\n                      return value1 - value2;\n                    }\n                }\n                return c1 - c2;\n            }\n        }\n\n        return n1 - n2;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/AlphaNumericComparator#compare(Object,Object).mjava","sourceNew":null,"sourceOld":"    public int compare(Object o1, Object o2) {\n        String s1 = o1.toString();\n        String s2 = o2.toString();\n        int n1 = s1.length(), n2 = s2.length();\n        int i1 = 0, i2 = 0;\n        while (i1 < n1 && i2 < n2) {\n            int p1 = i1;\n            int p2 = i2;\n            char c1 = s1.charAt(i1++);\n            char c2 = s2.charAt(i2++);\n            if(c1 != c2) {\n                if (Character.isDigit(c1) && Character.isDigit(c2)) {\n                    int value1 = 0, value2 = 0;\n                    while (i1 < n1 && Character.isDigit(c1 = s1.charAt(i1))) {\n                      i1++;\n                    }\n                    value1 = Integer.parseInt(s1.substring(p1, i1));\n                    while (i2 < n2 && Character.isDigit(c2 = s2.charAt(i2))) {\n                      i2++;\n                    }\n                    value2 = Integer.parseInt(s2.substring(p2, i2));                    \n                    if (value1 != value2) {\n                      return value1 - value2;\n                    }\n                }\n                return c1 - c2;\n            }\n        }\n\n        return n1 - n2;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/AlphaNumericComparator#compare(Object,Object).mjava","sourceNew":null,"sourceOld":"    public int compare(Object o1, Object o2) {\n        String s1 = o1.toString();\n        String s2 = o2.toString();\n        int n1 = s1.length(), n2 = s2.length();\n        int i1 = 0, i2 = 0;\n        while (i1 < n1 && i2 < n2) {\n            int p1 = i1;\n            int p2 = i2;\n            char c1 = s1.charAt(i1++);\n            char c2 = s2.charAt(i2++);\n            if(c1 != c2) {\n                if (Character.isDigit(c1) && Character.isDigit(c2)) {\n                    int value1 = 0, value2 = 0;\n                    while (i1 < n1 && Character.isDigit(c1 = s1.charAt(i1))) {\n                      i1++;\n                    }\n                    value1 = Integer.parseInt(s1.substring(p1, i1));\n                    while (i2 < n2 && Character.isDigit(c2 = s2.charAt(i2))) {\n                      i2++;\n                    }\n                    value2 = Integer.parseInt(s2.substring(p2, i2));                    \n                    if (value1 != value2) {\n                      return value1 - value2;\n                    }\n                }\n                return c1 - c2;\n            }\n        }\n\n        return n1 - n2;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["42d384b06aa87eae925b668b65f3246154f0b0fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42d384b06aa87eae925b668b65f3246154f0b0fa"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["42d384b06aa87eae925b668b65f3246154f0b0fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"],"42d384b06aa87eae925b668b65f3246154f0b0fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","42d384b06aa87eae925b668b65f3246154f0b0fa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"42d384b06aa87eae925b668b65f3246154f0b0fa":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}