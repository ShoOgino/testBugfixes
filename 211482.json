{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","commits":[{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,String).mjava","sourceNew":"  private void waitForReplicasToComeUp(boolean weAreReplacement,\n      int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.currentTimeMillis()));\n          }\n        }\n        \n        if (System.currentTimeMillis() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(boolean weAreReplacement,\n      String leaderVoteWait) throws InterruptedException {\n    int timeout = Integer.parseInt(leaderVoteWait);\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.currentTimeMillis()));\n          }\n        }\n        \n        if (System.currentTimeMillis() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,String).mjava","sourceNew":"  private void waitForReplicasToComeUp(boolean weAreReplacement,\n      int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.currentTimeMillis()));\n          }\n        }\n        \n        if (System.currentTimeMillis() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(boolean weAreReplacement,\n      String leaderVoteWait) throws InterruptedException {\n    int timeout = Integer.parseInt(leaderVoteWait);\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.currentTimeMillis()));\n          }\n        }\n        \n        if (System.currentTimeMillis() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","sourceNew":"  private void waitForReplicasToComeUp(boolean weAreReplacement, int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(boolean weAreReplacement,\n      int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.currentTimeMillis()));\n          }\n        }\n        \n        if (System.currentTimeMillis() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","sourceNew":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(boolean weAreReplacement, int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(boolean,int).mjava","sourceNew":"  private void waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","sourceOld":"  private void waitForReplicasToComeUp(boolean weAreReplacement, int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    int cnt = 0;\n    while (true && !isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicasMap().size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return;\n        } else {\n          if (cnt % 40 == 0) {\n            log.info(\"Waiting until we see more replicas up for shard \" + shardId + \": total=\"\n              + slices.getReplicasMap().size() + \" found=\" + found\n              + \" timeoutin=\" + (timeoutAt - System.nanoTime() / (float)(10^9)) + \"ms\");\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return;\n        }\n      } else {\n        log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n\n        return;\n\n      }\n      \n      Thread.sleep(500);\n      slices = zkController.getClusterState().getSlice(collection, shardId);\n      // System.out.println(\"###### waitForReplicasToComeUp  : slices=\" + slices + \" all=\" + zkController.getClusterState().getCollectionStates() );\n      cnt++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92a4da96826f502cf1a56a096929b37ce73e523a"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["fd5bc858b8426d40bbe90b94120ead37c77d7954","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"92a4da96826f502cf1a56a096929b37ce73e523a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["92a4da96826f502cf1a56a096929b37ce73e523a"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","92a4da96826f502cf1a56a096929b37ce73e523a"],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fd5bc858b8426d40bbe90b94120ead37c77d7954"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}