{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int,String,String,Integer,Integer,Integer).mjava","commits":[{"id":"8b6783b03ea9c6398156b4e964266166193d4364","date":1565257495,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int,String,String,Integer,Integer,Integer).mjava","pathOld":"/dev/null","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections, String setTriggerCommand, String setClusterPolicyCommand, Integer nNrtReplicas, Integer nTlogReplicas, Integer nPullReplicas) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, nNrtReplicas, nTlogReplicas, nPullReplicas).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int,String,String,Integer,Integer,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int,String,String,Integer,Integer,Integer).mjava","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections, String setTriggerCommand, String setClusterPolicyCommand, Integer nNrtReplicas, Integer nTlogReplicas, Integer nPullReplicas) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, nNrtReplicas, nTlogReplicas, nPullReplicas).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map actionContext = actionContextPropsRef.get();\n    @SuppressWarnings({\"rawtypes\"})\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections, String setTriggerCommand, String setClusterPolicyCommand, Integer nNrtReplicas, Integer nTlogReplicas, Integer nPullReplicas) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, nNrtReplicas, nTlogReplicas, nPullReplicas).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map actionContext = actionContextPropsRef.get();\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int,String,String,Integer,Integer,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int,String,String,Integer,Integer,Integer).mjava","sourceNew":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections, String setTriggerCommand, String setClusterPolicyCommand, Integer nNrtReplicas, Integer nTlogReplicas, Integer nPullReplicas) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, nNrtReplicas, nTlogReplicas, nPullReplicas);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map actionContext = actionContextPropsRef.get();\n    @SuppressWarnings({\"rawtypes\"})\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections, String setTriggerCommand, String setClusterPolicyCommand, Integer nNrtReplicas, Integer nTlogReplicas, Integer nPullReplicas) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, nNrtReplicas, nTlogReplicas, nPullReplicas).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map actionContext = actionContextPropsRef.get();\n    @SuppressWarnings({\"rawtypes\"})\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2).setMaxShardsPerNode(numShards * 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#nodeAddedTriggerWithAddReplicaPreferredOp(String,int,int,String,String,Integer,Integer,Integer).mjava","sourceNew":null,"sourceOld":"  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections, String setTriggerCommand, String setClusterPolicyCommand, Integer nNrtReplicas, Integer nTlogReplicas, Integer nPullReplicas) throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_0\",\n        \"conf\", numShards, nNrtReplicas, nTlogReplicas, nPullReplicas);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionNamePrefix + \"_0\", (liveNodes, collectionState) ->\n            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map actionContext = actionContextPropsRef.get();\n    @SuppressWarnings({\"rawtypes\"})\n    List operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numShards, operations.size());\n    Set<String> affectedShards = new HashSet<>(2);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      assertEquals(collectionNamePrefix + \"_0\", addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n    }\n    assertEquals(numShards, affectedShards.size());\n\n    for (int i = 1; i < numCollections; i++) {\n      create = CollectionAdminRequest.createCollection(collectionNamePrefix + \"_\" + i,\n          \"conf\", numShards, 2);\n      create.process(solrClient);\n\n      waitForState(\"Timed out waiting for replicas of new collection to be active\",\n          collectionNamePrefix + \"_\" + i, (liveNodes, collectionState) ->\n              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n    }\n\n    reset();\n\n    newNode = cluster.startJettySolrRunner();\n    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    actionContext = actionContextPropsRef.get();\n    operations = (List) actionContext.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(numCollections * numShards, operations.size());\n    Set<String> affectedCollections = new HashSet<>(numCollections);\n    affectedShards = new HashSet<>(numShards);\n    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);\n    for (Object operation : operations) {\n      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);\n      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;\n      assertEquals(newNode.getNodeName(), addReplica.getNode());\n      affectedCollections.add(addReplica.getCollection());\n      affectedShards.add(addReplica.getShard());\n      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));\n    }\n    assertEquals(numCollections, affectedCollections.size());\n    assertEquals(numShards, affectedShards.size());\n    assertEquals(numCollections * numShards, affectedCollShards.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6783b03ea9c6398156b4e964266166193d4364":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["8b6783b03ea9c6398156b4e964266166193d4364"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"8b6783b03ea9c6398156b4e964266166193d4364":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6783b03ea9c6398156b4e964266166193d4364"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}