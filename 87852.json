{"path":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (needsScores) {\n      return new SynonymWeight(this, searcher);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, needsScores);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    if (needsScores) {\n      return new SynonymWeight(this, searcher, boost);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, needsScores, boost);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (needsScores) {\n      return new SynonymWeight(this, searcher);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, needsScores);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (needsScores) {\n      return new SynonymWeight(this, searcher);\n    } else {\n      // if scores are not needed, let BooleanWeight deal with optimizing that case.\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        bq.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return searcher.rewrite(bq.build()).createWeight(searcher, needsScores);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}