{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","commits":[{"id":"4bf7f9f53612fef6f228670ddd031bbdfaa1218b","date":1383842832,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","pathOld":"/dev/null","sourceNew":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (transientCores.containsKey(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","sourceNew":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (container.getTransientCacheHandler() != null && container.getTransientCacheHandler().containsCore(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (transientCores.containsKey(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","sourceNew":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (container.getTransientCacheHandler() != null && container.getTransientCacheHandler().containsCore(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (transientCores.containsKey(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","sourceNew":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (getTransientCacheHandler() != null && getTransientCacheHandler().containsCore(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (container.getTransientCacheHandler() != null && container.getTransientCacheHandler().containsCore(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","sourceNew":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (getTransientCacheHandler() != null && getTransientCacheHandler().containsCore(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (container.getTransientCacheHandler() != null && container.getTransientCacheHandler().containsCore(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#isLoadedNotPendingClose(String).mjava","sourceNew":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (getTransientCacheHandler() != null && getTransientCacheHandler().containsCore(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  // See SOLR-5366 for why the UNLOAD command needs to know whether a core is actually loaded or not, it might have\n  // to close the core. However, there's a race condition. If the core happens to be in the pending \"to close\" queue,\n  // we should NOT close it in unload core.\n  protected boolean isLoadedNotPendingClose(String name) {\n    // Just all be synchronized\n    synchronized (modifyLock) {\n      if (cores.containsKey(name)) {\n        return true;\n      }\n      if (container.getTransientCacheHandler() != null && container.getTransientCacheHandler().containsCore(name)) {\n        // Check pending\n        for (SolrCore core : pendingCloses) {\n          if (core.getName().equals(name)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["4bf7f9f53612fef6f228670ddd031bbdfaa1218b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"4bf7f9f53612fef6f228670ddd031bbdfaa1218b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["8b6a4b585aed7660a589375f6a09b90efd29c961","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["4bf7f9f53612fef6f228670ddd031bbdfaa1218b"],"28288370235ed02234a64753cdbf0c6ec096304a":["9435d55e3ea95c5d94406d3affc36f9505b6a736","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4bf7f9f53612fef6f228670ddd031bbdfaa1218b"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"4bf7f9f53612fef6f228670ddd031bbdfaa1218b":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}