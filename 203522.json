{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Updates a document's NumericDocValue for <code>field</code> to the given\n   * <code>value</code>. This method can be used to 'unset' a document's value\n   * by passing {@code null} as the new value. Also, you can only update fields\n   * that already exist in the index, not add new fields through this method.\n   * \n   * <p>\n   * <b>NOTE:</b> it is currently not allowed to update the value of documents\n   * in a segment where the field does not exist (even though it may exist in\n   * other segments). If you try that, you will hit an\n   * {@link UnsupportedOperationException} when the segment is later flushed\n   * (following an NRT reader reopen, commit, forceMerge etc.).\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the NumericDocValues field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  // TODO (DVU_FIELDINFOS_GEN) remove the paragraph on updating segments without the field not allowed\n  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      docWriter.updateNumericDocValue(term, field, value);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c48871ed951104729f5e17a8ee1091b43fa18980"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","sourceNew":"  /**\n   * Updates a document's NumericDocValue for <code>field</code> to the given\n   * <code>value</code>. This method can be used to 'unset' a document's value\n   * by passing {@code null} as the new value. Also, you can only update fields\n   * that already exist in the index, not add new fields through this method.\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the NumericDocValues field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      docWriter.updateNumericDocValue(term, field, value);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document's NumericDocValue for <code>field</code> to the given\n   * <code>value</code>. This method can be used to 'unset' a document's value\n   * by passing {@code null} as the new value. Also, you can only update fields\n   * that already exist in the index, not add new fields through this method.\n   * \n   * <p>\n   * <b>NOTE:</b> it is currently not allowed to update the value of documents\n   * in a segment where the field does not exist (even though it may exist in\n   * other segments). If you try that, you will hit an\n   * {@link UnsupportedOperationException} when the segment is later flushed\n   * (following an NRT reader reopen, commit, forceMerge etc.).\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the NumericDocValues field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  // TODO (DVU_FIELDINFOS_GEN) remove the paragraph on updating segments without the field not allowed\n  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      docWriter.updateNumericDocValue(term, field, value);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97f16b1401b4394d166abcc8d8da20335da81f67","date":1380632396,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","sourceNew":"  /**\n   * Updates a document's NumericDocValue for <code>field</code> to the given\n   * <code>value</code>. This method can be used to 'unset' a document's value\n   * by passing {@code null} as the new value. Also, you can only update fields\n   * that already exist in the index, not add new fields through this method.\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the NumericDocValues field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      if (docWriter.updateNumericDocValue(term, field, value)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document's NumericDocValue for <code>field</code> to the given\n   * <code>value</code>. This method can be used to 'unset' a document's value\n   * by passing {@code null} as the new value. Also, you can only update fields\n   * that already exist in the index, not add new fields through this method.\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the NumericDocValues field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      docWriter.updateNumericDocValue(term, field, value);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","sourceNew":"  /**\n   * Updates a document's {@link NumericDocValues} for <code>field</code> to the\n   * given <code>value</code>. This method can be used to 'unset' a document's\n   * value by passing {@code null} as the new value. Also, you can only update\n   * fields that already exist in the index, not add new fields through this\n   * method.\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the {@link NumericDocValues} field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      if (docWriter.updateNumericDocValue(term, field, value)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document's NumericDocValue for <code>field</code> to the given\n   * <code>value</code>. This method can be used to 'unset' a document's value\n   * by passing {@code null} as the new value. Also, you can only update fields\n   * that already exist in the index, not add new fields through this method.\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the NumericDocValues field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      if (docWriter.updateNumericDocValue(term, field, value)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7","date":1401116050,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateNumericDocValue(Term,String,Long).mjava","sourceNew":"  /**\n   * Updates a document's {@link NumericDocValues} for <code>field</code> to the\n   * given <code>value</code>. You can only update fields that already exist in\n   * the index, not add new fields through this method.\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the {@link NumericDocValues} field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  public void updateNumericDocValue(Term term, String field, long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      if (docWriter.updateNumericDocValue(term, field, value)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document's {@link NumericDocValues} for <code>field</code> to the\n   * given <code>value</code>. This method can be used to 'unset' a document's\n   * value by passing {@code null} as the new value. Also, you can only update\n   * fields that already exist in the index, not add new fields through this\n   * method.\n   * \n   * <p>\n   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately\n   * close the writer. See <a href=\"#OOME\">above</a> for details.\n   * </p>\n   * \n   * @param term\n   *          the term to identify the document(s) to be updated\n   * @param field\n   *          field name of the {@link NumericDocValues} field\n   * @param value\n   *          new value for the field\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws IOException\n   *           if there is a low-level IO error\n   */\n  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {\n    ensureOpen();\n    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {\n      throw new IllegalArgumentException(\"can only update existing numeric-docvalues fields!\");\n    }\n    try {\n      if (docWriter.updateNumericDocValue(term, field, value)) {\n        processEvents(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateNumericDocValue\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"97f16b1401b4394d166abcc8d8da20335da81f67":["8435160e9702b19398118ddf76b61c846612b6a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8435160e9702b19398118ddf76b61c846612b6a4":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"06805da26538ed636bd89b10c2699cc3834032ae":["97f16b1401b4394d166abcc8d8da20335da81f67"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["8435160e9702b19398118ddf76b61c846612b6a4"],"97f16b1401b4394d166abcc8d8da20335da81f67":["06805da26538ed636bd89b10c2699cc3834032ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"8435160e9702b19398118ddf76b61c846612b6a4":["97f16b1401b4394d166abcc8d8da20335da81f67"],"06805da26538ed636bd89b10c2699cc3834032ae":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}