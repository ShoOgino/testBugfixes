{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PassageScorer#score(Passage,int).mjava","commits":[{"id":"8764ca7bb74ee716c839b9545a93ec4a578c2005","date":1517564468,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PassageScorer#score(Passage,int).mjava","pathOld":"/dev/null","sourceNew":"  public float score(Passage passage, int contentLength) {\n    float score = 0;\n    BytesRefHash termsHash = new BytesRefHash();\n    int hitCount = passage.getNumMatches();\n    int[] termFreqsInPassage = new int[hitCount]; // maximum size\n    int[] termFreqsInDoc = new int[hitCount];\n    Arrays.fill(termFreqsInPassage, 0);\n\n    for (int i = 0; i < passage.getNumMatches(); i++) {\n      int termIndex = termsHash.add(passage.getMatchTerms()[i]);\n      if (termIndex < 0) {\n        termIndex = -(termIndex + 1);\n      }\n      else {\n        termFreqsInDoc[termIndex] = passage.getMatchTermFreqsInDoc()[i];\n      }\n      termFreqsInPassage[termIndex]++;\n    }\n\n    for (int i = 0; i < termsHash.size(); i++) {\n      score += tf(termFreqsInPassage[i], passage.getLength()) * weight(contentLength, termFreqsInDoc[i]);\n    }\n    score *= norm(passage.getStartOffset());\n    return score;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8764ca7bb74ee716c839b9545a93ec4a578c2005"]},"commit2Childs":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8764ca7bb74ee716c839b9545a93ec4a578c2005"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}