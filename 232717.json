{"path":"lucene/facet/src/test/org/apache/lucene/util/Vint8Test#testArrayEncodingAndDecoding().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/Vint8Test#testArrayEncodingAndDecoding().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/Vint8Test#testArrayEncodingAndDecoding().mjava","sourceNew":"  /**\n   * Tests encoding and decoding to and from an array.\n   */\n  @Test\n  public void testArrayEncodingAndDecoding() throws IOException {\n    byte[] byteArray = new byte[256];\n    int position = 0, expectedSize = 0;\n    for (int j = 0; j < testValues.length; j++) {\n      position += Vint8.encode(testValues[j], byteArray, position);\n      expectedSize += bytesNeededTestValues[j];\n    }\n    assertEquals(expectedSize, position);\n    Vint8.Position pos = new Vint8.Position();\n    for (int j = 0; j < testValues.length; j++) {\n      assertEquals(testValues[j], Vint8.decode(byteArray, pos));\n    }\n    assertEquals(expectedSize, pos.pos);\n  }\n\n","sourceOld":"  /**\n   * Tests encoding and decoding to and from an array.\n   */\n  @Test\n  public void testArrayEncodingAndDecoding() throws IOException {\n    byte[] byteArray = new byte[256];\n    int position = 0, expectedSize = 0;\n    for (int j = 0; j < testValues.length; j++) {\n      position += Vint8.encode(testValues[j], byteArray, position);\n      expectedSize += bytesNeededTestValues[j];\n    }\n    assertEquals(expectedSize, position);\n    Vint8.Position pos = new Vint8.Position();\n    for (int j = 0; j < testValues.length; j++) {\n      assertEquals(testValues[j], Vint8.decode(byteArray, pos));\n    }\n    assertEquals(expectedSize, pos.pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/util/Vint8Test#testArrayEncodingAndDecoding().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests encoding and decoding to and from an array.\n   */\n  @Test\n  public void testArrayEncodingAndDecoding() throws IOException {\n    byte[] byteArray = new byte[256];\n    int position = 0, expectedSize = 0;\n    for (int j = 0; j < testValues.length; j++) {\n      position += Vint8.encode(testValues[j], byteArray, position);\n      expectedSize += bytesNeededTestValues[j];\n    }\n    assertEquals(expectedSize, position);\n    Vint8.Position pos = new Vint8.Position();\n    for (int j = 0; j < testValues.length; j++) {\n      assertEquals(testValues[j], Vint8.decode(byteArray, pos));\n    }\n    assertEquals(expectedSize, pos.pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/util/Vint8Test#testArrayEncodingAndDecoding().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests encoding and decoding to and from an array.\n   */\n  @Test\n  public void testArrayEncodingAndDecoding() throws IOException {\n    byte[] byteArray = new byte[256];\n    int position = 0, expectedSize = 0;\n    for (int j = 0; j < testValues.length; j++) {\n      position += Vint8.encode(testValues[j], byteArray, position);\n      expectedSize += bytesNeededTestValues[j];\n    }\n    assertEquals(expectedSize, position);\n    Vint8.Position pos = new Vint8.Position();\n    for (int j = 0; j < testValues.length; j++) {\n      assertEquals(testValues[j], Vint8.decode(byteArray, pos));\n    }\n    assertEquals(expectedSize, pos.pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["b89678825b68eccaf09e6ab71675fc0b0af1e099","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}