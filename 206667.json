{"path":"lucene/core/src/java/org/apache/lucene/search/Scorer#score(Collector,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Scorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Scorer#score(Collector,int,int).mjava","sourceNew":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @param firstDocID\n   *          The first document ID (ensures {@link #nextDoc()} is called before\n   *          this method.\n   * @return true if more matching documents may remain.\n   */\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    collector.setScorer(this);\n    int doc = firstDocID;\n    while (doc < max) {\n      collector.collect(doc);\n      doc = nextDoc();\n    }\n    return doc != NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @param firstDocID\n   *          The first document ID (ensures {@link #nextDoc()} is called before\n   *          this method.\n   * @return true if more matching documents may remain.\n   */\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    collector.setScorer(this);\n    int doc = firstDocID;\n    while (doc < max) {\n      collector.collect(doc);\n      doc = nextDoc();\n    }\n    return doc != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Scorer#score(Collector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Scorer#score(Collector,int,int).mjava","sourceNew":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @param firstDocID\n   *          The first document ID (ensures {@link #nextDoc()} is called before\n   *          this method.\n   * @return true if more matching documents may remain.\n   */\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    assert docID() == firstDocID;\n    collector.setScorer(this);\n    int doc;\n    for (doc = firstDocID; doc < max; doc = nextDoc()) {\n      collector.collect(doc);\n    }\n    return doc != NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @param firstDocID\n   *          The first document ID (ensures {@link #nextDoc()} is called before\n   *          this method.\n   * @return true if more matching documents may remain.\n   */\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    collector.setScorer(this);\n    int doc = firstDocID;\n    while (doc < max) {\n      collector.collect(doc);\n      doc = nextDoc();\n    }\n    return doc != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScorer#score(Collector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Scorer#score(Collector,int,int).mjava","sourceNew":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  public abstract boolean score(Collector collector, int max) throws IOException;\n\n","sourceOld":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @param firstDocID\n   *          The first document ID (ensures {@link #nextDoc()} is called before\n   *          this method.\n   * @return true if more matching documents may remain.\n   */\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    assert docID() == firstDocID;\n    collector.setScorer(this);\n    int doc;\n    for (doc = firstDocID; doc < max; doc = nextDoc()) {\n      collector.collect(doc);\n    }\n    return doc != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/Scorer#score(Collector,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @param firstDocID\n   *          The first document ID (ensures {@link #nextDoc()} is called before\n   *          this method.\n   * @return true if more matching documents may remain.\n   */\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    assert docID() == firstDocID;\n    collector.setScorer(this);\n    int doc;\n    for (doc = firstDocID; doc < max; doc = nextDoc()) {\n      collector.collect(doc);\n    }\n    return doc != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}